# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.113
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401
import sys  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.oas.api_client import ApiClient
from onshape_client.oas.exceptions import ApiTypeError, ApiValueError
from onshape_client.oas.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_and_convert_types,
)
from onshape_client.oas.models import bt_workflowable_test_object_info
from onshape_client.oas.models import bt_app_element_basic_info
from onshape_client.oas.models import bt_app_associative_data_info_array
from onshape_client.oas.models import bt_list_response_bt_insertable_info
from onshape_client.oas.models import bt_metadata_schema_info
from onshape_client.oas.models import bt_list_response_bt_metadata_property_summary_info
from onshape_client.oas.models import bt_metadata_property_info
from onshape_client.oas.models import bt_bounding_box_info
from onshape_client.oas.models import bt_update_workflowable_test_object_params


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_workflowable_test_object(self, wfid, **kwargs):
            """create_workflowable_test_object  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.create_workflowable_test_object(wfid, async_req=True)
            >>> result = thread.get()

            Args:
                wfid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["wfid"] = wfid
            return self.call_with_http_info(**kwargs)

        self.create_workflowable_test_object = Endpoint(
            settings={
                "response_type": (
                    bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/workflowabletestobject/testobject/{wfid}",
                "operation_id": "create_workflowable_test_object",
                "http_method": "POST",
                "servers": [],
            },
            params_map={
                "all": ["wfid",],
                "required": ["wfid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"wfid": (str,),},
                "attribute_map": {"wfid": "wfid",},
                "location_map": {"wfid": "path",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__create_workflowable_test_object,
        )

        def __delete_associative_data(self, did, eid, wvm, wvmid, **kwargs):
            """delete_associative_data  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.delete_associative_data(did, eid, wvm, wvmid, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                eid (str):
                wvm (str):
                wvmid (str):

            Keyword Args:
                transaction_id (str): [optional] if omitted the server will use the default value of ''
                parent_change_id (str): [optional] if omitted the server will use the default value of ''
                associative_data_id ([str]): [optional]
                element_id (str): [optional] if omitted the server will use the default value of ''
                view_id (str): [optional] if omitted the server will use the default value of ''
                microversion_id (str): [optional] if omitted the server will use the default value of ''
                document_microversion (str): [optional] if omitted the server will use the default value of ''
                deterministic_id (str): [optional] if omitted the server will use the default value of ''
                feature_id (str): [optional] if omitted the server will use the default value of ''
                entity_id (str): [optional] if omitted the server will use the default value of ''
                occurrence_id (str): [optional] if omitted the server will use the default value of ''
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_app_element_basic_info.BTAppElementBasicInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["eid"] = eid
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            return self.call_with_http_info(**kwargs)

        self.delete_associative_data = Endpoint(
            settings={
                "response_type": (bt_app_element_basic_info.BTAppElementBasicInfo,),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata",
                "operation_id": "delete_associative_data",
                "http_method": "DELETE",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "eid",
                    "wvm",
                    "wvmid",
                    "transaction_id",
                    "parent_change_id",
                    "associative_data_id",
                    "element_id",
                    "view_id",
                    "microversion_id",
                    "document_microversion",
                    "deterministic_id",
                    "feature_id",
                    "entity_id",
                    "occurrence_id",
                ],
                "required": ["did", "eid", "wvm", "wvmid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "eid": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "transaction_id": (str,),
                    "parent_change_id": (str,),
                    "associative_data_id": ([str],),
                    "element_id": (str,),
                    "view_id": (str,),
                    "microversion_id": (str,),
                    "document_microversion": (str,),
                    "deterministic_id": (str,),
                    "feature_id": (str,),
                    "entity_id": (str,),
                    "occurrence_id": (str,),
                },
                "attribute_map": {
                    "did": "did",
                    "eid": "eid",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                    "transaction_id": "transactionId",
                    "parent_change_id": "parentChangeId",
                    "associative_data_id": "associativeDataId",
                    "element_id": "elementId",
                    "view_id": "viewId",
                    "microversion_id": "microversionId",
                    "document_microversion": "documentMicroversion",
                    "deterministic_id": "deterministicId",
                    "feature_id": "featureId",
                    "entity_id": "entityId",
                    "occurrence_id": "occurrenceId",
                },
                "location_map": {
                    "did": "path",
                    "eid": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "transaction_id": "query",
                    "parent_change_id": "query",
                    "associative_data_id": "query",
                    "element_id": "query",
                    "view_id": "query",
                    "microversion_id": "query",
                    "document_microversion": "query",
                    "deterministic_id": "query",
                    "feature_id": "query",
                    "entity_id": "query",
                    "occurrence_id": "query",
                },
                "collection_format_map": {"associative_data_id": "multi",},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__delete_associative_data,
        )

        def __get_associative_data(self, did, wvm, wvmid, eid, **kwargs):
            """get_associative_data  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_associative_data(did, wvm, wvmid, eid, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                wvm (str):
                wvmid (str):
                eid (str):

            Keyword Args:
                transaction_id (str): [optional] if omitted the server will use the default value of ''
                change_id (str): [optional] if omitted the server will use the default value of ''
                associative_data_id ([str]): [optional]
                element_id (str): [optional] if omitted the server will use the default value of ''
                view_id (str): [optional] if omitted the server will use the default value of ''
                microversion_id (str): [optional] if omitted the server will use the default value of ''
                document_microversion (str): [optional] if omitted the server will use the default value of ''
                deterministic_id (str): [optional] if omitted the server will use the default value of ''
                feature_id (str): [optional] if omitted the server will use the default value of ''
                entity_id (str): [optional] if omitted the server will use the default value of ''
                occurrence_id (str): [optional] if omitted the server will use the default value of ''
                return_id_tags (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_app_associative_data_info_array.BTAppAssociativeDataInfoArray
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            kwargs["eid"] = eid
            return self.call_with_http_info(**kwargs)

        self.get_associative_data = Endpoint(
            settings={
                "response_type": (
                    bt_app_associative_data_info_array.BTAppAssociativeDataInfoArray,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata",
                "operation_id": "get_associative_data",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "wvm",
                    "wvmid",
                    "eid",
                    "transaction_id",
                    "change_id",
                    "associative_data_id",
                    "element_id",
                    "view_id",
                    "microversion_id",
                    "document_microversion",
                    "deterministic_id",
                    "feature_id",
                    "entity_id",
                    "occurrence_id",
                    "return_id_tags",
                ],
                "required": ["did", "wvm", "wvmid", "eid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "eid": (str,),
                    "transaction_id": (str,),
                    "change_id": (str,),
                    "associative_data_id": ([str],),
                    "element_id": (str,),
                    "view_id": (str,),
                    "microversion_id": (str,),
                    "document_microversion": (str,),
                    "deterministic_id": (str,),
                    "feature_id": (str,),
                    "entity_id": (str,),
                    "occurrence_id": (str,),
                    "return_id_tags": (bool,),
                },
                "attribute_map": {
                    "did": "did",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                    "eid": "eid",
                    "transaction_id": "transactionId",
                    "change_id": "changeId",
                    "associative_data_id": "associativeDataId",
                    "element_id": "elementId",
                    "view_id": "viewId",
                    "microversion_id": "microversionId",
                    "document_microversion": "documentMicroversion",
                    "deterministic_id": "deterministicId",
                    "feature_id": "featureId",
                    "entity_id": "entityId",
                    "occurrence_id": "occurrenceId",
                    "return_id_tags": "returnIdTags",
                },
                "location_map": {
                    "did": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "eid": "path",
                    "transaction_id": "query",
                    "change_id": "query",
                    "associative_data_id": "query",
                    "element_id": "query",
                    "view_id": "query",
                    "microversion_id": "query",
                    "document_microversion": "query",
                    "deterministic_id": "query",
                    "feature_id": "query",
                    "entity_id": "query",
                    "occurrence_id": "query",
                    "return_id_tags": "query",
                },
                "collection_format_map": {"associative_data_id": "multi",},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_associative_data,
        )

        def __get_latest_in_document(self, did, **kwargs):
            """insertables for a document  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_latest_in_document(did, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):

            Keyword Args:
                beta_capability_ids ([str]): [optional]
                include_parts (bool): [optional] if omitted the server will use the default value of False
                include_surfaces (bool): [optional] if omitted the server will use the default value of False
                include_wires (bool): [optional] if omitted the server will use the default value of False
                include_sketches (bool): [optional] if omitted the server will use the default value of False
                include_reference_features (bool): [optional] if omitted the server will use the default value of False
                include_assemblies (bool): [optional] if omitted the server will use the default value of False
                include_features (bool): [optional] if omitted the server will use the default value of False
                include_feature_studios (bool): [optional] if omitted the server will use the default value of False
                include_part_studios (bool): [optional] if omitted the server will use the default value of False
                include_blobs (bool): [optional] if omitted the server will use the default value of False
                include_meshes (bool): [optional] if omitted the server will use the default value of False
                include_flattened_bodies (bool): [optional] if omitted the server will use the default value of False
                allowed_blob_mime_types (str): [optional] if omitted the server will use the default value of ''
                max_feature_script_version (int): [optional] if omitted the server will use the default value of 0
                include_applications (bool): [optional] if omitted the server will use the default value of False
                allowed_application_mime_types (str): [optional] if omitted the server will use the default value of ''
                include_composite_parts (bool): [optional] if omitted the server will use the default value of False
                include_fs_tables (bool): [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_list_response_bt_insertable_info.BTListResponseBTInsertableInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            return self.call_with_http_info(**kwargs)

        self.get_latest_in_document = Endpoint(
            settings={
                "response_type": (
                    bt_list_response_bt_insertable_info.BTListResponseBTInsertableInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/insertables/d/{did}/latest",
                "operation_id": "get_latest_in_document",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "beta_capability_ids",
                    "include_parts",
                    "include_surfaces",
                    "include_wires",
                    "include_sketches",
                    "include_reference_features",
                    "include_assemblies",
                    "include_features",
                    "include_feature_studios",
                    "include_part_studios",
                    "include_blobs",
                    "include_meshes",
                    "include_flattened_bodies",
                    "allowed_blob_mime_types",
                    "max_feature_script_version",
                    "include_applications",
                    "allowed_application_mime_types",
                    "include_composite_parts",
                    "include_fs_tables",
                ],
                "required": ["did",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "beta_capability_ids": ([str],),
                    "include_parts": (bool,),
                    "include_surfaces": (bool,),
                    "include_wires": (bool,),
                    "include_sketches": (bool,),
                    "include_reference_features": (bool,),
                    "include_assemblies": (bool,),
                    "include_features": (bool,),
                    "include_feature_studios": (bool,),
                    "include_part_studios": (bool,),
                    "include_blobs": (bool,),
                    "include_meshes": (bool,),
                    "include_flattened_bodies": (bool,),
                    "allowed_blob_mime_types": (str,),
                    "max_feature_script_version": (int,),
                    "include_applications": (bool,),
                    "allowed_application_mime_types": (str,),
                    "include_composite_parts": (bool,),
                    "include_fs_tables": (bool,),
                },
                "attribute_map": {
                    "did": "did",
                    "beta_capability_ids": "betaCapabilityIds",
                    "include_parts": "includeParts",
                    "include_surfaces": "includeSurfaces",
                    "include_wires": "includeWires",
                    "include_sketches": "includeSketches",
                    "include_reference_features": "includeReferenceFeatures",
                    "include_assemblies": "includeAssemblies",
                    "include_features": "includeFeatures",
                    "include_feature_studios": "includeFeatureStudios",
                    "include_part_studios": "includePartStudios",
                    "include_blobs": "includeBlobs",
                    "include_meshes": "includeMeshes",
                    "include_flattened_bodies": "includeFlattenedBodies",
                    "allowed_blob_mime_types": "allowedBlobMimeTypes",
                    "max_feature_script_version": "maxFeatureScriptVersion",
                    "include_applications": "includeApplications",
                    "allowed_application_mime_types": "allowedApplicationMimeTypes",
                    "include_composite_parts": "includeCompositeParts",
                    "include_fs_tables": "includeFSTables",
                },
                "location_map": {
                    "did": "path",
                    "beta_capability_ids": "query",
                    "include_parts": "query",
                    "include_surfaces": "query",
                    "include_wires": "query",
                    "include_sketches": "query",
                    "include_reference_features": "query",
                    "include_assemblies": "query",
                    "include_features": "query",
                    "include_feature_studios": "query",
                    "include_part_studios": "query",
                    "include_blobs": "query",
                    "include_meshes": "query",
                    "include_flattened_bodies": "query",
                    "allowed_blob_mime_types": "query",
                    "max_feature_script_version": "query",
                    "include_applications": "query",
                    "allowed_application_mime_types": "query",
                    "include_composite_parts": "query",
                    "include_fs_tables": "query",
                },
                "collection_format_map": {"beta_capability_ids": "multi",},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_latest_in_document,
        )

        def __get_metadata_schema(self, object_type, **kwargs):
            """get_metadata_schema  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_metadata_schema(object_type, async_req=True)
            >>> result = thread.get()

            Args:
                object_type (int):

            Keyword Args:
                owner_id (str): [optional]
                document_id (str): [optional]
                owner_type (int): [optional] if omitted the server will use the default value of 1
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_metadata_schema_info.BTMetadataSchemaInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["object_type"] = object_type
            return self.call_with_http_info(**kwargs)

        self.get_metadata_schema = Endpoint(
            settings={
                "response_type": (bt_metadata_schema_info.BTMetadataSchemaInfo,),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/metadataschema",
                "operation_id": "get_metadata_schema",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": ["object_type", "owner_id", "document_id", "owner_type",],
                "required": ["object_type",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "object_type": (int,),
                    "owner_id": (str,),
                    "document_id": (str,),
                    "owner_type": (int,),
                },
                "attribute_map": {
                    "object_type": "objectType",
                    "owner_id": "ownerId",
                    "document_id": "documentId",
                    "owner_type": "ownerType",
                },
                "location_map": {
                    "object_type": "query",
                    "owner_id": "query",
                    "document_id": "query",
                    "owner_type": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_metadata_schema,
        )

        def __get_properties(self, **kwargs):
            """get_properties  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_properties(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                schema_id (str): [optional]
                owner_id (str): [optional]
                document_id (str): [optional]
                owner_type (int): [optional] if omitted the server will use the default value of 1
                object_type (int): [optional]
                strict (bool): [optional] if omitted the server will use the default value of False
                active_only (bool): [optional] if omitted the server will use the default value of False
                offset (int): [optional] if omitted the server will use the default value of 0
                limit (int): [optional] if omitted the server will use the default value of 200
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_list_response_bt_metadata_property_summary_info.BTListResponseBTMetadataPropertySummaryInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            return self.call_with_http_info(**kwargs)

        self.get_properties = Endpoint(
            settings={
                "response_type": (
                    bt_list_response_bt_metadata_property_summary_info.BTListResponseBTMetadataPropertySummaryInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/metadataschema/properties",
                "operation_id": "get_properties",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "schema_id",
                    "owner_id",
                    "document_id",
                    "owner_type",
                    "object_type",
                    "strict",
                    "active_only",
                    "offset",
                    "limit",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "schema_id": (str,),
                    "owner_id": (str,),
                    "document_id": (str,),
                    "owner_type": (int,),
                    "object_type": (int,),
                    "strict": (bool,),
                    "active_only": (bool,),
                    "offset": (int,),
                    "limit": (int,),
                },
                "attribute_map": {
                    "schema_id": "schemaId",
                    "owner_id": "ownerId",
                    "document_id": "documentId",
                    "owner_type": "ownerType",
                    "object_type": "objectType",
                    "strict": "strict",
                    "active_only": "activeOnly",
                    "offset": "offset",
                    "limit": "limit",
                },
                "location_map": {
                    "schema_id": "query",
                    "owner_id": "query",
                    "document_id": "query",
                    "owner_type": "query",
                    "object_type": "query",
                    "strict": "query",
                    "active_only": "query",
                    "offset": "query",
                    "limit": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_properties,
        )

        def __get_property_info(self, pid, **kwargs):
            """get_property_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_property_info(pid, async_req=True)
            >>> result = thread.get()

            Args:
                pid (str):

            Keyword Args:
                document_id (str): [optional]
                schema_id (str): [optional]
                owner_id (str): [optional]
                owner_type (int): [optional] if omitted the server will use the default value of 1
                object_type (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_metadata_property_info.BTMetadataPropertyInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["pid"] = pid
            return self.call_with_http_info(**kwargs)

        self.get_property_info = Endpoint(
            settings={
                "response_type": (bt_metadata_property_info.BTMetadataPropertyInfo,),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/metadataschema/propertyinfo/{pid}",
                "operation_id": "get_property_info",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "pid",
                    "document_id",
                    "schema_id",
                    "owner_id",
                    "owner_type",
                    "object_type",
                ],
                "required": ["pid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "pid": (str,),
                    "document_id": (str,),
                    "schema_id": (str,),
                    "owner_id": (str,),
                    "owner_type": (int,),
                    "object_type": (int,),
                },
                "attribute_map": {
                    "pid": "pid",
                    "document_id": "documentId",
                    "schema_id": "schemaId",
                    "owner_id": "ownerId",
                    "owner_type": "ownerType",
                    "object_type": "objectType",
                },
                "location_map": {
                    "pid": "path",
                    "document_id": "query",
                    "schema_id": "query",
                    "owner_id": "query",
                    "owner_type": "query",
                    "object_type": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_property_info,
        )

        def __get_schema(self, sid, **kwargs):
            """get_schema  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_schema(sid, async_req=True)
            >>> result = thread.get()

            Args:
                sid (str):

            Keyword Args:
                document_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_metadata_schema_info.BTMetadataSchemaInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["sid"] = sid
            return self.call_with_http_info(**kwargs)

        self.get_schema = Endpoint(
            settings={
                "response_type": (bt_metadata_schema_info.BTMetadataSchemaInfo,),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/metadataschema/{sid}",
                "operation_id": "get_schema",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": ["sid", "document_id",],
                "required": ["sid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"sid": (str,), "document_id": (str,),},
                "attribute_map": {"sid": "sid", "document_id": "documentId",},
                "location_map": {"sid": "path", "document_id": "query",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_schema,
        )

        def __get_sketch_bounding_boxes(self, did, wvm, wvmid, eid, sid, **kwargs):
            """get_sketch_bounding_boxes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_sketch_bounding_boxes(did, wvm, wvmid, eid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                wvm (str):
                wvmid (str):
                eid (str):
                sid (str):

            Keyword Args:
                configuration (str): [optional]
                link_document_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_bounding_box_info.BTBoundingBoxInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            kwargs["eid"] = eid
            kwargs["sid"] = sid
            return self.call_with_http_info(**kwargs)

        self.get_sketch_bounding_boxes = Endpoint(
            settings={
                "response_type": (bt_bounding_box_info.BTBoundingBoxInfo,),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/boundingboxes",
                "operation_id": "get_sketch_bounding_boxes",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "wvm",
                    "wvmid",
                    "eid",
                    "sid",
                    "configuration",
                    "link_document_id",
                ],
                "required": ["did", "wvm", "wvmid", "eid", "sid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "eid": (str,),
                    "sid": (str,),
                    "configuration": (str,),
                    "link_document_id": (str,),
                },
                "attribute_map": {
                    "did": "did",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                    "eid": "eid",
                    "sid": "sid",
                    "configuration": "configuration",
                    "link_document_id": "linkDocumentId",
                },
                "location_map": {
                    "did": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "eid": "path",
                    "sid": "path",
                    "configuration": "query",
                    "link_document_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_sketch_bounding_boxes,
        )

        def __get_sketch_info(self, did, wvm, wvmid, eid, **kwargs):
            """get_sketch_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_sketch_info(did, wvm, wvmid, eid, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                wvm (str):
                wvmid (str):
                eid (str):

            Keyword Args:
                configuration (str): [optional]
                sketch_id ([str]): [optional]
                output3_d (bool): [optional] if omitted the server will use the default value of False
                curve_points (bool): [optional] if omitted the server will use the default value of False
                include_geometry (bool): [optional] if omitted the server will use the default value of True
                link_document_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            kwargs["eid"] = eid
            return self.call_with_http_info(**kwargs)

        self.get_sketch_info = Endpoint(
            settings={
                "response_type": None,
                "auth": ["OAuth2"],
                "endpoint_path": "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches",
                "operation_id": "get_sketch_info",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "wvm",
                    "wvmid",
                    "eid",
                    "configuration",
                    "sketch_id",
                    "output3_d",
                    "curve_points",
                    "include_geometry",
                    "link_document_id",
                ],
                "required": ["did", "wvm", "wvmid", "eid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "eid": (str,),
                    "configuration": (str,),
                    "sketch_id": ([str],),
                    "output3_d": (bool,),
                    "curve_points": (bool,),
                    "include_geometry": (bool,),
                    "link_document_id": (str,),
                },
                "attribute_map": {
                    "did": "did",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                    "eid": "eid",
                    "configuration": "configuration",
                    "sketch_id": "sketchId",
                    "output3_d": "output3D",
                    "curve_points": "curvePoints",
                    "include_geometry": "includeGeometry",
                    "link_document_id": "linkDocumentId",
                },
                "location_map": {
                    "did": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "eid": "path",
                    "configuration": "query",
                    "sketch_id": "query",
                    "output3_d": "query",
                    "curve_points": "query",
                    "include_geometry": "query",
                    "link_document_id": "query",
                },
                "collection_format_map": {"sketch_id": "multi",},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_sketch_info,
        )

        def __get_tessellated_entities(self, did, wvm, wvmid, eid, sid, **kwargs):
            """get_tessellated_entities  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_tessellated_entities(did, wvm, wvmid, eid, sid, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                wvm (str):
                wvmid (str):
                eid (str):
                sid (str):

            Keyword Args:
                configuration (str): [optional]
                entity_id ([str]): [optional]
                angle_tolerance (float): [optional]
                chord_tolerance (float): [optional]
                link_document_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            kwargs["eid"] = eid
            kwargs["sid"] = sid
            return self.call_with_http_info(**kwargs)

        self.get_tessellated_entities = Endpoint(
            settings={
                "response_type": None,
                "auth": ["OAuth2"],
                "endpoint_path": "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/tessellatedentities",
                "operation_id": "get_tessellated_entities",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": [
                    "did",
                    "wvm",
                    "wvmid",
                    "eid",
                    "sid",
                    "configuration",
                    "entity_id",
                    "angle_tolerance",
                    "chord_tolerance",
                    "link_document_id",
                ],
                "required": ["did", "wvm", "wvmid", "eid", "sid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "eid": (str,),
                    "sid": (str,),
                    "configuration": (str,),
                    "entity_id": ([str],),
                    "angle_tolerance": (float,),
                    "chord_tolerance": (float,),
                    "link_document_id": (str,),
                },
                "attribute_map": {
                    "did": "did",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                    "eid": "eid",
                    "sid": "sid",
                    "configuration": "configuration",
                    "entity_id": "entityId",
                    "angle_tolerance": "angleTolerance",
                    "chord_tolerance": "chordTolerance",
                    "link_document_id": "linkDocumentId",
                },
                "location_map": {
                    "did": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "eid": "path",
                    "sid": "path",
                    "configuration": "query",
                    "entity_id": "query",
                    "angle_tolerance": "query",
                    "chord_tolerance": "query",
                    "link_document_id": "query",
                },
                "collection_format_map": {"entity_id": "multi",},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_tessellated_entities,
        )

        def __get_workflowable_test_object(self, oid, **kwargs):
            """get_workflowable_test_object  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.get_workflowable_test_object(oid, async_req=True)
            >>> result = thread.get()

            Args:
                oid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["oid"] = oid
            return self.call_with_http_info(**kwargs)

        self.get_workflowable_test_object = Endpoint(
            settings={
                "response_type": (
                    bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/workflowabletestobject/{oid}",
                "operation_id": "get_workflowable_test_object",
                "http_method": "GET",
                "servers": [],
            },
            params_map={
                "all": ["oid",],
                "required": ["oid",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"oid": (str,),},
                "attribute_map": {"oid": "oid",},
                "location_map": {"oid": "path",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__get_workflowable_test_object,
        )

        def __post_associative_data(self, did, eid, wvm, wvmid, body, **kwargs):
            """post_associative_data  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.post_associative_data(did, eid, wvm, wvmid, body, async_req=True)
            >>> result = thread.get()

            Args:
                did (str):
                eid (str):
                wvm (str):
                wvmid (str):
                body (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_app_associative_data_info_array.BTAppAssociativeDataInfoArray
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["did"] = did
            kwargs["eid"] = eid
            kwargs["wvm"] = wvm
            kwargs["wvmid"] = wvmid
            kwargs["body"] = body
            return self.call_with_http_info(**kwargs)

        self.post_associative_data = Endpoint(
            settings={
                "response_type": (
                    bt_app_associative_data_info_array.BTAppAssociativeDataInfoArray,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata",
                "operation_id": "post_associative_data",
                "http_method": "POST",
                "servers": [],
            },
            params_map={
                "all": ["did", "eid", "wvm", "wvmid", "body",],
                "required": ["did", "eid", "wvm", "wvmid", "body",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "did": (str,),
                    "eid": (str,),
                    "wvm": (str,),
                    "wvmid": (str,),
                    "body": (str,),
                },
                "attribute_map": {
                    "did": "did",
                    "eid": "eid",
                    "wvm": "wvm",
                    "wvmid": "wvmid",
                },
                "location_map": {
                    "did": "path",
                    "eid": "path",
                    "wvm": "path",
                    "wvmid": "path",
                    "body": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": ["application/json;charset=UTF-8; qs=0.09"],
            },
            api_client=api_client,
            callable=__post_associative_data,
        )

        def __transition_workflowable_test_object(self, oid, transition, **kwargs):
            """transition_workflowable_test_object  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.transition_workflowable_test_object(oid, transition, async_req=True)
            >>> result = thread.get()

            Args:
                oid (str):
                transition (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["oid"] = oid
            kwargs["transition"] = transition
            return self.call_with_http_info(**kwargs)

        self.transition_workflowable_test_object = Endpoint(
            settings={
                "response_type": (
                    bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/workflowabletestobject/{oid}/{transition}",
                "operation_id": "transition_workflowable_test_object",
                "http_method": "POST",
                "servers": [],
            },
            params_map={
                "all": ["oid", "transition",],
                "required": ["oid", "transition",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"oid": (str,), "transition": (str,),},
                "attribute_map": {"oid": "oid", "transition": "transition",},
                "location_map": {"oid": "path", "transition": "path",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__transition_workflowable_test_object,
        )

        def __update_workflowable_test_object(
            self, oid, bt_update_workflowable_test_object_params, **kwargs
        ):
            """update_workflowable_test_object  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.update_workflowable_test_object(oid, bt_update_workflowable_test_object_params, async_req=True)
            >>> result = thread.get()

            Args:
                oid (str):
                bt_update_workflowable_test_object_params (bt_update_workflowable_test_object_params.BTUpdateWorkflowableTestObjectParams):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int): specifies the index of the server
                    that we want to use.
                    Default is 0.
                async_req (bool): execute request asynchronously

            Returns:
                bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index", 0)
            kwargs["oid"] = oid
            kwargs[
                "bt_update_workflowable_test_object_params"
            ] = bt_update_workflowable_test_object_params
            return self.call_with_http_info(**kwargs)

        self.update_workflowable_test_object = Endpoint(
            settings={
                "response_type": (
                    bt_workflowable_test_object_info.BTWorkflowableTestObjectInfo,
                ),
                "auth": ["OAuth2"],
                "endpoint_path": "/api/workflowabletestobject/{oid}",
                "operation_id": "update_workflowable_test_object",
                "http_method": "POST",
                "servers": [],
            },
            params_map={
                "all": ["oid", "bt_update_workflowable_test_object_params",],
                "required": ["oid", "bt_update_workflowable_test_object_params",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "oid": (str,),
                    "bt_update_workflowable_test_object_params": (
                        bt_update_workflowable_test_object_params.BTUpdateWorkflowableTestObjectParams,
                    ),
                },
                "attribute_map": {"oid": "oid",},
                "location_map": {
                    "oid": "path",
                    "bt_update_workflowable_test_object_params": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1"],
                "content_type": ["application/json;charset=UTF-8; qs=0.09"],
            },
            api_client=api_client,
            callable=__update_workflowable_test_object,
        )


class Endpoint(object):
    def __init__(
        self,
        settings=None,
        params_map=None,
        root_map=None,
        headers_map=None,
        api_client=None,
        callable=None,
    ):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (tuple/None): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map["all"].extend(
            [
                "async_req",
                "_host_index",
                "_preload_content",
                "_request_timeout",
                "_return_http_data_only",
                "_check_input_type",
                "_check_return_type",
            ]
        )
        self.params_map["nullable"].extend(["_request_timeout"])
        self.validations = root_map["validations"]
        self.allowed_values = root_map["allowed_values"]
        self.openapi_types = root_map["openapi_types"]
        extra_types = {
            "async_req": (bool,),
            "_host_index": (int,),
            "_preload_content": (bool,),
            "_request_timeout": (none_type, int, (int,), [int]),
            "_return_http_data_only": (bool,),
            "_check_input_type": (bool,),
            "_check_return_type": (bool,),
        }
        self.openapi_types.update(extra_types)
        self.attribute_map = root_map["attribute_map"]
        self.location_map = root_map["location_map"]
        self.collection_format_map = root_map["collection_format_map"]
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map["enum"]:
            if param in kwargs:
                check_allowed_values(self.allowed_values, (param,), kwargs[param])

        for param in self.params_map["validation"]:
            if param in kwargs:
                check_validations(self.validations, (param,), kwargs[param])

        if kwargs["_check_input_type"] is False:
            return

        for key, value in six.iteritems(kwargs):
            fixed_val = validate_and_convert_types(
                value,
                self.openapi_types[key],
                [key],
                False,
                kwargs["_check_input_type"],
                configuration=self.api_client.configuration,
            )
            kwargs[key] = fixed_val

    def __gather_params(self, kwargs):
        params = {
            "body": None,
            "collection_format": {},
            "file": {},
            "form": [],
            "header": {},
            "path": {},
            "query": [],
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location is None:
                continue
            if param_location:
                if param_location == "body":
                    params["body"] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if param_location == "form" and self.openapi_types[param_name] == (
                    file_type,
                ):
                    params["file"][param_name] = [param_value]
                elif param_location == "form" and self.openapi_types[param_name] == (
                    [file_type],
                ):
                    # param_value is already a list
                    params["file"][param_name] = param_value
                elif param_location in {"form", "query"}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {"form", "query"}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params["collection_format"][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        try:
            _host = self.settings["servers"][kwargs["_host_index"]]
        except IndexError:
            if self.settings["servers"]:
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s"
                    % len(self.settings["servers"])
                )
            _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map["all"]:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    " to method `%s`" % (key, self.settings["operation_id"])
                )
            # only throw this nullable ApiValueError if _check_input_type
            # is False, if _check_input_type==True we catch this case
            # in self.__validate_inputs
            if (
                key not in self.params_map["nullable"]
                and value is None
                and kwargs["_check_input_type"] is False
            ):
                raise ApiValueError(
                    "Value may not be None for non-nullable parameter `%s`"
                    " when calling `%s`" % (key, self.settings["operation_id"])
                )

        for key in self.params_map["required"]:
            if key not in kwargs.keys():
                raise ApiValueError(
                    "Missing the required parameter `%s` when calling "
                    "`%s`" % (key, self.settings["operation_id"])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map["accept"]
        if accept_headers_list:
            params["header"]["Accept"] = self.api_client.select_header_accept(
                accept_headers_list
            )

        content_type_headers_list = self.headers_map["content_type"]
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list
            )
            params["header"]["Content-Type"] = header_list

        return self.api_client.call_api(
            self.settings["endpoint_path"],
            self.settings["http_method"],
            params["path"],
            params["query"],
            params["header"],
            body=params["body"],
            post_params=params["form"],
            files=params["file"],
            response_type=self.settings["response_type"],
            auth_settings=self.settings["auth"],
            async_req=kwargs["async_req"],
            _check_type=kwargs["_check_return_type"],
            _return_http_data_only=kwargs["_return_http_data_only"],
            _preload_content=kwargs["_preload_content"],
            _request_timeout=kwargs["_request_timeout"],
            _host=_host,
            collection_formats=params["collection_format"],
        )
