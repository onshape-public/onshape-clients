# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.113
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401
import nulltype  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from onshape_client.oas.models import bt_billing_plan_info
except ImportError:
    bt_billing_plan_info = sys.modules[
        'onshape_client.oas.models.bt_billing_plan_info']
try:
    from onshape_client.oas.models import bt_card_info
except ImportError:
    bt_card_info = sys.modules[
        'onshape_client.oas.models.bt_card_info']
try:
    from onshape_client.oas.models import bt_plan_subscriber_info
except ImportError:
    bt_plan_subscriber_info = sys.modules[
        'onshape_client.oas.models.bt_plan_subscriber_info']
try:
    from onshape_client.oas.models import btapi_application_summary_info
except ImportError:
    btapi_application_summary_info = sys.modules[
        'onshape_client.oas.models.btapi_application_summary_info']
try:
    from onshape_client.oas.models import next_charge
except ImportError:
    next_charge = sys.modules[
        'onshape_client.oas.models.next_charge']
try:
    from onshape_client.oas.models import prorated_charges
except ImportError:
    prorated_charges = sys.modules[
        'onshape_client.oas.models.prorated_charges']
try:
    from onshape_client.oas.models import subscription
except ImportError:
    subscription = sys.modules[
        'onshape_client.oas.models.subscription']


class BTPurchaseInfo(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'account_id': (str,),  # noqa: E501
            'actual_amount_paid_cents': (int,),  # noqa: E501
            'amount_cents': (int,),  # noqa: E501
            'application': (btapi_application_summary_info.BTAPIApplicationSummaryInfo,),  # noqa: E501
            'canceled_at': (datetime,),  # noqa: E501
            'card': (bt_card_info.BTCardInfo,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'coupon_amount_off': (int,),  # noqa: E501
            'coupon_percent_off': (int,),  # noqa: E501
            'created_by': (str,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'duration': (int,),  # noqa: E501
            'duration_months': (int,),  # noqa: E501
            'group': (str,),  # noqa: E501
            'href': (str,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'last_modified': (datetime,),  # noqa: E501
            'last_modified_by': (str,),  # noqa: E501
            'light_seats': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'next_charge': (next_charge.NextCharge,),  # noqa: E501
            'payment_type': (int,),  # noqa: E501
            'pending_cancelation': (bool,),  # noqa: E501
            'plan': (bt_billing_plan_info.BTBillingPlanInfo,),  # noqa: E501
            'plan_id': (str,),  # noqa: E501
            'plan_name': (str,),  # noqa: E501
            'plan_type': (int,),  # noqa: E501
            'prorated_charges': ([prorated_charges.ProratedCharges],),  # noqa: E501
            'prorated_total': (int,),  # noqa: E501
            'purchase_date': (datetime,),  # noqa: E501
            'reseller_name': (str,),  # noqa: E501
            'seats': (int,),  # noqa: E501
            'state': (int,),  # noqa: E501
            'subscribers': ([bt_plan_subscriber_info.BTPlanSubscriberInfo],),  # noqa: E501
            'subscription_begin_at': (datetime,),  # noqa: E501
            'subscription_end_at': (datetime,),  # noqa: E501
            'subscription_fields': (subscription.Subscription,),  # noqa: E501
            'subscription_id': (str,),  # noqa: E501
            'subscription_type': (int,),  # noqa: E501
            'trial_end': (datetime,),  # noqa: E501
            'trial_initiated_by': (str,),  # noqa: E501
            'view_ref': (str,),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'account_id': 'accountId',  # noqa: E501
        'actual_amount_paid_cents': 'actualAmountPaidCents',  # noqa: E501
        'amount_cents': 'amountCents',  # noqa: E501
        'application': 'application',  # noqa: E501
        'canceled_at': 'canceledAt',  # noqa: E501
        'card': 'card',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'coupon_amount_off': 'couponAmountOff',  # noqa: E501
        'coupon_percent_off': 'couponPercentOff',  # noqa: E501
        'created_by': 'createdBy',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'duration_months': 'durationMonths',  # noqa: E501
        'group': 'group',  # noqa: E501
        'href': 'href',  # noqa: E501
        'id': 'id',  # noqa: E501
        'last_modified': 'lastModified',  # noqa: E501
        'last_modified_by': 'lastModifiedBy',  # noqa: E501
        'light_seats': 'lightSeats',  # noqa: E501
        'name': 'name',  # noqa: E501
        'next_charge': 'nextCharge',  # noqa: E501
        'payment_type': 'paymentType',  # noqa: E501
        'pending_cancelation': 'pendingCancelation',  # noqa: E501
        'plan': 'plan',  # noqa: E501
        'plan_id': 'planId',  # noqa: E501
        'plan_name': 'planName',  # noqa: E501
        'plan_type': 'planType',  # noqa: E501
        'prorated_charges': 'proratedCharges',  # noqa: E501
        'prorated_total': 'proratedTotal',  # noqa: E501
        'purchase_date': 'purchaseDate',  # noqa: E501
        'reseller_name': 'resellerName',  # noqa: E501
        'seats': 'seats',  # noqa: E501
        'state': 'state',  # noqa: E501
        'subscribers': 'subscribers',  # noqa: E501
        'subscription_begin_at': 'subscriptionBeginAt',  # noqa: E501
        'subscription_end_at': 'subscriptionEndAt',  # noqa: E501
        'subscription_fields': 'subscriptionFields',  # noqa: E501
        'subscription_id': 'subscriptionId',  # noqa: E501
        'subscription_type': 'subscriptionType',  # noqa: E501
        'trial_end': 'trialEnd',  # noqa: E501
        'trial_initiated_by': 'trialInitiatedBy',  # noqa: E501
        'view_ref': 'viewRef',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """bt_purchase_info.BTPurchaseInfo - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            account_id (str): [optional]  # noqa: E501
            actual_amount_paid_cents (int): [optional]  # noqa: E501
            amount_cents (int): [optional]  # noqa: E501
            application (btapi_application_summary_info.BTAPIApplicationSummaryInfo): [optional]  # noqa: E501
            canceled_at (datetime): [optional]  # noqa: E501
            card (bt_card_info.BTCardInfo): [optional]  # noqa: E501
            client_id (str): [optional]  # noqa: E501
            coupon_amount_off (int): [optional]  # noqa: E501
            coupon_percent_off (int): [optional]  # noqa: E501
            created_by (str): [optional]  # noqa: E501
            currency (str): [optional]  # noqa: E501
            duration (int): [optional]  # noqa: E501
            duration_months (int): [optional]  # noqa: E501
            group (str): [optional]  # noqa: E501
            href (str): [optional]  # noqa: E501
            id (str): [optional]  # noqa: E501
            last_modified (datetime): [optional]  # noqa: E501
            last_modified_by (str): [optional]  # noqa: E501
            light_seats (int): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            next_charge (next_charge.NextCharge): [optional]  # noqa: E501
            payment_type (int): [optional]  # noqa: E501
            pending_cancelation (bool): [optional]  # noqa: E501
            plan (bt_billing_plan_info.BTBillingPlanInfo): [optional]  # noqa: E501
            plan_id (str): [optional]  # noqa: E501
            plan_name (str): [optional]  # noqa: E501
            plan_type (int): [optional]  # noqa: E501
            prorated_charges ([prorated_charges.ProratedCharges]): [optional]  # noqa: E501
            prorated_total (int): [optional]  # noqa: E501
            purchase_date (datetime): [optional]  # noqa: E501
            reseller_name (str): [optional]  # noqa: E501
            seats (int): [optional]  # noqa: E501
            state (int): [optional]  # noqa: E501
            subscribers ([bt_plan_subscriber_info.BTPlanSubscriberInfo]): [optional]  # noqa: E501
            subscription_begin_at (datetime): [optional]  # noqa: E501
            subscription_end_at (datetime): [optional]  # noqa: E501
            subscription_fields (subscription.Subscription): [optional]  # noqa: E501
            subscription_id (str): [optional]  # noqa: E501
            subscription_type (int): [optional]  # noqa: E501
            trial_end (datetime): [optional]  # noqa: E501
            trial_initiated_by (str): [optional]  # noqa: E501
            view_ref (str): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
