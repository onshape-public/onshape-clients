# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.113
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from onshape_client.oas.models import discriminator
except ImportError:
    discriminator = sys.modules[
        'onshape_client.oas.models.discriminator']
try:
    from onshape_client.oas.models import external_documentation
except ImportError:
    external_documentation = sys.modules[
        'onshape_client.oas.models.external_documentation']
try:
    from onshape_client.oas.models import xml
except ImportError:
    xml = sys.modules[
        'onshape_client.oas.models.xml']


class Schema(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'additional_properties': (bool, date, datetime, dict, float, int, list, str,),  # noqa: E501
            'default': (bool, date, datetime, dict, float, int, list, str,),  # noqa: E501
            'deprecated': (bool,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'discriminator': (discriminator.Discriminator,),  # noqa: E501
            'enum': ([bool, date, datetime, dict, float, int, list, str],),  # noqa: E501
            'example': (bool, date, datetime, dict, float, int, list, str,),  # noqa: E501
            'exclusive_maximum': (bool,),  # noqa: E501
            'exclusive_minimum': (bool,),  # noqa: E501
            'extensions': ({str: (bool, date, datetime, dict, float, int, list, str,)},),  # noqa: E501
            'external_docs': (external_documentation.ExternalDocumentation,),  # noqa: E501
            'format': (str,),  # noqa: E501
            'getref': (str,),  # noqa: E501
            'max_items': (int,),  # noqa: E501
            'max_length': (int,),  # noqa: E501
            'max_properties': (int,),  # noqa: E501
            'maximum': (float,),  # noqa: E501
            'min_items': (int,),  # noqa: E501
            'min_length': (int,),  # noqa: E501
            'min_properties': (int,),  # noqa: E501
            'minimum': (float,),  # noqa: E501
            'multiple_of': (float,),  # noqa: E501
            '_not': (Schema,),  # noqa: E501
            'nullable': (bool,),  # noqa: E501
            'pattern': (str,),  # noqa: E501
            'properties': ({str: (Schema,)},),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'required': ([str],),  # noqa: E501
            'title': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'unique_items': (bool,),  # noqa: E501
            'write_only': (bool,),  # noqa: E501
            'xml': (xml.XML,),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'additional_properties': 'additionalProperties',  # noqa: E501
        'default': 'default',  # noqa: E501
        'deprecated': 'deprecated',  # noqa: E501
        'description': 'description',  # noqa: E501
        'discriminator': 'discriminator',  # noqa: E501
        'enum': 'enum',  # noqa: E501
        'example': 'example',  # noqa: E501
        'exclusive_maximum': 'exclusiveMaximum',  # noqa: E501
        'exclusive_minimum': 'exclusiveMinimum',  # noqa: E501
        'extensions': 'extensions',  # noqa: E501
        'external_docs': 'externalDocs',  # noqa: E501
        'format': 'format',  # noqa: E501
        'getref': 'get$ref',  # noqa: E501
        'max_items': 'maxItems',  # noqa: E501
        'max_length': 'maxLength',  # noqa: E501
        'max_properties': 'maxProperties',  # noqa: E501
        'maximum': 'maximum',  # noqa: E501
        'min_items': 'minItems',  # noqa: E501
        'min_length': 'minLength',  # noqa: E501
        'min_properties': 'minProperties',  # noqa: E501
        'minimum': 'minimum',  # noqa: E501
        'multiple_of': 'multipleOf',  # noqa: E501
        '_not': 'not',  # noqa: E501
        'nullable': 'nullable',  # noqa: E501
        'pattern': 'pattern',  # noqa: E501
        'properties': 'properties',  # noqa: E501
        'read_only': 'readOnly',  # noqa: E501
        'required': 'required',  # noqa: E501
        'title': 'title',  # noqa: E501
        'type': 'type',  # noqa: E501
        'unique_items': 'uniqueItems',  # noqa: E501
        'write_only': 'writeOnly',  # noqa: E501
        'xml': 'xml',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """schema.Schema - a model defined in OpenAPI


        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            additional_properties (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
            default (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
            deprecated (bool): [optional]  # noqa: E501
            description (str): [optional]  # noqa: E501
            discriminator (discriminator.Discriminator): [optional]  # noqa: E501
            enum ([bool, date, datetime, dict, float, int, list, str]): [optional]  # noqa: E501
            example (bool, date, datetime, dict, float, int, list, str): [optional]  # noqa: E501
            exclusive_maximum (bool): [optional]  # noqa: E501
            exclusive_minimum (bool): [optional]  # noqa: E501
            extensions ({str: (bool, date, datetime, dict, float, int, list, str,)}): [optional]  # noqa: E501
            external_docs (external_documentation.ExternalDocumentation): [optional]  # noqa: E501
            format (str): [optional]  # noqa: E501
            getref (str): [optional]  # noqa: E501
            max_items (int): [optional]  # noqa: E501
            max_length (int): [optional]  # noqa: E501
            max_properties (int): [optional]  # noqa: E501
            maximum (float): [optional]  # noqa: E501
            min_items (int): [optional]  # noqa: E501
            min_length (int): [optional]  # noqa: E501
            min_properties (int): [optional]  # noqa: E501
            minimum (float): [optional]  # noqa: E501
            multiple_of (float): [optional]  # noqa: E501
            _not (Schema): [optional]  # noqa: E501
            nullable (bool): [optional]  # noqa: E501
            pattern (str): [optional]  # noqa: E501
            properties ({str: (Schema,)}): [optional]  # noqa: E501
            read_only (bool): [optional]  # noqa: E501
            required ([str]): [optional]  # noqa: E501
            title (str): [optional]  # noqa: E501
            type (str): [optional]  # noqa: E501
            unique_items (bool): [optional]  # noqa: E501
            write_only (bool): [optional]  # noqa: E501
            xml (xml.XML): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            setattr(self, var_name, var_value)
