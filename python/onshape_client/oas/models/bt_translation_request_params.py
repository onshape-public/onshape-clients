# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.113
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401
import nulltype  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from onshape_client.oas.models import form_data_body_part
except ImportError:
    form_data_body_part = sys.modules[
        'onshape_client.oas.models.form_data_body_part']
try:
    from onshape_client.oas.models import form_data_content_disposition
except ImportError:
    form_data_content_disposition = sys.modules[
        'onshape_client.oas.models.form_data_content_disposition']


class BTTranslationRequestParams(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('owner_type',): {
            'USER': "USER",
            'COMPANY': "COMPANY",
            'ONSHAPE': "ONSHAPE",
        },
    }

    validations = {
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'allow_faulty_parts': (bool,),  # noqa: E501
            'create_composite': (bool,),  # noqa: E501
            'create_drawing_if_possible': (bool,),  # noqa: E501
            'encoded_filename': (str,),  # noqa: E501
            'extract_assembly_hierarchy': (bool,),  # noqa: E501
            'file': (file_type,),  # noqa: E501
            'file_body_with_details': (form_data_body_part.FormDataBodyPart,),  # noqa: E501
            'file_content_length': (int,),  # noqa: E501
            'file_detail': (form_data_content_disposition.FormDataContentDisposition,),  # noqa: E501
            'flatten_assemblies': (bool,),  # noqa: E501
            'format_name': (str,),  # noqa: E501
            'isy_axis_is_up': (bool,),  # noqa: E501
            'join_adjacent_surfaces': (bool,),  # noqa: E501
            'location_element_id': (str,),  # noqa: E501
            'location_group_id': (str,),  # noqa: E501
            'location_position': (int,),  # noqa: E501
            'notify_user': (bool,),  # noqa: E501
            'owner_id': (str,),  # noqa: E501
            'owner_type': (str,),  # noqa: E501
            'parent_id': (str,),  # noqa: E501
            'project_id': (str,),  # noqa: E501
            'public': (bool,),  # noqa: E501
            'split_assemblies_into_multiple_documents': (bool,),  # noqa: E501
            'store_in_document': (bool,),  # noqa: E501
            'translate': (bool,),  # noqa: E501
            'unit': (str,),  # noqa: E501
            'upload_id': (str,),  # noqa: E501
            'version_string': (str,),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'allow_faulty_parts': 'allowFaultyParts',  # noqa: E501
        'create_composite': 'createComposite',  # noqa: E501
        'create_drawing_if_possible': 'createDrawingIfPossible',  # noqa: E501
        'encoded_filename': 'encodedFilename',  # noqa: E501
        'extract_assembly_hierarchy': 'extractAssemblyHierarchy',  # noqa: E501
        'file': 'file',  # noqa: E501
        'file_body_with_details': 'fileBodyWithDetails',  # noqa: E501
        'file_content_length': 'fileContentLength',  # noqa: E501
        'file_detail': 'fileDetail',  # noqa: E501
        'flatten_assemblies': 'flattenAssemblies',  # noqa: E501
        'format_name': 'formatName',  # noqa: E501
        'isy_axis_is_up': 'isyAxisIsUp',  # noqa: E501
        'join_adjacent_surfaces': 'joinAdjacentSurfaces',  # noqa: E501
        'location_element_id': 'locationElementId',  # noqa: E501
        'location_group_id': 'locationGroupId',  # noqa: E501
        'location_position': 'locationPosition',  # noqa: E501
        'notify_user': 'notifyUser',  # noqa: E501
        'owner_id': 'ownerId',  # noqa: E501
        'owner_type': 'ownerType',  # noqa: E501
        'parent_id': 'parentId',  # noqa: E501
        'project_id': 'projectId',  # noqa: E501
        'public': 'public',  # noqa: E501
        'split_assemblies_into_multiple_documents': 'splitAssembliesIntoMultipleDocuments',  # noqa: E501
        'store_in_document': 'storeInDocument',  # noqa: E501
        'translate': 'translate',  # noqa: E501
        'unit': 'unit',  # noqa: E501
        'upload_id': 'uploadId',  # noqa: E501
        'version_string': 'versionString',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """bt_translation_request_params.BTTranslationRequestParams - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            allow_faulty_parts (bool): [optional]  # noqa: E501
            create_composite (bool): [optional]  # noqa: E501
            create_drawing_if_possible (bool): [optional]  # noqa: E501
            encoded_filename (str): [optional]  # noqa: E501
            extract_assembly_hierarchy (bool): [optional]  # noqa: E501
            file (file_type): [optional]  # noqa: E501
            file_body_with_details (form_data_body_part.FormDataBodyPart): [optional]  # noqa: E501
            file_content_length (int): [optional]  # noqa: E501
            file_detail (form_data_content_disposition.FormDataContentDisposition): [optional]  # noqa: E501
            flatten_assemblies (bool): [optional]  # noqa: E501
            format_name (str): [optional]  # noqa: E501
            isy_axis_is_up (bool): [optional]  # noqa: E501
            join_adjacent_surfaces (bool): [optional]  # noqa: E501
            location_element_id (str): [optional]  # noqa: E501
            location_group_id (str): [optional]  # noqa: E501
            location_position (int): [optional]  # noqa: E501
            notify_user (bool): [optional]  # noqa: E501
            owner_id (str): [optional]  # noqa: E501
            owner_type (str): [optional]  # noqa: E501
            parent_id (str): [optional]  # noqa: E501
            project_id (str): [optional]  # noqa: E501
            public (bool): [optional]  # noqa: E501
            split_assemblies_into_multiple_documents (bool): [optional]  # noqa: E501
            store_in_document (bool): [optional]  # noqa: E501
            translate (bool): [optional]  # noqa: E501
            unit (str): [optional]  # noqa: E501
            upload_id (str): [optional]  # noqa: E501
            version_string (str): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
