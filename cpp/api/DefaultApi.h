/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_


#include "../ApiClient.h"

#include "BTAppAssociativeDataInfoArray.h"
#include "BTAppElementBasicInfo.h"
#include "BTApplicationElementThumbnailParamsArray.h"
#include "BTBoundingBoxInfo.h"
#include "BTListResponseBTInsertableInfo.h"
#include "BTListResponseBTMetadataPropertySummaryInfo.h"
#include "BTMetadataPropertyInfo.h"
#include "BTMetadataSchemaInfo.h"
#include "BTThumbnailInfo.h"
#include "BTUpdateWorkflowableTestObjectParams.h"
#include "BTWorkflowableTestObjectInfo.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="wfid"></param>
    pplx::task<std::shared_ptr<BTWorkflowableTestObjectInfo>> createWorkflowableTestObject(
        utility::string_t wfid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    pplx::task<void> deleteApplicationThumbnails(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="transactionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentChangeId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="associativeDataId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="elementId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="viewId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="microversionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="documentMicroversion"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="deterministicId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="featureId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="occurrenceId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTAppElementBasicInfo>> deleteAssociativeData(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wvm,
        utility::string_t wvmid,
        boost::optional<utility::string_t> transactionId,
        boost::optional<utility::string_t> parentChangeId,
        boost::optional<std::vector<utility::string_t>> associativeDataId,
        boost::optional<utility::string_t> elementId,
        boost::optional<utility::string_t> viewId,
        boost::optional<utility::string_t> microversionId,
        boost::optional<utility::string_t> documentMicroversion,
        boost::optional<utility::string_t> deterministicId,
        boost::optional<utility::string_t> featureId,
        boost::optional<utility::string_t> entityId,
        boost::optional<utility::string_t> occurrenceId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="transactionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="changeId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="associativeDataId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="elementId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="viewId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="microversionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="documentMicroversion"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="deterministicId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="featureId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="occurrenceId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="returnIdTags"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTAppAssociativeDataInfoArray>> getAssociativeData(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> transactionId,
        boost::optional<utility::string_t> changeId,
        boost::optional<std::vector<utility::string_t>> associativeDataId,
        boost::optional<utility::string_t> elementId,
        boost::optional<utility::string_t> viewId,
        boost::optional<utility::string_t> microversionId,
        boost::optional<utility::string_t> documentMicroversion,
        boost::optional<utility::string_t> deterministicId,
        boost::optional<utility::string_t> featureId,
        boost::optional<utility::string_t> entityId,
        boost::optional<utility::string_t> occurrenceId,
        boost::optional<bool> returnIdTags
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="cid"></param>
    /// <param name="sz"></param>
    /// <param name="t"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rejectEmpty"> (optional, default to false)</param>
    pplx::task<void> getConfiguredElementThumbnailWithSize(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t cid,
        utility::string_t sz,
        boost::optional<utility::string_t> t,
        boost::optional<bool> rejectEmpty
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    pplx::task<std::shared_ptr<BTThumbnailInfo>> getDocumentThumbnail(
        utility::string_t did,
        utility::string_t wid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="sz"></param>
    /// <param name="t"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> getDocumentThumbnailWithSize(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t sz,
        boost::optional<utility::string_t> t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTThumbnailInfo>> getElementThumbnail(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="cid"></param>
    /// <param name="sz"></param>
    /// <param name="t"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rejectEmpty"> (optional, default to false)</param>
    pplx::task<void> getElementThumbnailWithApiConfiguration(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t cid,
        utility::string_t sz,
        boost::optional<utility::string_t> t,
        boost::optional<bool> rejectEmpty
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="sz"></param>
    /// <param name="t"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rejectEmpty"> (optional, default to false)</param>
    pplx::task<void> getElementThumbnailWithSize(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t sz,
        boost::optional<utility::string_t> t,
        boost::optional<bool> rejectEmpty
    ) const;
    /// <summary>
    /// insertables for a document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="betaCapabilityIds"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="includeParts"> (optional, default to false)</param>
    /// <param name="includeSurfaces"> (optional, default to false)</param>
    /// <param name="includeWires"> (optional, default to false)</param>
    /// <param name="includeSketches"> (optional, default to false)</param>
    /// <param name="includeReferenceFeatures"> (optional, default to false)</param>
    /// <param name="includeAssemblies"> (optional, default to false)</param>
    /// <param name="includeFeatures"> (optional, default to false)</param>
    /// <param name="includeFeatureStudios"> (optional, default to false)</param>
    /// <param name="includePartStudios"> (optional, default to false)</param>
    /// <param name="includeBlobs"> (optional, default to false)</param>
    /// <param name="includeMeshes"> (optional, default to false)</param>
    /// <param name="includeFlattenedBodies"> (optional, default to false)</param>
    /// <param name="allowedBlobMimeTypes"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="maxFeatureScriptVersion"> (optional, default to 0)</param>
    /// <param name="includeApplications"> (optional, default to false)</param>
    /// <param name="allowedApplicationMimeTypes"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeCompositeParts"> (optional, default to false)</param>
    /// <param name="includeFSTables"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTListResponseBTInsertableInfo>> getLatestInDocument(
        utility::string_t did,
        boost::optional<std::vector<utility::string_t>> betaCapabilityIds,
        boost::optional<bool> includeParts,
        boost::optional<bool> includeSurfaces,
        boost::optional<bool> includeWires,
        boost::optional<bool> includeSketches,
        boost::optional<bool> includeReferenceFeatures,
        boost::optional<bool> includeAssemblies,
        boost::optional<bool> includeFeatures,
        boost::optional<bool> includeFeatureStudios,
        boost::optional<bool> includePartStudios,
        boost::optional<bool> includeBlobs,
        boost::optional<bool> includeMeshes,
        boost::optional<bool> includeFlattenedBodies,
        boost::optional<utility::string_t> allowedBlobMimeTypes,
        boost::optional<int32_t> maxFeatureScriptVersion,
        boost::optional<bool> includeApplications,
        boost::optional<utility::string_t> allowedApplicationMimeTypes,
        boost::optional<bool> includeCompositeParts,
        boost::optional<bool> includeFSTables
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="objectType"></param>
    /// <param name="ownerId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="documentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerType"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<BTMetadataSchemaInfo>> getMetadataSchema(
        int32_t objectType,
        boost::optional<utility::string_t> ownerId,
        boost::optional<utility::string_t> documentId,
        boost::optional<int32_t> ownerType
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="schemaId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="documentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerType"> (optional, default to 0)</param>
    /// <param name="objectType"> (optional, default to 0)</param>
    /// <param name="strict"> (optional, default to false)</param>
    /// <param name="activeOnly"> (optional, default to false)</param>
    /// <param name="offset"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<BTListResponseBTMetadataPropertySummaryInfo>> getProperties(
        boost::optional<utility::string_t> schemaId,
        boost::optional<utility::string_t> ownerId,
        boost::optional<utility::string_t> documentId,
        boost::optional<int32_t> ownerType,
        boost::optional<int32_t> objectType,
        boost::optional<bool> strict,
        boost::optional<bool> activeOnly,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pid"></param>
    /// <param name="documentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="schemaId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerType"> (optional, default to 0)</param>
    /// <param name="objectType"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<BTMetadataPropertyInfo>> getPropertyInfo(
        utility::string_t pid,
        boost::optional<utility::string_t> documentId,
        boost::optional<utility::string_t> schemaId,
        boost::optional<utility::string_t> ownerId,
        boost::optional<int32_t> ownerType,
        boost::optional<int32_t> objectType
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="sid"></param>
    /// <param name="documentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTMetadataSchemaInfo>> getSchema(
        utility::string_t sid,
        boost::optional<utility::string_t> documentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="sid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTBoundingBoxInfo>> getSketchBoundingBoxes(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t sid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sketchId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="output3D"> (optional, default to false)</param>
    /// <param name="curvePoints"> (optional, default to false)</param>
    /// <param name="includeGeometry"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> getSketchInfo(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> configuration,
        boost::optional<std::vector<utility::string_t>> sketchId,
        boost::optional<bool> output3D,
        boost::optional<bool> curvePoints,
        boost::optional<bool> includeGeometry,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="sid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="angleTolerance"> (optional, default to 0.0)</param>
    /// <param name="chordTolerance"> (optional, default to 0.0)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> getTessellatedEntities(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t sid,
        boost::optional<utility::string_t> configuration,
        boost::optional<std::vector<utility::string_t>> entityId,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::shared_ptr<BTThumbnailInfo>> getThumbnailForDocument(
        utility::string_t did
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> getThumbnailForDocumentAndVersion(
        utility::string_t did,
        utility::string_t vid,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    pplx::task<void> getThumbnailForDocumentAndVersionOld(
        utility::string_t did,
        utility::string_t vid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::shared_ptr<BTThumbnailInfo>> getThumbnailForDocumentOld(
        utility::string_t did
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="oid"></param>
    pplx::task<std::shared_ptr<BTWorkflowableTestObjectInfo>> getWorkflowableTestObject(
        utility::string_t oid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="body"></param>
    pplx::task<std::shared_ptr<BTAppAssociativeDataInfoArray>> postAssociativeData(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="bTApplicationElementThumbnailParamsArray"></param>
    /// <param name="overwrite"> (optional, default to false)</param>
    pplx::task<void> setApplicationElementThumbnail(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        std::shared_ptr<BTApplicationElementThumbnailParamsArray> bTApplicationElementThumbnailParamsArray,
        boost::optional<bool> overwrite
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="oid"></param>
    /// <param name="transition"></param>
    pplx::task<std::shared_ptr<BTWorkflowableTestObjectInfo>> transitionWorkflowableTestObject(
        utility::string_t oid,
        utility::string_t transition
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="oid"></param>
    /// <param name="bTUpdateWorkflowableTestObjectParams"></param>
    pplx::task<std::shared_ptr<BTWorkflowableTestObjectInfo>> updateWorkflowableTestObject(
        utility::string_t oid,
        std::shared_ptr<BTUpdateWorkflowableTestObjectParams> bTUpdateWorkflowableTestObjectParams
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

