/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MetadataApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_


#include "../ApiClient.h"

#include <cpprest/details/basic_types.h>
#include "../ModelBase.h"

#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  MetadataApi 
{
public:

    explicit MetadataApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MetadataApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="eid"></param>
    /// <param name="otype"></param>
    /// <param name="oid"></param>
    /// <param name="pid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getVEOPStandardContentMetadata(
        utility::string_t did,
        utility::string_t vid,
        utility::string_t eid,
        utility::string_t otype,
        utility::string_t oid,
        utility::string_t pid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="depth"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getWMVEMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<utility::string_t> depth,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="pid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getWMVEPMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t pid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getWMVEPsMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="depth"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getWMVEsMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<utility::string_t> depth,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="depth"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="thumbnail"> (optional, default to false)</param>
    pplx::task<void> getWVMetadata(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<utility::string_t> depth,
        boost::optional<bool> thumbnail
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="eid"></param>
    /// <param name="otype"></param>
    /// <param name="oid"></param>
    /// <param name="pid"></param>
    /// <param name="body"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> updateVEOPStandardContentPartMetadata(
        utility::string_t did,
        utility::string_t vid,
        utility::string_t eid,
        utility::string_t otype,
        utility::string_t oid,
        utility::string_t pid,
        utility::string_t body,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="body"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> updateWVEMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t body,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="pid"></param>
    /// <param name="subResource"></param>
    /// <param name="body"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> updateWVEPMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t pid,
        utility::string_t subResource,
        utility::string_t body,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="body"></param>
    pplx::task<void> updateWVMetadata(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_ */

