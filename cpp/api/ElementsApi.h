/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ElementsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ElementsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ElementsApi_H_


#include "../ApiClient.h"

#include "BTConfigurationInfo.h"
#include "BTConfigurationParams.h"
#include "BTCopyElementParams.h"
#include "BTDocumentElementInfo.h"
#include "BTEncodedConfigurationInfo.h"
#include "BTModelFormatInfo.h"
#include "BTUpdateReferenceParams.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ElementsApi 
{
public:

    explicit ElementsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ElementsApi();

    /// <summary>
    /// Copy Element
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="bTCopyElementParams"></param>
    pplx::task<std::shared_ptr<BTDocumentElementInfo>> copyElementFromSourceDocument(
        utility::string_t did,
        utility::string_t wid,
        std::shared_ptr<BTCopyElementParams> bTCopyElementParams
    ) const;
    /// <summary>
    /// Decode Configuration String
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="cid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeDisplay"> (optional, default to false)</param>
    /// <param name="configurationIsId"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTConfigurationInfo>> decodeConfiguration(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t cid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> includeDisplay,
        boost::optional<bool> configurationIsId
    ) const;
    /// <summary>
    /// Delete Element
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    pplx::task<void> deleteElement(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Encode Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="bTConfigurationParams"></param>
    /// <param name="versionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTEncodedConfigurationInfo>> encodeConfigurationMap(
        utility::string_t did,
        utility::string_t eid,
        std::shared_ptr<BTConfigurationParams> bTConfigurationParams,
        boost::optional<utility::string_t> versionId,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    pplx::task<std::shared_ptr<BTConfigurationInfo>> getConfiguration(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Get Element Translator Formats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="checkContent"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<BTModelFormatInfo>>> getElementTranslatorFormatsByVersionOrWorkspace(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        boost::optional<bool> checkContent,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// Update Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTConfigurationInfo>> updateConfiguration(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Update or replace node references
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="bTUpdateReferenceParams"></param>
    pplx::task<void> updateReferences(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        std::shared_ptr<BTUpdateReferenceParams> bTUpdateReferenceParams
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ElementsApi_H_ */

