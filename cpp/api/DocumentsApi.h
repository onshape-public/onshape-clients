/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DocumentsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DocumentsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DocumentsApi_H_


#include "../ApiClient.h"

#include "BTAclInfo.h"
#include "BTCopyDocumentInfo.h"
#include "BTCopyDocumentParams.h"
#include "BTDocumentElementInfo.h"
#include "BTDocumentInfo.h"
#include "BTDocumentMergeInfo.h"
#include "BTDocumentParams.h"
#include "BTDocumentSearchParams.h"
#include "BTExportModelParams.h"
#include "BTGlobalTreeNodeListResponse.h"
#include "BTInsertablesListResponse.h"
#include "BTLinkToLatestDocumentInfo.h"
#include "BTLinkToLatestDocumentParams.h"
#include "BTMicroversionInfo.h"
#include "BTMoveElementInfo.h"
#include "BTMoveElementParams.h"
#include "BTShareParams.h"
#include "BTVersionInfo.h"
#include "BTVersionOrWorkspaceInfo.h"
#include "BTVersionOrWorkspaceParams.h"
#include "BTWorkspaceInfo.h"
#include "HttpContent.h"
#include "Object.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DocumentsApi 
{
public:

    explicit DocumentsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DocumentsApi();

    /// <summary>
    /// Copy Workspace
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="bTCopyDocumentParams"> (optional)</param>
    pplx::task<std::shared_ptr<BTCopyDocumentInfo>> copyWorkspace(
        utility::string_t did,
        utility::string_t wid,
        boost::optional<std::shared_ptr<BTCopyDocumentParams>> bTCopyDocumentParams
    ) const;
    /// <summary>
    /// Create document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="bTDocumentParams"></param>
    pplx::task<std::shared_ptr<BTDocumentInfo>> createDocument(
        std::shared_ptr<BTDocumentParams> bTDocumentParams
    ) const;
    /// <summary>
    /// Create Version.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="bTVersionOrWorkspaceParams"></param>
    pplx::task<std::shared_ptr<BTVersionInfo>> createVersion(
        utility::string_t did,
        std::shared_ptr<BTVersionOrWorkspaceParams> bTVersionOrWorkspaceParams
    ) const;
    /// <summary>
    /// Create Workspace
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="bTVersionOrWorkspaceParams"> (optional)</param>
    pplx::task<std::shared_ptr<BTWorkspaceInfo>> createWorkspace(
        utility::string_t did,
        boost::optional<std::shared_ptr<BTVersionOrWorkspaceParams>> bTVersionOrWorkspaceParams
    ) const;
    /// <summary>
    /// Delete Document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="forever"> (optional, default to false)</param>
    pplx::task<void> deleteDocument(
        utility::string_t did,
        boost::optional<bool> forever
    ) const;
    /// <summary>
    /// Delete Workspace
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    pplx::task<void> deleteWorkspace(
        utility::string_t did,
        utility::string_t wid
    ) const;
    /// <summary>
    /// Download External Data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="fid"></param>
    /// <param name="ifNoneMatch"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> downloadExternalData(
        utility::string_t did,
        utility::string_t fid,
        boost::optional<utility::string_t> ifNoneMatch
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="bTExportModelParams"> (optional)</param>
    pplx::task<void> export2Json(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        boost::optional<std::shared_ptr<BTExportModelParams>> bTExportModelParams
    ) const;
    /// <summary>
    /// Get Current Document Microversion
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    pplx::task<std::shared_ptr<BTMicroversionInfo>> getCurrentMicroversion(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid
    ) const;
    /// <summary>
    /// Get Document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::shared_ptr<BTDocumentInfo>> getDocument(
        utility::string_t did
    ) const;
    /// <summary>
    /// Get Access Control List
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::shared_ptr<BTAclInfo>> getDocumentAcl(
        utility::string_t did
    ) const;
    /// <summary>
    /// Get Document Permissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::shared_ptr<Object>> getDocumentPermissionSet(
        utility::string_t did
    ) const;
    /// <summary>
    /// Get Versions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="offset"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<BTVersionInfo>>> getDocumentVersions(
        utility::string_t did,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Get Workspaces
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    pplx::task<std::vector<std::shared_ptr<BTWorkspaceInfo>>> getDocumentWorkspaces(
        utility::string_t did
    ) const;
    /// <summary>
    /// Get Documents
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="q"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter"> (optional, default to 0)</param>
    /// <param name="owner"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerType"> (optional, default to 0)</param>
    /// <param name="sortColumn"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sortOrder"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="offset"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    /// <param name="label"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="project"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTGlobalTreeNodeListResponse>> getDocuments(
        boost::optional<utility::string_t> q,
        boost::optional<int32_t> filter,
        boost::optional<utility::string_t> owner,
        boost::optional<int32_t> ownerType,
        boost::optional<utility::string_t> sortColumn,
        boost::optional<utility::string_t> sortOrder,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> limit,
        boost::optional<utility::string_t> label,
        boost::optional<utility::string_t> project,
        boost::optional<utility::string_t> parentId
    ) const;
    /// <summary>
    /// Get a list of elements in the workspace, version, or microversion of the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="elementType"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="elementId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withThumbnails"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<BTDocumentElementInfo>>> getElementsInDocument(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        boost::optional<utility::string_t> elementType,
        boost::optional<utility::string_t> elementId,
        boost::optional<bool> withThumbnails,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Insertable List for Document Version.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="betaCapabilityIds"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="includeParts"> (optional, default to false)</param>
    /// <param name="includeSurfaces"> (optional, default to false)</param>
    /// <param name="includeWires"> (optional, default to false)</param>
    /// <param name="includeSketches"> (optional, default to false)</param>
    /// <param name="includeReferenceFeatures"> (optional, default to false)</param>
    /// <param name="includeAssemblies"> (optional, default to false)</param>
    /// <param name="includeFeatures"> (optional, default to false)</param>
    /// <param name="includeFeatureStudios"> (optional, default to false)</param>
    /// <param name="includePartStudios"> (optional, default to false)</param>
    /// <param name="includeBlobs"> (optional, default to false)</param>
    /// <param name="includeMeshes"> (optional, default to false)</param>
    /// <param name="includeFlattenedBodies"> (optional, default to false)</param>
    /// <param name="allowedBlobMimeTypes"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="maxFeatureScriptVersion"> (optional, default to 0)</param>
    /// <param name="includeApplications"> (optional, default to false)</param>
    /// <param name="allowedApplicationMimeTypes"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeCompositeParts"> (optional, default to false)</param>
    /// <param name="includeFSTables"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTInsertablesListResponse>> getInsertables(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        boost::optional<std::vector<utility::string_t>> betaCapabilityIds,
        boost::optional<bool> includeParts,
        boost::optional<bool> includeSurfaces,
        boost::optional<bool> includeWires,
        boost::optional<bool> includeSketches,
        boost::optional<bool> includeReferenceFeatures,
        boost::optional<bool> includeAssemblies,
        boost::optional<bool> includeFeatures,
        boost::optional<bool> includeFeatureStudios,
        boost::optional<bool> includePartStudios,
        boost::optional<bool> includeBlobs,
        boost::optional<bool> includeMeshes,
        boost::optional<bool> includeFlattenedBodies,
        boost::optional<utility::string_t> allowedBlobMimeTypes,
        boost::optional<int32_t> maxFeatureScriptVersion,
        boost::optional<bool> includeApplications,
        boost::optional<utility::string_t> allowedApplicationMimeTypes,
        boost::optional<bool> includeCompositeParts,
        boost::optional<bool> includeFSTables
    ) const;
    /// <summary>
    /// Get Version
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="parents"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTVersionInfo>> getVersion(
        utility::string_t did,
        utility::string_t vid,
        boost::optional<bool> parents,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Merge into workspace
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="bTVersionOrWorkspaceInfo"></param>
    pplx::task<std::shared_ptr<BTDocumentMergeInfo>> mergeIntoWorkspace(
        utility::string_t did,
        utility::string_t wid,
        std::shared_ptr<BTVersionOrWorkspaceInfo> bTVersionOrWorkspaceInfo
    ) const;
    /// <summary>
    /// Move Elements
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="bTMoveElementParams"></param>
    pplx::task<std::shared_ptr<BTMoveElementInfo>> moveElementsToDocument(
        utility::string_t did,
        utility::string_t wid,
        std::shared_ptr<BTMoveElementParams> bTMoveElementParams
    ) const;
    /// <summary>
    /// Restore version or microversion to workspace.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="vm"></param>
    /// <param name="vmid"></param>
    pplx::task<void> restoreFromHistory(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t vm,
        utility::string_t vmid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="bTDocumentSearchParams"></param>
    pplx::task<void> search(
        std::shared_ptr<BTDocumentSearchParams> bTDocumentSearchParams
    ) const;
    /// <summary>
    /// Share Document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="bTShareParams"></param>
    pplx::task<std::shared_ptr<BTAclInfo>> shareDocument(
        utility::string_t did,
        std::shared_ptr<BTShareParams> bTShareParams
    ) const;
    /// <summary>
    /// Sync Application Elements
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="applicationElementIds"></param>
    /// <param name="description"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> syncApplicationElements(
        utility::string_t did,
        utility::string_t wid,
        std::vector<utility::string_t> applicationElementIds,
        boost::optional<utility::string_t> description
    ) const;
    /// <summary>
    /// Unshare Document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="entryType"> (optional, default to 0)</param>
    pplx::task<void> unShareDocument(
        utility::string_t did,
        utility::string_t eid,
        boost::optional<int32_t> entryType
    ) const;
    /// <summary>
    /// Update Document Attributes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="bTDocumentParams"></param>
    pplx::task<void> updateDocumentAttributes(
        utility::string_t did,
        std::shared_ptr<BTDocumentParams> bTDocumentParams
    ) const;
    /// <summary>
    /// Update External References to Latest
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="bTLinkToLatestDocumentParams"> (optional)</param>
    pplx::task<std::shared_ptr<BTLinkToLatestDocumentInfo>> updateExternalReferencesToLatestDocuments(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        boost::optional<std::shared_ptr<BTLinkToLatestDocumentParams>> bTLinkToLatestDocumentParams
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DocumentsApi_H_ */

