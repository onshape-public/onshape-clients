/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AssembliesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AssembliesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AssembliesApi_H_


#include "../ApiClient.h"

#include "BTAssemblyDefinitionInfo.h"
#include "BTAssemblyFeatureListResponse_1174.h"
#include "BTAssemblyInsertTransformedInstancesResponse.h"
#include "BTAssemblyInstanceDefinitionParams.h"
#include "BTAssemblyTransformDefinitionParams.h"
#include "BTAssemblyTransformedInstancesDefinitionParams.h"
#include "BTBoundingBoxInfo.h"
#include "BTDocumentElementInfo.h"
#include "BTFeatureApiBase_1430.h"
#include "BTFeatureDefinitionCall_1406.h"
#include "BTFeatureDefinitionResponse_1617.h"
#include "BTFeatureSpecsResponse_664.h"
#include "BTModelElementParams.h"
#include "BTModelFormatInfo.h"
#include "BTNamedViewsInfo.h"
#include "BTOccurrence_74.h"
#include "BTShadedViewsInfo.h"
#include "BTTranslateFormatParams.h"
#include "BTTranslationRequestInfo.h"
#include "JsonNode.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AssembliesApi 
{
public:

    explicit AssembliesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AssembliesApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="bTFeatureDefinitionCall1406"> (optional)</param>
    pplx::task<std::shared_ptr<BTFeatureDefinitionResponse_1617>> addFeature(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<std::shared_ptr<BTFeatureDefinitionCall_1406>> bTFeatureDefinitionCall1406
    ) const;
    /// <summary>
    /// Create Assembly
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="bTModelElementParams"></param>
    pplx::task<std::shared_ptr<BTDocumentElementInfo>> createAssembly(
        utility::string_t did,
        utility::string_t wid,
        std::shared_ptr<BTModelElementParams> bTModelElementParams
    ) const;
    /// <summary>
    /// Create assembly instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="bTAssemblyInstanceDefinitionParams"></param>
    pplx::task<std::vector<std::shared_ptr<BTOccurrence_74>>> createInstance(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        std::shared_ptr<BTAssemblyInstanceDefinitionParams> bTAssemblyInstanceDefinitionParams
    ) const;
    /// <summary>
    /// Delete Feature
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="fid"></param>
    pplx::task<std::shared_ptr<BTFeatureApiBase_1430>> deleteFeature(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t fid
    ) const;
    /// <summary>
    /// Delete assembly instance.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wid"></param>
    /// <param name="nid"></param>
    pplx::task<void> deleteInstance(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wid,
        utility::string_t nid
    ) const;
    /// <summary>
    /// Bounding Boxes.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeHidden"> (optional, default to false)</param>
    /// <param name="displayStateId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="explodedViewId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTBoundingBoxInfo>> getAssemblyBoundingBoxes(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> includeHidden,
        boost::optional<utility::string_t> displayStateId,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> explodedViewId
    ) const;
    /// <summary>
    /// Assembly Definition.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeMateFeatures"> (optional, default to false)</param>
    /// <param name="includeNonSolids"> (optional, default to false)</param>
    /// <param name="includeMateConnectors"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="explodedViewId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTAssemblyDefinitionInfo>> getAssemblyDefinition(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> includeMateFeatures,
        boost::optional<bool> includeNonSolids,
        boost::optional<bool> includeMateConnectors,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> explodedViewId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="viewMatrix"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="outputHeight"> (optional, default to 0)</param>
    /// <param name="outputWidth"> (optional, default to 0)</param>
    /// <param name="pixelSize"> (optional, default to 0.0)</param>
    /// <param name="edges"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showAllParts"> (optional, default to false)</param>
    /// <param name="includeSurfaces"> (optional, default to false)</param>
    /// <param name="useAntiAliasing"> (optional, default to false)</param>
    /// <param name="displayStateId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="explodedViewId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTShadedViewsInfo>> getAssemblyShadedViews(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> viewMatrix,
        boost::optional<int32_t> outputHeight,
        boost::optional<int32_t> outputWidth,
        boost::optional<double> pixelSize,
        boost::optional<utility::string_t> edges,
        boost::optional<bool> showAllParts,
        boost::optional<bool> includeSurfaces,
        boost::optional<bool> useAntiAliasing,
        boost::optional<utility::string_t> displayStateId,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> explodedViewId
    ) const;
    /// <summary>
    /// Get Bill of Materials
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="metadataWorkspaceId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bomColumnIds"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="indented"> (optional, default to false)</param>
    /// <param name="multiLevel"> (optional, default to false)</param>
    /// <param name="generateIfAbsent"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<JsonNode>> getBillOfMaterials(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> metadataWorkspaceId,
        boost::optional<std::vector<utility::string_t>> bomColumnIds,
        boost::optional<bool> indented,
        boost::optional<bool> multiLevel,
        boost::optional<bool> generateIfAbsent,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    pplx::task<std::shared_ptr<BTFeatureSpecsResponse_664>> getFeatureSpecs(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Get Feature List
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="featureId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTAssemblyFeatureListResponse_1174>> getFeatures(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<std::vector<utility::string_t>> featureId,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="skipPerspective"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTNamedViewsInfo>> getNamedViews(
        utility::string_t did,
        utility::string_t eid,
        boost::optional<bool> skipPerspective,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get or Create Bill of Materials Element
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    pplx::task<std::shared_ptr<BTDocumentElementInfo>> getOrCreateBillOfMaterialsElement(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Get Translation Formats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="checkContent"> (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<BTModelFormatInfo>>> getTranslatorFormats(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        boost::optional<bool> checkContent
    ) const;
    /// <summary>
    /// Create and transform assembly instances
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wid"></param>
    /// <param name="bTAssemblyTransformedInstancesDefinitionParams"></param>
    pplx::task<std::shared_ptr<BTAssemblyInsertTransformedInstancesResponse>> insertTransformedInstances(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wid,
        std::shared_ptr<BTAssemblyTransformedInstancesDefinitionParams> bTAssemblyTransformedInstancesDefinitionParams
    ) const;
    /// <summary>
    /// Transform assembly occurrences.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wid"></param>
    /// <param name="bTAssemblyTransformDefinitionParams"></param>
    pplx::task<void> transformOccurrences(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wid,
        std::shared_ptr<BTAssemblyTransformDefinitionParams> bTAssemblyTransformDefinitionParams
    ) const;
    /// <summary>
    /// Create Assembly translation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="bTTranslateFormatParams"></param>
    pplx::task<std::shared_ptr<BTTranslationRequestInfo>> translateFormat(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        std::shared_ptr<BTTranslateFormatParams> bTTranslateFormatParams
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="fid"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTFeatureDefinitionResponse_1617>> updateFeature(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t fid,
        boost::optional<utility::string_t> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AssembliesApi_H_ */

