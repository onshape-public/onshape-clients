/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BlobElementsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_BlobElementsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_BlobElementsApi_H_


#include "../ApiClient.h"

#include "BTDocumentElementProcessingInfo.h"
#include "BTTranslateFormatParams.h"
#include "BTTranslationRequestInfo.h"
#include "BTUpdateMeshUnitsParams.h"
#include "FormDataBodyPart.h"
#include "FormDataContentDisposition.h"
#include "HttpContent.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  BlobElementsApi 
{
public:

    explicit BlobElementsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~BlobElementsApi();

    /// <summary>
    /// Create Translation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wv"></param>
    /// <param name="wvid"></param>
    /// <param name="eid"></param>
    /// <param name="bTTranslateFormatParams"></param>
    pplx::task<std::shared_ptr<BTTranslationRequestInfo>> createBlobTranslation(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        std::shared_ptr<BTTranslateFormatParams> bTTranslateFormatParams
    ) const;
    /// <summary>
    /// Download File From Blob Element.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="eid"></param>
    /// <param name="contentDisposition"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ifNoneMatch"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> downloadFileWorkspace(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        boost::optional<utility::string_t> contentDisposition,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Update Mesh Units.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wid"></param>
    /// <param name="bTUpdateMeshUnitsParams"></param>
    pplx::task<std::shared_ptr<BTDocumentElementProcessingInfo>> updateUnits(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wid,
        std::shared_ptr<BTUpdateMeshUnitsParams> bTUpdateMeshUnitsParams
    ) const;
    /// <summary>
    /// Upload file to new element.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wid"></param>
    /// <param name="allowFaultyParts"> (optional, default to false)</param>
    /// <param name="createComposite"> (optional, default to false)</param>
    /// <param name="createDrawingIfPossible"> (optional, default to false)</param>
    /// <param name="encodedFilename"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extractAssemblyHierarchy"> (optional, default to false)</param>
    /// <param name="file"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fileBodyWithDetails"> (optional, default to new FormDataBodyPart())</param>
    /// <param name="fileContentLength"> (optional, default to 0L)</param>
    /// <param name="fileDetail"> (optional, default to new FormDataContentDisposition())</param>
    /// <param name="flattenAssemblies"> (optional, default to false)</param>
    /// <param name="formatName"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="isyAxisIsUp"> (optional, default to false)</param>
    /// <param name="joinAdjacentSurfaces"> (optional, default to false)</param>
    /// <param name="locationElementId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="locationGroupId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="locationPosition"> (optional, default to 0)</param>
    /// <param name="notifyUser"> (optional, default to false)</param>
    /// <param name="ownerId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="ownerType"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="projectId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="r_public"> (optional, default to false)</param>
    /// <param name="splitAssembliesIntoMultipleDocuments"> (optional, default to false)</param>
    /// <param name="storeInDocument"> (optional, default to false)</param>
    /// <param name="translate"> (optional, default to false)</param>
    /// <param name="unit"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="uploadId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="versionString"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTDocumentElementProcessingInfo>> uploadFileCreateElement(
        utility::string_t did,
        utility::string_t wid,
        boost::optional<bool> allowFaultyParts,
        boost::optional<bool> createComposite,
        boost::optional<bool> createDrawingIfPossible,
        boost::optional<utility::string_t> encodedFilename,
        boost::optional<bool> extractAssemblyHierarchy,
        boost::optional<std::shared_ptr<HttpContent>> file,
        boost::optional<std::shared_ptr<FormDataBodyPart>> fileBodyWithDetails,
        boost::optional<int64_t> fileContentLength,
        boost::optional<std::shared_ptr<FormDataContentDisposition>> fileDetail,
        boost::optional<bool> flattenAssemblies,
        boost::optional<utility::string_t> formatName,
        boost::optional<bool> isyAxisIsUp,
        boost::optional<bool> joinAdjacentSurfaces,
        boost::optional<utility::string_t> locationElementId,
        boost::optional<utility::string_t> locationGroupId,
        boost::optional<int32_t> locationPosition,
        boost::optional<bool> notifyUser,
        boost::optional<utility::string_t> ownerId,
        boost::optional<utility::string_t> ownerType,
        boost::optional<utility::string_t> parentId,
        boost::optional<utility::string_t> projectId,
        boost::optional<bool> r_public,
        boost::optional<bool> splitAssembliesIntoMultipleDocuments,
        boost::optional<bool> storeInDocument,
        boost::optional<bool> translate,
        boost::optional<utility::string_t> unit,
        boost::optional<utility::string_t> uploadId,
        boost::optional<utility::string_t> versionString
    ) const;
    /// <summary>
    /// Update Blob Element.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="eid"></param>
    /// <param name="wid"></param>
    /// <param name="parentChangeId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTDocumentElementProcessingInfo>> uploadFileUpdateElement(
        utility::string_t did,
        utility::string_t eid,
        utility::string_t wid,
        boost::optional<utility::string_t> parentChangeId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_BlobElementsApi_H_ */

