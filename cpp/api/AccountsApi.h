/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AccountsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AccountsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AccountsApi_H_


#include "../ApiClient.h"

#include "BTListResponseBTPurchaseInfo.h"
#include "BTPurchaseInfo.h"
#include "BTPurchaseUserParams.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AccountsApi 
{
public:

    explicit AccountsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AccountsApi();

    /// <summary>
    /// Cancel Recurring Subscription
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="aid"></param>
    /// <param name="pid"></param>
    /// <param name="cancelImmediately"> (optional, default to false)</param>
    pplx::task<void> cancelPurchaseNew(
        utility::string_t aid,
        utility::string_t pid,
        boost::optional<bool> cancelImmediately
    ) const;
    /// <summary>
    /// Mark Purchase Consumed For User
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pid"></param>
    /// <param name="bTPurchaseUserParams"> (optional)</param>
    pplx::task<std::shared_ptr<BTPurchaseInfo>> consumePurchase(
        utility::string_t pid,
        boost::optional<std::shared_ptr<BTPurchaseUserParams>> bTPurchaseUserParams
    ) const;
    /// <summary>
    /// Get Plan Purchases
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="planId"></param>
    /// <param name="offset"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<BTListResponseBTPurchaseInfo>> getPlanPurchases(
        utility::string_t planId,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Get User&#39;s Appstore Purchases.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="all"> (optional, default to false)</param>
    /// <param name="ownPurchaseOnly"> (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<BTPurchaseInfo>>> getPurchases(
        boost::optional<bool> all,
        boost::optional<bool> ownPurchaseOnly
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AccountsApi_H_ */

