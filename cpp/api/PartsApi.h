/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PartsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PartsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PartsApi_H_


#include "../ApiClient.h"

#include "BTBoundingBoxInfo.h"
#include "BTExportModelBodiesResponse_734.h"
#include "BTExportTessellatedEdgesResponse_327.h"
#include "BTExportTessellatedFacesResponse_898.h"
#include "BTMassPropertiesBulkInfo.h"
#include "BTPartMetadataInfo.h"
#include "BTShadedViewsInfo.h"
#include "BTTableResponse_1546.h"
#include "BTWorkspacePartParams.h"
#include "HttpContent.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  PartsApi 
{
public:

    explicit PartsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PartsApi();

    /// <summary>
    /// Export Part to Parasolid.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="version"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> exportPS(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<utility::string_t> version,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get Sheet Metal Bend Table.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTTableResponse_1546>> getBendTable(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTExportModelBodiesResponse_734>> getBodyDetails(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="includeHidden"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTBoundingBoxInfo>> getBoundingBoxes(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<bool> includeHidden,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Tessellated Edges
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="angleTolerance"> (optional, default to 0.0)</param>
    /// <param name="chordTolerance"> (optional, default to 0.0)</param>
    /// <param name="edgeId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTExportTessellatedEdgesResponse_327>> getEdges(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<std::vector<utility::string_t>> edgeId,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Get Tessellated Faces
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="angleTolerance"> (optional, default to 0.0)</param>
    /// <param name="chordTolerance"> (optional, default to 0.0)</param>
    /// <param name="maxFacetWidth"> (optional, default to 0.0)</param>
    /// <param name="outputVertexNormals"> (optional, default to false)</param>
    /// <param name="outputFacetNormals"> (optional, default to false)</param>
    /// <param name="outputTextureCoordinates"> (optional, default to false)</param>
    /// <param name="outputFaceAppearances"> (optional, default to false)</param>
    /// <param name="outputIndexTable"> (optional, default to false)</param>
    /// <param name="faceId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="outputErrorFaces"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTExportTessellatedFacesResponse_898>> getFaces1(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<double> maxFacetWidth,
        boost::optional<bool> outputVertexNormals,
        boost::optional<bool> outputFacetNormals,
        boost::optional<bool> outputTextureCoordinates,
        boost::optional<bool> outputFaceAppearances,
        boost::optional<bool> outputIndexTable,
        boost::optional<std::vector<utility::string_t>> faceId,
        boost::optional<utility::string_t> configuration,
        boost::optional<bool> outputErrorFaces,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTMassPropertiesBulkInfo>> getMassProperties(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="inferMetadataOwner"> (optional, default to false)</param>
    /// <param name="includePropertyDefaults"> (optional, default to false)</param>
    /// <param name="friendlyUserIds"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTPartMetadataInfo>> getPartMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<bool> inferMetadataOwner,
        boost::optional<bool> includePropertyDefaults,
        boost::optional<bool> friendlyUserIds,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get list of parts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="elementId">Element ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withThumbnails">Whether or not to include thumbnails (not supported for microversion) (optional, default to false)</param>
    /// <param name="includePropertyDefaults">If true, include metadata schema property defaults in response (optional, default to false)</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<BTPartMetadataInfo>>> getPartsWMV(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        boost::optional<utility::string_t> elementId,
        boost::optional<bool> withThumbnails,
        boost::optional<bool> includePropertyDefaults,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> configuration
    ) const;
    /// <summary>
    /// Get parts from an element.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="withThumbnails">Whether or not to include thumbnails (not supported for microversion) (optional, default to false)</param>
    /// <param name="includePropertyDefaults">If true, include metadata schema property defaults in response (optional, default to false)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<BTPartMetadataInfo>>> getPartsWMVE(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<bool> withThumbnails,
        boost::optional<bool> includePropertyDefaults,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="viewMatrix"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="outputHeight"> (optional, default to 0)</param>
    /// <param name="outputWidth"> (optional, default to 0)</param>
    /// <param name="pixelSize"> (optional, default to 0.0)</param>
    /// <param name="edges"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="useAntiAliasing"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTShadedViewsInfo>> getShadedViews1(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<utility::string_t> viewMatrix,
        boost::optional<int32_t> outputHeight,
        boost::optional<int32_t> outputWidth,
        boost::optional<double> pixelSize,
        boost::optional<utility::string_t> edges,
        boost::optional<bool> useAntiAliasing,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="eid"></param>
    /// <param name="otype"></param>
    /// <param name="oid"></param>
    /// <param name="partid"></param>
    /// <param name="includePropertyDefaults"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTPartMetadataInfo>> getStandardContentPartMetadata(
        utility::string_t did,
        utility::string_t vid,
        utility::string_t eid,
        utility::string_t otype,
        utility::string_t oid,
        utility::string_t partid,
        boost::optional<bool> includePropertyDefaults,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="partid"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTPartMetadataInfo>> updatePartMetadata(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        utility::string_t partid,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="vid"></param>
    /// <param name="eid"></param>
    /// <param name="otype"></param>
    /// <param name="oid"></param>
    /// <param name="partid"></param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includePropertyDefaults"> (optional, default to false)</param>
    /// <param name="bTWorkspacePartParams"> (optional)</param>
    pplx::task<std::shared_ptr<BTPartMetadataInfo>> updateStandardContentPartMetadata(
        utility::string_t did,
        utility::string_t vid,
        utility::string_t eid,
        utility::string_t otype,
        utility::string_t oid,
        utility::string_t partid,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> includePropertyDefaults,
        boost::optional<std::shared_ptr<BTWorkspacePartParams>> bTWorkspacePartParams
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PartsApi_H_ */

