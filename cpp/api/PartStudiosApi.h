/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PartStudiosApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_PartStudiosApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_PartStudiosApi_H_


#include "../ApiClient.h"

#include "BTBoundingBoxInfo.h"
#include "BTConfigurationResponse_2019.h"
#include "BTDocumentElementInfo.h"
#include "BTExportModelBodiesResponse_734.h"
#include "BTExportTessellatedEdgesResponse_327.h"
#include "BTExportTessellatedFacesResponse_898.h"
#include "BTFeatureApiBase_1430.h"
#include "BTFeatureDefinitionCall_1406.h"
#include "BTFeatureDefinitionResponse_1617.h"
#include "BTFeatureListResponse_2457.h"
#include "BTFeatureScriptEvalCall_2377.h"
#include "BTFeatureScriptEvalResponse_1859.h"
#include "BTFeatureSpecsResponse_664.h"
#include "BTIdTranslationInfo.h"
#include "BTIdTranslationParams.h"
#include "BTMassPropertiesBulkInfo.h"
#include "BTModelElementParams.h"
#include "BTNamedViewsInfo.h"
#include "BTRootDiffInfo.h"
#include "BTSetFeatureRollbackResponse_1042.h"
#include "BTShadedViewsInfo.h"
#include "BTTranslateFormatParams.h"
#include "BTTranslationRequestInfo.h"
#include "BTUpdateFeaturesResponse_1333.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  PartStudiosApi 
{
public:

    explicit PartStudiosApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PartStudiosApi();

    /// <summary>
    /// Add Feature
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="bTFeatureDefinitionCall1406">feature The serialized feature definition (optional)</param>
    pplx::task<std::shared_ptr<BTFeatureDefinitionResponse_1617>> addPartStudioFeature(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<std::shared_ptr<BTFeatureDefinitionCall_1406>> bTFeatureDefinitionCall1406
    ) const;
    /// <summary>
    /// Compare Part Studios
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="workspaceId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="versionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="microversionId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sourceConfiguration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="targetConfiguration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTRootDiffInfo>> comparePartStudios(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> workspaceId,
        boost::optional<utility::string_t> versionId,
        boost::optional<utility::string_t> microversionId,
        boost::optional<utility::string_t> sourceConfiguration,
        boost::optional<utility::string_t> targetConfiguration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Create Part Studio
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wid">Workspace ID.</param>
    /// <param name="bTModelElementParams"></param>
    pplx::task<std::shared_ptr<BTDocumentElementInfo>> createPartStudio(
        utility::string_t did,
        utility::string_t wid,
        std::shared_ptr<BTModelElementParams> bTModelElementParams
    ) const;
    /// <summary>
    /// Create Part Studio translation
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wv">One of w or v corresponding to whether a workspace or version was specified.</param>
    /// <param name="wvid">Workspace (w) or Version (v) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="bTTranslateFormatParams"></param>
    pplx::task<std::shared_ptr<BTTranslationRequestInfo>> createPartStudioTranslation(
        utility::string_t did,
        utility::string_t wv,
        utility::string_t wvid,
        utility::string_t eid,
        std::shared_ptr<BTTranslateFormatParams> bTTranslateFormatParams
    ) const;
    /// <summary>
    /// Delete Feature
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wid">Workspace ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="fid">The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure</param>
    pplx::task<std::shared_ptr<BTFeatureApiBase_1430>> deletePartStudioFeature(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t fid
    ) const;
    /// <summary>
    /// Evaluate FeatureScript
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="bTFeatureScriptEvalCall2377"> (optional)</param>
    pplx::task<std::shared_ptr<BTFeatureScriptEvalResponse_1859>> evalFeatureScript(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> configuration,
        boost::optional<std::shared_ptr<BTFeatureScriptEvalCall_2377>> bTFeatureScriptEvalCall2377
    ) const;
    /// <summary>
    /// Export Part Studio to Parasolid
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="partIds">IDs of the parts to retrieve. Repeat query param to add more than one (i.e. partId&#x3D;JHK&amp;partId&#x3D;JHD). May not be combined with other ID filters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="version">Parasolid version (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeExportIds">Whether topolgy ids should be exported as parasolid attributes (optional, default to false)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> exportPS1(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> partIds,
        boost::optional<utility::string_t> version,
        boost::optional<bool> includeExportIds,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Export Part Studio to STL
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="partIds">IDs of the parts to retrieve. Repeat query param to add more than one (i.e. partId&#x3D;JHK&amp;partId&#x3D;JHD). May not be combined with other ID filters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="mode">Type of file: text, binary (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="grouping">Whether parts should be exported as a group or individually in a .zip file (optional, default to false)</param>
    /// <param name="scale">Scale for measurements. (optional, default to 0.0)</param>
    /// <param name="units">Name of base unit (meter, centimeter, millimeter, inch, foot, or yard) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="angleTolerance">Angle tolerance (in radians). This specifies the limit on the sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints. The specified value must be less than PI/2. This parameter currently has a default value chosen based on the complexity of the parts being tessellated. (optional, default to 0.0)</param>
    /// <param name="chordTolerance">Chord tolerance (in meters). This specifies the limit on the maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a default value chosen based on the size and complexity of the parts being tessellated. (optional, default to 0.0)</param>
    /// <param name="maxFacetWidth">Max facet width. This specifies the limit on the size of any side of a tessellation facet. (optional, default to 0.0)</param>
    /// <param name="minFacetWidth">Max facet width. This specifies the limit on the size of any side of a tessellation facet. (optional, default to 0.0)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> exportStl1(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> partIds,
        boost::optional<utility::string_t> mode,
        boost::optional<bool> grouping,
        boost::optional<double> scale,
        boost::optional<utility::string_t> units,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<double> maxFacetWidth,
        boost::optional<double> minFacetWidth,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Array of body information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rollbackBarIndex"> (optional, default to 0)</param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTExportModelBodiesResponse_734>> getPartStudioBodyDetails(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<int32_t> rollbackBarIndex,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Mass properties of parts or a PartStudio.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="includeHidden">Whether or not to include bounding boxes for hidden parts. (optional, default to false)</param>
    /// <param name="includeWireBodies">Whether to include wire bodies in the bounding box. (optional, default to false)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTBoundingBoxInfo>> getPartStudioBoundingBoxes(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<bool> includeHidden,
        boost::optional<bool> includeWireBodies,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    pplx::task<void> getPartStudioConfiguration(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Get Feature Specs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    pplx::task<std::shared_ptr<BTFeatureSpecsResponse_664>> getPartStudioFeatureSpecs(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid
    ) const;
    /// <summary>
    /// Get Feature List
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="featureId">ID of a feature; repeat query param to add more than one (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="noSketchGeometry">Whether or not to output simple sketch info without geometry (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTFeatureListResponse_2457>> getPartStudioFeatures(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<std::vector<utility::string_t>> featureId,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<bool> noSketchGeometry
    ) const;
    /// <summary>
    /// Mass properties of parts or a PartStudio.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="partId">IDs of the parts to retrieve. Repeat query param to add more than one (i.e. partId&#x3D;JHK&amp;partId&#x3D;JHD). May not be combined with other ID filters (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="massAsGroup">If true, specified parts will be evaluated as a single object instead of individually (optional, default to false)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTMassPropertiesBulkInfo>> getPartStudioMassProperties(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<std::vector<utility::string_t>> partId,
        boost::optional<bool> massAsGroup,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get Named Views
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="skipPerspective">Whether views with a perspective projection should be omitted. (optional, default to false)</param>
    /// <param name="includeSectionCutViews"> (optional, default to false)</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTNamedViewsInfo>> getPartStudioNamedViews(
        utility::string_t did,
        utility::string_t eid,
        boost::optional<bool> skipPerspective,
        boost::optional<bool> includeSectionCutViews,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Get Shaded Views
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="viewMatrix">12-number view matrix (comma-separated), or one of the following named views: top, bottom, front, back, left, right The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself. The matrix&#39;s first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters). The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up. For example, the identity matrix viewMatrix&#x3D;1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix&#x3D;0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view. The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="outputHeight">Output image height (in pixels) (optional, default to 0)</param>
    /// <param name="outputWidth">Output image width (in pixels) (optional, default to 0)</param>
    /// <param name="pixelSize">Height and width represented by each pixel (in meters). If the value is 0, the display will be sized to fit the output image dimensions. (optional, default to 0.0)</param>
    /// <param name="edges">The treatment to be applied to edges in the display. Options are show: show visible edges, hide: hide visible edges. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showAllParts">Whether or not all parts should be shown in the element, regardless of user setting. If false, the visibility setting made by the user will be reflected in the image. If true, all parts will be shown. (optional, default to false)</param>
    /// <param name="includeSurfaces">Whether or not surfaces should be shown in the element. It is applicable only when showAllParts is true. If false, surfaces will be excluded. If true, all surfaces will be shown. (optional, default to false)</param>
    /// <param name="useAntiAliasing">If true, an anti-aliasing factor will be used to smooth model boundaries in the final image result. If false, the image will be rasterized at the given resolution. Setting to true can have negative performance implications with respect to rendering time and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server may not be able to fulfill the request. (optional, default to false)</param>
    /// <param name="configuration">Configuration string. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId">Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTShadedViewsInfo>> getPartStudioShadedViews(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> viewMatrix,
        boost::optional<int32_t> outputHeight,
        boost::optional<int32_t> outputWidth,
        boost::optional<double> pixelSize,
        boost::optional<utility::string_t> edges,
        boost::optional<bool> showAllParts,
        boost::optional<bool> includeSurfaces,
        boost::optional<bool> useAntiAliasing,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Tesselated edges from a PartStudio.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="angleTolerance"> (optional, default to 0.0)</param>
    /// <param name="chordTolerance"> (optional, default to 0.0)</param>
    /// <param name="partId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="edgeId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTExportTessellatedEdgesResponse_327>> getPartStudioTessellatedEdges(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<std::vector<utility::string_t>> partId,
        boost::optional<std::vector<utility::string_t>> edgeId,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId
    ) const;
    /// <summary>
    /// Tesselated faces of the parts in the Part Studio.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="angleTolerance"> (optional, default to 0.0)</param>
    /// <param name="chordTolerance"> (optional, default to 0.0)</param>
    /// <param name="maxFacetWidth"> (optional, default to 0.0)</param>
    /// <param name="outputVertexNormals"> (optional, default to false)</param>
    /// <param name="outputFacetNormals"> (optional, default to false)</param>
    /// <param name="outputTextureCoordinates"> (optional, default to false)</param>
    /// <param name="outputFaceAppearances"> (optional, default to false)</param>
    /// <param name="outputIndexTable"> (optional, default to false)</param>
    /// <param name="partId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="faceId"> (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="outputErrorFaces"> (optional, default to false)</param>
    /// <param name="configuration"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="linkDocumentId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTExportTessellatedFacesResponse_898>> getPartStudioTessellatedFaces(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<double> angleTolerance,
        boost::optional<double> chordTolerance,
        boost::optional<double> maxFacetWidth,
        boost::optional<bool> outputVertexNormals,
        boost::optional<bool> outputFacetNormals,
        boost::optional<bool> outputTextureCoordinates,
        boost::optional<bool> outputFaceAppearances,
        boost::optional<bool> outputIndexTable,
        boost::optional<std::vector<utility::string_t>> partId,
        boost::optional<std::vector<utility::string_t>> faceId,
        boost::optional<bool> outputErrorFaces,
        boost::optional<utility::string_t> configuration,
        boost::optional<utility::string_t> linkDocumentId,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Id Translations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wvm">One of w or v or m corresponding to whether a workspace or version or microversion was entered.</param>
    /// <param name="wvmid">Workspace (w), Version (v) or Microversion (m) ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="bTIdTranslationParams"></param>
    pplx::task<std::shared_ptr<BTIdTranslationInfo>> translateIds(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        std::shared_ptr<BTIdTranslationParams> bTIdTranslationParams
    ) const;
    /// <summary>
    /// Update Features
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wid">Workspace ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="body">feature The serialized feature definition (optional)</param>
    pplx::task<std::shared_ptr<BTUpdateFeaturesResponse_1333>> updateFeatures(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Update Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did"></param>
    /// <param name="wvm"></param>
    /// <param name="wvmid"></param>
    /// <param name="eid"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<BTConfigurationResponse_2019>> updatePartStudioConfiguration(
        utility::string_t did,
        utility::string_t wvm,
        utility::string_t wvmid,
        utility::string_t eid,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Update Feature
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wid">Workspace ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="fid">The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure</param>
    /// <param name="body">feature The serialized feature definition (optional)</param>
    pplx::task<std::shared_ptr<BTFeatureDefinitionResponse_1617>> updatePartStudioFeature(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        utility::string_t fid,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// Update Feature Rollback
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="did">Document ID.</param>
    /// <param name="wid">Workspace ID.</param>
    /// <param name="eid">Element ID.</param>
    /// <param name="body">The index at which the rollback index should be placed. Features  with entry index (0-based) higher than or equal to the value are rolled back. Value of -1 is treated  as an alias for \&quot;end of feature list\&quot;. Otherwise the value must be in the range 0 to the number of  entries in the feature list (optional)</param>
    pplx::task<std::shared_ptr<BTSetFeatureRollbackResponse_1042>> updateRollback(
        utility::string_t did,
        utility::string_t wid,
        utility::string_t eid,
        boost::optional<utility::string_t> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_PartStudiosApi_H_ */

