/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RevisionsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_RevisionsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_RevisionsApi_H_


#include "../ApiClient.h"

#include "BTListResponseBTRevisionInfo.h"
#include "BTRevisionInfo.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  RevisionsApi 
{
public:

    explicit RevisionsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~RevisionsApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cid"></param>
    /// <param name="elementType"> (optional, default to 0)</param>
    /// <param name="limit"> (optional, default to 0)</param>
    /// <param name="offset"> (optional, default to 0)</param>
    /// <param name="latestOnly"> (optional, default to false)</param>
    /// <param name="after"> (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<BTListResponseBTRevisionInfo>> enumerateRevisions(
        utility::string_t cid,
        boost::optional<int32_t> elementType,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> offset,
        boost::optional<bool> latestOnly,
        boost::optional<int64_t> after
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cd"></param>
    /// <param name="cdid"></param>
    /// <param name="pnum"></param>
    /// <param name="et"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<BTRevisionInfo>> getLatestInDocumentOrCompany(
        utility::string_t cd,
        utility::string_t cdid,
        utility::string_t pnum,
        boost::optional<utility::string_t> et
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cid"></param>
    /// <param name="pnum"></param>
    /// <param name="elementType"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fillApprovers"> (optional, default to false)</param>
    /// <param name="fillExportPermission"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<BTListResponseBTRevisionInfo>> getRevisionHistoryInCompany(
        utility::string_t cid,
        utility::string_t pnum,
        boost::optional<utility::string_t> elementType,
        boost::optional<bool> fillApprovers,
        boost::optional<bool> fillExportPermission
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_RevisionsApi_H_ */

