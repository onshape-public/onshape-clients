/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPTopLevelImport_285.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelImport_285_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelImport_285_H_


#include "BTPTopLevelNode_286.h"
#include "BTPModuleId_235.h"
#include "BTPTopLevelImport_285_allOf.h"
#include <cpprest/details/basic_types.h>
#include "BTPIdentifier_8.h"
#include "BTPSpace_10.h"
#include <vector>
#include "BTPAnnotation_231.h"
#include "BTPArgumentDeclaration_232.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPTopLevelImport_285
    : public BTPTopLevelNode_286
{
public:
    BTPTopLevelImport_285();
    virtual ~BTPTopLevelImport_285();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPTopLevelImport_285 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportMicroversion() const;
    bool importMicroversionIsSet() const;
    void unsetImportMicroversion();

    void setImportMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNamespaceString() const;
    bool namespaceStringIsSet() const;
    void unsetNamespaceString();

    void setNamespaceString(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCombinedNamespacePathAndVersion() const;
    bool combinedNamespacePathAndVersionIsSet() const;
    void unsetCombinedNamespacePathAndVersion();

    void setCombinedNamespacePathAndVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPModuleId_235> getModuleId() const;
    bool moduleIdIsSet() const;
    void unsetModuleId();

    void setModuleId(const std::shared_ptr<BTPModuleId_235>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeImport() const;
    bool spaceBeforeImportIsSet() const;
    void unsetSpaceBeforeImport();

    void setSpaceBeforeImport(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPIdentifier_8>>& getRNamespace();
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const std::vector<std::shared_ptr<BTPIdentifier_8>>& value);


protected:
    utility::string_t m_ImportMicroversion;
    bool m_ImportMicroversionIsSet;
    utility::string_t m_NamespaceString;
    bool m_NamespaceStringIsSet;
    utility::string_t m_CombinedNamespacePathAndVersion;
    bool m_CombinedNamespacePathAndVersionIsSet;
    std::shared_ptr<BTPModuleId_235> m_ModuleId;
    bool m_ModuleIdIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeImport;
    bool m_SpaceBeforeImportIsSet;
    std::vector<std::shared_ptr<BTPIdentifier_8>> m_r_namespace;
    bool m_r_namespaceIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelImport_285_H_ */
