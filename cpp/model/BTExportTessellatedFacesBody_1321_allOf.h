/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTExportTessellatedFacesBody_1321_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesBody_1321_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesBody_1321_allOf_H_


#include "../ModelBase.h"

#include "BTExportTessellatedFacesFace_1192.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "BTGraphicsAppearance_1152.h"
#include "BTVector3d_389.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTExportTessellatedFacesBody_1321_allOf
    : public ModelBase
{
public:
    BTExportTessellatedFacesBody_1321_allOf();
    virtual ~BTExportTessellatedFacesBody_1321_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTExportTessellatedFacesBody_1321_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTExportTessellatedFacesFace_1192>>& getFaces();
    bool facesIsSet() const;
    void unsetFaces();

    void setFaces(const std::vector<std::shared_ptr<BTExportTessellatedFacesFace_1192>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBodyType() const;
    bool bodyTypeIsSet() const;
    void unsetBodyType();

    void setBodyType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTGraphicsAppearance_1152> getAppearance() const;
    bool appearanceIsSet() const;
    void unsetAppearance();

    void setAppearance(const std::shared_ptr<BTGraphicsAppearance_1152>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVector3d_389>>& getFacetPoints();
    bool facetPointsIsSet() const;
    void unsetFacetPoints();

    void setFacetPoints(const std::vector<std::shared_ptr<BTVector3d_389>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    std::vector<std::shared_ptr<BTExportTessellatedFacesFace_1192>> m_Faces;
    bool m_FacesIsSet;
    utility::string_t m_BodyType;
    bool m_BodyTypeIsSet;
    std::shared_ptr<BTGraphicsAppearance_1152> m_Appearance;
    bool m_AppearanceIsSet;
    std::vector<std::shared_ptr<BTVector3d_389>> m_FacetPoints;
    bool m_FacetPointsIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesBody_1321_allOf_H_ */
