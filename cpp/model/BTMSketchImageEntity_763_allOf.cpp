/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchImageEntity_763_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchImageEntity_763_allOf::BTMSketchImageEntity_763_allOf()
{
    m_OriginX = 0.0;
    m_OriginXIsSet = false;
    m_OriginY = 0.0;
    m_OriginYIsSet = false;
    m_XaxisX = 0.0;
    m_XaxisXIsSet = false;
    m_XaxisY = 0.0;
    m_XaxisYIsSet = false;
    m_AspectRatio = 0.0;
    m_AspectRatioIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMSketchImageEntity_763_allOf::~BTMSketchImageEntity_763_allOf()
{
}

void BTMSketchImageEntity_763_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchImageEntity_763_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OriginXIsSet)
    {
        val[utility::conversions::to_string_t("originX")] = ModelBase::toJson(m_OriginX);
    }
    if(m_OriginYIsSet)
    {
        val[utility::conversions::to_string_t("originY")] = ModelBase::toJson(m_OriginY);
    }
    if(m_XaxisXIsSet)
    {
        val[utility::conversions::to_string_t("xaxisX")] = ModelBase::toJson(m_XaxisX);
    }
    if(m_XaxisYIsSet)
    {
        val[utility::conversions::to_string_t("xaxisY")] = ModelBase::toJson(m_XaxisY);
    }
    if(m_AspectRatioIsSet)
    {
        val[utility::conversions::to_string_t("aspectRatio")] = ModelBase::toJson(m_AspectRatio);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMSketchImageEntity_763_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("originX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originX"));
        if(!fieldValue.is_null())
        {
            double refVal_originX;
            ok &= ModelBase::fromJson(fieldValue, refVal_originX);
            setOriginX(refVal_originX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originY"));
        if(!fieldValue.is_null())
        {
            double refVal_originY;
            ok &= ModelBase::fromJson(fieldValue, refVal_originY);
            setOriginY(refVal_originY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xaxisX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("xaxisX"));
        if(!fieldValue.is_null())
        {
            double refVal_xaxisX;
            ok &= ModelBase::fromJson(fieldValue, refVal_xaxisX);
            setXaxisX(refVal_xaxisX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xaxisY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("xaxisY"));
        if(!fieldValue.is_null())
        {
            double refVal_xaxisY;
            ok &= ModelBase::fromJson(fieldValue, refVal_xaxisY);
            setXaxisY(refVal_xaxisY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aspectRatio")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("aspectRatio"));
        if(!fieldValue.is_null())
        {
            double refVal_aspectRatio;
            ok &= ModelBase::fromJson(fieldValue, refVal_aspectRatio);
            setAspectRatio(refVal_aspectRatio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMSketchImageEntity_763_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_OriginXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originX"), m_OriginX));
    }
    if(m_OriginYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originY"), m_OriginY));
    }
    if(m_XaxisXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xaxisX"), m_XaxisX));
    }
    if(m_XaxisYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xaxisY"), m_XaxisY));
    }
    if(m_AspectRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aspectRatio"), m_AspectRatio));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMSketchImageEntity_763_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("originX")))
    {
        double refVal_originX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originX")), refVal_originX );
        setOriginX(refVal_originX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("originY")))
    {
        double refVal_originY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originY")), refVal_originY );
        setOriginY(refVal_originY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xaxisX")))
    {
        double refVal_xaxisX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xaxisX")), refVal_xaxisX );
        setXaxisX(refVal_xaxisX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xaxisY")))
    {
        double refVal_xaxisY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xaxisY")), refVal_xaxisY );
        setXaxisY(refVal_xaxisY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aspectRatio")))
    {
        double refVal_aspectRatio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("aspectRatio")), refVal_aspectRatio );
        setAspectRatio(refVal_aspectRatio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

double BTMSketchImageEntity_763_allOf::getOriginX() const
{
    return m_OriginX;
}

void BTMSketchImageEntity_763_allOf::setOriginX(double value)
{
    m_OriginX = value;
    m_OriginXIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::originXIsSet() const
{
    return m_OriginXIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetOriginX()
{
    m_OriginXIsSet = false;
}
double BTMSketchImageEntity_763_allOf::getOriginY() const
{
    return m_OriginY;
}

void BTMSketchImageEntity_763_allOf::setOriginY(double value)
{
    m_OriginY = value;
    m_OriginYIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::originYIsSet() const
{
    return m_OriginYIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetOriginY()
{
    m_OriginYIsSet = false;
}
double BTMSketchImageEntity_763_allOf::getXaxisX() const
{
    return m_XaxisX;
}

void BTMSketchImageEntity_763_allOf::setXaxisX(double value)
{
    m_XaxisX = value;
    m_XaxisXIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::xaxisXIsSet() const
{
    return m_XaxisXIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetXaxisX()
{
    m_XaxisXIsSet = false;
}
double BTMSketchImageEntity_763_allOf::getXaxisY() const
{
    return m_XaxisY;
}

void BTMSketchImageEntity_763_allOf::setXaxisY(double value)
{
    m_XaxisY = value;
    m_XaxisYIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::xaxisYIsSet() const
{
    return m_XaxisYIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetXaxisY()
{
    m_XaxisYIsSet = false;
}
double BTMSketchImageEntity_763_allOf::getAspectRatio() const
{
    return m_AspectRatio;
}

void BTMSketchImageEntity_763_allOf::setAspectRatio(double value)
{
    m_AspectRatio = value;
    m_AspectRatioIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::aspectRatioIsSet() const
{
    return m_AspectRatioIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetAspectRatio()
{
    m_AspectRatioIsSet = false;
}
utility::string_t BTMSketchImageEntity_763_allOf::getBtType() const
{
    return m_BtType;
}

void BTMSketchImageEntity_763_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchImageEntity_763_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchImageEntity_763_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


