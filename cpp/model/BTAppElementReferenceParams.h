/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTAppElementReferenceParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceParams_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTAppElementReferenceParams
    : public ModelBase
{
public:
    BTAppElementReferenceParams();
    virtual ~BTAppElementReferenceParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTAppElementReferenceParams members

    /// <summary>
    /// 
    /// </summary>
    bool isHasDocumentMicroversions() const;
    bool hasDocumentMicroversionsIsSet() const;
    void unsetHasDocumentMicroversions();

    void setHasDocumentMicroversions(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIdTag() const;
    bool idTagIsSet() const;
    void unsetIdTag();

    void setIdTag(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIdTagMicroversionId() const;
    bool idTagMicroversionIdIsSet() const;
    void unsetIdTagMicroversionId();

    void setIdTagMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSketchOnly() const;
    bool isSketchOnlyIsSet() const;
    void unsetIsSketchOnly();

    void setIsSketchOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentChangeId() const;
    bool parentChangeIdIsSet() const;
    void unsetParentChangeId();

    void setParentChangeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPartNumber();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isPureSketch() const;
    bool pureSketchIsSet() const;
    void unsetPureSketch();

    void setPureSketch(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getReferenceType() const;
    bool referenceTypeIsSet() const;
    void unsetReferenceType();

    void setReferenceType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isReturnError() const;
    bool returnErrorIsSet() const;
    void unsetReturnError();

    void setReturnError(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSketchIds();
    bool sketchIdsIsSet() const;
    void unsetSketchIds();

    void setSketchIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetConfiguration() const;
    bool targetConfigurationIsSet() const;
    void unsetTargetConfiguration();

    void setTargetConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetDocumentId() const;
    bool targetDocumentIdIsSet() const;
    void unsetTargetDocumentId();

    void setTargetDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetElementId() const;
    bool targetElementIdIsSet() const;
    void unsetTargetElementId();

    void setTargetElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetMicroversionId() const;
    bool targetMicroversionIdIsSet() const;
    void unsetTargetMicroversionId();

    void setTargetMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetVersionId() const;
    bool targetVersionIdIsSet() const;
    void unsetTargetVersionId();

    void setTargetVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrackNewVersions() const;
    bool trackNewVersionsIsSet() const;
    void unsetTrackNewVersions();

    void setTrackNewVersions(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionId() const;
    bool transactionIdIsSet() const;
    void unsetTransactionId();

    void setTransactionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUpdateSketchInfo() const;
    bool updateSketchInfoIsSet() const;
    void unsetUpdateSketchInfo();

    void setUpdateSketchInfo(bool value);


protected:
    bool m_HasDocumentMicroversions;
    bool m_HasDocumentMicroversionsIsSet;
    utility::string_t m_IdTag;
    bool m_IdTagIsSet;
    utility::string_t m_IdTagMicroversionId;
    bool m_IdTagMicroversionIdIsSet;
    bool m_IsSketchOnly;
    bool m_IsSketchOnlyIsSet;
    utility::string_t m_ParentChangeId;
    bool m_ParentChangeIdIsSet;
    utility::string_t m_PartNumber;
    bool m_PartNumberIsSet;
    bool m_PureSketch;
    bool m_PureSketchIsSet;
    int32_t m_ReferenceType;
    bool m_ReferenceTypeIsSet;
    bool m_ReturnError;
    bool m_ReturnErrorIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
    std::vector<utility::string_t> m_SketchIds;
    bool m_SketchIdsIsSet;
    utility::string_t m_TargetConfiguration;
    bool m_TargetConfigurationIsSet;
    utility::string_t m_TargetDocumentId;
    bool m_TargetDocumentIdIsSet;
    utility::string_t m_TargetElementId;
    bool m_TargetElementIdIsSet;
    utility::string_t m_TargetMicroversionId;
    bool m_TargetMicroversionIdIsSet;
    utility::string_t m_TargetVersionId;
    bool m_TargetVersionIdIsSet;
    bool m_TrackNewVersions;
    bool m_TrackNewVersionsIsSet;
    utility::string_t m_TransactionId;
    bool m_TransactionIdIsSet;
    bool m_UpdateSketchInfo;
    bool m_UpdateSketchInfoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceParams_H_ */
