/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDrawingParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDrawingParams::BTDrawingParams()
{
    m_Border = false;
    m_BorderIsSet = false;
    m_ComputeIntersection = false;
    m_ComputeIntersectionIsSet = false;
    m_DecimalSeparator = utility::conversions::to_string_t("");
    m_DecimalSeparatorIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentMicroversionId = utility::conversions::to_string_t("");
    m_DocumentMicroversionIdIsSet = false;
    m_DrawingName = utility::conversions::to_string_t("");
    m_DrawingNameIsSet = false;
    m_ElementConfiguration = utility::conversions::to_string_t("");
    m_ElementConfigurationIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementMicroversionId = utility::conversions::to_string_t("");
    m_ElementMicroversionIdIsSet = false;
    m_ExternalDocumentId = utility::conversions::to_string_t("");
    m_ExternalDocumentIdIsSet = false;
    m_ExternalDocumentVersionId = utility::conversions::to_string_t("");
    m_ExternalDocumentVersionIdIsSet = false;
    m_HiddenLines = utility::conversions::to_string_t("");
    m_HiddenLinesIsSet = false;
    m_IncludeSurfaces = false;
    m_IncludeSurfacesIsSet = false;
    m_IsFlattenedPart = false;
    m_IsFlattenedPartIsSet = false;
    m_IsSketchOnly = false;
    m_IsSketchOnlyIsSet = false;
    m_IsSurface = false;
    m_IsSurfaceIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_LocationIsSet = false;
    m_ModelType = utility::conversions::to_string_t("");
    m_ModelTypeIsSet = false;
    m_NumberHorizontalZones = 0;
    m_NumberHorizontalZonesIsSet = false;
    m_NumberVerticalZones = 0;
    m_NumberVerticalZonesIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_PartQuery = utility::conversions::to_string_t("");
    m_PartQueryIsSet = false;
    m_Projection = utility::conversions::to_string_t("");
    m_ProjectionIsSet = false;
    m_PureSketch = false;
    m_PureSketchIsSet = false;
    m_QualityOption = utility::conversions::to_string_t("");
    m_QualityOptionIsSet = false;
    m_ReferenceType = 0;
    m_ReferenceTypeIsSet = false;
    m_ReferenceTypeEnum = utility::conversions::to_string_t("");
    m_ReferenceTypeEnumIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_ShowCutGeomOnly = false;
    m_ShowCutGeomOnlyIsSet = false;
    m_SimplificationOption = utility::conversions::to_string_t("");
    m_SimplificationOptionIsSet = false;
    m_SimplificationThreshold = 0.0;
    m_SimplificationThresholdIsSet = false;
    m_Size = utility::conversions::to_string_t("");
    m_SizeIsSet = false;
    m_SketchIdsIsSet = false;
    m_Standard = utility::conversions::to_string_t("");
    m_StandardIsSet = false;
    m_StartZones = utility::conversions::to_string_t("");
    m_StartZonesIsSet = false;
    m_TemplateArgsIsSet = false;
    m_TemplateDocumentId = utility::conversions::to_string_t("");
    m_TemplateDocumentIdIsSet = false;
    m_TemplateElementId = utility::conversions::to_string_t("");
    m_TemplateElementIdIsSet = false;
    m_TemplateName = utility::conversions::to_string_t("");
    m_TemplateNameIsSet = false;
    m_TemplateVersionId = utility::conversions::to_string_t("");
    m_TemplateVersionIdIsSet = false;
    m_TemplateWorkspaceId = utility::conversions::to_string_t("");
    m_TemplateWorkspaceIdIsSet = false;
    m_Titleblock = false;
    m_TitleblockIsSet = false;
    m_Units = utility::conversions::to_string_t("");
    m_UnitsIsSet = false;
    m_Views = utility::conversions::to_string_t("");
    m_ViewsIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTDrawingParams::~BTDrawingParams()
{
}

void BTDrawingParams::validate()
{
    // TODO: implement validation
}

web::json::value BTDrawingParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BorderIsSet)
    {
        val[utility::conversions::to_string_t("border")] = ModelBase::toJson(m_Border);
    }
    if(m_ComputeIntersectionIsSet)
    {
        val[utility::conversions::to_string_t("computeIntersection")] = ModelBase::toJson(m_ComputeIntersection);
    }
    if(m_DecimalSeparatorIsSet)
    {
        val[utility::conversions::to_string_t("decimalSeparator")] = ModelBase::toJson(m_DecimalSeparator);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("documentMicroversionId")] = ModelBase::toJson(m_DocumentMicroversionId);
    }
    if(m_DrawingNameIsSet)
    {
        val[utility::conversions::to_string_t("drawingName")] = ModelBase::toJson(m_DrawingName);
    }
    if(m_ElementConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("elementConfiguration")] = ModelBase::toJson(m_ElementConfiguration);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("elementMicroversionId")] = ModelBase::toJson(m_ElementMicroversionId);
    }
    if(m_ExternalDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentId")] = ModelBase::toJson(m_ExternalDocumentId);
    }
    if(m_ExternalDocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentVersionId")] = ModelBase::toJson(m_ExternalDocumentVersionId);
    }
    if(m_HiddenLinesIsSet)
    {
        val[utility::conversions::to_string_t("hiddenLines")] = ModelBase::toJson(m_HiddenLines);
    }
    if(m_IncludeSurfacesIsSet)
    {
        val[utility::conversions::to_string_t("includeSurfaces")] = ModelBase::toJson(m_IncludeSurfaces);
    }
    if(m_IsFlattenedPartIsSet)
    {
        val[utility::conversions::to_string_t("isFlattenedPart")] = ModelBase::toJson(m_IsFlattenedPart);
    }
    if(m_IsSketchOnlyIsSet)
    {
        val[utility::conversions::to_string_t("isSketchOnly")] = ModelBase::toJson(m_IsSketchOnly);
    }
    if(m_IsSurfaceIsSet)
    {
        val[utility::conversions::to_string_t("isSurface")] = ModelBase::toJson(m_IsSurface);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t("language")] = ModelBase::toJson(m_Language);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }
    if(m_ModelTypeIsSet)
    {
        val[utility::conversions::to_string_t("modelType")] = ModelBase::toJson(m_ModelType);
    }
    if(m_NumberHorizontalZonesIsSet)
    {
        val[utility::conversions::to_string_t("numberHorizontalZones")] = ModelBase::toJson(m_NumberHorizontalZones);
    }
    if(m_NumberVerticalZonesIsSet)
    {
        val[utility::conversions::to_string_t("numberVerticalZones")] = ModelBase::toJson(m_NumberVerticalZones);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_PartQueryIsSet)
    {
        val[utility::conversions::to_string_t("partQuery")] = ModelBase::toJson(m_PartQuery);
    }
    if(m_ProjectionIsSet)
    {
        val[utility::conversions::to_string_t("projection")] = ModelBase::toJson(m_Projection);
    }
    if(m_PureSketchIsSet)
    {
        val[utility::conversions::to_string_t("pureSketch")] = ModelBase::toJson(m_PureSketch);
    }
    if(m_QualityOptionIsSet)
    {
        val[utility::conversions::to_string_t("qualityOption")] = ModelBase::toJson(m_QualityOption);
    }
    if(m_ReferenceTypeIsSet)
    {
        val[utility::conversions::to_string_t("referenceType")] = ModelBase::toJson(m_ReferenceType);
    }
    if(m_ReferenceTypeEnumIsSet)
    {
        val[utility::conversions::to_string_t("referenceTypeEnum")] = ModelBase::toJson(m_ReferenceTypeEnum);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_ShowCutGeomOnlyIsSet)
    {
        val[utility::conversions::to_string_t("showCutGeomOnly")] = ModelBase::toJson(m_ShowCutGeomOnly);
    }
    if(m_SimplificationOptionIsSet)
    {
        val[utility::conversions::to_string_t("simplificationOption")] = ModelBase::toJson(m_SimplificationOption);
    }
    if(m_SimplificationThresholdIsSet)
    {
        val[utility::conversions::to_string_t("simplificationThreshold")] = ModelBase::toJson(m_SimplificationThreshold);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_SketchIdsIsSet)
    {
        val[utility::conversions::to_string_t("sketchIds")] = ModelBase::toJson(m_SketchIds);
    }
    if(m_StandardIsSet)
    {
        val[utility::conversions::to_string_t("standard")] = ModelBase::toJson(m_Standard);
    }
    if(m_StartZonesIsSet)
    {
        val[utility::conversions::to_string_t("startZones")] = ModelBase::toJson(m_StartZones);
    }
    if(m_TemplateArgsIsSet)
    {
        val[utility::conversions::to_string_t("templateArgs")] = ModelBase::toJson(m_TemplateArgs);
    }
    if(m_TemplateDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("templateDocumentId")] = ModelBase::toJson(m_TemplateDocumentId);
    }
    if(m_TemplateElementIdIsSet)
    {
        val[utility::conversions::to_string_t("templateElementId")] = ModelBase::toJson(m_TemplateElementId);
    }
    if(m_TemplateNameIsSet)
    {
        val[utility::conversions::to_string_t("templateName")] = ModelBase::toJson(m_TemplateName);
    }
    if(m_TemplateVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("templateVersionId")] = ModelBase::toJson(m_TemplateVersionId);
    }
    if(m_TemplateWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("templateWorkspaceId")] = ModelBase::toJson(m_TemplateWorkspaceId);
    }
    if(m_TitleblockIsSet)
    {
        val[utility::conversions::to_string_t("titleblock")] = ModelBase::toJson(m_Titleblock);
    }
    if(m_UnitsIsSet)
    {
        val[utility::conversions::to_string_t("units")] = ModelBase::toJson(m_Units);
    }
    if(m_ViewsIsSet)
    {
        val[utility::conversions::to_string_t("views")] = ModelBase::toJson(m_Views);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTDrawingParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("border")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("border"));
        if(!fieldValue.is_null())
        {
            bool refVal_border;
            ok &= ModelBase::fromJson(fieldValue, refVal_border);
            setBorder(refVal_border);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("computeIntersection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("computeIntersection"));
        if(!fieldValue.is_null())
        {
            bool refVal_computeIntersection;
            ok &= ModelBase::fromJson(fieldValue, refVal_computeIntersection);
            setComputeIntersection(refVal_computeIntersection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("decimalSeparator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("decimalSeparator"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_decimalSeparator;
            ok &= ModelBase::fromJson(fieldValue, refVal_decimalSeparator);
            setDecimalSeparator(refVal_decimalSeparator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentMicroversionId);
            setDocumentMicroversionId(refVal_documentMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drawingName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drawingName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drawingName;
            ok &= ModelBase::fromJson(fieldValue, refVal_drawingName);
            setDrawingName(refVal_drawingName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementConfiguration);
            setElementConfiguration(refVal_elementConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementMicroversionId);
            setElementMicroversionId(refVal_elementMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_externalDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentId);
            setExternalDocumentId(refVal_externalDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalDocumentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_externalDocumentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentVersionId);
            setExternalDocumentVersionId(refVal_externalDocumentVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hiddenLines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hiddenLines"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hiddenLines;
            ok &= ModelBase::fromJson(fieldValue, refVal_hiddenLines);
            setHiddenLines(refVal_hiddenLines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeSurfaces")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeSurfaces"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeSurfaces;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeSurfaces);
            setIncludeSurfaces(refVal_includeSurfaces);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFlattenedPart")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFlattenedPart"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFlattenedPart;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFlattenedPart);
            setIsFlattenedPart(refVal_isFlattenedPart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSketchOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSketchOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSketchOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSketchOnly);
            setIsSketchOnly(refVal_isSketchOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSurface")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSurface"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSurface;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSurface);
            setIsSurface(refVal_isSurface);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("language")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("language"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_language);
            setLanguage(refVal_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("location"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTElementLocationParams> refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modelType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modelType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_modelType;
            ok &= ModelBase::fromJson(fieldValue, refVal_modelType);
            setModelType(refVal_modelType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numberHorizontalZones")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("numberHorizontalZones"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_numberHorizontalZones;
            ok &= ModelBase::fromJson(fieldValue, refVal_numberHorizontalZones);
            setNumberHorizontalZones(refVal_numberHorizontalZones);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numberVerticalZones")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("numberVerticalZones"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_numberVerticalZones;
            ok &= ModelBase::fromJson(fieldValue, refVal_numberVerticalZones);
            setNumberVerticalZones(refVal_numberVerticalZones);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_partQuery);
            setPartQuery(refVal_partQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projection"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projection;
            ok &= ModelBase::fromJson(fieldValue, refVal_projection);
            setProjection(refVal_projection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pureSketch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pureSketch"));
        if(!fieldValue.is_null())
        {
            bool refVal_pureSketch;
            ok &= ModelBase::fromJson(fieldValue, refVal_pureSketch);
            setPureSketch(refVal_pureSketch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qualityOption")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("qualityOption"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_qualityOption;
            ok &= ModelBase::fromJson(fieldValue, refVal_qualityOption);
            setQualityOption(refVal_qualityOption);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referenceType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_referenceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_referenceType);
            setReferenceType(refVal_referenceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceTypeEnum")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referenceTypeEnum"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_referenceTypeEnum;
            ok &= ModelBase::fromJson(fieldValue, refVal_referenceTypeEnum);
            setReferenceTypeEnum(refVal_referenceTypeEnum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showCutGeomOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("showCutGeomOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_showCutGeomOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_showCutGeomOnly);
            setShowCutGeomOnly(refVal_showCutGeomOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("simplificationOption")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("simplificationOption"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_simplificationOption;
            ok &= ModelBase::fromJson(fieldValue, refVal_simplificationOption);
            setSimplificationOption(refVal_simplificationOption);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("simplificationThreshold")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("simplificationThreshold"));
        if(!fieldValue.is_null())
        {
            double refVal_simplificationThreshold;
            ok &= ModelBase::fromJson(fieldValue, refVal_simplificationThreshold);
            setSimplificationThreshold(refVal_simplificationThreshold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("size"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sketchIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sketchIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sketchIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sketchIds);
            setSketchIds(refVal_sketchIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standard")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standard"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standard;
            ok &= ModelBase::fromJson(fieldValue, refVal_standard);
            setStandard(refVal_standard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startZones")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startZones"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_startZones;
            ok &= ModelBase::fromJson(fieldValue, refVal_startZones);
            setStartZones(refVal_startZones);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateArgs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateArgs"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_templateArgs;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateArgs);
            setTemplateArgs(refVal_templateArgs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateDocumentId);
            setTemplateDocumentId(refVal_templateDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateElementId);
            setTemplateElementId(refVal_templateElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateName;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateName);
            setTemplateName(refVal_templateName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateVersionId);
            setTemplateVersionId(refVal_templateVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateWorkspaceId);
            setTemplateWorkspaceId(refVal_templateWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("titleblock")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("titleblock"));
        if(!fieldValue.is_null())
        {
            bool refVal_titleblock;
            ok &= ModelBase::fromJson(fieldValue, refVal_titleblock);
            setTitleblock(refVal_titleblock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("units")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("units"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_units;
            ok &= ModelBase::fromJson(fieldValue, refVal_units);
            setUnits(refVal_units);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("views")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("views"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_views;
            ok &= ModelBase::fromJson(fieldValue, refVal_views);
            setViews(refVal_views);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTDrawingParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BorderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("border"), m_Border));
    }
    if(m_ComputeIntersectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("computeIntersection"), m_ComputeIntersection));
    }
    if(m_DecimalSeparatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("decimalSeparator"), m_DecimalSeparator));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentMicroversionId"), m_DocumentMicroversionId));
    }
    if(m_DrawingNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drawingName"), m_DrawingName));
    }
    if(m_ElementConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementConfiguration"), m_ElementConfiguration));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementMicroversionId"), m_ElementMicroversionId));
    }
    if(m_ExternalDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentId"), m_ExternalDocumentId));
    }
    if(m_ExternalDocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentVersionId"), m_ExternalDocumentVersionId));
    }
    if(m_HiddenLinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hiddenLines"), m_HiddenLines));
    }
    if(m_IncludeSurfacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeSurfaces"), m_IncludeSurfaces));
    }
    if(m_IsFlattenedPartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFlattenedPart"), m_IsFlattenedPart));
    }
    if(m_IsSketchOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSketchOnly"), m_IsSketchOnly));
    }
    if(m_IsSurfaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSurface"), m_IsSurface));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("language"), m_Language));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
    }
    if(m_ModelTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modelType"), m_ModelType));
    }
    if(m_NumberHorizontalZonesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberHorizontalZones"), m_NumberHorizontalZones));
    }
    if(m_NumberVerticalZonesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberVerticalZones"), m_NumberVerticalZones));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_PartQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partQuery"), m_PartQuery));
    }
    if(m_ProjectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projection"), m_Projection));
    }
    if(m_PureSketchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pureSketch"), m_PureSketch));
    }
    if(m_QualityOptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qualityOption"), m_QualityOption));
    }
    if(m_ReferenceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceType"), m_ReferenceType));
    }
    if(m_ReferenceTypeEnumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceTypeEnum"), m_ReferenceTypeEnum));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_ShowCutGeomOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showCutGeomOnly"), m_ShowCutGeomOnly));
    }
    if(m_SimplificationOptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simplificationOption"), m_SimplificationOption));
    }
    if(m_SimplificationThresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("simplificationThreshold"), m_SimplificationThreshold));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_SketchIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sketchIds"), m_SketchIds));
    }
    if(m_StandardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standard"), m_Standard));
    }
    if(m_StartZonesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startZones"), m_StartZones));
    }
    if(m_TemplateArgsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateArgs"), m_TemplateArgs));
    }
    if(m_TemplateDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateDocumentId"), m_TemplateDocumentId));
    }
    if(m_TemplateElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateElementId"), m_TemplateElementId));
    }
    if(m_TemplateNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateName"), m_TemplateName));
    }
    if(m_TemplateVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateVersionId"), m_TemplateVersionId));
    }
    if(m_TemplateWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateWorkspaceId"), m_TemplateWorkspaceId));
    }
    if(m_TitleblockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("titleblock"), m_Titleblock));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("units"), m_Units));
    }
    if(m_ViewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("views"), m_Views));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTDrawingParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("border")))
    {
        bool refVal_border;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("border")), refVal_border );
        setBorder(refVal_border);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("computeIntersection")))
    {
        bool refVal_computeIntersection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("computeIntersection")), refVal_computeIntersection );
        setComputeIntersection(refVal_computeIntersection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("decimalSeparator")))
    {
        utility::string_t refVal_decimalSeparator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("decimalSeparator")), refVal_decimalSeparator );
        setDecimalSeparator(refVal_decimalSeparator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentMicroversionId")))
    {
        utility::string_t refVal_documentMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentMicroversionId")), refVal_documentMicroversionId );
        setDocumentMicroversionId(refVal_documentMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drawingName")))
    {
        utility::string_t refVal_drawingName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drawingName")), refVal_drawingName );
        setDrawingName(refVal_drawingName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementConfiguration")))
    {
        utility::string_t refVal_elementConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementConfiguration")), refVal_elementConfiguration );
        setElementConfiguration(refVal_elementConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementMicroversionId")))
    {
        utility::string_t refVal_elementMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementMicroversionId")), refVal_elementMicroversionId );
        setElementMicroversionId(refVal_elementMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentId")))
    {
        utility::string_t refVal_externalDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentId")), refVal_externalDocumentId );
        setExternalDocumentId(refVal_externalDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentVersionId")))
    {
        utility::string_t refVal_externalDocumentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentVersionId")), refVal_externalDocumentVersionId );
        setExternalDocumentVersionId(refVal_externalDocumentVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hiddenLines")))
    {
        utility::string_t refVal_hiddenLines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hiddenLines")), refVal_hiddenLines );
        setHiddenLines(refVal_hiddenLines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeSurfaces")))
    {
        bool refVal_includeSurfaces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeSurfaces")), refVal_includeSurfaces );
        setIncludeSurfaces(refVal_includeSurfaces);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFlattenedPart")))
    {
        bool refVal_isFlattenedPart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFlattenedPart")), refVal_isFlattenedPart );
        setIsFlattenedPart(refVal_isFlattenedPart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSketchOnly")))
    {
        bool refVal_isSketchOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSketchOnly")), refVal_isSketchOnly );
        setIsSketchOnly(refVal_isSketchOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSurface")))
    {
        bool refVal_isSurface;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSurface")), refVal_isSurface );
        setIsSurface(refVal_isSurface);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("language")))
    {
        utility::string_t refVal_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("language")), refVal_language );
        setLanguage(refVal_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        std::shared_ptr<BTElementLocationParams> refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("location")), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modelType")))
    {
        utility::string_t refVal_modelType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modelType")), refVal_modelType );
        setModelType(refVal_modelType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberHorizontalZones")))
    {
        int32_t refVal_numberHorizontalZones;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberHorizontalZones")), refVal_numberHorizontalZones );
        setNumberHorizontalZones(refVal_numberHorizontalZones);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberVerticalZones")))
    {
        int32_t refVal_numberVerticalZones;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberVerticalZones")), refVal_numberVerticalZones );
        setNumberVerticalZones(refVal_numberVerticalZones);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partQuery")))
    {
        utility::string_t refVal_partQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partQuery")), refVal_partQuery );
        setPartQuery(refVal_partQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projection")))
    {
        utility::string_t refVal_projection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projection")), refVal_projection );
        setProjection(refVal_projection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pureSketch")))
    {
        bool refVal_pureSketch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pureSketch")), refVal_pureSketch );
        setPureSketch(refVal_pureSketch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qualityOption")))
    {
        utility::string_t refVal_qualityOption;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("qualityOption")), refVal_qualityOption );
        setQualityOption(refVal_qualityOption);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceType")))
    {
        int32_t refVal_referenceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceType")), refVal_referenceType );
        setReferenceType(refVal_referenceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceTypeEnum")))
    {
        utility::string_t refVal_referenceTypeEnum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceTypeEnum")), refVal_referenceTypeEnum );
        setReferenceTypeEnum(refVal_referenceTypeEnum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showCutGeomOnly")))
    {
        bool refVal_showCutGeomOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("showCutGeomOnly")), refVal_showCutGeomOnly );
        setShowCutGeomOnly(refVal_showCutGeomOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simplificationOption")))
    {
        utility::string_t refVal_simplificationOption;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("simplificationOption")), refVal_simplificationOption );
        setSimplificationOption(refVal_simplificationOption);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("simplificationThreshold")))
    {
        double refVal_simplificationThreshold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("simplificationThreshold")), refVal_simplificationThreshold );
        setSimplificationThreshold(refVal_simplificationThreshold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        utility::string_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("size")), refVal_size );
        setSize(refVal_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sketchIds")))
    {
        std::vector<utility::string_t> refVal_sketchIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sketchIds")), refVal_sketchIds );
        setSketchIds(refVal_sketchIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standard")))
    {
        utility::string_t refVal_standard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standard")), refVal_standard );
        setStandard(refVal_standard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startZones")))
    {
        utility::string_t refVal_startZones;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startZones")), refVal_startZones );
        setStartZones(refVal_startZones);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateArgs")))
    {
        std::vector<utility::string_t> refVal_templateArgs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateArgs")), refVal_templateArgs );
        setTemplateArgs(refVal_templateArgs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateDocumentId")))
    {
        utility::string_t refVal_templateDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateDocumentId")), refVal_templateDocumentId );
        setTemplateDocumentId(refVal_templateDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateElementId")))
    {
        utility::string_t refVal_templateElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateElementId")), refVal_templateElementId );
        setTemplateElementId(refVal_templateElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateName")))
    {
        utility::string_t refVal_templateName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateName")), refVal_templateName );
        setTemplateName(refVal_templateName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateVersionId")))
    {
        utility::string_t refVal_templateVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateVersionId")), refVal_templateVersionId );
        setTemplateVersionId(refVal_templateVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateWorkspaceId")))
    {
        utility::string_t refVal_templateWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateWorkspaceId")), refVal_templateWorkspaceId );
        setTemplateWorkspaceId(refVal_templateWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("titleblock")))
    {
        bool refVal_titleblock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("titleblock")), refVal_titleblock );
        setTitleblock(refVal_titleblock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("units")))
    {
        utility::string_t refVal_units;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("units")), refVal_units );
        setUnits(refVal_units);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("views")))
    {
        utility::string_t refVal_views;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("views")), refVal_views );
        setViews(refVal_views);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

bool BTDrawingParams::isBorder() const
{
    return m_Border;
}

void BTDrawingParams::setBorder(bool value)
{
    m_Border = value;
    m_BorderIsSet = true;
}

bool BTDrawingParams::borderIsSet() const
{
    return m_BorderIsSet;
}

void BTDrawingParams::unsetBorder()
{
    m_BorderIsSet = false;
}
bool BTDrawingParams::isComputeIntersection() const
{
    return m_ComputeIntersection;
}

void BTDrawingParams::setComputeIntersection(bool value)
{
    m_ComputeIntersection = value;
    m_ComputeIntersectionIsSet = true;
}

bool BTDrawingParams::computeIntersectionIsSet() const
{
    return m_ComputeIntersectionIsSet;
}

void BTDrawingParams::unsetComputeIntersection()
{
    m_ComputeIntersectionIsSet = false;
}
utility::string_t BTDrawingParams::getDecimalSeparator() const
{
    return m_DecimalSeparator;
}

void BTDrawingParams::setDecimalSeparator(const utility::string_t& value)
{
    m_DecimalSeparator = value;
    m_DecimalSeparatorIsSet = true;
}

bool BTDrawingParams::decimalSeparatorIsSet() const
{
    return m_DecimalSeparatorIsSet;
}

void BTDrawingParams::unsetDecimalSeparator()
{
    m_DecimalSeparatorIsSet = false;
}
utility::string_t BTDrawingParams::getDocumentId() const
{
    return m_DocumentId;
}

void BTDrawingParams::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTDrawingParams::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTDrawingParams::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTDrawingParams::getDocumentMicroversionId() const
{
    return m_DocumentMicroversionId;
}

void BTDrawingParams::setDocumentMicroversionId(const utility::string_t& value)
{
    m_DocumentMicroversionId = value;
    m_DocumentMicroversionIdIsSet = true;
}

bool BTDrawingParams::documentMicroversionIdIsSet() const
{
    return m_DocumentMicroversionIdIsSet;
}

void BTDrawingParams::unsetDocumentMicroversionId()
{
    m_DocumentMicroversionIdIsSet = false;
}
utility::string_t BTDrawingParams::getDrawingName() const
{
    return m_DrawingName;
}

void BTDrawingParams::setDrawingName(const utility::string_t& value)
{
    m_DrawingName = value;
    m_DrawingNameIsSet = true;
}

bool BTDrawingParams::drawingNameIsSet() const
{
    return m_DrawingNameIsSet;
}

void BTDrawingParams::unsetDrawingName()
{
    m_DrawingNameIsSet = false;
}
utility::string_t BTDrawingParams::getElementConfiguration() const
{
    return m_ElementConfiguration;
}

void BTDrawingParams::setElementConfiguration(const utility::string_t& value)
{
    m_ElementConfiguration = value;
    m_ElementConfigurationIsSet = true;
}

bool BTDrawingParams::elementConfigurationIsSet() const
{
    return m_ElementConfigurationIsSet;
}

void BTDrawingParams::unsetElementConfiguration()
{
    m_ElementConfigurationIsSet = false;
}
utility::string_t BTDrawingParams::getElementId() const
{
    return m_ElementId;
}

void BTDrawingParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTDrawingParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTDrawingParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTDrawingParams::getElementMicroversionId() const
{
    return m_ElementMicroversionId;
}

void BTDrawingParams::setElementMicroversionId(const utility::string_t& value)
{
    m_ElementMicroversionId = value;
    m_ElementMicroversionIdIsSet = true;
}

bool BTDrawingParams::elementMicroversionIdIsSet() const
{
    return m_ElementMicroversionIdIsSet;
}

void BTDrawingParams::unsetElementMicroversionId()
{
    m_ElementMicroversionIdIsSet = false;
}
utility::string_t BTDrawingParams::getExternalDocumentId() const
{
    return m_ExternalDocumentId;
}

void BTDrawingParams::setExternalDocumentId(const utility::string_t& value)
{
    m_ExternalDocumentId = value;
    m_ExternalDocumentIdIsSet = true;
}

bool BTDrawingParams::externalDocumentIdIsSet() const
{
    return m_ExternalDocumentIdIsSet;
}

void BTDrawingParams::unsetExternalDocumentId()
{
    m_ExternalDocumentIdIsSet = false;
}
utility::string_t BTDrawingParams::getExternalDocumentVersionId() const
{
    return m_ExternalDocumentVersionId;
}

void BTDrawingParams::setExternalDocumentVersionId(const utility::string_t& value)
{
    m_ExternalDocumentVersionId = value;
    m_ExternalDocumentVersionIdIsSet = true;
}

bool BTDrawingParams::externalDocumentVersionIdIsSet() const
{
    return m_ExternalDocumentVersionIdIsSet;
}

void BTDrawingParams::unsetExternalDocumentVersionId()
{
    m_ExternalDocumentVersionIdIsSet = false;
}
utility::string_t BTDrawingParams::getHiddenLines() const
{
    return m_HiddenLines;
}

void BTDrawingParams::setHiddenLines(const utility::string_t& value)
{
    m_HiddenLines = value;
    m_HiddenLinesIsSet = true;
}

bool BTDrawingParams::hiddenLinesIsSet() const
{
    return m_HiddenLinesIsSet;
}

void BTDrawingParams::unsetHiddenLines()
{
    m_HiddenLinesIsSet = false;
}
bool BTDrawingParams::isIncludeSurfaces() const
{
    return m_IncludeSurfaces;
}

void BTDrawingParams::setIncludeSurfaces(bool value)
{
    m_IncludeSurfaces = value;
    m_IncludeSurfacesIsSet = true;
}

bool BTDrawingParams::includeSurfacesIsSet() const
{
    return m_IncludeSurfacesIsSet;
}

void BTDrawingParams::unsetIncludeSurfaces()
{
    m_IncludeSurfacesIsSet = false;
}
bool BTDrawingParams::isIsFlattenedPart() const
{
    return m_IsFlattenedPart;
}

void BTDrawingParams::setIsFlattenedPart(bool value)
{
    m_IsFlattenedPart = value;
    m_IsFlattenedPartIsSet = true;
}

bool BTDrawingParams::isFlattenedPartIsSet() const
{
    return m_IsFlattenedPartIsSet;
}

void BTDrawingParams::unsetIsFlattenedPart()
{
    m_IsFlattenedPartIsSet = false;
}
bool BTDrawingParams::isIsSketchOnly() const
{
    return m_IsSketchOnly;
}

void BTDrawingParams::setIsSketchOnly(bool value)
{
    m_IsSketchOnly = value;
    m_IsSketchOnlyIsSet = true;
}

bool BTDrawingParams::isSketchOnlyIsSet() const
{
    return m_IsSketchOnlyIsSet;
}

void BTDrawingParams::unsetIsSketchOnly()
{
    m_IsSketchOnlyIsSet = false;
}
bool BTDrawingParams::isIsSurface() const
{
    return m_IsSurface;
}

void BTDrawingParams::setIsSurface(bool value)
{
    m_IsSurface = value;
    m_IsSurfaceIsSet = true;
}

bool BTDrawingParams::isSurfaceIsSet() const
{
    return m_IsSurfaceIsSet;
}

void BTDrawingParams::unsetIsSurface()
{
    m_IsSurfaceIsSet = false;
}
utility::string_t BTDrawingParams::getLanguage() const
{
    return m_Language;
}

void BTDrawingParams::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool BTDrawingParams::languageIsSet() const
{
    return m_LanguageIsSet;
}

void BTDrawingParams::unsetLanguage()
{
    m_LanguageIsSet = false;
}
std::shared_ptr<BTElementLocationParams> BTDrawingParams::getLocation() const
{
    return m_Location;
}

void BTDrawingParams::setLocation(const std::shared_ptr<BTElementLocationParams>& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool BTDrawingParams::locationIsSet() const
{
    return m_LocationIsSet;
}

void BTDrawingParams::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t BTDrawingParams::getModelType() const
{
    return m_ModelType;
}

void BTDrawingParams::setModelType(const utility::string_t& value)
{
    m_ModelType = value;
    m_ModelTypeIsSet = true;
}

bool BTDrawingParams::modelTypeIsSet() const
{
    return m_ModelTypeIsSet;
}

void BTDrawingParams::unsetModelType()
{
    m_ModelTypeIsSet = false;
}
int32_t BTDrawingParams::getNumberHorizontalZones() const
{
    return m_NumberHorizontalZones;
}

void BTDrawingParams::setNumberHorizontalZones(int32_t value)
{
    m_NumberHorizontalZones = value;
    m_NumberHorizontalZonesIsSet = true;
}

bool BTDrawingParams::numberHorizontalZonesIsSet() const
{
    return m_NumberHorizontalZonesIsSet;
}

void BTDrawingParams::unsetNumberHorizontalZones()
{
    m_NumberHorizontalZonesIsSet = false;
}
int32_t BTDrawingParams::getNumberVerticalZones() const
{
    return m_NumberVerticalZones;
}

void BTDrawingParams::setNumberVerticalZones(int32_t value)
{
    m_NumberVerticalZones = value;
    m_NumberVerticalZonesIsSet = true;
}

bool BTDrawingParams::numberVerticalZonesIsSet() const
{
    return m_NumberVerticalZonesIsSet;
}

void BTDrawingParams::unsetNumberVerticalZones()
{
    m_NumberVerticalZonesIsSet = false;
}
utility::string_t BTDrawingParams::getPartId() const
{
    return m_PartId;
}

void BTDrawingParams::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTDrawingParams::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTDrawingParams::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTDrawingParams::getPartNumber() const
{
    return m_PartNumber;
}

void BTDrawingParams::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTDrawingParams::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTDrawingParams::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTDrawingParams::getPartQuery() const
{
    return m_PartQuery;
}

void BTDrawingParams::setPartQuery(const utility::string_t& value)
{
    m_PartQuery = value;
    m_PartQueryIsSet = true;
}

bool BTDrawingParams::partQueryIsSet() const
{
    return m_PartQueryIsSet;
}

void BTDrawingParams::unsetPartQuery()
{
    m_PartQueryIsSet = false;
}
utility::string_t BTDrawingParams::getProjection() const
{
    return m_Projection;
}

void BTDrawingParams::setProjection(const utility::string_t& value)
{
    m_Projection = value;
    m_ProjectionIsSet = true;
}

bool BTDrawingParams::projectionIsSet() const
{
    return m_ProjectionIsSet;
}

void BTDrawingParams::unsetProjection()
{
    m_ProjectionIsSet = false;
}
bool BTDrawingParams::isPureSketch() const
{
    return m_PureSketch;
}

void BTDrawingParams::setPureSketch(bool value)
{
    m_PureSketch = value;
    m_PureSketchIsSet = true;
}

bool BTDrawingParams::pureSketchIsSet() const
{
    return m_PureSketchIsSet;
}

void BTDrawingParams::unsetPureSketch()
{
    m_PureSketchIsSet = false;
}
utility::string_t BTDrawingParams::getQualityOption() const
{
    return m_QualityOption;
}

void BTDrawingParams::setQualityOption(const utility::string_t& value)
{
    m_QualityOption = value;
    m_QualityOptionIsSet = true;
}

bool BTDrawingParams::qualityOptionIsSet() const
{
    return m_QualityOptionIsSet;
}

void BTDrawingParams::unsetQualityOption()
{
    m_QualityOptionIsSet = false;
}
int32_t BTDrawingParams::getReferenceType() const
{
    return m_ReferenceType;
}

void BTDrawingParams::setReferenceType(int32_t value)
{
    m_ReferenceType = value;
    m_ReferenceTypeIsSet = true;
}

bool BTDrawingParams::referenceTypeIsSet() const
{
    return m_ReferenceTypeIsSet;
}

void BTDrawingParams::unsetReferenceType()
{
    m_ReferenceTypeIsSet = false;
}
utility::string_t BTDrawingParams::getReferenceTypeEnum() const
{
    return m_ReferenceTypeEnum;
}

void BTDrawingParams::setReferenceTypeEnum(const utility::string_t& value)
{
    m_ReferenceTypeEnum = value;
    m_ReferenceTypeEnumIsSet = true;
}

bool BTDrawingParams::referenceTypeEnumIsSet() const
{
    return m_ReferenceTypeEnumIsSet;
}

void BTDrawingParams::unsetReferenceTypeEnum()
{
    m_ReferenceTypeEnumIsSet = false;
}
utility::string_t BTDrawingParams::getRevision() const
{
    return m_Revision;
}

void BTDrawingParams::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTDrawingParams::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTDrawingParams::unsetRevision()
{
    m_RevisionIsSet = false;
}
bool BTDrawingParams::isShowCutGeomOnly() const
{
    return m_ShowCutGeomOnly;
}

void BTDrawingParams::setShowCutGeomOnly(bool value)
{
    m_ShowCutGeomOnly = value;
    m_ShowCutGeomOnlyIsSet = true;
}

bool BTDrawingParams::showCutGeomOnlyIsSet() const
{
    return m_ShowCutGeomOnlyIsSet;
}

void BTDrawingParams::unsetShowCutGeomOnly()
{
    m_ShowCutGeomOnlyIsSet = false;
}
utility::string_t BTDrawingParams::getSimplificationOption() const
{
    return m_SimplificationOption;
}

void BTDrawingParams::setSimplificationOption(const utility::string_t& value)
{
    m_SimplificationOption = value;
    m_SimplificationOptionIsSet = true;
}

bool BTDrawingParams::simplificationOptionIsSet() const
{
    return m_SimplificationOptionIsSet;
}

void BTDrawingParams::unsetSimplificationOption()
{
    m_SimplificationOptionIsSet = false;
}
double BTDrawingParams::getSimplificationThreshold() const
{
    return m_SimplificationThreshold;
}

void BTDrawingParams::setSimplificationThreshold(double value)
{
    m_SimplificationThreshold = value;
    m_SimplificationThresholdIsSet = true;
}

bool BTDrawingParams::simplificationThresholdIsSet() const
{
    return m_SimplificationThresholdIsSet;
}

void BTDrawingParams::unsetSimplificationThreshold()
{
    m_SimplificationThresholdIsSet = false;
}
utility::string_t BTDrawingParams::getSize() const
{
    return m_Size;
}

void BTDrawingParams::setSize(const utility::string_t& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool BTDrawingParams::sizeIsSet() const
{
    return m_SizeIsSet;
}

void BTDrawingParams::unsetSize()
{
    m_SizeIsSet = false;
}
std::vector<utility::string_t>& BTDrawingParams::getSketchIds()
{
    return m_SketchIds;
}

void BTDrawingParams::setSketchIds(const std::vector<utility::string_t>& value)
{
    m_SketchIds = value;
    m_SketchIdsIsSet = true;
}

bool BTDrawingParams::sketchIdsIsSet() const
{
    return m_SketchIdsIsSet;
}

void BTDrawingParams::unsetSketchIds()
{
    m_SketchIdsIsSet = false;
}
utility::string_t BTDrawingParams::getStandard() const
{
    return m_Standard;
}

void BTDrawingParams::setStandard(const utility::string_t& value)
{
    m_Standard = value;
    m_StandardIsSet = true;
}

bool BTDrawingParams::standardIsSet() const
{
    return m_StandardIsSet;
}

void BTDrawingParams::unsetStandard()
{
    m_StandardIsSet = false;
}
utility::string_t BTDrawingParams::getStartZones() const
{
    return m_StartZones;
}

void BTDrawingParams::setStartZones(const utility::string_t& value)
{
    m_StartZones = value;
    m_StartZonesIsSet = true;
}

bool BTDrawingParams::startZonesIsSet() const
{
    return m_StartZonesIsSet;
}

void BTDrawingParams::unsetStartZones()
{
    m_StartZonesIsSet = false;
}
std::vector<utility::string_t>& BTDrawingParams::getTemplateArgs()
{
    return m_TemplateArgs;
}

void BTDrawingParams::setTemplateArgs(const std::vector<utility::string_t>& value)
{
    m_TemplateArgs = value;
    m_TemplateArgsIsSet = true;
}

bool BTDrawingParams::templateArgsIsSet() const
{
    return m_TemplateArgsIsSet;
}

void BTDrawingParams::unsetTemplateArgs()
{
    m_TemplateArgsIsSet = false;
}
utility::string_t BTDrawingParams::getTemplateDocumentId() const
{
    return m_TemplateDocumentId;
}

void BTDrawingParams::setTemplateDocumentId(const utility::string_t& value)
{
    m_TemplateDocumentId = value;
    m_TemplateDocumentIdIsSet = true;
}

bool BTDrawingParams::templateDocumentIdIsSet() const
{
    return m_TemplateDocumentIdIsSet;
}

void BTDrawingParams::unsetTemplateDocumentId()
{
    m_TemplateDocumentIdIsSet = false;
}
utility::string_t BTDrawingParams::getTemplateElementId() const
{
    return m_TemplateElementId;
}

void BTDrawingParams::setTemplateElementId(const utility::string_t& value)
{
    m_TemplateElementId = value;
    m_TemplateElementIdIsSet = true;
}

bool BTDrawingParams::templateElementIdIsSet() const
{
    return m_TemplateElementIdIsSet;
}

void BTDrawingParams::unsetTemplateElementId()
{
    m_TemplateElementIdIsSet = false;
}
utility::string_t BTDrawingParams::getTemplateName() const
{
    return m_TemplateName;
}

void BTDrawingParams::setTemplateName(const utility::string_t& value)
{
    m_TemplateName = value;
    m_TemplateNameIsSet = true;
}

bool BTDrawingParams::templateNameIsSet() const
{
    return m_TemplateNameIsSet;
}

void BTDrawingParams::unsetTemplateName()
{
    m_TemplateNameIsSet = false;
}
utility::string_t BTDrawingParams::getTemplateVersionId() const
{
    return m_TemplateVersionId;
}

void BTDrawingParams::setTemplateVersionId(const utility::string_t& value)
{
    m_TemplateVersionId = value;
    m_TemplateVersionIdIsSet = true;
}

bool BTDrawingParams::templateVersionIdIsSet() const
{
    return m_TemplateVersionIdIsSet;
}

void BTDrawingParams::unsetTemplateVersionId()
{
    m_TemplateVersionIdIsSet = false;
}
utility::string_t BTDrawingParams::getTemplateWorkspaceId() const
{
    return m_TemplateWorkspaceId;
}

void BTDrawingParams::setTemplateWorkspaceId(const utility::string_t& value)
{
    m_TemplateWorkspaceId = value;
    m_TemplateWorkspaceIdIsSet = true;
}

bool BTDrawingParams::templateWorkspaceIdIsSet() const
{
    return m_TemplateWorkspaceIdIsSet;
}

void BTDrawingParams::unsetTemplateWorkspaceId()
{
    m_TemplateWorkspaceIdIsSet = false;
}
bool BTDrawingParams::isTitleblock() const
{
    return m_Titleblock;
}

void BTDrawingParams::setTitleblock(bool value)
{
    m_Titleblock = value;
    m_TitleblockIsSet = true;
}

bool BTDrawingParams::titleblockIsSet() const
{
    return m_TitleblockIsSet;
}

void BTDrawingParams::unsetTitleblock()
{
    m_TitleblockIsSet = false;
}
utility::string_t BTDrawingParams::getUnits() const
{
    return m_Units;
}

void BTDrawingParams::setUnits(const utility::string_t& value)
{
    m_Units = value;
    m_UnitsIsSet = true;
}

bool BTDrawingParams::unitsIsSet() const
{
    return m_UnitsIsSet;
}

void BTDrawingParams::unsetUnits()
{
    m_UnitsIsSet = false;
}
utility::string_t BTDrawingParams::getViews() const
{
    return m_Views;
}

void BTDrawingParams::setViews(const utility::string_t& value)
{
    m_Views = value;
    m_ViewsIsSet = true;
}

bool BTDrawingParams::viewsIsSet() const
{
    return m_ViewsIsSet;
}

void BTDrawingParams::unsetViews()
{
    m_ViewsIsSet = false;
}
utility::string_t BTDrawingParams::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTDrawingParams::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTDrawingParams::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTDrawingParams::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


