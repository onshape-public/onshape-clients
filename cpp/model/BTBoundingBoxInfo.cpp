/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBoundingBoxInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBoundingBoxInfo::BTBoundingBoxInfo()
{
    m_HighX = 0.0;
    m_HighXIsSet = false;
    m_HighY = 0.0;
    m_HighYIsSet = false;
    m_HighZ = 0.0;
    m_HighZIsSet = false;
    m_LowX = 0.0;
    m_LowXIsSet = false;
    m_LowY = 0.0;
    m_LowYIsSet = false;
    m_LowZ = 0.0;
    m_LowZIsSet = false;
}

BTBoundingBoxInfo::~BTBoundingBoxInfo()
{
}

void BTBoundingBoxInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTBoundingBoxInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HighXIsSet)
    {
        val[utility::conversions::to_string_t("highX")] = ModelBase::toJson(m_HighX);
    }
    if(m_HighYIsSet)
    {
        val[utility::conversions::to_string_t("highY")] = ModelBase::toJson(m_HighY);
    }
    if(m_HighZIsSet)
    {
        val[utility::conversions::to_string_t("highZ")] = ModelBase::toJson(m_HighZ);
    }
    if(m_LowXIsSet)
    {
        val[utility::conversions::to_string_t("lowX")] = ModelBase::toJson(m_LowX);
    }
    if(m_LowYIsSet)
    {
        val[utility::conversions::to_string_t("lowY")] = ModelBase::toJson(m_LowY);
    }
    if(m_LowZIsSet)
    {
        val[utility::conversions::to_string_t("lowZ")] = ModelBase::toJson(m_LowZ);
    }

    return val;
}

bool BTBoundingBoxInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("highX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("highX"));
        if(!fieldValue.is_null())
        {
            double refVal_highX;
            ok &= ModelBase::fromJson(fieldValue, refVal_highX);
            setHighX(refVal_highX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("highY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("highY"));
        if(!fieldValue.is_null())
        {
            double refVal_highY;
            ok &= ModelBase::fromJson(fieldValue, refVal_highY);
            setHighY(refVal_highY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("highZ")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("highZ"));
        if(!fieldValue.is_null())
        {
            double refVal_highZ;
            ok &= ModelBase::fromJson(fieldValue, refVal_highZ);
            setHighZ(refVal_highZ);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lowX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lowX"));
        if(!fieldValue.is_null())
        {
            double refVal_lowX;
            ok &= ModelBase::fromJson(fieldValue, refVal_lowX);
            setLowX(refVal_lowX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lowY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lowY"));
        if(!fieldValue.is_null())
        {
            double refVal_lowY;
            ok &= ModelBase::fromJson(fieldValue, refVal_lowY);
            setLowY(refVal_lowY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lowZ")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lowZ"));
        if(!fieldValue.is_null())
        {
            double refVal_lowZ;
            ok &= ModelBase::fromJson(fieldValue, refVal_lowZ);
            setLowZ(refVal_lowZ);
        }
    }
    return ok;
}

void BTBoundingBoxInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HighXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highX"), m_HighX));
    }
    if(m_HighYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highY"), m_HighY));
    }
    if(m_HighZIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highZ"), m_HighZ));
    }
    if(m_LowXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowX"), m_LowX));
    }
    if(m_LowYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowY"), m_LowY));
    }
    if(m_LowZIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lowZ"), m_LowZ));
    }
}

bool BTBoundingBoxInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("highX")))
    {
        double refVal_highX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("highX")), refVal_highX );
        setHighX(refVal_highX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highY")))
    {
        double refVal_highY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("highY")), refVal_highY );
        setHighY(refVal_highY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highZ")))
    {
        double refVal_highZ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("highZ")), refVal_highZ );
        setHighZ(refVal_highZ);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowX")))
    {
        double refVal_lowX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowX")), refVal_lowX );
        setLowX(refVal_lowX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowY")))
    {
        double refVal_lowY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowY")), refVal_lowY );
        setLowY(refVal_lowY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lowZ")))
    {
        double refVal_lowZ;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lowZ")), refVal_lowZ );
        setLowZ(refVal_lowZ);
    }
    return ok;
}

double BTBoundingBoxInfo::getHighX() const
{
    return m_HighX;
}

void BTBoundingBoxInfo::setHighX(double value)
{
    m_HighX = value;
    m_HighXIsSet = true;
}

bool BTBoundingBoxInfo::highXIsSet() const
{
    return m_HighXIsSet;
}

void BTBoundingBoxInfo::unsetHighX()
{
    m_HighXIsSet = false;
}
double BTBoundingBoxInfo::getHighY() const
{
    return m_HighY;
}

void BTBoundingBoxInfo::setHighY(double value)
{
    m_HighY = value;
    m_HighYIsSet = true;
}

bool BTBoundingBoxInfo::highYIsSet() const
{
    return m_HighYIsSet;
}

void BTBoundingBoxInfo::unsetHighY()
{
    m_HighYIsSet = false;
}
double BTBoundingBoxInfo::getHighZ() const
{
    return m_HighZ;
}

void BTBoundingBoxInfo::setHighZ(double value)
{
    m_HighZ = value;
    m_HighZIsSet = true;
}

bool BTBoundingBoxInfo::highZIsSet() const
{
    return m_HighZIsSet;
}

void BTBoundingBoxInfo::unsetHighZ()
{
    m_HighZIsSet = false;
}
double BTBoundingBoxInfo::getLowX() const
{
    return m_LowX;
}

void BTBoundingBoxInfo::setLowX(double value)
{
    m_LowX = value;
    m_LowXIsSet = true;
}

bool BTBoundingBoxInfo::lowXIsSet() const
{
    return m_LowXIsSet;
}

void BTBoundingBoxInfo::unsetLowX()
{
    m_LowXIsSet = false;
}
double BTBoundingBoxInfo::getLowY() const
{
    return m_LowY;
}

void BTBoundingBoxInfo::setLowY(double value)
{
    m_LowY = value;
    m_LowYIsSet = true;
}

bool BTBoundingBoxInfo::lowYIsSet() const
{
    return m_LowYIsSet;
}

void BTBoundingBoxInfo::unsetLowY()
{
    m_LowYIsSet = false;
}
double BTBoundingBoxInfo::getLowZ() const
{
    return m_LowZ;
}

void BTBoundingBoxInfo::setLowZ(double value)
{
    m_LowZ = value;
    m_LowZIsSet = true;
}

bool BTBoundingBoxInfo::lowZIsSet() const
{
    return m_LowZIsSet;
}

void BTBoundingBoxInfo::unsetLowZ()
{
    m_LowZIsSet = false;
}
}
}
}
}


