/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMicroversionIdAndConfiguration_2338.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMicroversionIdAndConfiguration_2338_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMicroversionIdAndConfiguration_2338_H_


#include "../ModelBase.h"

#include "BTMicroversionId_366.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "BTFSValue_1888.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMicroversionIdAndConfiguration_2338
    : public ModelBase
{
public:
    BTMicroversionIdAndConfiguration_2338();
    virtual ~BTMicroversionIdAndConfiguration_2338();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMicroversionIdAndConfiguration_2338 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCacheKey() const;
    bool cacheKeyIsSet() const;
    void unsetCacheKey();

    void setCacheKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& getConfigurationParameterIdToValue();
    bool configurationParameterIdToValueIsSet() const;
    void unsetConfigurationParameterIdToValue();

    void setConfigurationParameterIdToValue(const std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();

    void setDeleted(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMicroversionId_366> getMicroversion() const;
    bool microversionIsSet() const;
    void unsetMicroversion();

    void setMicroversion(const std::shared_ptr<BTMicroversionId_366>& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    utility::string_t m_CacheKey;
    bool m_CacheKeyIsSet;
    std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> m_ConfigurationParameterIdToValue;
    bool m_ConfigurationParameterIdToValueIsSet;
    bool m_Deleted;
    bool m_DeletedIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<BTMicroversionId_366> m_Microversion;
    bool m_MicroversionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMicroversionIdAndConfiguration_2338_H_ */
