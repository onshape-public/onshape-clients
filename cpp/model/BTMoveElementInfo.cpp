/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMoveElementInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMoveElementInfo::BTMoveElementInfo()
{
    m_ElementOriginalToNewMapIsSet = false;
    m_ErrorMessage = utility::conversions::to_string_t("");
    m_ErrorMessageIsSet = false;
    m_IsNewDocument = false;
    m_IsNewDocumentIsSet = false;
    m_NewDocumentId = utility::conversions::to_string_t("");
    m_NewDocumentIdIsSet = false;
    m_NewDocumentName = utility::conversions::to_string_t("");
    m_NewDocumentNameIsSet = false;
    m_NewDocumentVersionId = utility::conversions::to_string_t("");
    m_NewDocumentVersionIdIsSet = false;
    m_NewWorkspaceId = utility::conversions::to_string_t("");
    m_NewWorkspaceIdIsSet = false;
}

BTMoveElementInfo::~BTMoveElementInfo()
{
}

void BTMoveElementInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMoveElementInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ElementOriginalToNewMapIsSet)
    {
        val[utility::conversions::to_string_t("elementOriginalToNewMap")] = ModelBase::toJson(m_ElementOriginalToNewMap);
    }
    if(m_ErrorMessageIsSet)
    {
        val[utility::conversions::to_string_t("errorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }
    if(m_IsNewDocumentIsSet)
    {
        val[utility::conversions::to_string_t("isNewDocument")] = ModelBase::toJson(m_IsNewDocument);
    }
    if(m_NewDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("newDocumentId")] = ModelBase::toJson(m_NewDocumentId);
    }
    if(m_NewDocumentNameIsSet)
    {
        val[utility::conversions::to_string_t("newDocumentName")] = ModelBase::toJson(m_NewDocumentName);
    }
    if(m_NewDocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("newDocumentVersionId")] = ModelBase::toJson(m_NewDocumentVersionId);
    }
    if(m_NewWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("newWorkspaceId")] = ModelBase::toJson(m_NewWorkspaceId);
    }

    return val;
}

bool BTMoveElementInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("elementOriginalToNewMap")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementOriginalToNewMap"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_elementOriginalToNewMap;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementOriginalToNewMap);
            setElementOriginalToNewMap(refVal_elementOriginalToNewMap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorMessage);
            setErrorMessage(refVal_errorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isNewDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isNewDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_isNewDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_isNewDocument);
            setIsNewDocument(refVal_isNewDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newDocumentId);
            setNewDocumentId(refVal_newDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newDocumentName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newDocumentName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newDocumentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_newDocumentName);
            setNewDocumentName(refVal_newDocumentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newDocumentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newDocumentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newDocumentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newDocumentVersionId);
            setNewDocumentVersionId(refVal_newDocumentVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newWorkspaceId);
            setNewWorkspaceId(refVal_newWorkspaceId);
        }
    }
    return ok;
}

void BTMoveElementInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ElementOriginalToNewMapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementOriginalToNewMap"), m_ElementOriginalToNewMap));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_IsNewDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isNewDocument"), m_IsNewDocument));
    }
    if(m_NewDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newDocumentId"), m_NewDocumentId));
    }
    if(m_NewDocumentNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newDocumentName"), m_NewDocumentName));
    }
    if(m_NewDocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newDocumentVersionId"), m_NewDocumentVersionId));
    }
    if(m_NewWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newWorkspaceId"), m_NewWorkspaceId));
    }
}

bool BTMoveElementInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("elementOriginalToNewMap")))
    {
        std::map<utility::string_t, utility::string_t> refVal_elementOriginalToNewMap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementOriginalToNewMap")), refVal_elementOriginalToNewMap );
        setElementOriginalToNewMap(refVal_elementOriginalToNewMap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isNewDocument")))
    {
        bool refVal_isNewDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isNewDocument")), refVal_isNewDocument );
        setIsNewDocument(refVal_isNewDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newDocumentId")))
    {
        utility::string_t refVal_newDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newDocumentId")), refVal_newDocumentId );
        setNewDocumentId(refVal_newDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newDocumentName")))
    {
        utility::string_t refVal_newDocumentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newDocumentName")), refVal_newDocumentName );
        setNewDocumentName(refVal_newDocumentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newDocumentVersionId")))
    {
        utility::string_t refVal_newDocumentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newDocumentVersionId")), refVal_newDocumentVersionId );
        setNewDocumentVersionId(refVal_newDocumentVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newWorkspaceId")))
    {
        utility::string_t refVal_newWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newWorkspaceId")), refVal_newWorkspaceId );
        setNewWorkspaceId(refVal_newWorkspaceId);
    }
    return ok;
}

std::map<utility::string_t, utility::string_t>& BTMoveElementInfo::getElementOriginalToNewMap()
{
    return m_ElementOriginalToNewMap;
}

void BTMoveElementInfo::setElementOriginalToNewMap(const std::map<utility::string_t, utility::string_t>& value)
{
    m_ElementOriginalToNewMap = value;
    m_ElementOriginalToNewMapIsSet = true;
}

bool BTMoveElementInfo::elementOriginalToNewMapIsSet() const
{
    return m_ElementOriginalToNewMapIsSet;
}

void BTMoveElementInfo::unsetElementOriginalToNewMap()
{
    m_ElementOriginalToNewMapIsSet = false;
}
utility::string_t BTMoveElementInfo::getErrorMessage() const
{
    return m_ErrorMessage;
}

void BTMoveElementInfo::setErrorMessage(const utility::string_t& value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}

bool BTMoveElementInfo::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void BTMoveElementInfo::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}
bool BTMoveElementInfo::isIsNewDocument() const
{
    return m_IsNewDocument;
}

void BTMoveElementInfo::setIsNewDocument(bool value)
{
    m_IsNewDocument = value;
    m_IsNewDocumentIsSet = true;
}

bool BTMoveElementInfo::isNewDocumentIsSet() const
{
    return m_IsNewDocumentIsSet;
}

void BTMoveElementInfo::unsetIsNewDocument()
{
    m_IsNewDocumentIsSet = false;
}
utility::string_t BTMoveElementInfo::getNewDocumentId() const
{
    return m_NewDocumentId;
}

void BTMoveElementInfo::setNewDocumentId(const utility::string_t& value)
{
    m_NewDocumentId = value;
    m_NewDocumentIdIsSet = true;
}

bool BTMoveElementInfo::newDocumentIdIsSet() const
{
    return m_NewDocumentIdIsSet;
}

void BTMoveElementInfo::unsetNewDocumentId()
{
    m_NewDocumentIdIsSet = false;
}
utility::string_t BTMoveElementInfo::getNewDocumentName() const
{
    return m_NewDocumentName;
}

void BTMoveElementInfo::setNewDocumentName(const utility::string_t& value)
{
    m_NewDocumentName = value;
    m_NewDocumentNameIsSet = true;
}

bool BTMoveElementInfo::newDocumentNameIsSet() const
{
    return m_NewDocumentNameIsSet;
}

void BTMoveElementInfo::unsetNewDocumentName()
{
    m_NewDocumentNameIsSet = false;
}
utility::string_t BTMoveElementInfo::getNewDocumentVersionId() const
{
    return m_NewDocumentVersionId;
}

void BTMoveElementInfo::setNewDocumentVersionId(const utility::string_t& value)
{
    m_NewDocumentVersionId = value;
    m_NewDocumentVersionIdIsSet = true;
}

bool BTMoveElementInfo::newDocumentVersionIdIsSet() const
{
    return m_NewDocumentVersionIdIsSet;
}

void BTMoveElementInfo::unsetNewDocumentVersionId()
{
    m_NewDocumentVersionIdIsSet = false;
}
utility::string_t BTMoveElementInfo::getNewWorkspaceId() const
{
    return m_NewWorkspaceId;
}

void BTMoveElementInfo::setNewWorkspaceId(const utility::string_t& value)
{
    m_NewWorkspaceId = value;
    m_NewWorkspaceIdIsSet = true;
}

bool BTMoveElementInfo::newWorkspaceIdIsSet() const
{
    return m_NewWorkspaceIdIsSet;
}

void BTMoveElementInfo::unsetNewWorkspaceId()
{
    m_NewWorkspaceIdIsSet = false;
}
}
}
}
}


