/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAclEntryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAclEntryInfo::BTAclEntryInfo()
{
    m_AcceptOwnerTransfer = false;
    m_AcceptOwnerTransferIsSet = false;
    m_CompanyName = utility::conversions::to_string_t("");
    m_CompanyNameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_EnterpriseMember = false;
    m_EnterpriseMemberIsSet = false;
    m_EntryId = utility::conversions::to_string_t("");
    m_EntryIdIsSet = false;
    m_EntryState = utility::conversions::to_string_t("");
    m_EntryStateIsSet = false;
    m_EntryType = 0;
    m_EntryTypeIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ObjectId = utility::conversions::to_string_t("");
    m_ObjectIdIsSet = false;
    m_PendingOwnerTransfer = false;
    m_PendingOwnerTransferIsSet = false;
    m_Permission = 0L;
    m_PermissionIsSet = false;
    m_PermissionSetIsSet = false;
    m_TeamName = utility::conversions::to_string_t("");
    m_TeamNameIsSet = false;
}

BTAclEntryInfo::~BTAclEntryInfo()
{
}

void BTAclEntryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAclEntryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AcceptOwnerTransferIsSet)
    {
        val[utility::conversions::to_string_t("acceptOwnerTransfer")] = ModelBase::toJson(m_AcceptOwnerTransfer);
    }
    if(m_CompanyNameIsSet)
    {
        val[utility::conversions::to_string_t("companyName")] = ModelBase::toJson(m_CompanyName);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_EnterpriseMemberIsSet)
    {
        val[utility::conversions::to_string_t("enterpriseMember")] = ModelBase::toJson(m_EnterpriseMember);
    }
    if(m_EntryIdIsSet)
    {
        val[utility::conversions::to_string_t("entryId")] = ModelBase::toJson(m_EntryId);
    }
    if(m_EntryStateIsSet)
    {
        val[utility::conversions::to_string_t("entryState")] = ModelBase::toJson(m_EntryState);
    }
    if(m_EntryTypeIsSet)
    {
        val[utility::conversions::to_string_t("entryType")] = ModelBase::toJson(m_EntryType);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("objectId")] = ModelBase::toJson(m_ObjectId);
    }
    if(m_PendingOwnerTransferIsSet)
    {
        val[utility::conversions::to_string_t("pendingOwnerTransfer")] = ModelBase::toJson(m_PendingOwnerTransfer);
    }
    if(m_PermissionIsSet)
    {
        val[utility::conversions::to_string_t("permission")] = ModelBase::toJson(m_Permission);
    }
    if(m_PermissionSetIsSet)
    {
        val[utility::conversions::to_string_t("permissionSet")] = ModelBase::toJson(m_PermissionSet);
    }
    if(m_TeamNameIsSet)
    {
        val[utility::conversions::to_string_t("teamName")] = ModelBase::toJson(m_TeamName);
    }

    return val;
}

bool BTAclEntryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("acceptOwnerTransfer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acceptOwnerTransfer"));
        if(!fieldValue.is_null())
        {
            bool refVal_acceptOwnerTransfer;
            ok &= ModelBase::fromJson(fieldValue, refVal_acceptOwnerTransfer);
            setAcceptOwnerTransfer(refVal_acceptOwnerTransfer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyName);
            setCompanyName(refVal_companyName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enterpriseMember")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enterpriseMember"));
        if(!fieldValue.is_null())
        {
            bool refVal_enterpriseMember;
            ok &= ModelBase::fromJson(fieldValue, refVal_enterpriseMember);
            setEnterpriseMember(refVal_enterpriseMember);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entryId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entryId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_entryId);
            setEntryId(refVal_entryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entryState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entryState"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entryState;
            ok &= ModelBase::fromJson(fieldValue, refVal_entryState);
            setEntryState(refVal_entryState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entryType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entryType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_entryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entryType);
            setEntryType(refVal_entryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("image"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_image);
            setImage(refVal_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_objectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectId);
            setObjectId(refVal_objectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingOwnerTransfer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pendingOwnerTransfer"));
        if(!fieldValue.is_null())
        {
            bool refVal_pendingOwnerTransfer;
            ok &= ModelBase::fromJson(fieldValue, refVal_pendingOwnerTransfer);
            setPendingOwnerTransfer(refVal_pendingOwnerTransfer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permission")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permission"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_permission;
            ok &= ModelBase::fromJson(fieldValue, refVal_permission);
            setPermission(refVal_permission);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permissionSet")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permissionSet"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_permissionSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_permissionSet);
            setPermissionSet(refVal_permissionSet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("teamName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("teamName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_teamName;
            ok &= ModelBase::fromJson(fieldValue, refVal_teamName);
            setTeamName(refVal_teamName);
        }
    }
    return ok;
}

void BTAclEntryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AcceptOwnerTransferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acceptOwnerTransfer"), m_AcceptOwnerTransfer));
    }
    if(m_CompanyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyName"), m_CompanyName));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_EnterpriseMemberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enterpriseMember"), m_EnterpriseMember));
    }
    if(m_EntryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryId"), m_EntryId));
    }
    if(m_EntryStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryState"), m_EntryState));
    }
    if(m_EntryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryType"), m_EntryType));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectId"), m_ObjectId));
    }
    if(m_PendingOwnerTransferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pendingOwnerTransfer"), m_PendingOwnerTransfer));
    }
    if(m_PermissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permission"), m_Permission));
    }
    if(m_PermissionSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissionSet"), m_PermissionSet));
    }
    if(m_TeamNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("teamName"), m_TeamName));
    }
}

bool BTAclEntryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("acceptOwnerTransfer")))
    {
        bool refVal_acceptOwnerTransfer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acceptOwnerTransfer")), refVal_acceptOwnerTransfer );
        setAcceptOwnerTransfer(refVal_acceptOwnerTransfer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyName")))
    {
        utility::string_t refVal_companyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyName")), refVal_companyName );
        setCompanyName(refVal_companyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enterpriseMember")))
    {
        bool refVal_enterpriseMember;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enterpriseMember")), refVal_enterpriseMember );
        setEnterpriseMember(refVal_enterpriseMember);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryId")))
    {
        utility::string_t refVal_entryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryId")), refVal_entryId );
        setEntryId(refVal_entryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryState")))
    {
        utility::string_t refVal_entryState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryState")), refVal_entryState );
        setEntryState(refVal_entryState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryType")))
    {
        int32_t refVal_entryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryType")), refVal_entryType );
        setEntryType(refVal_entryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        utility::string_t refVal_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("image")), refVal_image );
        setImage(refVal_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectId")))
    {
        utility::string_t refVal_objectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectId")), refVal_objectId );
        setObjectId(refVal_objectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingOwnerTransfer")))
    {
        bool refVal_pendingOwnerTransfer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pendingOwnerTransfer")), refVal_pendingOwnerTransfer );
        setPendingOwnerTransfer(refVal_pendingOwnerTransfer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permission")))
    {
        int64_t refVal_permission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permission")), refVal_permission );
        setPermission(refVal_permission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissionSet")))
    {
        std::shared_ptr<Object> refVal_permissionSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissionSet")), refVal_permissionSet );
        setPermissionSet(refVal_permissionSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("teamName")))
    {
        utility::string_t refVal_teamName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("teamName")), refVal_teamName );
        setTeamName(refVal_teamName);
    }
    return ok;
}

bool BTAclEntryInfo::isAcceptOwnerTransfer() const
{
    return m_AcceptOwnerTransfer;
}

void BTAclEntryInfo::setAcceptOwnerTransfer(bool value)
{
    m_AcceptOwnerTransfer = value;
    m_AcceptOwnerTransferIsSet = true;
}

bool BTAclEntryInfo::acceptOwnerTransferIsSet() const
{
    return m_AcceptOwnerTransferIsSet;
}

void BTAclEntryInfo::unsetAcceptOwnerTransfer()
{
    m_AcceptOwnerTransferIsSet = false;
}
utility::string_t BTAclEntryInfo::getCompanyName() const
{
    return m_CompanyName;
}

void BTAclEntryInfo::setCompanyName(const utility::string_t& value)
{
    m_CompanyName = value;
    m_CompanyNameIsSet = true;
}

bool BTAclEntryInfo::companyNameIsSet() const
{
    return m_CompanyNameIsSet;
}

void BTAclEntryInfo::unsetCompanyName()
{
    m_CompanyNameIsSet = false;
}
utility::string_t BTAclEntryInfo::getEmail() const
{
    return m_Email;
}

void BTAclEntryInfo::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool BTAclEntryInfo::emailIsSet() const
{
    return m_EmailIsSet;
}

void BTAclEntryInfo::unsetEmail()
{
    m_EmailIsSet = false;
}
bool BTAclEntryInfo::isEnterpriseMember() const
{
    return m_EnterpriseMember;
}

void BTAclEntryInfo::setEnterpriseMember(bool value)
{
    m_EnterpriseMember = value;
    m_EnterpriseMemberIsSet = true;
}

bool BTAclEntryInfo::enterpriseMemberIsSet() const
{
    return m_EnterpriseMemberIsSet;
}

void BTAclEntryInfo::unsetEnterpriseMember()
{
    m_EnterpriseMemberIsSet = false;
}
utility::string_t BTAclEntryInfo::getEntryId() const
{
    return m_EntryId;
}

void BTAclEntryInfo::setEntryId(const utility::string_t& value)
{
    m_EntryId = value;
    m_EntryIdIsSet = true;
}

bool BTAclEntryInfo::entryIdIsSet() const
{
    return m_EntryIdIsSet;
}

void BTAclEntryInfo::unsetEntryId()
{
    m_EntryIdIsSet = false;
}
utility::string_t BTAclEntryInfo::getEntryState() const
{
    return m_EntryState;
}

void BTAclEntryInfo::setEntryState(const utility::string_t& value)
{
    m_EntryState = value;
    m_EntryStateIsSet = true;
}

bool BTAclEntryInfo::entryStateIsSet() const
{
    return m_EntryStateIsSet;
}

void BTAclEntryInfo::unsetEntryState()
{
    m_EntryStateIsSet = false;
}
int32_t BTAclEntryInfo::getEntryType() const
{
    return m_EntryType;
}

void BTAclEntryInfo::setEntryType(int32_t value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}

bool BTAclEntryInfo::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}

void BTAclEntryInfo::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}
utility::string_t BTAclEntryInfo::getImage() const
{
    return m_Image;
}

void BTAclEntryInfo::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool BTAclEntryInfo::imageIsSet() const
{
    return m_ImageIsSet;
}

void BTAclEntryInfo::unsetImage()
{
    m_ImageIsSet = false;
}
utility::string_t BTAclEntryInfo::getName() const
{
    return m_Name;
}

void BTAclEntryInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTAclEntryInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTAclEntryInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTAclEntryInfo::getObjectId() const
{
    return m_ObjectId;
}

void BTAclEntryInfo::setObjectId(const utility::string_t& value)
{
    m_ObjectId = value;
    m_ObjectIdIsSet = true;
}

bool BTAclEntryInfo::objectIdIsSet() const
{
    return m_ObjectIdIsSet;
}

void BTAclEntryInfo::unsetObjectId()
{
    m_ObjectIdIsSet = false;
}
bool BTAclEntryInfo::isPendingOwnerTransfer() const
{
    return m_PendingOwnerTransfer;
}

void BTAclEntryInfo::setPendingOwnerTransfer(bool value)
{
    m_PendingOwnerTransfer = value;
    m_PendingOwnerTransferIsSet = true;
}

bool BTAclEntryInfo::pendingOwnerTransferIsSet() const
{
    return m_PendingOwnerTransferIsSet;
}

void BTAclEntryInfo::unsetPendingOwnerTransfer()
{
    m_PendingOwnerTransferIsSet = false;
}
int64_t BTAclEntryInfo::getPermission() const
{
    return m_Permission;
}

void BTAclEntryInfo::setPermission(int64_t value)
{
    m_Permission = value;
    m_PermissionIsSet = true;
}

bool BTAclEntryInfo::permissionIsSet() const
{
    return m_PermissionIsSet;
}

void BTAclEntryInfo::unsetPermission()
{
    m_PermissionIsSet = false;
}
std::shared_ptr<Object> BTAclEntryInfo::getPermissionSet() const
{
    return m_PermissionSet;
}

void BTAclEntryInfo::setPermissionSet(const std::shared_ptr<Object>& value)
{
    m_PermissionSet = value;
    m_PermissionSetIsSet = true;
}

bool BTAclEntryInfo::permissionSetIsSet() const
{
    return m_PermissionSetIsSet;
}

void BTAclEntryInfo::unsetPermissionSet()
{
    m_PermissionSetIsSet = false;
}
utility::string_t BTAclEntryInfo::getTeamName() const
{
    return m_TeamName;
}

void BTAclEntryInfo::setTeamName(const utility::string_t& value)
{
    m_TeamName = value;
    m_TeamNameIsSet = true;
}

bool BTAclEntryInfo::teamNameIsSet() const
{
    return m_TeamNameIsSet;
}

void BTAclEntryInfo::unsetTeamName()
{
    m_TeamNameIsSet = false;
}
}
}
}
}


