/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementContentEntryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementContentEntryInfo::BTAppElementContentEntryInfo()
{
    m_BaseContent = utility::conversions::to_string_t("");
    m_BaseContentIsSet = false;
    m_DeltasIsSet = false;
    m_SubelementId = utility::conversions::to_string_t("");
    m_SubelementIdIsSet = false;
}

BTAppElementContentEntryInfo::~BTAppElementContentEntryInfo()
{
}

void BTAppElementContentEntryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementContentEntryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BaseContentIsSet)
    {
        val[utility::conversions::to_string_t("baseContent")] = ModelBase::toJson(m_BaseContent);
    }
    if(m_DeltasIsSet)
    {
        val[utility::conversions::to_string_t("deltas")] = ModelBase::toJson(m_Deltas);
    }
    if(m_SubelementIdIsSet)
    {
        val[utility::conversions::to_string_t("subelementId")] = ModelBase::toJson(m_SubelementId);
    }

    return val;
}

bool BTAppElementContentEntryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("baseContent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("baseContent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_baseContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_baseContent);
            setBaseContent(refVal_baseContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deltas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deltas"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAppElementContentDeltaInfo>> refVal_deltas;
            ok &= ModelBase::fromJson(fieldValue, refVal_deltas);
            setDeltas(refVal_deltas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subelementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subelementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subelementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subelementId);
            setSubelementId(refVal_subelementId);
        }
    }
    return ok;
}

void BTAppElementContentEntryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BaseContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("baseContent"), m_BaseContent));
    }
    if(m_DeltasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deltas"), m_Deltas));
    }
    if(m_SubelementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subelementId"), m_SubelementId));
    }
}

bool BTAppElementContentEntryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("baseContent")))
    {
        utility::string_t refVal_baseContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("baseContent")), refVal_baseContent );
        setBaseContent(refVal_baseContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deltas")))
    {
        std::vector<std::shared_ptr<BTAppElementContentDeltaInfo>> refVal_deltas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deltas")), refVal_deltas );
        setDeltas(refVal_deltas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subelementId")))
    {
        utility::string_t refVal_subelementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subelementId")), refVal_subelementId );
        setSubelementId(refVal_subelementId);
    }
    return ok;
}

utility::string_t BTAppElementContentEntryInfo::getBaseContent() const
{
    return m_BaseContent;
}

void BTAppElementContentEntryInfo::setBaseContent(const utility::string_t& value)
{
    m_BaseContent = value;
    m_BaseContentIsSet = true;
}

bool BTAppElementContentEntryInfo::baseContentIsSet() const
{
    return m_BaseContentIsSet;
}

void BTAppElementContentEntryInfo::unsetBaseContent()
{
    m_BaseContentIsSet = false;
}
std::vector<std::shared_ptr<BTAppElementContentDeltaInfo>>& BTAppElementContentEntryInfo::getDeltas()
{
    return m_Deltas;
}

void BTAppElementContentEntryInfo::setDeltas(const std::vector<std::shared_ptr<BTAppElementContentDeltaInfo>>& value)
{
    m_Deltas = value;
    m_DeltasIsSet = true;
}

bool BTAppElementContentEntryInfo::deltasIsSet() const
{
    return m_DeltasIsSet;
}

void BTAppElementContentEntryInfo::unsetDeltas()
{
    m_DeltasIsSet = false;
}
utility::string_t BTAppElementContentEntryInfo::getSubelementId() const
{
    return m_SubelementId;
}

void BTAppElementContentEntryInfo::setSubelementId(const utility::string_t& value)
{
    m_SubelementId = value;
    m_SubelementIdIsSet = true;
}

bool BTAppElementContentEntryInfo::subelementIdIsSet() const
{
    return m_SubelementIdIsSet;
}

void BTAppElementContentEntryInfo::unsetSubelementId()
{
    m_SubelementIdIsSet = false;
}
}
}
}
}


