/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMConfiguredValue_1341.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMConfiguredValue_1341::BTMConfiguredValue_1341()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ConfigurationValueString = utility::conversions::to_string_t("");
    m_ConfigurationValueStringIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ValueIsSet = false;
}

BTMConfiguredValue_1341::~BTMConfiguredValue_1341()
{
}

void BTMConfiguredValue_1341::validate()
{
    // TODO: implement validation
}

web::json::value BTMConfiguredValue_1341::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ConfigurationValueStringIsSet)
    {
        val[utility::conversions::to_string_t("configurationValueString")] = ModelBase::toJson(m_ConfigurationValueString);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool BTMConfiguredValue_1341::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationValueString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationValueString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationValueString;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationValueString);
            setConfigurationValueString(refVal_configurationValueString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMParameter_1> refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void BTMConfiguredValue_1341::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConfigurationValueStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationValueString"), m_ConfigurationValueString));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool BTMConfiguredValue_1341::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationValueString")))
    {
        utility::string_t refVal_configurationValueString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationValueString")), refVal_configurationValueString );
        setConfigurationValueString(refVal_configurationValueString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        std::shared_ptr<BTMParameter_1> refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

utility::string_t BTMConfiguredValue_1341::getBtType() const
{
    return m_BtType;
}

void BTMConfiguredValue_1341::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMConfiguredValue_1341::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMConfiguredValue_1341::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTMConfiguredValue_1341::getConfigurationValueString() const
{
    return m_ConfigurationValueString;
}

void BTMConfiguredValue_1341::setConfigurationValueString(const utility::string_t& value)
{
    m_ConfigurationValueString = value;
    m_ConfigurationValueStringIsSet = true;
}

bool BTMConfiguredValue_1341::configurationValueStringIsSet() const
{
    return m_ConfigurationValueStringIsSet;
}

void BTMConfiguredValue_1341::unsetConfigurationValueString()
{
    m_ConfigurationValueStringIsSet = false;
}
utility::string_t BTMConfiguredValue_1341::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMConfiguredValue_1341::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMConfiguredValue_1341::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMConfiguredValue_1341::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMConfiguredValue_1341::getNodeId() const
{
    return m_NodeId;
}

void BTMConfiguredValue_1341::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMConfiguredValue_1341::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMConfiguredValue_1341::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
std::shared_ptr<BTMParameter_1> BTMConfiguredValue_1341::getValue() const
{
    return m_Value;
}

void BTMConfiguredValue_1341::setValue(const std::shared_ptr<BTMParameter_1>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BTMConfiguredValue_1341::valueIsSet() const
{
    return m_ValueIsSet;
}

void BTMConfiguredValue_1341::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


