/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTDocumentElementInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentElementInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentElementInfo_H_


#include "../ModelBase.h"

#include "BTThumbnailInfo.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTDocumentElementInfo
    : public ModelBase
{
public:
    BTDocumentElementInfo();
    virtual ~BTDocumentElementInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTDocumentElementInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAngleUnits() const;
    bool angleUnitsIsSet() const;
    void unsetAngleUnits();

    void setAngleUnits(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataType() const;
    bool dataTypeIsSet() const;
    void unsetDataType();

    void setDataType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementType() const;
    bool elementTypeIsSet() const;
    void unsetElementType();

    void setElementType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFilename() const;
    bool filenameIsSet() const;
    void unsetFilename();

    void setFilename(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getForeignDataId() const;
    bool foreignDataIdIsSet() const;
    void unsetForeignDataId();

    void setForeignDataId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLengthUnits() const;
    bool lengthUnitsIsSet() const;
    void unsetLengthUnits();

    void setLengthUnits(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMassUnits() const;
    bool massUnitsIsSet() const;
    void unsetMassUnits();

    void setMassUnits(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMicroversionId() const;
    bool microversionIdIsSet() const;
    void unsetMicroversionId();

    void setMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecifiedUnit() const;
    bool specifiedUnitIsSet() const;
    void unsetSpecifiedUnit();

    void setSpecifiedUnit(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTThumbnailInfo> getThumbnailInfo() const;
    bool thumbnailInfoIsSet() const;
    void unsetThumbnailInfo();

    void setThumbnailInfo(const std::shared_ptr<BTThumbnailInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThumbnails() const;
    bool thumbnailsIsSet() const;
    void unsetThumbnails();

    void setThumbnails(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUnupdatable() const;
    bool unupdatableIsSet() const;
    void unsetUnupdatable();

    void setUnupdatable(bool value);


protected:
    utility::string_t m_AngleUnits;
    bool m_AngleUnitsIsSet;
    utility::string_t m_DataType;
    bool m_DataTypeIsSet;
    utility::string_t m_ElementType;
    bool m_ElementTypeIsSet;
    utility::string_t m_Filename;
    bool m_FilenameIsSet;
    utility::string_t m_ForeignDataId;
    bool m_ForeignDataIdIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_LengthUnits;
    bool m_LengthUnitsIsSet;
    utility::string_t m_MassUnits;
    bool m_MassUnitsIsSet;
    utility::string_t m_MicroversionId;
    bool m_MicroversionIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_SpecifiedUnit;
    bool m_SpecifiedUnitIsSet;
    std::shared_ptr<BTThumbnailInfo> m_ThumbnailInfo;
    bool m_ThumbnailInfoIsSet;
    utility::string_t m_Thumbnails;
    bool m_ThumbnailsIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    bool m_Unupdatable;
    bool m_UnupdatableIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentElementInfo_H_ */
