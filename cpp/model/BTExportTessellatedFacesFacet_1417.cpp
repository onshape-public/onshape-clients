/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportTessellatedFacesFacet_1417.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportTessellatedFacesFacet_1417::BTExportTessellatedFacesFacet_1417()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_IndicesIsSet = false;
    m_NormalIsSet = false;
    m_NormalsIsSet = false;
    m_TextureCoordinatesIsSet = false;
    m_VerticesIsSet = false;
}

BTExportTessellatedFacesFacet_1417::~BTExportTessellatedFacesFacet_1417()
{
}

void BTExportTessellatedFacesFacet_1417::validate()
{
    // TODO: implement validation
}

web::json::value BTExportTessellatedFacesFacet_1417::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_IndicesIsSet)
    {
        val[utility::conversions::to_string_t("indices")] = ModelBase::toJson(m_Indices);
    }
    if(m_NormalIsSet)
    {
        val[utility::conversions::to_string_t("normal")] = ModelBase::toJson(m_Normal);
    }
    if(m_NormalsIsSet)
    {
        val[utility::conversions::to_string_t("normals")] = ModelBase::toJson(m_Normals);
    }
    if(m_TextureCoordinatesIsSet)
    {
        val[utility::conversions::to_string_t("textureCoordinates")] = ModelBase::toJson(m_TextureCoordinates);
    }
    if(m_VerticesIsSet)
    {
        val[utility::conversions::to_string_t("vertices")] = ModelBase::toJson(m_Vertices);
    }

    return val;
}

bool BTExportTessellatedFacesFacet_1417::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("indices"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_indices;
            ok &= ModelBase::fromJson(fieldValue, refVal_indices);
            setIndices(refVal_indices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("normal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("normal"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_normal;
            ok &= ModelBase::fromJson(fieldValue, refVal_normal);
            setNormal(refVal_normal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("normals")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("normals"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVector3d_389>> refVal_normals;
            ok &= ModelBase::fromJson(fieldValue, refVal_normals);
            setNormals(refVal_normals);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("textureCoordinates")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("textureCoordinates"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVector2d_1812>> refVal_textureCoordinates;
            ok &= ModelBase::fromJson(fieldValue, refVal_textureCoordinates);
            setTextureCoordinates(refVal_textureCoordinates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vertices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vertices"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVector3d_389>> refVal_vertices;
            ok &= ModelBase::fromJson(fieldValue, refVal_vertices);
            setVertices(refVal_vertices);
        }
    }
    return ok;
}

void BTExportTessellatedFacesFacet_1417::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IndicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indices"), m_Indices));
    }
    if(m_NormalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("normal"), m_Normal));
    }
    if(m_NormalsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("normals"), m_Normals));
    }
    if(m_TextureCoordinatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("textureCoordinates"), m_TextureCoordinates));
    }
    if(m_VerticesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vertices"), m_Vertices));
    }
}

bool BTExportTessellatedFacesFacet_1417::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indices")))
    {
        std::vector<int32_t> refVal_indices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("indices")), refVal_indices );
        setIndices(refVal_indices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("normal")))
    {
        std::shared_ptr<BTVector3d_389> refVal_normal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("normal")), refVal_normal );
        setNormal(refVal_normal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("normals")))
    {
        std::vector<std::shared_ptr<BTVector3d_389>> refVal_normals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("normals")), refVal_normals );
        setNormals(refVal_normals);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("textureCoordinates")))
    {
        std::vector<std::shared_ptr<BTVector2d_1812>> refVal_textureCoordinates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("textureCoordinates")), refVal_textureCoordinates );
        setTextureCoordinates(refVal_textureCoordinates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vertices")))
    {
        std::vector<std::shared_ptr<BTVector3d_389>> refVal_vertices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vertices")), refVal_vertices );
        setVertices(refVal_vertices);
    }
    return ok;
}

utility::string_t BTExportTessellatedFacesFacet_1417::getBtType() const
{
    return m_BtType;
}

void BTExportTessellatedFacesFacet_1417::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::vector<int32_t>& BTExportTessellatedFacesFacet_1417::getIndices()
{
    return m_Indices;
}

void BTExportTessellatedFacesFacet_1417::setIndices(std::vector<int32_t> value)
{
    m_Indices = value;
    m_IndicesIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::indicesIsSet() const
{
    return m_IndicesIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetIndices()
{
    m_IndicesIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportTessellatedFacesFacet_1417::getNormal() const
{
    return m_Normal;
}

void BTExportTessellatedFacesFacet_1417::setNormal(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Normal = value;
    m_NormalIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::normalIsSet() const
{
    return m_NormalIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetNormal()
{
    m_NormalIsSet = false;
}
std::vector<std::shared_ptr<BTVector3d_389>>& BTExportTessellatedFacesFacet_1417::getNormals()
{
    return m_Normals;
}

void BTExportTessellatedFacesFacet_1417::setNormals(const std::vector<std::shared_ptr<BTVector3d_389>>& value)
{
    m_Normals = value;
    m_NormalsIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::normalsIsSet() const
{
    return m_NormalsIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetNormals()
{
    m_NormalsIsSet = false;
}
std::vector<std::shared_ptr<BTVector2d_1812>>& BTExportTessellatedFacesFacet_1417::getTextureCoordinates()
{
    return m_TextureCoordinates;
}

void BTExportTessellatedFacesFacet_1417::setTextureCoordinates(const std::vector<std::shared_ptr<BTVector2d_1812>>& value)
{
    m_TextureCoordinates = value;
    m_TextureCoordinatesIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::textureCoordinatesIsSet() const
{
    return m_TextureCoordinatesIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetTextureCoordinates()
{
    m_TextureCoordinatesIsSet = false;
}
std::vector<std::shared_ptr<BTVector3d_389>>& BTExportTessellatedFacesFacet_1417::getVertices()
{
    return m_Vertices;
}

void BTExportTessellatedFacesFacet_1417::setVertices(const std::vector<std::shared_ptr<BTVector3d_389>>& value)
{
    m_Vertices = value;
    m_VerticesIsSet = true;
}

bool BTExportTessellatedFacesFacet_1417::verticesIsSet() const
{
    return m_VerticesIsSet;
}

void BTExportTessellatedFacesFacet_1417::unsetVertices()
{
    m_VerticesIsSet = false;
}
}
}
}
}


