/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTIdTranslationInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTIdTranslationInfo::BTIdTranslationInfo()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_IdsIsSet = false;
    m_SourceDocumentMicroversion = utility::conversions::to_string_t("");
    m_SourceDocumentMicroversionIsSet = false;
    m_TargetDocumentMicroversion = utility::conversions::to_string_t("");
    m_TargetDocumentMicroversionIsSet = false;
}

BTIdTranslationInfo::~BTIdTranslationInfo()
{
}

void BTIdTranslationInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTIdTranslationInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_IdsIsSet)
    {
        val[utility::conversions::to_string_t("ids")] = ModelBase::toJson(m_Ids);
    }
    if(m_SourceDocumentMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("sourceDocumentMicroversion")] = ModelBase::toJson(m_SourceDocumentMicroversion);
    }
    if(m_TargetDocumentMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("targetDocumentMicroversion")] = ModelBase::toJson(m_TargetDocumentMicroversion);
    }

    return val;
}

bool BTIdTranslationInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ids")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ids"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTIdTranslationResultInfo>> refVal_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_ids);
            setIds(refVal_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceDocumentMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceDocumentMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceDocumentMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceDocumentMicroversion);
            setSourceDocumentMicroversion(refVal_sourceDocumentMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetDocumentMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetDocumentMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetDocumentMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetDocumentMicroversion);
            setTargetDocumentMicroversion(refVal_targetDocumentMicroversion);
        }
    }
    return ok;
}

void BTIdTranslationInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_IdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ids"), m_Ids));
    }
    if(m_SourceDocumentMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceDocumentMicroversion"), m_SourceDocumentMicroversion));
    }
    if(m_TargetDocumentMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetDocumentMicroversion"), m_TargetDocumentMicroversion));
    }
}

bool BTIdTranslationInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ids")))
    {
        std::vector<std::shared_ptr<BTIdTranslationResultInfo>> refVal_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ids")), refVal_ids );
        setIds(refVal_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceDocumentMicroversion")))
    {
        utility::string_t refVal_sourceDocumentMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceDocumentMicroversion")), refVal_sourceDocumentMicroversion );
        setSourceDocumentMicroversion(refVal_sourceDocumentMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetDocumentMicroversion")))
    {
        utility::string_t refVal_targetDocumentMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetDocumentMicroversion")), refVal_targetDocumentMicroversion );
        setTargetDocumentMicroversion(refVal_targetDocumentMicroversion);
    }
    return ok;
}

utility::string_t BTIdTranslationInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTIdTranslationInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTIdTranslationInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTIdTranslationInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTIdTranslationInfo::getElementId() const
{
    return m_ElementId;
}

void BTIdTranslationInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTIdTranslationInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTIdTranslationInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
std::vector<std::shared_ptr<BTIdTranslationResultInfo>>& BTIdTranslationInfo::getIds()
{
    return m_Ids;
}

void BTIdTranslationInfo::setIds(const std::vector<std::shared_ptr<BTIdTranslationResultInfo>>& value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}

bool BTIdTranslationInfo::idsIsSet() const
{
    return m_IdsIsSet;
}

void BTIdTranslationInfo::unsetIds()
{
    m_IdsIsSet = false;
}
utility::string_t BTIdTranslationInfo::getSourceDocumentMicroversion() const
{
    return m_SourceDocumentMicroversion;
}

void BTIdTranslationInfo::setSourceDocumentMicroversion(const utility::string_t& value)
{
    m_SourceDocumentMicroversion = value;
    m_SourceDocumentMicroversionIsSet = true;
}

bool BTIdTranslationInfo::sourceDocumentMicroversionIsSet() const
{
    return m_SourceDocumentMicroversionIsSet;
}

void BTIdTranslationInfo::unsetSourceDocumentMicroversion()
{
    m_SourceDocumentMicroversionIsSet = false;
}
utility::string_t BTIdTranslationInfo::getTargetDocumentMicroversion() const
{
    return m_TargetDocumentMicroversion;
}

void BTIdTranslationInfo::setTargetDocumentMicroversion(const utility::string_t& value)
{
    m_TargetDocumentMicroversion = value;
    m_TargetDocumentMicroversionIsSet = true;
}

bool BTIdTranslationInfo::targetDocumentMicroversionIsSet() const
{
    return m_TargetDocumentMicroversionIsSet;
}

void BTIdTranslationInfo::unsetTargetDocumentMicroversion()
{
    m_TargetDocumentMicroversionIsSet = false;
}
}
}
}
}


