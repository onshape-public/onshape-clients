/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppAssociativeDataInfoArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppAssociativeDataInfoArray::BTAppAssociativeDataInfoArray()
{
    m_ChangeId = utility::conversions::to_string_t("");
    m_ChangeIdIsSet = false;
    m_ErrorCode = 0;
    m_ErrorCodeIsSet = false;
    m_ErrorDescription = utility::conversions::to_string_t("");
    m_ErrorDescriptionIsSet = false;
    m_ErrorValue = utility::conversions::to_string_t("");
    m_ErrorValueIsSet = false;
    m_ItemsIsSet = false;
    m_ParentChangeId = utility::conversions::to_string_t("");
    m_ParentChangeIdIsSet = false;
}

BTAppAssociativeDataInfoArray::~BTAppAssociativeDataInfoArray()
{
}

void BTAppAssociativeDataInfoArray::validate()
{
    // TODO: implement validation
}

web::json::value BTAppAssociativeDataInfoArray::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("changeId")] = ModelBase::toJson(m_ChangeId);
    }
    if(m_ErrorCodeIsSet)
    {
        val[utility::conversions::to_string_t("errorCode")] = ModelBase::toJson(m_ErrorCode);
    }
    if(m_ErrorDescriptionIsSet)
    {
        val[utility::conversions::to_string_t("errorDescription")] = ModelBase::toJson(m_ErrorDescription);
    }
    if(m_ErrorValueIsSet)
    {
        val[utility::conversions::to_string_t("errorValue")] = ModelBase::toJson(m_ErrorValue);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t("items")] = ModelBase::toJson(m_Items);
    }
    if(m_ParentChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("parentChangeId")] = ModelBase::toJson(m_ParentChangeId);
    }

    return val;
}

bool BTAppAssociativeDataInfoArray::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_changeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_changeId);
            setChangeId(refVal_changeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_errorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorCode);
            setErrorCode(refVal_errorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorDescription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorDescription"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorDescription);
            setErrorDescription(refVal_errorDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorValue);
            setErrorValue(refVal_errorValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("items")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("items"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAssociativeDataInfo>> refVal_items;
            ok &= ModelBase::fromJson(fieldValue, refVal_items);
            setItems(refVal_items);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentChangeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentChangeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentChangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentChangeId);
            setParentChangeId(refVal_parentChangeId);
        }
    }
    return ok;
}

void BTAppAssociativeDataInfoArray::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changeId"), m_ChangeId));
    }
    if(m_ErrorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorCode"), m_ErrorCode));
    }
    if(m_ErrorDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorDescription"), m_ErrorDescription));
    }
    if(m_ErrorValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorValue"), m_ErrorValue));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("items"), m_Items));
    }
    if(m_ParentChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentChangeId"), m_ParentChangeId));
    }
}

bool BTAppAssociativeDataInfoArray::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changeId")))
    {
        utility::string_t refVal_changeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changeId")), refVal_changeId );
        setChangeId(refVal_changeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorCode")))
    {
        int32_t refVal_errorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorCode")), refVal_errorCode );
        setErrorCode(refVal_errorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorDescription")))
    {
        utility::string_t refVal_errorDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorDescription")), refVal_errorDescription );
        setErrorDescription(refVal_errorDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorValue")))
    {
        utility::string_t refVal_errorValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorValue")), refVal_errorValue );
        setErrorValue(refVal_errorValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("items")))
    {
        std::vector<std::shared_ptr<BTAssociativeDataInfo>> refVal_items;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("items")), refVal_items );
        setItems(refVal_items);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentChangeId")))
    {
        utility::string_t refVal_parentChangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentChangeId")), refVal_parentChangeId );
        setParentChangeId(refVal_parentChangeId);
    }
    return ok;
}

utility::string_t BTAppAssociativeDataInfoArray::getChangeId() const
{
    return m_ChangeId;
}

void BTAppAssociativeDataInfoArray::setChangeId(const utility::string_t& value)
{
    m_ChangeId = value;
    m_ChangeIdIsSet = true;
}

bool BTAppAssociativeDataInfoArray::changeIdIsSet() const
{
    return m_ChangeIdIsSet;
}

void BTAppAssociativeDataInfoArray::unsetChangeId()
{
    m_ChangeIdIsSet = false;
}
int32_t BTAppAssociativeDataInfoArray::getErrorCode() const
{
    return m_ErrorCode;
}

void BTAppAssociativeDataInfoArray::setErrorCode(int32_t value)
{
    m_ErrorCode = value;
    m_ErrorCodeIsSet = true;
}

bool BTAppAssociativeDataInfoArray::errorCodeIsSet() const
{
    return m_ErrorCodeIsSet;
}

void BTAppAssociativeDataInfoArray::unsetErrorCode()
{
    m_ErrorCodeIsSet = false;
}
utility::string_t BTAppAssociativeDataInfoArray::getErrorDescription() const
{
    return m_ErrorDescription;
}

void BTAppAssociativeDataInfoArray::setErrorDescription(const utility::string_t& value)
{
    m_ErrorDescription = value;
    m_ErrorDescriptionIsSet = true;
}

bool BTAppAssociativeDataInfoArray::errorDescriptionIsSet() const
{
    return m_ErrorDescriptionIsSet;
}

void BTAppAssociativeDataInfoArray::unsetErrorDescription()
{
    m_ErrorDescriptionIsSet = false;
}
utility::string_t BTAppAssociativeDataInfoArray::getErrorValue() const
{
    return m_ErrorValue;
}

void BTAppAssociativeDataInfoArray::setErrorValue(const utility::string_t& value)
{
    m_ErrorValue = value;
    m_ErrorValueIsSet = true;
}

bool BTAppAssociativeDataInfoArray::errorValueIsSet() const
{
    return m_ErrorValueIsSet;
}

void BTAppAssociativeDataInfoArray::unsetErrorValue()
{
    m_ErrorValueIsSet = false;
}
std::vector<std::shared_ptr<BTAssociativeDataInfo>>& BTAppAssociativeDataInfoArray::getItems()
{
    return m_Items;
}

void BTAppAssociativeDataInfoArray::setItems(const std::vector<std::shared_ptr<BTAssociativeDataInfo>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool BTAppAssociativeDataInfoArray::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void BTAppAssociativeDataInfoArray::unsetItems()
{
    m_ItemsIsSet = false;
}
utility::string_t BTAppAssociativeDataInfoArray::getParentChangeId() const
{
    return m_ParentChangeId;
}

void BTAppAssociativeDataInfoArray::setParentChangeId(const utility::string_t& value)
{
    m_ParentChangeId = value;
    m_ParentChangeIdIsSet = true;
}

bool BTAppAssociativeDataInfoArray::parentChangeIdIsSet() const
{
    return m_ParentChangeIdIsSet;
}

void BTAppAssociativeDataInfoArray::unsetParentChangeId()
{
    m_ParentChangeIdIsSet = false;
}
}
}
}
}


