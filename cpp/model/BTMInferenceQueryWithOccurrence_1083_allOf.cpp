/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMInferenceQueryWithOccurrence_1083_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMInferenceQueryWithOccurrence_1083_allOf::BTMInferenceQueryWithOccurrence_1083_allOf()
{
    m_SecondEntityQuery = utility::conversions::to_string_t("");
    m_SecondEntityQueryIsSet = false;
    m_InferenceType = utility::conversions::to_string_t("");
    m_InferenceTypeIsSet = false;
    m_SecondDeterministicId = utility::conversions::to_string_t("");
    m_SecondDeterministicIdIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMInferenceQueryWithOccurrence_1083_allOf::~BTMInferenceQueryWithOccurrence_1083_allOf()
{
}

void BTMInferenceQueryWithOccurrence_1083_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMInferenceQueryWithOccurrence_1083_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SecondEntityQueryIsSet)
    {
        val[utility::conversions::to_string_t("secondEntityQuery")] = ModelBase::toJson(m_SecondEntityQuery);
    }
    if(m_InferenceTypeIsSet)
    {
        val[utility::conversions::to_string_t("inferenceType")] = ModelBase::toJson(m_InferenceType);
    }
    if(m_SecondDeterministicIdIsSet)
    {
        val[utility::conversions::to_string_t("secondDeterministicId")] = ModelBase::toJson(m_SecondDeterministicId);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("secondEntityQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondEntityQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_secondEntityQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondEntityQuery);
            setSecondEntityQuery(refVal_secondEntityQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inferenceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inferenceType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inferenceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_inferenceType);
            setInferenceType(refVal_inferenceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondDeterministicId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondDeterministicId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_secondDeterministicId;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondDeterministicId);
            setSecondDeterministicId(refVal_secondDeterministicId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SecondEntityQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondEntityQuery"), m_SecondEntityQuery));
    }
    if(m_InferenceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inferenceType"), m_InferenceType));
    }
    if(m_SecondDeterministicIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondDeterministicId"), m_SecondDeterministicId));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("secondEntityQuery")))
    {
        utility::string_t refVal_secondEntityQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondEntityQuery")), refVal_secondEntityQuery );
        setSecondEntityQuery(refVal_secondEntityQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inferenceType")))
    {
        utility::string_t refVal_inferenceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inferenceType")), refVal_inferenceType );
        setInferenceType(refVal_inferenceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondDeterministicId")))
    {
        utility::string_t refVal_secondDeterministicId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondDeterministicId")), refVal_secondDeterministicId );
        setSecondDeterministicId(refVal_secondDeterministicId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTMInferenceQueryWithOccurrence_1083_allOf::getSecondEntityQuery() const
{
    return m_SecondEntityQuery;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::setSecondEntityQuery(const utility::string_t& value)
{
    m_SecondEntityQuery = value;
    m_SecondEntityQueryIsSet = true;
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::secondEntityQueryIsSet() const
{
    return m_SecondEntityQueryIsSet;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::unsetSecondEntityQuery()
{
    m_SecondEntityQueryIsSet = false;
}
utility::string_t BTMInferenceQueryWithOccurrence_1083_allOf::getInferenceType() const
{
    return m_InferenceType;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::setInferenceType(const utility::string_t& value)
{
    m_InferenceType = value;
    m_InferenceTypeIsSet = true;
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::inferenceTypeIsSet() const
{
    return m_InferenceTypeIsSet;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::unsetInferenceType()
{
    m_InferenceTypeIsSet = false;
}
utility::string_t BTMInferenceQueryWithOccurrence_1083_allOf::getSecondDeterministicId() const
{
    return m_SecondDeterministicId;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::setSecondDeterministicId(const utility::string_t& value)
{
    m_SecondDeterministicId = value;
    m_SecondDeterministicIdIsSet = true;
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::secondDeterministicIdIsSet() const
{
    return m_SecondDeterministicIdIsSet;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::unsetSecondDeterministicId()
{
    m_SecondDeterministicIdIsSet = false;
}
utility::string_t BTMInferenceQueryWithOccurrence_1083_allOf::getBtType() const
{
    return m_BtType;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMInferenceQueryWithOccurrence_1083_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMInferenceQueryWithOccurrence_1083_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


