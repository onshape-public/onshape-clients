/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMoveElementParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementParams_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMoveElementParams
    : public ModelBase
{
public:
    BTMoveElementParams();
    virtual ~BTMoveElementParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMoveElementParams members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAnchorElementId() const;
    bool anchorElementIdIsSet() const;
    void unsetAnchorElementId();

    void setAnchorElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getElementOriginalToNewMap();
    bool elementOriginalToNewMapIsSet() const;
    void unsetElementOriginalToNewMap();

    void setElementOriginalToNewMap(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getElements();
    bool elementsIsSet() const;
    void unsetElements();

    void setElements(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isGenerateUnknownMessages() const;
    bool generateUnknownMessagesIsSet() const;
    void unsetGenerateUnknownMessages();

    void setGenerateUnknownMessages(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getImportData();
    bool importDataIsSet() const;
    void unsetImportData();

    void setImportData(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsCopy() const;
    bool isCopyIsSet() const;
    void unsetIsCopy();

    void setIsCopy(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDeepCopy() const;
    bool isDeepCopyIsSet() const;
    void unsetIsDeepCopy();

    void setIsDeepCopy(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGroupAnchor() const;
    bool isGroupAnchorIsSet() const;
    void unsetIsGroupAnchor();

    void setIsGroupAnchor(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsNewDocument() const;
    bool isNewDocumentIsSet() const;
    void unsetIsNewDocument();

    void setIsNewDocument(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsPublic() const;
    bool isPublicIsSet() const;
    void unsetIsPublic();

    void setIsPublic(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSelectivePartOut() const;
    bool isSelectivePartOutIsSet() const;
    void unsetIsSelectivePartOut();

    void setIsSelectivePartOut(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNeedNewVersion() const;
    bool needNewVersionIsSet() const;
    void unsetNeedNewVersion();

    void setNeedNewVersion(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerEmail() const;
    bool ownerEmailIsSet() const;
    void unsetOwnerEmail();

    void setOwnerEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwnerId();

    void setOwnerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOwnerType() const;
    bool ownerTypeIsSet() const;
    void unsetOwnerType();

    void setOwnerType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProjectId();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceDocumentId() const;
    bool sourceDocumentIdIsSet() const;
    void unsetSourceDocumentId();

    void setSourceDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceWorkspaceId() const;
    bool sourceWorkspaceIdIsSet() const;
    void unsetSourceWorkspaceId();

    void setSourceWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetDocumentId() const;
    bool targetDocumentIdIsSet() const;
    void unsetTargetDocumentId();

    void setTargetDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetWorkspaceId() const;
    bool targetWorkspaceIdIsSet() const;
    void unsetTargetWorkspaceId();

    void setTargetWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionName() const;
    bool versionNameIsSet() const;
    void unsetVersionName();

    void setVersionName(const utility::string_t& value);


protected:
    utility::string_t m_AnchorElementId;
    bool m_AnchorElementIdIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::map<utility::string_t, utility::string_t> m_ElementOriginalToNewMap;
    bool m_ElementOriginalToNewMapIsSet;
    std::vector<utility::string_t> m_Elements;
    bool m_ElementsIsSet;
    bool m_GenerateUnknownMessages;
    bool m_GenerateUnknownMessagesIsSet;
    std::vector<utility::string_t> m_ImportData;
    bool m_ImportDataIsSet;
    bool m_IsCopy;
    bool m_IsCopyIsSet;
    bool m_IsDeepCopy;
    bool m_IsDeepCopyIsSet;
    bool m_IsGroupAnchor;
    bool m_IsGroupAnchorIsSet;
    bool m_IsNewDocument;
    bool m_IsNewDocumentIsSet;
    bool m_IsPublic;
    bool m_IsPublicIsSet;
    bool m_IsSelectivePartOut;
    bool m_IsSelectivePartOutIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_NeedNewVersion;
    bool m_NeedNewVersionIsSet;
    utility::string_t m_OwnerEmail;
    bool m_OwnerEmailIsSet;
    utility::string_t m_OwnerId;
    bool m_OwnerIdIsSet;
    int32_t m_OwnerType;
    bool m_OwnerTypeIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_ProjectId;
    bool m_ProjectIdIsSet;
    utility::string_t m_SourceDocumentId;
    bool m_SourceDocumentIdIsSet;
    utility::string_t m_SourceWorkspaceId;
    bool m_SourceWorkspaceIdIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_TargetDocumentId;
    bool m_TargetDocumentIdIsSet;
    utility::string_t m_TargetWorkspaceId;
    bool m_TargetWorkspaceIdIsSet;
    utility::string_t m_VersionName;
    bool m_VersionNameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementParams_H_ */
