/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWorkflowSnapshotInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWorkflowSnapshotInfo::BTWorkflowSnapshotInfo()
{
    m_ActionsIsSet = false;
    m_ApproverIdsIsSet = false;
    m_IsDiscarded = false;
    m_IsDiscardedIsSet = false;
    m_IsFrozen = false;
    m_IsFrozenIsSet = false;
    m_IsSetup = false;
    m_IsSetupIsSet = false;
    m_MetadataState = utility::conversions::to_string_t("");
    m_MetadataStateIsSet = false;
    m_NotifierIdsIsSet = false;
    m_StateIsSet = false;
}

BTWorkflowSnapshotInfo::~BTWorkflowSnapshotInfo()
{
}

void BTWorkflowSnapshotInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTWorkflowSnapshotInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActionsIsSet)
    {
        val[utility::conversions::to_string_t("actions")] = ModelBase::toJson(m_Actions);
    }
    if(m_ApproverIdsIsSet)
    {
        val[utility::conversions::to_string_t("approverIds")] = ModelBase::toJson(m_ApproverIds);
    }
    if(m_IsDiscardedIsSet)
    {
        val[utility::conversions::to_string_t("isDiscarded")] = ModelBase::toJson(m_IsDiscarded);
    }
    if(m_IsFrozenIsSet)
    {
        val[utility::conversions::to_string_t("isFrozen")] = ModelBase::toJson(m_IsFrozen);
    }
    if(m_IsSetupIsSet)
    {
        val[utility::conversions::to_string_t("isSetup")] = ModelBase::toJson(m_IsSetup);
    }
    if(m_MetadataStateIsSet)
    {
        val[utility::conversions::to_string_t("metadataState")] = ModelBase::toJson(m_MetadataState);
    }
    if(m_NotifierIdsIsSet)
    {
        val[utility::conversions::to_string_t("notifierIds")] = ModelBase::toJson(m_NotifierIds);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }

    return val;
}

bool BTWorkflowSnapshotInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("actions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("actions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTWorkflowActionInfo>> refVal_actions;
            ok &= ModelBase::fromJson(fieldValue, refVal_actions);
            setActions(refVal_actions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("approverIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("approverIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_approverIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_approverIds);
            setApproverIds(refVal_approverIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isDiscarded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isDiscarded"));
        if(!fieldValue.is_null())
        {
            bool refVal_isDiscarded;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDiscarded);
            setIsDiscarded(refVal_isDiscarded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFrozen")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFrozen"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFrozen;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFrozen);
            setIsFrozen(refVal_isFrozen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSetup")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSetup"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSetup;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSetup);
            setIsSetup(refVal_isSetup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadataState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadataState"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_metadataState;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadataState);
            setMetadataState(refVal_metadataState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifierIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notifierIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_notifierIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_notifierIds);
            setNotifierIds(refVal_notifierIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTWorkflowStateInfo> refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    return ok;
}

void BTWorkflowSnapshotInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ActionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("actions"), m_Actions));
    }
    if(m_ApproverIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("approverIds"), m_ApproverIds));
    }
    if(m_IsDiscardedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isDiscarded"), m_IsDiscarded));
    }
    if(m_IsFrozenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFrozen"), m_IsFrozen));
    }
    if(m_IsSetupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSetup"), m_IsSetup));
    }
    if(m_MetadataStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadataState"), m_MetadataState));
    }
    if(m_NotifierIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notifierIds"), m_NotifierIds));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
}

bool BTWorkflowSnapshotInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("actions")))
    {
        std::vector<std::shared_ptr<BTWorkflowActionInfo>> refVal_actions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("actions")), refVal_actions );
        setActions(refVal_actions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("approverIds")))
    {
        std::vector<utility::string_t> refVal_approverIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("approverIds")), refVal_approverIds );
        setApproverIds(refVal_approverIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isDiscarded")))
    {
        bool refVal_isDiscarded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isDiscarded")), refVal_isDiscarded );
        setIsDiscarded(refVal_isDiscarded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFrozen")))
    {
        bool refVal_isFrozen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFrozen")), refVal_isFrozen );
        setIsFrozen(refVal_isFrozen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSetup")))
    {
        bool refVal_isSetup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSetup")), refVal_isSetup );
        setIsSetup(refVal_isSetup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadataState")))
    {
        utility::string_t refVal_metadataState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadataState")), refVal_metadataState );
        setMetadataState(refVal_metadataState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifierIds")))
    {
        std::vector<utility::string_t> refVal_notifierIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notifierIds")), refVal_notifierIds );
        setNotifierIds(refVal_notifierIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        std::shared_ptr<BTWorkflowStateInfo> refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    return ok;
}

std::vector<std::shared_ptr<BTWorkflowActionInfo>>& BTWorkflowSnapshotInfo::getActions()
{
    return m_Actions;
}

void BTWorkflowSnapshotInfo::setActions(const std::vector<std::shared_ptr<BTWorkflowActionInfo>>& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}

bool BTWorkflowSnapshotInfo::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void BTWorkflowSnapshotInfo::unsetActions()
{
    m_ActionsIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowSnapshotInfo::getApproverIds()
{
    return m_ApproverIds;
}

void BTWorkflowSnapshotInfo::setApproverIds(const std::vector<utility::string_t>& value)
{
    m_ApproverIds = value;
    m_ApproverIdsIsSet = true;
}

bool BTWorkflowSnapshotInfo::approverIdsIsSet() const
{
    return m_ApproverIdsIsSet;
}

void BTWorkflowSnapshotInfo::unsetApproverIds()
{
    m_ApproverIdsIsSet = false;
}
bool BTWorkflowSnapshotInfo::isIsDiscarded() const
{
    return m_IsDiscarded;
}

void BTWorkflowSnapshotInfo::setIsDiscarded(bool value)
{
    m_IsDiscarded = value;
    m_IsDiscardedIsSet = true;
}

bool BTWorkflowSnapshotInfo::isDiscardedIsSet() const
{
    return m_IsDiscardedIsSet;
}

void BTWorkflowSnapshotInfo::unsetIsDiscarded()
{
    m_IsDiscardedIsSet = false;
}
bool BTWorkflowSnapshotInfo::isIsFrozen() const
{
    return m_IsFrozen;
}

void BTWorkflowSnapshotInfo::setIsFrozen(bool value)
{
    m_IsFrozen = value;
    m_IsFrozenIsSet = true;
}

bool BTWorkflowSnapshotInfo::isFrozenIsSet() const
{
    return m_IsFrozenIsSet;
}

void BTWorkflowSnapshotInfo::unsetIsFrozen()
{
    m_IsFrozenIsSet = false;
}
bool BTWorkflowSnapshotInfo::isIsSetup() const
{
    return m_IsSetup;
}

void BTWorkflowSnapshotInfo::setIsSetup(bool value)
{
    m_IsSetup = value;
    m_IsSetupIsSet = true;
}

bool BTWorkflowSnapshotInfo::isSetupIsSet() const
{
    return m_IsSetupIsSet;
}

void BTWorkflowSnapshotInfo::unsetIsSetup()
{
    m_IsSetupIsSet = false;
}
utility::string_t BTWorkflowSnapshotInfo::getMetadataState() const
{
    return m_MetadataState;
}

void BTWorkflowSnapshotInfo::setMetadataState(const utility::string_t& value)
{
    m_MetadataState = value;
    m_MetadataStateIsSet = true;
}

bool BTWorkflowSnapshotInfo::metadataStateIsSet() const
{
    return m_MetadataStateIsSet;
}

void BTWorkflowSnapshotInfo::unsetMetadataState()
{
    m_MetadataStateIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowSnapshotInfo::getNotifierIds()
{
    return m_NotifierIds;
}

void BTWorkflowSnapshotInfo::setNotifierIds(const std::vector<utility::string_t>& value)
{
    m_NotifierIds = value;
    m_NotifierIdsIsSet = true;
}

bool BTWorkflowSnapshotInfo::notifierIdsIsSet() const
{
    return m_NotifierIdsIsSet;
}

void BTWorkflowSnapshotInfo::unsetNotifierIds()
{
    m_NotifierIdsIsSet = false;
}
std::shared_ptr<BTWorkflowStateInfo> BTWorkflowSnapshotInfo::getState() const
{
    return m_State;
}

void BTWorkflowSnapshotInfo::setState(const std::shared_ptr<BTWorkflowStateInfo>& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTWorkflowSnapshotInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTWorkflowSnapshotInfo::unsetState()
{
    m_StateIsSet = false;
}
}
}
}
}


