/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMetadataPropertyConfigSummaryInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyConfigSummaryInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyConfigSummaryInfo_H_


#include "../ModelBase.h"

#include "BTMetadataCategorySummaryInfo.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMetadataPropertyConfigSummaryInfo
    : public ModelBase
{
public:
    BTMetadataPropertyConfigSummaryInfo();
    virtual ~BTMetadataPropertyConfigSummaryInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMetadataPropertyConfigSummaryInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryId() const;
    bool categoryIdIsSet() const;
    void unsetCategoryId();

    void setCategoryId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMetadataCategorySummaryInfo> getCategorySummaryInfo() const;
    bool categorySummaryInfoIsSet() const;
    void unsetCategorySummaryInfo();

    void setCategorySummaryInfo(const std::shared_ptr<BTMetadataCategorySummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();

    void setDisplayName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getObjectType() const;
    bool objectTypeIsSet() const;
    void unsetObjectType();

    void setObjectType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPropertyId() const;
    bool propertyIdIsSet() const;
    void unsetPropertyId();

    void setPropertyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPublishState() const;
    bool publishStateIsSet() const;
    void unsetPublishState();

    void setPublishState(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSchemaId() const;
    bool schemaIdIsSet() const;
    void unsetSchemaId();

    void setSchemaId(const utility::string_t& value);


protected:
    utility::string_t m_CategoryId;
    bool m_CategoryIdIsSet;
    std::shared_ptr<BTMetadataCategorySummaryInfo> m_CategorySummaryInfo;
    bool m_CategorySummaryInfoIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    int32_t m_ObjectType;
    bool m_ObjectTypeIsSet;
    utility::string_t m_PropertyId;
    bool m_PropertyIdIsSet;
    int32_t m_PublishState;
    bool m_PublishStateIsSet;
    utility::string_t m_SchemaId;
    bool m_SchemaIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyConfigSummaryInfo_H_ */
