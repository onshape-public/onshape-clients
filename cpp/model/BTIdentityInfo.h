/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTIdentityInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdentityInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdentityInfo_H_


#include "../ModelBase.h"

#include "BTUserSummaryInfo.h"
#include "BTTeamSummaryInfo.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTIdentityInfo
    : public ModelBase
{
public:
    BTIdentityInfo();
    virtual ~BTIdentityInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTIdentityInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getIdentityType() const;
    bool identityTypeIsSet() const;
    void unsetIdentityType();

    void setIdentityType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTTeamSummaryInfo> getTeam() const;
    bool teamIsSet() const;
    void unsetTeam();

    void setTeam(const std::shared_ptr<BTTeamSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_IdentityType;
    bool m_IdentityTypeIsSet;
    std::shared_ptr<BTTeamSummaryInfo> m_Team;
    bool m_TeamIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_User;
    bool m_UserIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdentityInfo_H_ */
