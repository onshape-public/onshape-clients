/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTWebhookParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTWebhookParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTWebhookParams_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTWebhookOptions.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTWebhookParams
    : public ModelBase
{
public:
    BTWebhookParams();
    virtual ~BTWebhookParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTWebhookParams members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClientId();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getEvents();
    bool eventsIsSet() const;
    void unsetEvents();

    void setEvents(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFilter() const;
    bool filterIsSet() const;
    void unsetFilter();

    void setFilter(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFolderId() const;
    bool folderIdIsSet() const;
    void unsetFolderId();

    void setFolderId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWebhookOptions> getOptions() const;
    bool optionsIsSet() const;
    void unsetOptions();

    void setOptions(const std::shared_ptr<BTWebhookOptions>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProjectId();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWorkspaceId() const;
    bool workspaceIdIsSet() const;
    void unsetWorkspaceId();

    void setWorkspaceId(const utility::string_t& value);


protected:
    utility::string_t m_ClientId;
    bool m_ClientIdIsSet;
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::vector<utility::string_t> m_Events;
    bool m_EventsIsSet;
    utility::string_t m_Filter;
    bool m_FilterIsSet;
    utility::string_t m_FolderId;
    bool m_FolderIdIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<BTWebhookOptions> m_Options;
    bool m_OptionsIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    utility::string_t m_ProjectId;
    bool m_ProjectIdIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    utility::string_t m_WorkspaceId;
    bool m_WorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTWebhookParams_H_ */
