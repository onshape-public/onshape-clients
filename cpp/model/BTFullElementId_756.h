/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTFullElementId_756.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTFullElementId_756_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTFullElementId_756_H_


#include "../ModelBase.h"

#include "BTMicroversionId_366.h"
#include "BTMicroversionIdAndConfiguration_2338.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTFullElementId_756
    : public ModelBase
{
public:
    BTFullElementId_756();
    virtual ~BTFullElementId_756();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTFullElementId_756 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isConfigured() const;
    bool configuredIsSet() const;
    void unsetConfigured();

    void setConfigured(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMicroversionId_366> getMicroversionId() const;
    bool microversionIdIsSet() const;
    void unsetMicroversionId();

    void setMicroversionId(const std::shared_ptr<BTMicroversionId_366>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> getMicroversionIdAndConfiguration() const;
    bool microversionIdAndConfigurationIsSet() const;
    void unsetMicroversionIdAndConfiguration();

    void setMicroversionIdAndConfiguration(const std::shared_ptr<BTMicroversionIdAndConfiguration_2338>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> getTarget() const;
    bool targetIsSet() const;
    void unsetTarget();

    void setTarget(const std::shared_ptr<BTMicroversionIdAndConfiguration_2338>& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    bool m_Configured;
    bool m_ConfiguredIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::shared_ptr<BTMicroversionId_366> m_MicroversionId;
    bool m_MicroversionIdIsSet;
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> m_MicroversionIdAndConfiguration;
    bool m_MicroversionIdAndConfigurationIsSet;
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> m_Target;
    bool m_TargetIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTFullElementId_756_H_ */
