/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMoveElementInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMoveElementInfo
    : public ModelBase
{
public:
    BTMoveElementInfo();
    virtual ~BTMoveElementInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMoveElementInfo members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getElementOriginalToNewMap();
    bool elementOriginalToNewMapIsSet() const;
    void unsetElementOriginalToNewMap();

    void setElementOriginalToNewMap(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorMessage() const;
    bool errorMessageIsSet() const;
    void unsetErrorMessage();

    void setErrorMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsNewDocument() const;
    bool isNewDocumentIsSet() const;
    void unsetIsNewDocument();

    void setIsNewDocument(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNewDocumentId() const;
    bool newDocumentIdIsSet() const;
    void unsetNewDocumentId();

    void setNewDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNewDocumentName() const;
    bool newDocumentNameIsSet() const;
    void unsetNewDocumentName();

    void setNewDocumentName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNewDocumentVersionId() const;
    bool newDocumentVersionIdIsSet() const;
    void unsetNewDocumentVersionId();

    void setNewDocumentVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNewWorkspaceId() const;
    bool newWorkspaceIdIsSet() const;
    void unsetNewWorkspaceId();

    void setNewWorkspaceId(const utility::string_t& value);


protected:
    std::map<utility::string_t, utility::string_t> m_ElementOriginalToNewMap;
    bool m_ElementOriginalToNewMapIsSet;
    utility::string_t m_ErrorMessage;
    bool m_ErrorMessageIsSet;
    bool m_IsNewDocument;
    bool m_IsNewDocumentIsSet;
    utility::string_t m_NewDocumentId;
    bool m_NewDocumentIdIsSet;
    utility::string_t m_NewDocumentName;
    bool m_NewDocumentNameIsSet;
    utility::string_t m_NewDocumentVersionId;
    bool m_NewDocumentVersionIdIsSet;
    utility::string_t m_NewWorkspaceId;
    bool m_NewWorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMoveElementInfo_H_ */
