/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBoundingBox_1052.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBoundingBox_1052::BTBoundingBox_1052()
{
    m_MaxCornerIsSet = false;
    m_MinCornerIsSet = false;
    m_Valid = false;
    m_ValidIsSet = false;
}

BTBoundingBox_1052::~BTBoundingBox_1052()
{
}

void BTBoundingBox_1052::validate()
{
    // TODO: implement validation
}

web::json::value BTBoundingBox_1052::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MaxCornerIsSet)
    {
        val[utility::conversions::to_string_t("maxCorner")] = ModelBase::toJson(m_MaxCorner);
    }
    if(m_MinCornerIsSet)
    {
        val[utility::conversions::to_string_t("minCorner")] = ModelBase::toJson(m_MinCorner);
    }
    if(m_ValidIsSet)
    {
        val[utility::conversions::to_string_t("valid")] = ModelBase::toJson(m_Valid);
    }

    return val;
}

bool BTBoundingBox_1052::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("maxCorner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxCorner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_maxCorner;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxCorner);
            setMaxCorner(refVal_maxCorner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minCorner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minCorner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_minCorner;
            ok &= ModelBase::fromJson(fieldValue, refVal_minCorner);
            setMinCorner(refVal_minCorner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valid"));
        if(!fieldValue.is_null())
        {
            bool refVal_valid;
            ok &= ModelBase::fromJson(fieldValue, refVal_valid);
            setValid(refVal_valid);
        }
    }
    return ok;
}

void BTBoundingBox_1052::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MaxCornerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxCorner"), m_MaxCorner));
    }
    if(m_MinCornerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minCorner"), m_MinCorner));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valid"), m_Valid));
    }
}

bool BTBoundingBox_1052::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxCorner")))
    {
        std::shared_ptr<BTVector3d_389> refVal_maxCorner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxCorner")), refVal_maxCorner );
        setMaxCorner(refVal_maxCorner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minCorner")))
    {
        std::shared_ptr<BTVector3d_389> refVal_minCorner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minCorner")), refVal_minCorner );
        setMinCorner(refVal_minCorner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valid")))
    {
        bool refVal_valid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valid")), refVal_valid );
        setValid(refVal_valid);
    }
    return ok;
}

std::shared_ptr<BTVector3d_389> BTBoundingBox_1052::getMaxCorner() const
{
    return m_MaxCorner;
}

void BTBoundingBox_1052::setMaxCorner(const std::shared_ptr<BTVector3d_389>& value)
{
    m_MaxCorner = value;
    m_MaxCornerIsSet = true;
}

bool BTBoundingBox_1052::maxCornerIsSet() const
{
    return m_MaxCornerIsSet;
}

void BTBoundingBox_1052::unsetMaxCorner()
{
    m_MaxCornerIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTBoundingBox_1052::getMinCorner() const
{
    return m_MinCorner;
}

void BTBoundingBox_1052::setMinCorner(const std::shared_ptr<BTVector3d_389>& value)
{
    m_MinCorner = value;
    m_MinCornerIsSet = true;
}

bool BTBoundingBox_1052::minCornerIsSet() const
{
    return m_MinCornerIsSet;
}

void BTBoundingBox_1052::unsetMinCorner()
{
    m_MinCornerIsSet = false;
}
bool BTBoundingBox_1052::isValid() const
{
    return m_Valid;
}

void BTBoundingBox_1052::setValid(bool value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}

bool BTBoundingBox_1052::validIsSet() const
{
    return m_ValidIsSet;
}

void BTBoundingBox_1052::unsetValid()
{
    m_ValidIsSet = false;
}
}
}
}
}


