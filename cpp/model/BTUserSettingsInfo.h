/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTUserSettingsInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserSettingsInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserSettingsInfo_H_


#include "../ModelBase.h"

#include "BTCommonUnitsInfo.h"
#include "BTDefaultUnitsInfo.h"
#include "BTSubstituteApproverInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTMaterialLibrarySettingsInfo.h"
#include "BTUnitsMaximumDisplayPrecisionInfo.h"
#include "BTUnitsDisplayPrecision.h"
#include "BTViewManipulationMouseKeyMappingInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTUserSettingsInfo
    : public ModelBase
{
public:
    BTUserSettingsInfo();
    virtual ~BTUserSettingsInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTUserSettingsInfo members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTCommonUnitsInfo> getCommonUnits() const;
    bool commonUnitsIsSet() const;
    void unsetCommonUnits();

    void setCommonUnits(const std::shared_ptr<BTCommonUnitsInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCustomColors();
    bool customColorsIsSet() const;
    void unsetCustomColors();

    void setCustomColors(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDefaultUnitsInfo> getDefaultUnits() const;
    bool defaultUnitsIsSet() const;
    void unsetDefaultUnits();

    void setDefaultUnits(const std::shared_ptr<BTDefaultUnitsInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDrawingBackgroundId() const;
    bool drawingBackgroundIdIsSet() const;
    void unsetDrawingBackgroundId();

    void setDrawingBackgroundId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnforceApplicationAcl() const;
    bool enforceApplicationAclIsSet() const;
    void unsetEnforceApplicationAcl();

    void setEnforceApplicationAcl(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExportDrawingOptions() const;
    bool exportDrawingOptionsIsSet() const;
    void unsetExportDrawingOptions();

    void setExportDrawingOptions(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExportSolidOptions() const;
    bool exportSolidOptionsIsSet() const;
    void unsetExportSolidOptions();

    void setExportSolidOptions(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportOptions() const;
    bool importOptionsIsSet() const;
    void unsetImportOptions();

    void setImportOptions(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocale() const;
    bool localeIsSet() const;
    void unsetLocale();

    void setLocale(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMaterialLibrarySettingsInfo> getMaterialLibrarySettings() const;
    bool materialLibrarySettingsIsSet() const;
    void unsetMaterialLibrarySettings();

    void setMaterialLibrarySettings(const std::shared_ptr<BTMaterialLibrarySettingsInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMiniToolbarSettings() const;
    bool miniToolbarSettingsIsSet() const;
    void unsetMiniToolbarSettings();

    void setMiniToolbarSettings(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMouseActions() const;
    bool mouseActionsIsSet() const;
    void unsetMouseActions();

    void setMouseActions(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isReverseScrollWheelZoomDirection() const;
    bool reverseScrollWheelZoomDirectionIsSet() const;
    void unsetReverseScrollWheelZoomDirection();

    void setReverseScrollWheelZoomDirection(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getStartupPage() const;
    bool startupPageIsSet() const;
    void unsetStartupPage();

    void setStartupPage(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTSubstituteApproverInfo>>& getSubstituteApprovers();
    bool substituteApproversIsSet() const;
    void unsetSubstituteApprovers();

    void setSubstituteApprovers(const std::vector<std::shared_ptr<BTSubstituteApproverInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUnitsDisplayPrecision> getUnitsDisplayPrecision() const;
    bool unitsDisplayPrecisionIsSet() const;
    void unsetUnitsDisplayPrecision();

    void setUnitsDisplayPrecision(const std::shared_ptr<BTUnitsDisplayPrecision>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo> getUnitsMaximumDisplayPrecision() const;
    bool unitsMaximumDisplayPrecisionIsSet() const;
    void unsetUnitsMaximumDisplayPrecision();

    void setUnitsMaximumDisplayPrecision(const std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUse24HourTime() const;
    bool use24HourTimeIsSet() const;
    void unsetUse24HourTime();

    void setUse24HourTime(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTViewManipulationMouseKeyMappingInfo> getViewManipulationMouseKeyMapping() const;
    bool viewManipulationMouseKeyMappingIsSet() const;
    void unsetViewManipulationMouseKeyMapping();

    void setViewManipulationMouseKeyMapping(const std::shared_ptr<BTViewManipulationMouseKeyMappingInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getViewMappingId() const;
    bool viewMappingIdIsSet() const;
    void unsetViewMappingId();

    void setViewMappingId(int32_t value);


protected:
    std::shared_ptr<BTCommonUnitsInfo> m_CommonUnits;
    bool m_CommonUnitsIsSet;
    std::vector<utility::string_t> m_CustomColors;
    bool m_CustomColorsIsSet;
    std::shared_ptr<BTDefaultUnitsInfo> m_DefaultUnits;
    bool m_DefaultUnitsIsSet;
    int32_t m_DrawingBackgroundId;
    bool m_DrawingBackgroundIdIsSet;
    bool m_EnforceApplicationAcl;
    bool m_EnforceApplicationAclIsSet;
    utility::string_t m_ExportDrawingOptions;
    bool m_ExportDrawingOptionsIsSet;
    utility::string_t m_ExportSolidOptions;
    bool m_ExportSolidOptionsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ImportOptions;
    bool m_ImportOptionsIsSet;
    utility::string_t m_Locale;
    bool m_LocaleIsSet;
    std::shared_ptr<BTMaterialLibrarySettingsInfo> m_MaterialLibrarySettings;
    bool m_MaterialLibrarySettingsIsSet;
    utility::string_t m_MiniToolbarSettings;
    bool m_MiniToolbarSettingsIsSet;
    utility::string_t m_MouseActions;
    bool m_MouseActionsIsSet;
    bool m_ReverseScrollWheelZoomDirection;
    bool m_ReverseScrollWheelZoomDirectionIsSet;
    int32_t m_StartupPage;
    bool m_StartupPageIsSet;
    std::vector<std::shared_ptr<BTSubstituteApproverInfo>> m_SubstituteApprovers;
    bool m_SubstituteApproversIsSet;
    std::shared_ptr<BTUnitsDisplayPrecision> m_UnitsDisplayPrecision;
    bool m_UnitsDisplayPrecisionIsSet;
    std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo> m_UnitsMaximumDisplayPrecision;
    bool m_UnitsMaximumDisplayPrecisionIsSet;
    bool m_Use24HourTime;
    bool m_Use24HourTimeIsSet;
    std::shared_ptr<BTViewManipulationMouseKeyMappingInfo> m_ViewManipulationMouseKeyMapping;
    bool m_ViewManipulationMouseKeyMappingIsSet;
    int32_t m_ViewMappingId;
    bool m_ViewMappingIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserSettingsInfo_H_ */
