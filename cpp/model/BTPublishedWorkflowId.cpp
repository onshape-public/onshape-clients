/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPublishedWorkflowId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPublishedWorkflowId::BTPublishedWorkflowId()
{
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_WorkflowId = utility::conversions::to_string_t("");
    m_WorkflowIdIsSet = false;
}

BTPublishedWorkflowId::~BTPublishedWorkflowId()
{
}

void BTPublishedWorkflowId::validate()
{
    // TODO: implement validation
}

web::json::value BTPublishedWorkflowId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_WorkflowIdIsSet)
    {
        val[utility::conversions::to_string_t("workflowId")] = ModelBase::toJson(m_WorkflowId);
    }

    return val;
}

bool BTPublishedWorkflowId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflowId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workflowId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workflowId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workflowId);
            setWorkflowId(refVal_workflowId);
        }
    }
    return ok;
}

void BTPublishedWorkflowId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_WorkflowIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflowId"), m_WorkflowId));
    }
}

bool BTPublishedWorkflowId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflowId")))
    {
        utility::string_t refVal_workflowId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflowId")), refVal_workflowId );
        setWorkflowId(refVal_workflowId);
    }
    return ok;
}

utility::string_t BTPublishedWorkflowId::getCompanyId() const
{
    return m_CompanyId;
}

void BTPublishedWorkflowId::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTPublishedWorkflowId::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTPublishedWorkflowId::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTPublishedWorkflowId::getVersionId() const
{
    return m_VersionId;
}

void BTPublishedWorkflowId::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTPublishedWorkflowId::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTPublishedWorkflowId::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTPublishedWorkflowId::getWorkflowId() const
{
    return m_WorkflowId;
}

void BTPublishedWorkflowId::setWorkflowId(const utility::string_t& value)
{
    m_WorkflowId = value;
    m_WorkflowIdIsSet = true;
}

bool BTPublishedWorkflowId::workflowIdIsSet() const
{
    return m_WorkflowIdIsSet;
}

void BTPublishedWorkflowId::unsetWorkflowId()
{
    m_WorkflowIdIsSet = false;
}
}
}
}
}


