/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecQuery_174_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecQuery_174_allOf::BTParameterSpecQuery_174_allOf()
{
    m_MaxNumberOfPicks = 0;
    m_MaxNumberOfPicksIsSet = false;
    m_AdditionalBoxSelectFilterIsSet = false;
    m_FilterIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTParameterSpecQuery_174_allOf::~BTParameterSpecQuery_174_allOf()
{
}

void BTParameterSpecQuery_174_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecQuery_174_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MaxNumberOfPicksIsSet)
    {
        val[utility::conversions::to_string_t("maxNumberOfPicks")] = ModelBase::toJson(m_MaxNumberOfPicks);
    }
    if(m_AdditionalBoxSelectFilterIsSet)
    {
        val[utility::conversions::to_string_t("additionalBoxSelectFilter")] = ModelBase::toJson(m_AdditionalBoxSelectFilter);
    }
    if(m_FilterIsSet)
    {
        val[utility::conversions::to_string_t("filter")] = ModelBase::toJson(m_Filter);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTParameterSpecQuery_174_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxNumberOfPicks"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_maxNumberOfPicks;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxNumberOfPicks);
            setMaxNumberOfPicks(refVal_maxNumberOfPicks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("additionalBoxSelectFilter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalBoxSelectFilter"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTQueryFilter_183> refVal_additionalBoxSelectFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalBoxSelectFilter);
            setAdditionalBoxSelectFilter(refVal_additionalBoxSelectFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filter"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTQueryFilter_183> refVal_filter;
            ok &= ModelBase::fromJson(fieldValue, refVal_filter);
            setFilter(refVal_filter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTParameterSpecQuery_174_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MaxNumberOfPicksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxNumberOfPicks"), m_MaxNumberOfPicks));
    }
    if(m_AdditionalBoxSelectFilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalBoxSelectFilter"), m_AdditionalBoxSelectFilter));
    }
    if(m_FilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filter"), m_Filter));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTParameterSpecQuery_174_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        int32_t refVal_maxNumberOfPicks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxNumberOfPicks")), refVal_maxNumberOfPicks );
        setMaxNumberOfPicks(refVal_maxNumberOfPicks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("additionalBoxSelectFilter")))
    {
        std::shared_ptr<BTQueryFilter_183> refVal_additionalBoxSelectFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalBoxSelectFilter")), refVal_additionalBoxSelectFilter );
        setAdditionalBoxSelectFilter(refVal_additionalBoxSelectFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter")))
    {
        std::shared_ptr<BTQueryFilter_183> refVal_filter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filter")), refVal_filter );
        setFilter(refVal_filter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

int32_t BTParameterSpecQuery_174_allOf::getMaxNumberOfPicks() const
{
    return m_MaxNumberOfPicks;
}

void BTParameterSpecQuery_174_allOf::setMaxNumberOfPicks(int32_t value)
{
    m_MaxNumberOfPicks = value;
    m_MaxNumberOfPicksIsSet = true;
}

bool BTParameterSpecQuery_174_allOf::maxNumberOfPicksIsSet() const
{
    return m_MaxNumberOfPicksIsSet;
}

void BTParameterSpecQuery_174_allOf::unsetMaxNumberOfPicks()
{
    m_MaxNumberOfPicksIsSet = false;
}
std::shared_ptr<BTQueryFilter_183> BTParameterSpecQuery_174_allOf::getAdditionalBoxSelectFilter() const
{
    return m_AdditionalBoxSelectFilter;
}

void BTParameterSpecQuery_174_allOf::setAdditionalBoxSelectFilter(const std::shared_ptr<BTQueryFilter_183>& value)
{
    m_AdditionalBoxSelectFilter = value;
    m_AdditionalBoxSelectFilterIsSet = true;
}

bool BTParameterSpecQuery_174_allOf::additionalBoxSelectFilterIsSet() const
{
    return m_AdditionalBoxSelectFilterIsSet;
}

void BTParameterSpecQuery_174_allOf::unsetAdditionalBoxSelectFilter()
{
    m_AdditionalBoxSelectFilterIsSet = false;
}
std::shared_ptr<BTQueryFilter_183> BTParameterSpecQuery_174_allOf::getFilter() const
{
    return m_Filter;
}

void BTParameterSpecQuery_174_allOf::setFilter(const std::shared_ptr<BTQueryFilter_183>& value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}

bool BTParameterSpecQuery_174_allOf::filterIsSet() const
{
    return m_FilterIsSet;
}

void BTParameterSpecQuery_174_allOf::unsetFilter()
{
    m_FilterIsSet = false;
}
utility::string_t BTParameterSpecQuery_174_allOf::getBtType() const
{
    return m_BtType;
}

void BTParameterSpecQuery_174_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpecQuery_174_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpecQuery_174_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


