/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMateConnectorCSInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMateConnectorCSInfo::BTMateConnectorCSInfo()
{
    m_GetxAxisIsSet = false;
    m_GetyAxisIsSet = false;
    m_GetzAxisIsSet = false;
    m_OriginIsSet = false;
}

BTMateConnectorCSInfo::~BTMateConnectorCSInfo()
{
}

void BTMateConnectorCSInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMateConnectorCSInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GetxAxisIsSet)
    {
        val[utility::conversions::to_string_t("getxAxis")] = ModelBase::toJson(m_GetxAxis);
    }
    if(m_GetyAxisIsSet)
    {
        val[utility::conversions::to_string_t("getyAxis")] = ModelBase::toJson(m_GetyAxis);
    }
    if(m_GetzAxisIsSet)
    {
        val[utility::conversions::to_string_t("getzAxis")] = ModelBase::toJson(m_GetzAxis);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }

    return val;
}

bool BTMateConnectorCSInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("getxAxis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("getxAxis"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_getxAxis;
            ok &= ModelBase::fromJson(fieldValue, refVal_getxAxis);
            setGetxAxis(refVal_getxAxis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("getyAxis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("getyAxis"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_getyAxis;
            ok &= ModelBase::fromJson(fieldValue, refVal_getyAxis);
            setGetyAxis(refVal_getyAxis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("getzAxis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("getzAxis"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_getzAxis;
            ok &= ModelBase::fromJson(fieldValue, refVal_getzAxis);
            setGetzAxis(refVal_getzAxis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    return ok;
}

void BTMateConnectorCSInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_GetxAxisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("getxAxis"), m_GetxAxis));
    }
    if(m_GetyAxisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("getyAxis"), m_GetyAxis));
    }
    if(m_GetzAxisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("getzAxis"), m_GetzAxis));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
}

bool BTMateConnectorCSInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("getxAxis")))
    {
        std::vector<double> refVal_getxAxis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("getxAxis")), refVal_getxAxis );
        setGetxAxis(refVal_getxAxis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("getyAxis")))
    {
        std::vector<double> refVal_getyAxis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("getyAxis")), refVal_getyAxis );
        setGetyAxis(refVal_getyAxis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("getzAxis")))
    {
        std::vector<double> refVal_getzAxis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("getzAxis")), refVal_getzAxis );
        setGetzAxis(refVal_getzAxis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::vector<double> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    return ok;
}

std::vector<double>& BTMateConnectorCSInfo::getGetxAxis()
{
    return m_GetxAxis;
}

void BTMateConnectorCSInfo::setGetxAxis(std::vector<double> value)
{
    m_GetxAxis = value;
    m_GetxAxisIsSet = true;
}

bool BTMateConnectorCSInfo::getxAxisIsSet() const
{
    return m_GetxAxisIsSet;
}

void BTMateConnectorCSInfo::unsetGetxAxis()
{
    m_GetxAxisIsSet = false;
}
std::vector<double>& BTMateConnectorCSInfo::getGetyAxis()
{
    return m_GetyAxis;
}

void BTMateConnectorCSInfo::setGetyAxis(std::vector<double> value)
{
    m_GetyAxis = value;
    m_GetyAxisIsSet = true;
}

bool BTMateConnectorCSInfo::getyAxisIsSet() const
{
    return m_GetyAxisIsSet;
}

void BTMateConnectorCSInfo::unsetGetyAxis()
{
    m_GetyAxisIsSet = false;
}
std::vector<double>& BTMateConnectorCSInfo::getGetzAxis()
{
    return m_GetzAxis;
}

void BTMateConnectorCSInfo::setGetzAxis(std::vector<double> value)
{
    m_GetzAxis = value;
    m_GetzAxisIsSet = true;
}

bool BTMateConnectorCSInfo::getzAxisIsSet() const
{
    return m_GetzAxisIsSet;
}

void BTMateConnectorCSInfo::unsetGetzAxis()
{
    m_GetzAxisIsSet = false;
}
std::vector<double>& BTMateConnectorCSInfo::getOrigin()
{
    return m_Origin;
}

void BTMateConnectorCSInfo::setOrigin(std::vector<double> value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool BTMateConnectorCSInfo::originIsSet() const
{
    return m_OriginIsSet;
}

void BTMateConnectorCSInfo::unsetOrigin()
{
    m_OriginIsSet = false;
}
}
}
}
}


