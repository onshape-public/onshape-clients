/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMetadataPropertySummaryInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertySummaryInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertySummaryInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTMetadataPropertyConfigSummaryInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMetadataPropertySummaryInfo
    : public ModelBase
{
public:
    BTMetadataPropertySummaryInfo();
    virtual ~BTMetadataPropertySummaryInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMetadataPropertySummaryInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditableInMicroversion() const;
    bool editableInMicroversionIsSet() const;
    void unsetEditableInMicroversion();

    void setEditableInMicroversion(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditableInVersion() const;
    bool editableInVersionIsSet() const;
    void unsetEditableInVersion();

    void setEditableInVersion(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwnerId();

    void setOwnerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOwnerType() const;
    bool ownerTypeIsSet() const;
    void unsetOwnerType();

    void setOwnerType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>>& getPropertyConfigSummaryInfoList();
    bool propertyConfigSummaryInfoListIsSet() const;
    void unsetPropertyConfigSummaryInfoList();

    void setPropertyConfigSummaryInfoList(const std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUiReadonlyInMicroversion() const;
    bool uiReadonlyInMicroversionIsSet() const;
    void unsetUiReadonlyInMicroversion();

    void setUiReadonlyInMicroversion(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isUiReadonlyInVersion() const;
    bool uiReadonlyInVersionIsSet() const;
    void unsetUiReadonlyInVersion();

    void setUiReadonlyInVersion(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValueType() const;
    bool valueTypeIsSet() const;
    void unsetValueType();

    void setValueType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    bool m_EditableInMicroversion;
    bool m_EditableInMicroversionIsSet;
    bool m_EditableInVersion;
    bool m_EditableInVersionIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_OwnerId;
    bool m_OwnerIdIsSet;
    int32_t m_OwnerType;
    bool m_OwnerTypeIsSet;
    std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>> m_PropertyConfigSummaryInfoList;
    bool m_PropertyConfigSummaryInfoListIsSet;
    bool m_UiReadonlyInMicroversion;
    bool m_UiReadonlyInMicroversionIsSet;
    bool m_UiReadonlyInVersion;
    bool m_UiReadonlyInVersionIsSet;
    int32_t m_ValueType;
    bool m_ValueTypeIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertySummaryInfo_H_ */
