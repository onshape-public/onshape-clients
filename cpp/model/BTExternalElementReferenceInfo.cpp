/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExternalElementReferenceInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExternalElementReferenceInfo::BTExternalElementReferenceInfo()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementMicroversionId = utility::conversions::to_string_t("");
    m_ElementMicroversionIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
}

BTExternalElementReferenceInfo::~BTExternalElementReferenceInfo()
{
}

void BTExternalElementReferenceInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTExternalElementReferenceInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("elementMicroversionId")] = ModelBase::toJson(m_ElementMicroversionId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }

    return val;
}

bool BTExternalElementReferenceInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementMicroversionId);
            setElementMicroversionId(refVal_elementMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    return ok;
}

void BTExternalElementReferenceInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementMicroversionId"), m_ElementMicroversionId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
}

bool BTExternalElementReferenceInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementMicroversionId")))
    {
        utility::string_t refVal_elementMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementMicroversionId")), refVal_elementMicroversionId );
        setElementMicroversionId(refVal_elementMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    return ok;
}

utility::string_t BTExternalElementReferenceInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTExternalElementReferenceInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTExternalElementReferenceInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTExternalElementReferenceInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTExternalElementReferenceInfo::getElementId() const
{
    return m_ElementId;
}

void BTExternalElementReferenceInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTExternalElementReferenceInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTExternalElementReferenceInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTExternalElementReferenceInfo::getElementMicroversionId() const
{
    return m_ElementMicroversionId;
}

void BTExternalElementReferenceInfo::setElementMicroversionId(const utility::string_t& value)
{
    m_ElementMicroversionId = value;
    m_ElementMicroversionIdIsSet = true;
}

bool BTExternalElementReferenceInfo::elementMicroversionIdIsSet() const
{
    return m_ElementMicroversionIdIsSet;
}

void BTExternalElementReferenceInfo::unsetElementMicroversionId()
{
    m_ElementMicroversionIdIsSet = false;
}
utility::string_t BTExternalElementReferenceInfo::getVersionId() const
{
    return m_VersionId;
}

void BTExternalElementReferenceInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTExternalElementReferenceInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTExternalElementReferenceInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
}
}
}
}


