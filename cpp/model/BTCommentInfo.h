/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTCommentInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommentInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommentInfo_H_


#include "../ModelBase.h"

#include "BTViewDataInfo.h"
#include "BTUserSummaryInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTCommentAttachmentInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTCommentInfo
    : public ModelBase
{
public:
    BTCommentInfo();
    virtual ~BTCommentInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTCommentInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getAssemblyFeatures();
    bool assemblyFeaturesIsSet() const;
    void unsetAssemblyFeatures();

    void setAssemblyFeatures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getAssignedAt() const;
    bool assignedAtIsSet() const;
    void unsetAssignedAt();

    void setAssignedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getAssignee() const;
    bool assigneeIsSet() const;
    void unsetAssignee();

    void setAssignee(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTCommentAttachmentInfo> getAttachment() const;
    bool attachmentIsSet() const;
    void unsetAttachment();

    void setAttachment(const std::shared_ptr<BTCommentAttachmentInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanDelete() const;
    bool canDeleteIsSet() const;
    void unsetCanDelete();

    void setCanDelete(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanResolveOrReopen() const;
    bool canResolveOrReopenIsSet() const;
    void unsetCanResolveOrReopen();

    void setCanResolveOrReopen(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementFeature() const;
    bool elementFeatureIsSet() const;
    void unsetElementFeature();

    void setElementFeature(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getElementOccurrences();
    bool elementOccurrencesIsSet() const;
    void unsetElementOccurrences();

    void setElementOccurrences(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementQuery() const;
    bool elementQueryIsSet() const;
    void unsetElementQuery();

    void setElementQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReleasePackageId() const;
    bool releasePackageIdIsSet() const;
    void unsetReleasePackageId();

    void setReleasePackageId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getReopenedAt() const;
    bool reopenedAtIsSet() const;
    void unsetReopenedAt();

    void setReopenedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getReopenedBy() const;
    bool reopenedByIsSet() const;
    void unsetReopenedBy();

    void setReopenedBy(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getReplyCount() const;
    bool replyCountIsSet() const;
    void unsetReplyCount();

    void setReplyCount(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getResolvedAt() const;
    bool resolvedAtIsSet() const;
    void unsetResolvedAt();

    void setResolvedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getResolvedBy() const;
    bool resolvedByIsSet() const;
    void unsetResolvedBy();

    void setResolvedBy(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTCommentAttachmentInfo> getThumbnail() const;
    bool thumbnailIsSet() const;
    void unsetThumbnail();

    void setThumbnail(const std::shared_ptr<BTCommentAttachmentInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTopLevel() const;
    bool topLevelIsSet() const;
    void unsetTopLevel();

    void setTopLevel(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTViewDataInfo> getViewData() const;
    bool viewDataIsSet() const;
    void unsetViewData();

    void setViewData(const std::shared_ptr<BTViewDataInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWorkspaceId() const;
    bool workspaceIdIsSet() const;
    void unsetWorkspaceId();

    void setWorkspaceId(const utility::string_t& value);


protected:
    std::vector<utility::string_t> m_AssemblyFeatures;
    bool m_AssemblyFeaturesIsSet;
    utility::datetime m_AssignedAt;
    bool m_AssignedAtIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_Assignee;
    bool m_AssigneeIsSet;
    std::shared_ptr<BTCommentAttachmentInfo> m_Attachment;
    bool m_AttachmentIsSet;
    bool m_CanDelete;
    bool m_CanDeleteIsSet;
    bool m_CanResolveOrReopen;
    bool m_CanResolveOrReopenIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_ElementFeature;
    bool m_ElementFeatureIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::vector<utility::string_t> m_ElementOccurrences;
    bool m_ElementOccurrencesIsSet;
    utility::string_t m_ElementQuery;
    bool m_ElementQueryIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_ReleasePackageId;
    bool m_ReleasePackageIdIsSet;
    utility::datetime m_ReopenedAt;
    bool m_ReopenedAtIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_ReopenedBy;
    bool m_ReopenedByIsSet;
    int64_t m_ReplyCount;
    bool m_ReplyCountIsSet;
    utility::datetime m_ResolvedAt;
    bool m_ResolvedAtIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_ResolvedBy;
    bool m_ResolvedByIsSet;
    int32_t m_State;
    bool m_StateIsSet;
    std::shared_ptr<BTCommentAttachmentInfo> m_Thumbnail;
    bool m_ThumbnailIsSet;
    bool m_TopLevel;
    bool m_TopLevelIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_User;
    bool m_UserIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    std::shared_ptr<BTViewDataInfo> m_ViewData;
    bool m_ViewDataIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
    utility::string_t m_WorkspaceId;
    bool m_WorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommentInfo_H_ */
