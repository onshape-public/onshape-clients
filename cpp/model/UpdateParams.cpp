/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UpdateParams::UpdateParams()
{
    m_FromReferenceIsSet = false;
    m_IdsToUpdateIsSet = false;
    m_ToReferenceIsSet = false;
}

UpdateParams::~UpdateParams()
{
}

void UpdateParams::validate()
{
    // TODO: implement validation
}

web::json::value UpdateParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromReferenceIsSet)
    {
        val[utility::conversions::to_string_t("fromReference")] = ModelBase::toJson(m_FromReference);
    }
    if(m_IdsToUpdateIsSet)
    {
        val[utility::conversions::to_string_t("idsToUpdate")] = ModelBase::toJson(m_IdsToUpdate);
    }
    if(m_ToReferenceIsSet)
    {
        val[utility::conversions::to_string_t("toReference")] = ModelBase::toJson(m_ToReference);
    }

    return val;
}

bool UpdateParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("fromReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromReference"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUniqueDocumentItemParams> refVal_fromReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromReference);
            setFromReference(refVal_fromReference);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idsToUpdate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idsToUpdate"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_idsToUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_idsToUpdate);
            setIdsToUpdate(refVal_idsToUpdate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("toReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("toReference"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUniqueDocumentItemParams> refVal_toReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_toReference);
            setToReference(refVal_toReference);
        }
    }
    return ok;
}

void UpdateParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FromReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromReference"), m_FromReference));
    }
    if(m_IdsToUpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idsToUpdate"), m_IdsToUpdate));
    }
    if(m_ToReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("toReference"), m_ToReference));
    }
}

bool UpdateParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fromReference")))
    {
        std::shared_ptr<BTUniqueDocumentItemParams> refVal_fromReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromReference")), refVal_fromReference );
        setFromReference(refVal_fromReference);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idsToUpdate")))
    {
        std::vector<utility::string_t> refVal_idsToUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idsToUpdate")), refVal_idsToUpdate );
        setIdsToUpdate(refVal_idsToUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("toReference")))
    {
        std::shared_ptr<BTUniqueDocumentItemParams> refVal_toReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("toReference")), refVal_toReference );
        setToReference(refVal_toReference);
    }
    return ok;
}

std::shared_ptr<BTUniqueDocumentItemParams> UpdateParams::getFromReference() const
{
    return m_FromReference;
}

void UpdateParams::setFromReference(const std::shared_ptr<BTUniqueDocumentItemParams>& value)
{
    m_FromReference = value;
    m_FromReferenceIsSet = true;
}

bool UpdateParams::fromReferenceIsSet() const
{
    return m_FromReferenceIsSet;
}

void UpdateParams::unsetFromReference()
{
    m_FromReferenceIsSet = false;
}
std::vector<utility::string_t>& UpdateParams::getIdsToUpdate()
{
    return m_IdsToUpdate;
}

void UpdateParams::setIdsToUpdate(const std::vector<utility::string_t>& value)
{
    m_IdsToUpdate = value;
    m_IdsToUpdateIsSet = true;
}

bool UpdateParams::idsToUpdateIsSet() const
{
    return m_IdsToUpdateIsSet;
}

void UpdateParams::unsetIdsToUpdate()
{
    m_IdsToUpdateIsSet = false;
}
std::shared_ptr<BTUniqueDocumentItemParams> UpdateParams::getToReference() const
{
    return m_ToReference;
}

void UpdateParams::setToReference(const std::shared_ptr<BTUniqueDocumentItemParams>& value)
{
    m_ToReference = value;
    m_ToReferenceIsSet = true;
}

bool UpdateParams::toReferenceIsSet() const
{
    return m_ToReferenceIsSet;
}

void UpdateParams::unsetToReference()
{
    m_ToReferenceIsSet = false;
}
}
}
}
}


