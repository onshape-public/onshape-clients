/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecArray_2600_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecArray_2600_allOf::BTParameterSpecArray_2600_allOf()
{
    m_ItemName = utility::conversions::to_string_t("");
    m_ItemNameIsSet = false;
    m_ItemLabelTemplate = utility::conversions::to_string_t("");
    m_ItemLabelTemplateIsSet = false;
    m_DrivenQuery = utility::conversions::to_string_t("");
    m_DrivenQueryIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTParameterSpecArray_2600_allOf::~BTParameterSpecArray_2600_allOf()
{
}

void BTParameterSpecArray_2600_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecArray_2600_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ItemNameIsSet)
    {
        val[utility::conversions::to_string_t("itemName")] = ModelBase::toJson(m_ItemName);
    }
    if(m_ItemLabelTemplateIsSet)
    {
        val[utility::conversions::to_string_t("itemLabelTemplate")] = ModelBase::toJson(m_ItemLabelTemplate);
    }
    if(m_DrivenQueryIsSet)
    {
        val[utility::conversions::to_string_t("drivenQuery")] = ModelBase::toJson(m_DrivenQuery);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTParameterSpecArray_2600_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("itemName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("itemName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_itemName;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemName);
            setItemName(refVal_itemName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemLabelTemplate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("itemLabelTemplate"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_itemLabelTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemLabelTemplate);
            setItemLabelTemplate(refVal_itemLabelTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drivenQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drivenQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drivenQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_drivenQuery);
            setDrivenQuery(refVal_drivenQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTParameterSpecArray_2600_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ItemNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemName"), m_ItemName));
    }
    if(m_ItemLabelTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemLabelTemplate"), m_ItemLabelTemplate));
    }
    if(m_DrivenQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drivenQuery"), m_DrivenQuery));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTParameterSpecArray_2600_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("itemName")))
    {
        utility::string_t refVal_itemName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemName")), refVal_itemName );
        setItemName(refVal_itemName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("itemLabelTemplate")))
    {
        utility::string_t refVal_itemLabelTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemLabelTemplate")), refVal_itemLabelTemplate );
        setItemLabelTemplate(refVal_itemLabelTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drivenQuery")))
    {
        utility::string_t refVal_drivenQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drivenQuery")), refVal_drivenQuery );
        setDrivenQuery(refVal_drivenQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTParameterSpecArray_2600_allOf::getItemName() const
{
    return m_ItemName;
}

void BTParameterSpecArray_2600_allOf::setItemName(const utility::string_t& value)
{
    m_ItemName = value;
    m_ItemNameIsSet = true;
}

bool BTParameterSpecArray_2600_allOf::itemNameIsSet() const
{
    return m_ItemNameIsSet;
}

void BTParameterSpecArray_2600_allOf::unsetItemName()
{
    m_ItemNameIsSet = false;
}
utility::string_t BTParameterSpecArray_2600_allOf::getItemLabelTemplate() const
{
    return m_ItemLabelTemplate;
}

void BTParameterSpecArray_2600_allOf::setItemLabelTemplate(const utility::string_t& value)
{
    m_ItemLabelTemplate = value;
    m_ItemLabelTemplateIsSet = true;
}

bool BTParameterSpecArray_2600_allOf::itemLabelTemplateIsSet() const
{
    return m_ItemLabelTemplateIsSet;
}

void BTParameterSpecArray_2600_allOf::unsetItemLabelTemplate()
{
    m_ItemLabelTemplateIsSet = false;
}
utility::string_t BTParameterSpecArray_2600_allOf::getDrivenQuery() const
{
    return m_DrivenQuery;
}

void BTParameterSpecArray_2600_allOf::setDrivenQuery(const utility::string_t& value)
{
    m_DrivenQuery = value;
    m_DrivenQueryIsSet = true;
}

bool BTParameterSpecArray_2600_allOf::drivenQueryIsSet() const
{
    return m_DrivenQueryIsSet;
}

void BTParameterSpecArray_2600_allOf::unsetDrivenQuery()
{
    m_DrivenQueryIsSet = false;
}
utility::string_t BTParameterSpecArray_2600_allOf::getBtType() const
{
    return m_BtType;
}

void BTParameterSpecArray_2600_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpecArray_2600_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpecArray_2600_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


