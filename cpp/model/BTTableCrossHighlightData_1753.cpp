/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTableCrossHighlightData_1753.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTableCrossHighlightData_1753::BTTableCrossHighlightData_1753()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_DeterministicIdListIsSet = false;
    m_FeatureIdListIsSet = false;
}

BTTableCrossHighlightData_1753::~BTTableCrossHighlightData_1753()
{
}

void BTTableCrossHighlightData_1753::validate()
{
    // TODO: implement validation
}

web::json::value BTTableCrossHighlightData_1753::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_DeterministicIdListIsSet)
    {
        val[utility::conversions::to_string_t("deterministicIdList")] = ModelBase::toJson(m_DeterministicIdList);
    }
    if(m_FeatureIdListIsSet)
    {
        val[utility::conversions::to_string_t("featureIdList")] = ModelBase::toJson(m_FeatureIdList);
    }

    return val;
}

bool BTTableCrossHighlightData_1753::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deterministicIdList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deterministicIdList"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_deterministicIdList;
            ok &= ModelBase::fromJson(fieldValue, refVal_deterministicIdList);
            setDeterministicIdList(refVal_deterministicIdList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureIdList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureIdList"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_featureIdList;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureIdList);
            setFeatureIdList(refVal_featureIdList);
        }
    }
    return ok;
}

void BTTableCrossHighlightData_1753::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DeterministicIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicIdList"), m_DeterministicIdList));
    }
    if(m_FeatureIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureIdList"), m_FeatureIdList));
    }
}

bool BTTableCrossHighlightData_1753::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicIdList")))
    {
        std::vector<utility::string_t> refVal_deterministicIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicIdList")), refVal_deterministicIdList );
        setDeterministicIdList(refVal_deterministicIdList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureIdList")))
    {
        std::vector<utility::string_t> refVal_featureIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureIdList")), refVal_featureIdList );
        setFeatureIdList(refVal_featureIdList);
    }
    return ok;
}

utility::string_t BTTableCrossHighlightData_1753::getBtType() const
{
    return m_BtType;
}

void BTTableCrossHighlightData_1753::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTTableCrossHighlightData_1753::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTTableCrossHighlightData_1753::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::vector<utility::string_t>& BTTableCrossHighlightData_1753::getDeterministicIdList()
{
    return m_DeterministicIdList;
}

void BTTableCrossHighlightData_1753::setDeterministicIdList(const std::vector<utility::string_t>& value)
{
    m_DeterministicIdList = value;
    m_DeterministicIdListIsSet = true;
}

bool BTTableCrossHighlightData_1753::deterministicIdListIsSet() const
{
    return m_DeterministicIdListIsSet;
}

void BTTableCrossHighlightData_1753::unsetDeterministicIdList()
{
    m_DeterministicIdListIsSet = false;
}
std::vector<utility::string_t>& BTTableCrossHighlightData_1753::getFeatureIdList()
{
    return m_FeatureIdList;
}

void BTTableCrossHighlightData_1753::setFeatureIdList(const std::vector<utility::string_t>& value)
{
    m_FeatureIdList = value;
    m_FeatureIdListIsSet = true;
}

bool BTTableCrossHighlightData_1753::featureIdListIsSet() const
{
    return m_FeatureIdListIsSet;
}

void BTTableCrossHighlightData_1753::unsetFeatureIdList()
{
    m_FeatureIdListIsSet = false;
}
}
}
}
}


