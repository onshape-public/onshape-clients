/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPExpressionFunction_1325.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionFunction_1325_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionFunction_1325_H_


#include "BTPExpression_9.h"
#include "BTPStatementBlock_271.h"
#include "BTPExpressionFunction_1325_allOf.h"
#include "BTPTypeName_290.h"
#include <cpprest/details/basic_types.h>
#include "BTPSpace_10.h"
#include <vector>
#include "BTPArgumentDeclaration_232.h"
#include "BTPStatement_269.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPExpressionFunction_1325
    : public BTPExpression_9
{
public:
    BTPExpressionFunction_1325();
    virtual ~BTPExpressionFunction_1325();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPExpressionFunction_1325 members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& getArguments();
    bool argumentsIsSet() const;
    void unsetArguments();

    void setArguments(const std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPStatementBlock_271> getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const std::shared_ptr<BTPStatementBlock_271>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPStatement_269> getPrecondition() const;
    bool preconditionIsSet() const;
    void unsetPrecondition();

    void setPrecondition(const std::shared_ptr<BTPStatement_269>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterArglist() const;
    bool spaceAfterArglistIsSet() const;
    void unsetSpaceAfterArglist();

    void setSpaceAfterArglist(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceInEmptyList() const;
    bool spaceInEmptyListIsSet() const;
    void unsetSpaceInEmptyList();

    void setSpaceInEmptyList(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterFunction() const;
    bool spaceAfterFunctionIsSet() const;
    void unsetSpaceAfterFunction();

    void setSpaceAfterFunction(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPTypeName_290> getReturnType() const;
    bool returnTypeIsSet() const;
    void unsetReturnType();

    void setReturnType(const std::shared_ptr<BTPTypeName_290>& value);


protected:
    std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> m_Arguments;
    bool m_ArgumentsIsSet;
    std::shared_ptr<BTPStatementBlock_271> m_Body;
    bool m_BodyIsSet;
    std::shared_ptr<BTPStatement_269> m_Precondition;
    bool m_PreconditionIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterArglist;
    bool m_SpaceAfterArglistIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceInEmptyList;
    bool m_SpaceInEmptyListIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterFunction;
    bool m_SpaceAfterFunctionIsSet;
    std::shared_ptr<BTPTypeName_290> m_ReturnType;
    bool m_ReturnTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionFunction_1325_H_ */
