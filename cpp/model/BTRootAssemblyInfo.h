/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTRootAssemblyInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootAssemblyInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootAssemblyInfo_H_


#include "../ModelBase.h"

#include "BTAssemblyFeatureInfo.h"
#include "BTAssemblyOccurrenceInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTAssemblyInstanceInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTRootAssemblyInfo
    : public ModelBase
{
public:
    BTRootAssemblyInfo();
    virtual ~BTRootAssemblyInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTRootAssemblyInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfiguration() const;
    bool configurationIsSet() const;
    void unsetConfiguration();

    void setConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentMicroversion() const;
    bool documentMicroversionIsSet() const;
    void unsetDocumentMicroversion();

    void setDocumentMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentVersion() const;
    bool documentVersionIsSet() const;
    void unsetDocumentVersion();

    void setDocumentVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAssemblyFeatureInfo>>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<std::shared_ptr<BTAssemblyFeatureInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFullConfiguration() const;
    bool fullConfigurationIsSet() const;
    void unsetFullConfiguration();

    void setFullConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAssemblyInstanceInfo>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<BTAssemblyInstanceInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAssemblyOccurrenceInfo>>& getOccurrences();
    bool occurrencesIsSet() const;
    void unsetOccurrences();

    void setOccurrences(const std::vector<std::shared_ptr<BTAssemblyOccurrenceInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);


protected:
    utility::string_t m_Configuration;
    bool m_ConfigurationIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_DocumentMicroversion;
    bool m_DocumentMicroversionIsSet;
    utility::string_t m_DocumentVersion;
    bool m_DocumentVersionIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::vector<std::shared_ptr<BTAssemblyFeatureInfo>> m_Features;
    bool m_FeaturesIsSet;
    utility::string_t m_FullConfiguration;
    bool m_FullConfigurationIsSet;
    std::vector<std::shared_ptr<BTAssemblyInstanceInfo>> m_Instances;
    bool m_InstancesIsSet;
    std::vector<std::shared_ptr<BTAssemblyOccurrenceInfo>> m_Occurrences;
    bool m_OccurrencesIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootAssemblyInfo_H_ */
