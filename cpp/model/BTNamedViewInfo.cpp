/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTNamedViewInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTNamedViewInfo::BTNamedViewInfo()
{
    m_Angle = 0.0;
    m_AngleIsSet = false;
    m_CameraViewportIsSet = false;
    m_Perspective = false;
    m_PerspectiveIsSet = false;
    m_SectionPlanesIsSet = false;
    m_ViewMatrixIsSet = false;
}

BTNamedViewInfo::~BTNamedViewInfo()
{
}

void BTNamedViewInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTNamedViewInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AngleIsSet)
    {
        val[utility::conversions::to_string_t("angle")] = ModelBase::toJson(m_Angle);
    }
    if(m_CameraViewportIsSet)
    {
        val[utility::conversions::to_string_t("cameraViewport")] = ModelBase::toJson(m_CameraViewport);
    }
    if(m_PerspectiveIsSet)
    {
        val[utility::conversions::to_string_t("perspective")] = ModelBase::toJson(m_Perspective);
    }
    if(m_SectionPlanesIsSet)
    {
        val[utility::conversions::to_string_t("sectionPlanes")] = ModelBase::toJson(m_SectionPlanes);
    }
    if(m_ViewMatrixIsSet)
    {
        val[utility::conversions::to_string_t("viewMatrix")] = ModelBase::toJson(m_ViewMatrix);
    }

    return val;
}

bool BTNamedViewInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("angle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("angle"));
        if(!fieldValue.is_null())
        {
            double refVal_angle;
            ok &= ModelBase::fromJson(fieldValue, refVal_angle);
            setAngle(refVal_angle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cameraViewport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cameraViewport"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_cameraViewport;
            ok &= ModelBase::fromJson(fieldValue, refVal_cameraViewport);
            setCameraViewport(refVal_cameraViewport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("perspective")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("perspective"));
        if(!fieldValue.is_null())
        {
            bool refVal_perspective;
            ok &= ModelBase::fromJson(fieldValue, refVal_perspective);
            setPerspective(refVal_perspective);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sectionPlanes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sectionPlanes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTSectionPlaneInfo>> refVal_sectionPlanes;
            ok &= ModelBase::fromJson(fieldValue, refVal_sectionPlanes);
            setSectionPlanes(refVal_sectionPlanes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewMatrix")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewMatrix"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_viewMatrix;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewMatrix);
            setViewMatrix(refVal_viewMatrix);
        }
    }
    return ok;
}

void BTNamedViewInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AngleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("angle"), m_Angle));
    }
    if(m_CameraViewportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cameraViewport"), m_CameraViewport));
    }
    if(m_PerspectiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("perspective"), m_Perspective));
    }
    if(m_SectionPlanesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sectionPlanes"), m_SectionPlanes));
    }
    if(m_ViewMatrixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewMatrix"), m_ViewMatrix));
    }
}

bool BTNamedViewInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("angle")))
    {
        double refVal_angle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("angle")), refVal_angle );
        setAngle(refVal_angle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cameraViewport")))
    {
        std::vector<double> refVal_cameraViewport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cameraViewport")), refVal_cameraViewport );
        setCameraViewport(refVal_cameraViewport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("perspective")))
    {
        bool refVal_perspective;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("perspective")), refVal_perspective );
        setPerspective(refVal_perspective);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sectionPlanes")))
    {
        std::vector<std::shared_ptr<BTSectionPlaneInfo>> refVal_sectionPlanes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sectionPlanes")), refVal_sectionPlanes );
        setSectionPlanes(refVal_sectionPlanes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewMatrix")))
    {
        std::vector<double> refVal_viewMatrix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewMatrix")), refVal_viewMatrix );
        setViewMatrix(refVal_viewMatrix);
    }
    return ok;
}

double BTNamedViewInfo::getAngle() const
{
    return m_Angle;
}

void BTNamedViewInfo::setAngle(double value)
{
    m_Angle = value;
    m_AngleIsSet = true;
}

bool BTNamedViewInfo::angleIsSet() const
{
    return m_AngleIsSet;
}

void BTNamedViewInfo::unsetAngle()
{
    m_AngleIsSet = false;
}
std::vector<double>& BTNamedViewInfo::getCameraViewport()
{
    return m_CameraViewport;
}

void BTNamedViewInfo::setCameraViewport(std::vector<double> value)
{
    m_CameraViewport = value;
    m_CameraViewportIsSet = true;
}

bool BTNamedViewInfo::cameraViewportIsSet() const
{
    return m_CameraViewportIsSet;
}

void BTNamedViewInfo::unsetCameraViewport()
{
    m_CameraViewportIsSet = false;
}
bool BTNamedViewInfo::isPerspective() const
{
    return m_Perspective;
}

void BTNamedViewInfo::setPerspective(bool value)
{
    m_Perspective = value;
    m_PerspectiveIsSet = true;
}

bool BTNamedViewInfo::perspectiveIsSet() const
{
    return m_PerspectiveIsSet;
}

void BTNamedViewInfo::unsetPerspective()
{
    m_PerspectiveIsSet = false;
}
std::vector<std::shared_ptr<BTSectionPlaneInfo>>& BTNamedViewInfo::getSectionPlanes()
{
    return m_SectionPlanes;
}

void BTNamedViewInfo::setSectionPlanes(const std::vector<std::shared_ptr<BTSectionPlaneInfo>>& value)
{
    m_SectionPlanes = value;
    m_SectionPlanesIsSet = true;
}

bool BTNamedViewInfo::sectionPlanesIsSet() const
{
    return m_SectionPlanesIsSet;
}

void BTNamedViewInfo::unsetSectionPlanes()
{
    m_SectionPlanesIsSet = false;
}
std::vector<double>& BTNamedViewInfo::getViewMatrix()
{
    return m_ViewMatrix;
}

void BTNamedViewInfo::setViewMatrix(std::vector<double> value)
{
    m_ViewMatrix = value;
    m_ViewMatrixIsSet = true;
}

bool BTNamedViewInfo::viewMatrixIsSet() const
{
    return m_ViewMatrixIsSet;
}

void BTNamedViewInfo::unsetViewMatrix()
{
    m_ViewMatrixIsSet = false;
}
}
}
}
}


