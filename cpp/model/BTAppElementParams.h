/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTAppElementParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementParams_H_


#include "../ModelBase.h"

#include "BTElementLocationParams.h"
#include <cpprest/details/basic_types.h>
#include "BTAppElementChangeParams.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTAppElementParams
    : public ModelBase
{
public:
    BTAppElementParams();
    virtual ~BTAppElementParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTAppElementParams members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFormatId() const;
    bool formatIdIsSet() const;
    void unsetFormatId();

    void setFormatId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTElementLocationParams> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const std::shared_ptr<BTElementLocationParams>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAppElementChangeParams>>& getSubelements();
    bool subelementsIsSet() const;
    void unsetSubelements();

    void setSubelements(const std::vector<std::shared_ptr<BTAppElementChangeParams>>& value);


protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_FormatId;
    bool m_FormatIdIsSet;
    std::shared_ptr<BTElementLocationParams> m_Location;
    bool m_LocationIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::vector<std::shared_ptr<BTAppElementChangeParams>> m_Subelements;
    bool m_SubelementsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementParams_H_ */
