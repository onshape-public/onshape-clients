/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTApplicationElementThumbnailParamsArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTApplicationElementThumbnailParamsArray::BTApplicationElementThumbnailParamsArray()
{
    m_ThumbnailsIsSet = false;
}

BTApplicationElementThumbnailParamsArray::~BTApplicationElementThumbnailParamsArray()
{
}

void BTApplicationElementThumbnailParamsArray::validate()
{
    // TODO: implement validation
}

web::json::value BTApplicationElementThumbnailParamsArray::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ThumbnailsIsSet)
    {
        val[utility::conversions::to_string_t("thumbnails")] = ModelBase::toJson(m_Thumbnails);
    }

    return val;
}

bool BTApplicationElementThumbnailParamsArray::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("thumbnails")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnails"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTApplicationElementThumbnailParams>> refVal_thumbnails;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnails);
            setThumbnails(refVal_thumbnails);
        }
    }
    return ok;
}

void BTApplicationElementThumbnailParamsArray::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ThumbnailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnails"), m_Thumbnails));
    }
}

bool BTApplicationElementThumbnailParamsArray::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("thumbnails")))
    {
        std::vector<std::shared_ptr<BTApplicationElementThumbnailParams>> refVal_thumbnails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnails")), refVal_thumbnails );
        setThumbnails(refVal_thumbnails);
    }
    return ok;
}

std::vector<std::shared_ptr<BTApplicationElementThumbnailParams>>& BTApplicationElementThumbnailParamsArray::getThumbnails()
{
    return m_Thumbnails;
}

void BTApplicationElementThumbnailParamsArray::setThumbnails(const std::vector<std::shared_ptr<BTApplicationElementThumbnailParams>>& value)
{
    m_Thumbnails = value;
    m_ThumbnailsIsSet = true;
}

bool BTApplicationElementThumbnailParamsArray::thumbnailsIsSet() const
{
    return m_ThumbnailsIsSet;
}

void BTApplicationElementThumbnailParamsArray::unsetThumbnails()
{
    m_ThumbnailsIsSet = false;
}
}
}
}
}


