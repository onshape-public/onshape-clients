/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTClosedCurveFilter_1206.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTClosedCurveFilter_1206::BTClosedCurveFilter_1206()
{
    m_IsClosed = false;
    m_IsClosedIsSet = false;
}

BTClosedCurveFilter_1206::~BTClosedCurveFilter_1206()
{
}

void BTClosedCurveFilter_1206::validate()
{
    // TODO: implement validation
}

web::json::value BTClosedCurveFilter_1206::toJson() const
{
    web::json::value val = this->BTQueryFilter_183::toJson();
    
    if(m_IsClosedIsSet)
    {
        val[utility::conversions::to_string_t("isClosed")] = ModelBase::toJson(m_IsClosed);
    }

    return val;
}

bool BTClosedCurveFilter_1206::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTQueryFilter_183::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("isClosed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isClosed"));
        if(!fieldValue.is_null())
        {
            bool refVal_isClosed;
            ok &= ModelBase::fromJson(fieldValue, refVal_isClosed);
            setIsClosed(refVal_isClosed);
        }
    }
    return ok;
}

void BTClosedCurveFilter_1206::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IsClosedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isClosed"), m_IsClosed));
    }
}

bool BTClosedCurveFilter_1206::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isClosed")))
    {
        bool refVal_isClosed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isClosed")), refVal_isClosed );
        setIsClosed(refVal_isClosed);
    }
    return ok;
}

bool BTClosedCurveFilter_1206::isIsClosed() const
{
    return m_IsClosed;
}

void BTClosedCurveFilter_1206::setIsClosed(bool value)
{
    m_IsClosed = value;
    m_IsClosedIsSet = true;
}

bool BTClosedCurveFilter_1206::isClosedIsSet() const
{
    return m_IsClosedIsSet;
}

void BTClosedCurveFilter_1206::unsetIsClosed()
{
    m_IsClosedIsSet = false;
}
}
}
}
}


