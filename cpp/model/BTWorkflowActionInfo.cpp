/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWorkflowActionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWorkflowActionInfo::BTWorkflowActionInfo()
{
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_AllowIfApprovers = false;
    m_AllowIfApproversIsSet = false;
    m_AllowIfNoApprovers = false;
    m_AllowIfNoApproversIsSet = false;
    m_AlwaysAllow = false;
    m_AlwaysAllowIsSet = false;
    m_IsAdminOverride = false;
    m_IsAdminOverrideIsSet = false;
    m_IsApproverAction = false;
    m_IsApproverActionIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_RequiredPropertiesIsSet = false;
    m_Tooltip = utility::conversions::to_string_t("");
    m_TooltipIsSet = false;
    m_UiHint = utility::conversions::to_string_t("");
    m_UiHintIsSet = false;
}

BTWorkflowActionInfo::~BTWorkflowActionInfo()
{
}

void BTWorkflowActionInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTWorkflowActionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t("action")] = ModelBase::toJson(m_Action);
    }
    if(m_AllowIfApproversIsSet)
    {
        val[utility::conversions::to_string_t("allowIfApprovers")] = ModelBase::toJson(m_AllowIfApprovers);
    }
    if(m_AllowIfNoApproversIsSet)
    {
        val[utility::conversions::to_string_t("allowIfNoApprovers")] = ModelBase::toJson(m_AllowIfNoApprovers);
    }
    if(m_AlwaysAllowIsSet)
    {
        val[utility::conversions::to_string_t("alwaysAllow")] = ModelBase::toJson(m_AlwaysAllow);
    }
    if(m_IsAdminOverrideIsSet)
    {
        val[utility::conversions::to_string_t("isAdminOverride")] = ModelBase::toJson(m_IsAdminOverride);
    }
    if(m_IsApproverActionIsSet)
    {
        val[utility::conversions::to_string_t("isApproverAction")] = ModelBase::toJson(m_IsApproverAction);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_RequiredPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("requiredProperties")] = ModelBase::toJson(m_RequiredProperties);
    }
    if(m_TooltipIsSet)
    {
        val[utility::conversions::to_string_t("tooltip")] = ModelBase::toJson(m_Tooltip);
    }
    if(m_UiHintIsSet)
    {
        val[utility::conversions::to_string_t("uiHint")] = ModelBase::toJson(m_UiHint);
    }

    return val;
}

bool BTWorkflowActionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("action")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("action"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_action;
            ok &= ModelBase::fromJson(fieldValue, refVal_action);
            setAction(refVal_action);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowIfApprovers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowIfApprovers"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowIfApprovers;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowIfApprovers);
            setAllowIfApprovers(refVal_allowIfApprovers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowIfNoApprovers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowIfNoApprovers"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowIfNoApprovers;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowIfNoApprovers);
            setAllowIfNoApprovers(refVal_allowIfNoApprovers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alwaysAllow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("alwaysAllow"));
        if(!fieldValue.is_null())
        {
            bool refVal_alwaysAllow;
            ok &= ModelBase::fromJson(fieldValue, refVal_alwaysAllow);
            setAlwaysAllow(refVal_alwaysAllow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isAdminOverride")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isAdminOverride"));
        if(!fieldValue.is_null())
        {
            bool refVal_isAdminOverride;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAdminOverride);
            setIsAdminOverride(refVal_isAdminOverride);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isApproverAction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isApproverAction"));
        if(!fieldValue.is_null())
        {
            bool refVal_isApproverAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_isApproverAction);
            setIsApproverAction(refVal_isApproverAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("label"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_label;
            ok &= ModelBase::fromJson(fieldValue, refVal_label);
            setLabel(refVal_label);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requiredProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requiredProperties"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_requiredProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_requiredProperties);
            setRequiredProperties(refVal_requiredProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tooltip")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tooltip"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tooltip;
            ok &= ModelBase::fromJson(fieldValue, refVal_tooltip);
            setTooltip(refVal_tooltip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiHint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiHint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uiHint;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiHint);
            setUiHint(refVal_uiHint);
        }
    }
    return ok;
}

void BTWorkflowActionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("action"), m_Action));
    }
    if(m_AllowIfApproversIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowIfApprovers"), m_AllowIfApprovers));
    }
    if(m_AllowIfNoApproversIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowIfNoApprovers"), m_AllowIfNoApprovers));
    }
    if(m_AlwaysAllowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alwaysAllow"), m_AlwaysAllow));
    }
    if(m_IsAdminOverrideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isAdminOverride"), m_IsAdminOverride));
    }
    if(m_IsApproverActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isApproverAction"), m_IsApproverAction));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
    }
    if(m_RequiredPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requiredProperties"), m_RequiredProperties));
    }
    if(m_TooltipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tooltip"), m_Tooltip));
    }
    if(m_UiHintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHint"), m_UiHint));
    }
}

bool BTWorkflowActionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("action")))
    {
        utility::string_t refVal_action;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("action")), refVal_action );
        setAction(refVal_action);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowIfApprovers")))
    {
        bool refVal_allowIfApprovers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowIfApprovers")), refVal_allowIfApprovers );
        setAllowIfApprovers(refVal_allowIfApprovers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowIfNoApprovers")))
    {
        bool refVal_allowIfNoApprovers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowIfNoApprovers")), refVal_allowIfNoApprovers );
        setAllowIfNoApprovers(refVal_allowIfNoApprovers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alwaysAllow")))
    {
        bool refVal_alwaysAllow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("alwaysAllow")), refVal_alwaysAllow );
        setAlwaysAllow(refVal_alwaysAllow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isAdminOverride")))
    {
        bool refVal_isAdminOverride;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isAdminOverride")), refVal_isAdminOverride );
        setIsAdminOverride(refVal_isAdminOverride);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isApproverAction")))
    {
        bool refVal_isApproverAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isApproverAction")), refVal_isApproverAction );
        setIsApproverAction(refVal_isApproverAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        utility::string_t refVal_label;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("label")), refVal_label );
        setLabel(refVal_label);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requiredProperties")))
    {
        std::vector<utility::string_t> refVal_requiredProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requiredProperties")), refVal_requiredProperties );
        setRequiredProperties(refVal_requiredProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tooltip")))
    {
        utility::string_t refVal_tooltip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tooltip")), refVal_tooltip );
        setTooltip(refVal_tooltip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHint")))
    {
        utility::string_t refVal_uiHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHint")), refVal_uiHint );
        setUiHint(refVal_uiHint);
    }
    return ok;
}

utility::string_t BTWorkflowActionInfo::getAction() const
{
    return m_Action;
}

void BTWorkflowActionInfo::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool BTWorkflowActionInfo::actionIsSet() const
{
    return m_ActionIsSet;
}

void BTWorkflowActionInfo::unsetAction()
{
    m_ActionIsSet = false;
}
bool BTWorkflowActionInfo::isAllowIfApprovers() const
{
    return m_AllowIfApprovers;
}

void BTWorkflowActionInfo::setAllowIfApprovers(bool value)
{
    m_AllowIfApprovers = value;
    m_AllowIfApproversIsSet = true;
}

bool BTWorkflowActionInfo::allowIfApproversIsSet() const
{
    return m_AllowIfApproversIsSet;
}

void BTWorkflowActionInfo::unsetAllowIfApprovers()
{
    m_AllowIfApproversIsSet = false;
}
bool BTWorkflowActionInfo::isAllowIfNoApprovers() const
{
    return m_AllowIfNoApprovers;
}

void BTWorkflowActionInfo::setAllowIfNoApprovers(bool value)
{
    m_AllowIfNoApprovers = value;
    m_AllowIfNoApproversIsSet = true;
}

bool BTWorkflowActionInfo::allowIfNoApproversIsSet() const
{
    return m_AllowIfNoApproversIsSet;
}

void BTWorkflowActionInfo::unsetAllowIfNoApprovers()
{
    m_AllowIfNoApproversIsSet = false;
}
bool BTWorkflowActionInfo::isAlwaysAllow() const
{
    return m_AlwaysAllow;
}

void BTWorkflowActionInfo::setAlwaysAllow(bool value)
{
    m_AlwaysAllow = value;
    m_AlwaysAllowIsSet = true;
}

bool BTWorkflowActionInfo::alwaysAllowIsSet() const
{
    return m_AlwaysAllowIsSet;
}

void BTWorkflowActionInfo::unsetAlwaysAllow()
{
    m_AlwaysAllowIsSet = false;
}
bool BTWorkflowActionInfo::isIsAdminOverride() const
{
    return m_IsAdminOverride;
}

void BTWorkflowActionInfo::setIsAdminOverride(bool value)
{
    m_IsAdminOverride = value;
    m_IsAdminOverrideIsSet = true;
}

bool BTWorkflowActionInfo::isAdminOverrideIsSet() const
{
    return m_IsAdminOverrideIsSet;
}

void BTWorkflowActionInfo::unsetIsAdminOverride()
{
    m_IsAdminOverrideIsSet = false;
}
bool BTWorkflowActionInfo::isIsApproverAction() const
{
    return m_IsApproverAction;
}

void BTWorkflowActionInfo::setIsApproverAction(bool value)
{
    m_IsApproverAction = value;
    m_IsApproverActionIsSet = true;
}

bool BTWorkflowActionInfo::isApproverActionIsSet() const
{
    return m_IsApproverActionIsSet;
}

void BTWorkflowActionInfo::unsetIsApproverAction()
{
    m_IsApproverActionIsSet = false;
}
utility::string_t BTWorkflowActionInfo::getLabel() const
{
    return m_Label;
}

void BTWorkflowActionInfo::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool BTWorkflowActionInfo::labelIsSet() const
{
    return m_LabelIsSet;
}

void BTWorkflowActionInfo::unsetLabel()
{
    m_LabelIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowActionInfo::getRequiredProperties()
{
    return m_RequiredProperties;
}

void BTWorkflowActionInfo::setRequiredProperties(const std::vector<utility::string_t>& value)
{
    m_RequiredProperties = value;
    m_RequiredPropertiesIsSet = true;
}

bool BTWorkflowActionInfo::requiredPropertiesIsSet() const
{
    return m_RequiredPropertiesIsSet;
}

void BTWorkflowActionInfo::unsetRequiredProperties()
{
    m_RequiredPropertiesIsSet = false;
}
utility::string_t BTWorkflowActionInfo::getTooltip() const
{
    return m_Tooltip;
}

void BTWorkflowActionInfo::setTooltip(const utility::string_t& value)
{
    m_Tooltip = value;
    m_TooltipIsSet = true;
}

bool BTWorkflowActionInfo::tooltipIsSet() const
{
    return m_TooltipIsSet;
}

void BTWorkflowActionInfo::unsetTooltip()
{
    m_TooltipIsSet = false;
}
utility::string_t BTWorkflowActionInfo::getUiHint() const
{
    return m_UiHint;
}

void BTWorkflowActionInfo::setUiHint(const utility::string_t& value)
{
    m_UiHint = value;
    m_UiHintIsSet = true;
}

bool BTWorkflowActionInfo::uiHintIsSet() const
{
    return m_UiHintIsSet;
}

void BTWorkflowActionInfo::unsetUiHint()
{
    m_UiHintIsSet = false;
}
}
}
}
}


