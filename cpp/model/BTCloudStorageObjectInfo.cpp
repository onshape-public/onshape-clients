/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCloudStorageObjectInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCloudStorageObjectInfo::BTCloudStorageObjectInfo()
{
    m_CanMove = false;
    m_CanMoveIsSet = false;
    m_CloudStorageAccountId = utility::conversions::to_string_t("");
    m_CloudStorageAccountIdIsSet = false;
    m_CloudStorageObjectId = utility::conversions::to_string_t("");
    m_CloudStorageObjectIdIsSet = false;
    m_CloudStorageProvider = 0;
    m_CloudStorageProviderIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_CreatedByIsSet = false;
    m_CreatedById = utility::conversions::to_string_t("");
    m_CreatedByIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_IconLink = utility::conversions::to_string_t("");
    m_IconLinkIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IsContainer = false;
    m_IsContainerIsSet = false;
    m_IsEnterpriseOwned = false;
    m_IsEnterpriseOwnedIsSet = false;
    m_IsMutable = false;
    m_IsMutableIsSet = false;
    m_MimeType = utility::conversions::to_string_t("");
    m_MimeTypeIsSet = false;
    m_ModifiedAt = utility::datetime();
    m_ModifiedAtIsSet = false;
    m_ModifiedByIsSet = false;
    m_ModifiedById = utility::conversions::to_string_t("");
    m_ModifiedByIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OwnerIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_ResourceType = utility::conversions::to_string_t("");
    m_ResourceTypeIsSet = false;
    m_SizeBytes = 0L;
    m_SizeBytesIsSet = false;
    m_ThumbnailInfoIsSet = false;
    m_TreeHref = utility::conversions::to_string_t("");
    m_TreeHrefIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_WebViewLink = utility::conversions::to_string_t("");
    m_WebViewLinkIsSet = false;
}

BTCloudStorageObjectInfo::~BTCloudStorageObjectInfo()
{
}

void BTCloudStorageObjectInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCloudStorageObjectInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CanMoveIsSet)
    {
        val[utility::conversions::to_string_t("canMove")] = ModelBase::toJson(m_CanMove);
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageAccountId")] = ModelBase::toJson(m_CloudStorageAccountId);
    }
    if(m_CloudStorageObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageObjectId")] = ModelBase::toJson(m_CloudStorageObjectId);
    }
    if(m_CloudStorageProviderIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageProvider")] = ModelBase::toJson(m_CloudStorageProvider);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t("createdBy")] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedByIdIsSet)
    {
        val[utility::conversions::to_string_t("createdById")] = ModelBase::toJson(m_CreatedById);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IconLinkIsSet)
    {
        val[utility::conversions::to_string_t("iconLink")] = ModelBase::toJson(m_IconLink);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IsContainerIsSet)
    {
        val[utility::conversions::to_string_t("isContainer")] = ModelBase::toJson(m_IsContainer);
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        val[utility::conversions::to_string_t("isEnterpriseOwned")] = ModelBase::toJson(m_IsEnterpriseOwned);
    }
    if(m_IsMutableIsSet)
    {
        val[utility::conversions::to_string_t("isMutable")] = ModelBase::toJson(m_IsMutable);
    }
    if(m_MimeTypeIsSet)
    {
        val[utility::conversions::to_string_t("mimeType")] = ModelBase::toJson(m_MimeType);
    }
    if(m_ModifiedAtIsSet)
    {
        val[utility::conversions::to_string_t("modifiedAt")] = ModelBase::toJson(m_ModifiedAt);
    }
    if(m_ModifiedByIsSet)
    {
        val[utility::conversions::to_string_t("modifiedBy")] = ModelBase::toJson(m_ModifiedBy);
    }
    if(m_ModifiedByIdIsSet)
    {
        val[utility::conversions::to_string_t("modifiedById")] = ModelBase::toJson(m_ModifiedById);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t("owner")] = ModelBase::toJson(m_Owner);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_ResourceTypeIsSet)
    {
        val[utility::conversions::to_string_t("resourceType")] = ModelBase::toJson(m_ResourceType);
    }
    if(m_SizeBytesIsSet)
    {
        val[utility::conversions::to_string_t("sizeBytes")] = ModelBase::toJson(m_SizeBytes);
    }
    if(m_ThumbnailInfoIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailInfo")] = ModelBase::toJson(m_ThumbnailInfo);
    }
    if(m_TreeHrefIsSet)
    {
        val[utility::conversions::to_string_t("treeHref")] = ModelBase::toJson(m_TreeHref);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_WebViewLinkIsSet)
    {
        val[utility::conversions::to_string_t("webViewLink")] = ModelBase::toJson(m_WebViewLink);
    }

    return val;
}

bool BTCloudStorageObjectInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("canMove")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canMove"));
        if(!fieldValue.is_null())
        {
            bool refVal_canMove;
            ok &= ModelBase::fromJson(fieldValue, refVal_canMove);
            setCanMove(refVal_canMove);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageAccountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageAccountId);
            setCloudStorageAccountId(refVal_cloudStorageAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageObjectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageObjectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageObjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageObjectId);
            setCloudStorageObjectId(refVal_cloudStorageObjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageProvider"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_cloudStorageProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageProvider);
            setCloudStorageProvider(refVal_cloudStorageProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdById")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdById"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdById;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdById);
            setCreatedById(refVal_createdById);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iconLink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iconLink"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iconLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_iconLink);
            setIconLink(refVal_iconLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isContainer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isContainer"));
        if(!fieldValue.is_null())
        {
            bool refVal_isContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_isContainer);
            setIsContainer(refVal_isContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEnterpriseOwned"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEnterpriseOwned;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEnterpriseOwned);
            setIsEnterpriseOwned(refVal_isEnterpriseOwned);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isMutable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isMutable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isMutable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMutable);
            setIsMutable(refVal_isMutable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mimeType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mimeType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_mimeType);
            setMimeType(refVal_mimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_modifiedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedAt);
            setModifiedAt(refVal_modifiedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedBy);
            setModifiedBy(refVal_modifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedById")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedById"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_modifiedById;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedById);
            setModifiedById(refVal_modifiedById);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOwnerInfo> refVal_owner;
            ok &= ModelBase::fromJson(fieldValue, refVal_owner);
            setOwner(refVal_owner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resourceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resourceType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resourceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_resourceType);
            setResourceType(refVal_resourceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sizeBytes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sizeBytes"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_sizeBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_sizeBytes);
            setSizeBytes(refVal_sizeBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailInfo);
            setThumbnailInfo(refVal_thumbnailInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("treeHref")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("treeHref"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_treeHref;
            ok &= ModelBase::fromJson(fieldValue, refVal_treeHref);
            setTreeHref(refVal_treeHref);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webViewLink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webViewLink"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webViewLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_webViewLink);
            setWebViewLink(refVal_webViewLink);
        }
    }
    return ok;
}

void BTCloudStorageObjectInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CanMoveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canMove"), m_CanMove));
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageAccountId"), m_CloudStorageAccountId));
    }
    if(m_CloudStorageObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageObjectId"), m_CloudStorageObjectId));
    }
    if(m_CloudStorageProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageProvider"), m_CloudStorageProvider));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_CreatedByIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdById"), m_CreatedById));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IconLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconLink"), m_IconLink));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isContainer"), m_IsContainer));
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwned"), m_IsEnterpriseOwned));
    }
    if(m_IsMutableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMutable"), m_IsMutable));
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mimeType"), m_MimeType));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_ModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedBy"), m_ModifiedBy));
    }
    if(m_ModifiedByIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedById"), m_ModifiedById));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceType"), m_ResourceType));
    }
    if(m_SizeBytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sizeBytes"), m_SizeBytes));
    }
    if(m_ThumbnailInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailInfo"), m_ThumbnailInfo));
    }
    if(m_TreeHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treeHref"), m_TreeHref));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_WebViewLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webViewLink"), m_WebViewLink));
    }
}

bool BTCloudStorageObjectInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("canMove")))
    {
        bool refVal_canMove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canMove")), refVal_canMove );
        setCanMove(refVal_canMove);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        utility::string_t refVal_cloudStorageAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageAccountId")), refVal_cloudStorageAccountId );
        setCloudStorageAccountId(refVal_cloudStorageAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageObjectId")))
    {
        utility::string_t refVal_cloudStorageObjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageObjectId")), refVal_cloudStorageObjectId );
        setCloudStorageObjectId(refVal_cloudStorageObjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        int32_t refVal_cloudStorageProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageProvider")), refVal_cloudStorageProvider );
        setCloudStorageProvider(refVal_cloudStorageProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdById")))
    {
        utility::string_t refVal_createdById;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdById")), refVal_createdById );
        setCreatedById(refVal_createdById);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconLink")))
    {
        utility::string_t refVal_iconLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconLink")), refVal_iconLink );
        setIconLink(refVal_iconLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isContainer")))
    {
        bool refVal_isContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isContainer")), refVal_isContainer );
        setIsContainer(refVal_isContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        bool refVal_isEnterpriseOwned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwned")), refVal_isEnterpriseOwned );
        setIsEnterpriseOwned(refVal_isEnterpriseOwned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMutable")))
    {
        bool refVal_isMutable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMutable")), refVal_isMutable );
        setIsMutable(refVal_isMutable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mimeType")))
    {
        utility::string_t refVal_mimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mimeType")), refVal_mimeType );
        setMimeType(refVal_mimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedBy")), refVal_modifiedBy );
        setModifiedBy(refVal_modifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedById")))
    {
        utility::string_t refVal_modifiedById;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedById")), refVal_modifiedById );
        setModifiedById(refVal_modifiedById);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourceType")))
    {
        utility::string_t refVal_resourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceType")), refVal_resourceType );
        setResourceType(refVal_resourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sizeBytes")))
    {
        int64_t refVal_sizeBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sizeBytes")), refVal_sizeBytes );
        setSizeBytes(refVal_sizeBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailInfo")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailInfo")), refVal_thumbnailInfo );
        setThumbnailInfo(refVal_thumbnailInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treeHref")))
    {
        utility::string_t refVal_treeHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treeHref")), refVal_treeHref );
        setTreeHref(refVal_treeHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webViewLink")))
    {
        utility::string_t refVal_webViewLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webViewLink")), refVal_webViewLink );
        setWebViewLink(refVal_webViewLink);
    }
    return ok;
}

bool BTCloudStorageObjectInfo::isCanMove() const
{
    return m_CanMove;
}

void BTCloudStorageObjectInfo::setCanMove(bool value)
{
    m_CanMove = value;
    m_CanMoveIsSet = true;
}

bool BTCloudStorageObjectInfo::canMoveIsSet() const
{
    return m_CanMoveIsSet;
}

void BTCloudStorageObjectInfo::unsetCanMove()
{
    m_CanMoveIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getCloudStorageAccountId() const
{
    return m_CloudStorageAccountId;
}

void BTCloudStorageObjectInfo::setCloudStorageAccountId(const utility::string_t& value)
{
    m_CloudStorageAccountId = value;
    m_CloudStorageAccountIdIsSet = true;
}

bool BTCloudStorageObjectInfo::cloudStorageAccountIdIsSet() const
{
    return m_CloudStorageAccountIdIsSet;
}

void BTCloudStorageObjectInfo::unsetCloudStorageAccountId()
{
    m_CloudStorageAccountIdIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getCloudStorageObjectId() const
{
    return m_CloudStorageObjectId;
}

void BTCloudStorageObjectInfo::setCloudStorageObjectId(const utility::string_t& value)
{
    m_CloudStorageObjectId = value;
    m_CloudStorageObjectIdIsSet = true;
}

bool BTCloudStorageObjectInfo::cloudStorageObjectIdIsSet() const
{
    return m_CloudStorageObjectIdIsSet;
}

void BTCloudStorageObjectInfo::unsetCloudStorageObjectId()
{
    m_CloudStorageObjectIdIsSet = false;
}
int32_t BTCloudStorageObjectInfo::getCloudStorageProvider() const
{
    return m_CloudStorageProvider;
}

void BTCloudStorageObjectInfo::setCloudStorageProvider(int32_t value)
{
    m_CloudStorageProvider = value;
    m_CloudStorageProviderIsSet = true;
}

bool BTCloudStorageObjectInfo::cloudStorageProviderIsSet() const
{
    return m_CloudStorageProviderIsSet;
}

void BTCloudStorageObjectInfo::unsetCloudStorageProvider()
{
    m_CloudStorageProviderIsSet = false;
}
utility::datetime BTCloudStorageObjectInfo::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTCloudStorageObjectInfo::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTCloudStorageObjectInfo::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTCloudStorageObjectInfo::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTCloudStorageObjectInfo::getCreatedBy() const
{
    return m_CreatedBy;
}

void BTCloudStorageObjectInfo::setCreatedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool BTCloudStorageObjectInfo::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void BTCloudStorageObjectInfo::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getCreatedById() const
{
    return m_CreatedById;
}

void BTCloudStorageObjectInfo::setCreatedById(const utility::string_t& value)
{
    m_CreatedById = value;
    m_CreatedByIdIsSet = true;
}

bool BTCloudStorageObjectInfo::createdByIdIsSet() const
{
    return m_CreatedByIdIsSet;
}

void BTCloudStorageObjectInfo::unsetCreatedById()
{
    m_CreatedByIdIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getDescription() const
{
    return m_Description;
}

void BTCloudStorageObjectInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTCloudStorageObjectInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTCloudStorageObjectInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getHref() const
{
    return m_Href;
}

void BTCloudStorageObjectInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTCloudStorageObjectInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTCloudStorageObjectInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getIconLink() const
{
    return m_IconLink;
}

void BTCloudStorageObjectInfo::setIconLink(const utility::string_t& value)
{
    m_IconLink = value;
    m_IconLinkIsSet = true;
}

bool BTCloudStorageObjectInfo::iconLinkIsSet() const
{
    return m_IconLinkIsSet;
}

void BTCloudStorageObjectInfo::unsetIconLink()
{
    m_IconLinkIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getId() const
{
    return m_Id;
}

void BTCloudStorageObjectInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTCloudStorageObjectInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTCloudStorageObjectInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTCloudStorageObjectInfo::isIsContainer() const
{
    return m_IsContainer;
}

void BTCloudStorageObjectInfo::setIsContainer(bool value)
{
    m_IsContainer = value;
    m_IsContainerIsSet = true;
}

bool BTCloudStorageObjectInfo::isContainerIsSet() const
{
    return m_IsContainerIsSet;
}

void BTCloudStorageObjectInfo::unsetIsContainer()
{
    m_IsContainerIsSet = false;
}
bool BTCloudStorageObjectInfo::isIsEnterpriseOwned() const
{
    return m_IsEnterpriseOwned;
}

void BTCloudStorageObjectInfo::setIsEnterpriseOwned(bool value)
{
    m_IsEnterpriseOwned = value;
    m_IsEnterpriseOwnedIsSet = true;
}

bool BTCloudStorageObjectInfo::isEnterpriseOwnedIsSet() const
{
    return m_IsEnterpriseOwnedIsSet;
}

void BTCloudStorageObjectInfo::unsetIsEnterpriseOwned()
{
    m_IsEnterpriseOwnedIsSet = false;
}
bool BTCloudStorageObjectInfo::isIsMutable() const
{
    return m_IsMutable;
}

void BTCloudStorageObjectInfo::setIsMutable(bool value)
{
    m_IsMutable = value;
    m_IsMutableIsSet = true;
}

bool BTCloudStorageObjectInfo::isMutableIsSet() const
{
    return m_IsMutableIsSet;
}

void BTCloudStorageObjectInfo::unsetIsMutable()
{
    m_IsMutableIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getMimeType() const
{
    return m_MimeType;
}

void BTCloudStorageObjectInfo::setMimeType(const utility::string_t& value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}

bool BTCloudStorageObjectInfo::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void BTCloudStorageObjectInfo::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}
utility::datetime BTCloudStorageObjectInfo::getModifiedAt() const
{
    return m_ModifiedAt;
}

void BTCloudStorageObjectInfo::setModifiedAt(const utility::datetime& value)
{
    m_ModifiedAt = value;
    m_ModifiedAtIsSet = true;
}

bool BTCloudStorageObjectInfo::modifiedAtIsSet() const
{
    return m_ModifiedAtIsSet;
}

void BTCloudStorageObjectInfo::unsetModifiedAt()
{
    m_ModifiedAtIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTCloudStorageObjectInfo::getModifiedBy() const
{
    return m_ModifiedBy;
}

void BTCloudStorageObjectInfo::setModifiedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_ModifiedBy = value;
    m_ModifiedByIsSet = true;
}

bool BTCloudStorageObjectInfo::modifiedByIsSet() const
{
    return m_ModifiedByIsSet;
}

void BTCloudStorageObjectInfo::unsetModifiedBy()
{
    m_ModifiedByIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getModifiedById() const
{
    return m_ModifiedById;
}

void BTCloudStorageObjectInfo::setModifiedById(const utility::string_t& value)
{
    m_ModifiedById = value;
    m_ModifiedByIdIsSet = true;
}

bool BTCloudStorageObjectInfo::modifiedByIdIsSet() const
{
    return m_ModifiedByIdIsSet;
}

void BTCloudStorageObjectInfo::unsetModifiedById()
{
    m_ModifiedByIdIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getName() const
{
    return m_Name;
}

void BTCloudStorageObjectInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTCloudStorageObjectInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTCloudStorageObjectInfo::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<BTOwnerInfo> BTCloudStorageObjectInfo::getOwner() const
{
    return m_Owner;
}

void BTCloudStorageObjectInfo::setOwner(const std::shared_ptr<BTOwnerInfo>& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool BTCloudStorageObjectInfo::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void BTCloudStorageObjectInfo::unsetOwner()
{
    m_OwnerIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getParentId() const
{
    return m_ParentId;
}

void BTCloudStorageObjectInfo::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTCloudStorageObjectInfo::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTCloudStorageObjectInfo::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getProjectId() const
{
    return m_ProjectId;
}

void BTCloudStorageObjectInfo::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTCloudStorageObjectInfo::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTCloudStorageObjectInfo::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getResourceType() const
{
    return m_ResourceType;
}

void BTCloudStorageObjectInfo::setResourceType(const utility::string_t& value)
{
    m_ResourceType = value;
    m_ResourceTypeIsSet = true;
}

bool BTCloudStorageObjectInfo::resourceTypeIsSet() const
{
    return m_ResourceTypeIsSet;
}

void BTCloudStorageObjectInfo::unsetResourceType()
{
    m_ResourceTypeIsSet = false;
}
int64_t BTCloudStorageObjectInfo::getSizeBytes() const
{
    return m_SizeBytes;
}

void BTCloudStorageObjectInfo::setSizeBytes(int64_t value)
{
    m_SizeBytes = value;
    m_SizeBytesIsSet = true;
}

bool BTCloudStorageObjectInfo::sizeBytesIsSet() const
{
    return m_SizeBytesIsSet;
}

void BTCloudStorageObjectInfo::unsetSizeBytes()
{
    m_SizeBytesIsSet = false;
}
std::shared_ptr<BTThumbnailInfo> BTCloudStorageObjectInfo::getThumbnailInfo() const
{
    return m_ThumbnailInfo;
}

void BTCloudStorageObjectInfo::setThumbnailInfo(const std::shared_ptr<BTThumbnailInfo>& value)
{
    m_ThumbnailInfo = value;
    m_ThumbnailInfoIsSet = true;
}

bool BTCloudStorageObjectInfo::thumbnailInfoIsSet() const
{
    return m_ThumbnailInfoIsSet;
}

void BTCloudStorageObjectInfo::unsetThumbnailInfo()
{
    m_ThumbnailInfoIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getTreeHref() const
{
    return m_TreeHref;
}

void BTCloudStorageObjectInfo::setTreeHref(const utility::string_t& value)
{
    m_TreeHref = value;
    m_TreeHrefIsSet = true;
}

bool BTCloudStorageObjectInfo::treeHrefIsSet() const
{
    return m_TreeHrefIsSet;
}

void BTCloudStorageObjectInfo::unsetTreeHref()
{
    m_TreeHrefIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTCloudStorageObjectInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTCloudStorageObjectInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTCloudStorageObjectInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
utility::string_t BTCloudStorageObjectInfo::getWebViewLink() const
{
    return m_WebViewLink;
}

void BTCloudStorageObjectInfo::setWebViewLink(const utility::string_t& value)
{
    m_WebViewLink = value;
    m_WebViewLinkIsSet = true;
}

bool BTCloudStorageObjectInfo::webViewLinkIsSet() const
{
    return m_WebViewLinkIsSet;
}

void BTCloudStorageObjectInfo::unsetWebViewLink()
{
    m_WebViewLinkIsSet = false;
}
}
}
}
}


