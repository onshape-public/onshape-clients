/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementReferenceParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementReferenceParams::BTAppElementReferenceParams()
{
    m_HasDocumentMicroversions = false;
    m_HasDocumentMicroversionsIsSet = false;
    m_IdTag = utility::conversions::to_string_t("");
    m_IdTagIsSet = false;
    m_IdTagMicroversionId = utility::conversions::to_string_t("");
    m_IdTagMicroversionIdIsSet = false;
    m_IsSketchOnly = false;
    m_IsSketchOnlyIsSet = false;
    m_ParentChangeId = utility::conversions::to_string_t("");
    m_ParentChangeIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_PureSketch = false;
    m_PureSketchIsSet = false;
    m_ReferenceType = 0;
    m_ReferenceTypeIsSet = false;
    m_ReturnError = false;
    m_ReturnErrorIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_SketchIdsIsSet = false;
    m_TargetConfiguration = utility::conversions::to_string_t("");
    m_TargetConfigurationIsSet = false;
    m_TargetDocumentId = utility::conversions::to_string_t("");
    m_TargetDocumentIdIsSet = false;
    m_TargetElementId = utility::conversions::to_string_t("");
    m_TargetElementIdIsSet = false;
    m_TargetMicroversionId = utility::conversions::to_string_t("");
    m_TargetMicroversionIdIsSet = false;
    m_TargetVersionId = utility::conversions::to_string_t("");
    m_TargetVersionIdIsSet = false;
    m_TrackNewVersions = false;
    m_TrackNewVersionsIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
    m_UpdateSketchInfo = false;
    m_UpdateSketchInfoIsSet = false;
}

BTAppElementReferenceParams::~BTAppElementReferenceParams()
{
}

void BTAppElementReferenceParams::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementReferenceParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HasDocumentMicroversionsIsSet)
    {
        val[utility::conversions::to_string_t("hasDocumentMicroversions")] = ModelBase::toJson(m_HasDocumentMicroversions);
    }
    if(m_IdTagIsSet)
    {
        val[utility::conversions::to_string_t("idTag")] = ModelBase::toJson(m_IdTag);
    }
    if(m_IdTagMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("idTagMicroversionId")] = ModelBase::toJson(m_IdTagMicroversionId);
    }
    if(m_IsSketchOnlyIsSet)
    {
        val[utility::conversions::to_string_t("isSketchOnly")] = ModelBase::toJson(m_IsSketchOnly);
    }
    if(m_ParentChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("parentChangeId")] = ModelBase::toJson(m_ParentChangeId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_PureSketchIsSet)
    {
        val[utility::conversions::to_string_t("pureSketch")] = ModelBase::toJson(m_PureSketch);
    }
    if(m_ReferenceTypeIsSet)
    {
        val[utility::conversions::to_string_t("referenceType")] = ModelBase::toJson(m_ReferenceType);
    }
    if(m_ReturnErrorIsSet)
    {
        val[utility::conversions::to_string_t("returnError")] = ModelBase::toJson(m_ReturnError);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_SketchIdsIsSet)
    {
        val[utility::conversions::to_string_t("sketchIds")] = ModelBase::toJson(m_SketchIds);
    }
    if(m_TargetConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("targetConfiguration")] = ModelBase::toJson(m_TargetConfiguration);
    }
    if(m_TargetDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("targetDocumentId")] = ModelBase::toJson(m_TargetDocumentId);
    }
    if(m_TargetElementIdIsSet)
    {
        val[utility::conversions::to_string_t("targetElementId")] = ModelBase::toJson(m_TargetElementId);
    }
    if(m_TargetMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetMicroversionId")] = ModelBase::toJson(m_TargetMicroversionId);
    }
    if(m_TargetVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetVersionId")] = ModelBase::toJson(m_TargetVersionId);
    }
    if(m_TrackNewVersionsIsSet)
    {
        val[utility::conversions::to_string_t("trackNewVersions")] = ModelBase::toJson(m_TrackNewVersions);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t("transactionId")] = ModelBase::toJson(m_TransactionId);
    }
    if(m_UpdateSketchInfoIsSet)
    {
        val[utility::conversions::to_string_t("updateSketchInfo")] = ModelBase::toJson(m_UpdateSketchInfo);
    }

    return val;
}

bool BTAppElementReferenceParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("hasDocumentMicroversions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasDocumentMicroversions"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasDocumentMicroversions;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasDocumentMicroversions);
            setHasDocumentMicroversions(refVal_hasDocumentMicroversions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idTag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idTag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_idTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_idTag);
            setIdTag(refVal_idTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idTagMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idTagMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_idTagMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_idTagMicroversionId);
            setIdTagMicroversionId(refVal_idTagMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSketchOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSketchOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSketchOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSketchOnly);
            setIsSketchOnly(refVal_isSketchOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentChangeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentChangeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentChangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentChangeId);
            setParentChangeId(refVal_parentChangeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pureSketch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pureSketch"));
        if(!fieldValue.is_null())
        {
            bool refVal_pureSketch;
            ok &= ModelBase::fromJson(fieldValue, refVal_pureSketch);
            setPureSketch(refVal_pureSketch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referenceType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_referenceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_referenceType);
            setReferenceType(refVal_referenceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("returnError")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("returnError"));
        if(!fieldValue.is_null())
        {
            bool refVal_returnError;
            ok &= ModelBase::fromJson(fieldValue, refVal_returnError);
            setReturnError(refVal_returnError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sketchIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sketchIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sketchIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sketchIds);
            setSketchIds(refVal_sketchIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetConfiguration);
            setTargetConfiguration(refVal_targetConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetDocumentId);
            setTargetDocumentId(refVal_targetDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetElementId);
            setTargetElementId(refVal_targetElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetMicroversionId);
            setTargetMicroversionId(refVal_targetMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetVersionId);
            setTargetVersionId(refVal_targetVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trackNewVersions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trackNewVersions"));
        if(!fieldValue.is_null())
        {
            bool refVal_trackNewVersions;
            ok &= ModelBase::fromJson(fieldValue, refVal_trackNewVersions);
            setTrackNewVersions(refVal_trackNewVersions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transactionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transactionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionId);
            setTransactionId(refVal_transactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updateSketchInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updateSketchInfo"));
        if(!fieldValue.is_null())
        {
            bool refVal_updateSketchInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_updateSketchInfo);
            setUpdateSketchInfo(refVal_updateSketchInfo);
        }
    }
    return ok;
}

void BTAppElementReferenceParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HasDocumentMicroversionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasDocumentMicroversions"), m_HasDocumentMicroversions));
    }
    if(m_IdTagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idTag"), m_IdTag));
    }
    if(m_IdTagMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idTagMicroversionId"), m_IdTagMicroversionId));
    }
    if(m_IsSketchOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSketchOnly"), m_IsSketchOnly));
    }
    if(m_ParentChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentChangeId"), m_ParentChangeId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_PureSketchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pureSketch"), m_PureSketch));
    }
    if(m_ReferenceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceType"), m_ReferenceType));
    }
    if(m_ReturnErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnError"), m_ReturnError));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_SketchIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sketchIds"), m_SketchIds));
    }
    if(m_TargetConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetConfiguration"), m_TargetConfiguration));
    }
    if(m_TargetDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetDocumentId"), m_TargetDocumentId));
    }
    if(m_TargetElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetElementId"), m_TargetElementId));
    }
    if(m_TargetMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetMicroversionId"), m_TargetMicroversionId));
    }
    if(m_TargetVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetVersionId"), m_TargetVersionId));
    }
    if(m_TrackNewVersionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trackNewVersions"), m_TrackNewVersions));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transactionId"), m_TransactionId));
    }
    if(m_UpdateSketchInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updateSketchInfo"), m_UpdateSketchInfo));
    }
}

bool BTAppElementReferenceParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hasDocumentMicroversions")))
    {
        bool refVal_hasDocumentMicroversions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasDocumentMicroversions")), refVal_hasDocumentMicroversions );
        setHasDocumentMicroversions(refVal_hasDocumentMicroversions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idTag")))
    {
        utility::string_t refVal_idTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idTag")), refVal_idTag );
        setIdTag(refVal_idTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idTagMicroversionId")))
    {
        utility::string_t refVal_idTagMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idTagMicroversionId")), refVal_idTagMicroversionId );
        setIdTagMicroversionId(refVal_idTagMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSketchOnly")))
    {
        bool refVal_isSketchOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSketchOnly")), refVal_isSketchOnly );
        setIsSketchOnly(refVal_isSketchOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentChangeId")))
    {
        utility::string_t refVal_parentChangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentChangeId")), refVal_parentChangeId );
        setParentChangeId(refVal_parentChangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pureSketch")))
    {
        bool refVal_pureSketch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pureSketch")), refVal_pureSketch );
        setPureSketch(refVal_pureSketch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceType")))
    {
        int32_t refVal_referenceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceType")), refVal_referenceType );
        setReferenceType(refVal_referenceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnError")))
    {
        bool refVal_returnError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnError")), refVal_returnError );
        setReturnError(refVal_returnError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sketchIds")))
    {
        std::vector<utility::string_t> refVal_sketchIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sketchIds")), refVal_sketchIds );
        setSketchIds(refVal_sketchIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetConfiguration")))
    {
        utility::string_t refVal_targetConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetConfiguration")), refVal_targetConfiguration );
        setTargetConfiguration(refVal_targetConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetDocumentId")))
    {
        utility::string_t refVal_targetDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetDocumentId")), refVal_targetDocumentId );
        setTargetDocumentId(refVal_targetDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetElementId")))
    {
        utility::string_t refVal_targetElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetElementId")), refVal_targetElementId );
        setTargetElementId(refVal_targetElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetMicroversionId")))
    {
        utility::string_t refVal_targetMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetMicroversionId")), refVal_targetMicroversionId );
        setTargetMicroversionId(refVal_targetMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetVersionId")))
    {
        utility::string_t refVal_targetVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetVersionId")), refVal_targetVersionId );
        setTargetVersionId(refVal_targetVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trackNewVersions")))
    {
        bool refVal_trackNewVersions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trackNewVersions")), refVal_trackNewVersions );
        setTrackNewVersions(refVal_trackNewVersions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transactionId")))
    {
        utility::string_t refVal_transactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transactionId")), refVal_transactionId );
        setTransactionId(refVal_transactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updateSketchInfo")))
    {
        bool refVal_updateSketchInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updateSketchInfo")), refVal_updateSketchInfo );
        setUpdateSketchInfo(refVal_updateSketchInfo);
    }
    return ok;
}

bool BTAppElementReferenceParams::isHasDocumentMicroversions() const
{
    return m_HasDocumentMicroversions;
}

void BTAppElementReferenceParams::setHasDocumentMicroversions(bool value)
{
    m_HasDocumentMicroversions = value;
    m_HasDocumentMicroversionsIsSet = true;
}

bool BTAppElementReferenceParams::hasDocumentMicroversionsIsSet() const
{
    return m_HasDocumentMicroversionsIsSet;
}

void BTAppElementReferenceParams::unsetHasDocumentMicroversions()
{
    m_HasDocumentMicroversionsIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getIdTag() const
{
    return m_IdTag;
}

void BTAppElementReferenceParams::setIdTag(const utility::string_t& value)
{
    m_IdTag = value;
    m_IdTagIsSet = true;
}

bool BTAppElementReferenceParams::idTagIsSet() const
{
    return m_IdTagIsSet;
}

void BTAppElementReferenceParams::unsetIdTag()
{
    m_IdTagIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getIdTagMicroversionId() const
{
    return m_IdTagMicroversionId;
}

void BTAppElementReferenceParams::setIdTagMicroversionId(const utility::string_t& value)
{
    m_IdTagMicroversionId = value;
    m_IdTagMicroversionIdIsSet = true;
}

bool BTAppElementReferenceParams::idTagMicroversionIdIsSet() const
{
    return m_IdTagMicroversionIdIsSet;
}

void BTAppElementReferenceParams::unsetIdTagMicroversionId()
{
    m_IdTagMicroversionIdIsSet = false;
}
bool BTAppElementReferenceParams::isIsSketchOnly() const
{
    return m_IsSketchOnly;
}

void BTAppElementReferenceParams::setIsSketchOnly(bool value)
{
    m_IsSketchOnly = value;
    m_IsSketchOnlyIsSet = true;
}

bool BTAppElementReferenceParams::isSketchOnlyIsSet() const
{
    return m_IsSketchOnlyIsSet;
}

void BTAppElementReferenceParams::unsetIsSketchOnly()
{
    m_IsSketchOnlyIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getParentChangeId() const
{
    return m_ParentChangeId;
}

void BTAppElementReferenceParams::setParentChangeId(const utility::string_t& value)
{
    m_ParentChangeId = value;
    m_ParentChangeIdIsSet = true;
}

bool BTAppElementReferenceParams::parentChangeIdIsSet() const
{
    return m_ParentChangeIdIsSet;
}

void BTAppElementReferenceParams::unsetParentChangeId()
{
    m_ParentChangeIdIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getPartNumber() const
{
    return m_PartNumber;
}

void BTAppElementReferenceParams::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTAppElementReferenceParams::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTAppElementReferenceParams::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
bool BTAppElementReferenceParams::isPureSketch() const
{
    return m_PureSketch;
}

void BTAppElementReferenceParams::setPureSketch(bool value)
{
    m_PureSketch = value;
    m_PureSketchIsSet = true;
}

bool BTAppElementReferenceParams::pureSketchIsSet() const
{
    return m_PureSketchIsSet;
}

void BTAppElementReferenceParams::unsetPureSketch()
{
    m_PureSketchIsSet = false;
}
int32_t BTAppElementReferenceParams::getReferenceType() const
{
    return m_ReferenceType;
}

void BTAppElementReferenceParams::setReferenceType(int32_t value)
{
    m_ReferenceType = value;
    m_ReferenceTypeIsSet = true;
}

bool BTAppElementReferenceParams::referenceTypeIsSet() const
{
    return m_ReferenceTypeIsSet;
}

void BTAppElementReferenceParams::unsetReferenceType()
{
    m_ReferenceTypeIsSet = false;
}
bool BTAppElementReferenceParams::isReturnError() const
{
    return m_ReturnError;
}

void BTAppElementReferenceParams::setReturnError(bool value)
{
    m_ReturnError = value;
    m_ReturnErrorIsSet = true;
}

bool BTAppElementReferenceParams::returnErrorIsSet() const
{
    return m_ReturnErrorIsSet;
}

void BTAppElementReferenceParams::unsetReturnError()
{
    m_ReturnErrorIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getRevision() const
{
    return m_Revision;
}

void BTAppElementReferenceParams::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTAppElementReferenceParams::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTAppElementReferenceParams::unsetRevision()
{
    m_RevisionIsSet = false;
}
std::vector<utility::string_t>& BTAppElementReferenceParams::getSketchIds()
{
    return m_SketchIds;
}

void BTAppElementReferenceParams::setSketchIds(const std::vector<utility::string_t>& value)
{
    m_SketchIds = value;
    m_SketchIdsIsSet = true;
}

bool BTAppElementReferenceParams::sketchIdsIsSet() const
{
    return m_SketchIdsIsSet;
}

void BTAppElementReferenceParams::unsetSketchIds()
{
    m_SketchIdsIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTargetConfiguration() const
{
    return m_TargetConfiguration;
}

void BTAppElementReferenceParams::setTargetConfiguration(const utility::string_t& value)
{
    m_TargetConfiguration = value;
    m_TargetConfigurationIsSet = true;
}

bool BTAppElementReferenceParams::targetConfigurationIsSet() const
{
    return m_TargetConfigurationIsSet;
}

void BTAppElementReferenceParams::unsetTargetConfiguration()
{
    m_TargetConfigurationIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTargetDocumentId() const
{
    return m_TargetDocumentId;
}

void BTAppElementReferenceParams::setTargetDocumentId(const utility::string_t& value)
{
    m_TargetDocumentId = value;
    m_TargetDocumentIdIsSet = true;
}

bool BTAppElementReferenceParams::targetDocumentIdIsSet() const
{
    return m_TargetDocumentIdIsSet;
}

void BTAppElementReferenceParams::unsetTargetDocumentId()
{
    m_TargetDocumentIdIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTargetElementId() const
{
    return m_TargetElementId;
}

void BTAppElementReferenceParams::setTargetElementId(const utility::string_t& value)
{
    m_TargetElementId = value;
    m_TargetElementIdIsSet = true;
}

bool BTAppElementReferenceParams::targetElementIdIsSet() const
{
    return m_TargetElementIdIsSet;
}

void BTAppElementReferenceParams::unsetTargetElementId()
{
    m_TargetElementIdIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTargetMicroversionId() const
{
    return m_TargetMicroversionId;
}

void BTAppElementReferenceParams::setTargetMicroversionId(const utility::string_t& value)
{
    m_TargetMicroversionId = value;
    m_TargetMicroversionIdIsSet = true;
}

bool BTAppElementReferenceParams::targetMicroversionIdIsSet() const
{
    return m_TargetMicroversionIdIsSet;
}

void BTAppElementReferenceParams::unsetTargetMicroversionId()
{
    m_TargetMicroversionIdIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTargetVersionId() const
{
    return m_TargetVersionId;
}

void BTAppElementReferenceParams::setTargetVersionId(const utility::string_t& value)
{
    m_TargetVersionId = value;
    m_TargetVersionIdIsSet = true;
}

bool BTAppElementReferenceParams::targetVersionIdIsSet() const
{
    return m_TargetVersionIdIsSet;
}

void BTAppElementReferenceParams::unsetTargetVersionId()
{
    m_TargetVersionIdIsSet = false;
}
bool BTAppElementReferenceParams::isTrackNewVersions() const
{
    return m_TrackNewVersions;
}

void BTAppElementReferenceParams::setTrackNewVersions(bool value)
{
    m_TrackNewVersions = value;
    m_TrackNewVersionsIsSet = true;
}

bool BTAppElementReferenceParams::trackNewVersionsIsSet() const
{
    return m_TrackNewVersionsIsSet;
}

void BTAppElementReferenceParams::unsetTrackNewVersions()
{
    m_TrackNewVersionsIsSet = false;
}
utility::string_t BTAppElementReferenceParams::getTransactionId() const
{
    return m_TransactionId;
}

void BTAppElementReferenceParams::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool BTAppElementReferenceParams::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void BTAppElementReferenceParams::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
bool BTAppElementReferenceParams::isUpdateSketchInfo() const
{
    return m_UpdateSketchInfo;
}

void BTAppElementReferenceParams::setUpdateSketchInfo(bool value)
{
    m_UpdateSketchInfo = value;
    m_UpdateSketchInfoIsSet = true;
}

bool BTAppElementReferenceParams::updateSketchInfoIsSet() const
{
    return m_UpdateSketchInfoIsSet;
}

void BTAppElementReferenceParams::unsetUpdateSketchInfo()
{
    m_UpdateSketchInfoIsSet = false;
}
}
}
}
}


