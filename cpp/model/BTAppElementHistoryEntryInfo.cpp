/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementHistoryEntryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementHistoryEntryInfo::BTAppElementHistoryEntryInfo()
{
    m_ChangeId = utility::conversions::to_string_t("");
    m_ChangeIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

BTAppElementHistoryEntryInfo::~BTAppElementHistoryEntryInfo()
{
}

void BTAppElementHistoryEntryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementHistoryEntryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("changeId")] = ModelBase::toJson(m_ChangeId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }

    return val;
}

bool BTAppElementHistoryEntryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_changeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_changeId);
            setChangeId(refVal_changeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    return ok;
}

void BTAppElementHistoryEntryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changeId"), m_ChangeId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
}

bool BTAppElementHistoryEntryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changeId")))
    {
        utility::string_t refVal_changeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changeId")), refVal_changeId );
        setChangeId(refVal_changeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    return ok;
}

utility::string_t BTAppElementHistoryEntryInfo::getChangeId() const
{
    return m_ChangeId;
}

void BTAppElementHistoryEntryInfo::setChangeId(const utility::string_t& value)
{
    m_ChangeId = value;
    m_ChangeIdIsSet = true;
}

bool BTAppElementHistoryEntryInfo::changeIdIsSet() const
{
    return m_ChangeIdIsSet;
}

void BTAppElementHistoryEntryInfo::unsetChangeId()
{
    m_ChangeIdIsSet = false;
}
utility::datetime BTAppElementHistoryEntryInfo::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTAppElementHistoryEntryInfo::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTAppElementHistoryEntryInfo::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTAppElementHistoryEntryInfo::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t BTAppElementHistoryEntryInfo::getDescription() const
{
    return m_Description;
}

void BTAppElementHistoryEntryInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTAppElementHistoryEntryInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTAppElementHistoryEntryInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
}
}
}
}


