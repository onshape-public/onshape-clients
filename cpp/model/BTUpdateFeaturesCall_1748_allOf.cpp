/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUpdateFeaturesCall_1748_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUpdateFeaturesCall_1748_allOf::BTUpdateFeaturesCall_1748_allOf()
{
    m_FeaturesIsSet = false;
    m_UpdateSuppressionAttributes = false;
    m_UpdateSuppressionAttributesIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTUpdateFeaturesCall_1748_allOf::~BTUpdateFeaturesCall_1748_allOf()
{
}

void BTUpdateFeaturesCall_1748_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTUpdateFeaturesCall_1748_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);
    }
    if(m_UpdateSuppressionAttributesIsSet)
    {
        val[utility::conversions::to_string_t("updateSuppressionAttributes")] = ModelBase::toJson(m_UpdateSuppressionAttributes);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTUpdateFeaturesCall_1748_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("features")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("features"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMFeature_134>> refVal_features;
            ok &= ModelBase::fromJson(fieldValue, refVal_features);
            setFeatures(refVal_features);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updateSuppressionAttributes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updateSuppressionAttributes"));
        if(!fieldValue.is_null())
        {
            bool refVal_updateSuppressionAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_updateSuppressionAttributes);
            setUpdateSuppressionAttributes(refVal_updateSuppressionAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTUpdateFeaturesCall_1748_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), m_Features));
    }
    if(m_UpdateSuppressionAttributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updateSuppressionAttributes"), m_UpdateSuppressionAttributes));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTUpdateFeaturesCall_1748_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("features")))
    {
        std::vector<std::shared_ptr<BTMFeature_134>> refVal_features;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("features")), refVal_features );
        setFeatures(refVal_features);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updateSuppressionAttributes")))
    {
        bool refVal_updateSuppressionAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updateSuppressionAttributes")), refVal_updateSuppressionAttributes );
        setUpdateSuppressionAttributes(refVal_updateSuppressionAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::vector<std::shared_ptr<BTMFeature_134>>& BTUpdateFeaturesCall_1748_allOf::getFeatures()
{
    return m_Features;
}

void BTUpdateFeaturesCall_1748_allOf::setFeatures(const std::vector<std::shared_ptr<BTMFeature_134>>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool BTUpdateFeaturesCall_1748_allOf::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void BTUpdateFeaturesCall_1748_allOf::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
bool BTUpdateFeaturesCall_1748_allOf::isUpdateSuppressionAttributes() const
{
    return m_UpdateSuppressionAttributes;
}

void BTUpdateFeaturesCall_1748_allOf::setUpdateSuppressionAttributes(bool value)
{
    m_UpdateSuppressionAttributes = value;
    m_UpdateSuppressionAttributesIsSet = true;
}

bool BTUpdateFeaturesCall_1748_allOf::updateSuppressionAttributesIsSet() const
{
    return m_UpdateSuppressionAttributesIsSet;
}

void BTUpdateFeaturesCall_1748_allOf::unsetUpdateSuppressionAttributes()
{
    m_UpdateSuppressionAttributesIsSet = false;
}
utility::string_t BTUpdateFeaturesCall_1748_allOf::getBtType() const
{
    return m_BtType;
}

void BTUpdateFeaturesCall_1748_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTUpdateFeaturesCall_1748_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTUpdateFeaturesCall_1748_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


