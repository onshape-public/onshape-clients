/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTConstructionObjectFilter_113.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTConstructionObjectFilter_113::BTConstructionObjectFilter_113()
{
    m_IsConstruction = false;
    m_IsConstructionIsSet = false;
}

BTConstructionObjectFilter_113::~BTConstructionObjectFilter_113()
{
}

void BTConstructionObjectFilter_113::validate()
{
    // TODO: implement validation
}

web::json::value BTConstructionObjectFilter_113::toJson() const
{
    web::json::value val = this->BTQueryFilter_183::toJson();
    
    if(m_IsConstructionIsSet)
    {
        val[utility::conversions::to_string_t("isConstruction")] = ModelBase::toJson(m_IsConstruction);
    }

    return val;
}

bool BTConstructionObjectFilter_113::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTQueryFilter_183::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("isConstruction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isConstruction"));
        if(!fieldValue.is_null())
        {
            bool refVal_isConstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_isConstruction);
            setIsConstruction(refVal_isConstruction);
        }
    }
    return ok;
}

void BTConstructionObjectFilter_113::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IsConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConstruction"), m_IsConstruction));
    }
}

bool BTConstructionObjectFilter_113::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConstruction")))
    {
        bool refVal_isConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConstruction")), refVal_isConstruction );
        setIsConstruction(refVal_isConstruction);
    }
    return ok;
}

bool BTConstructionObjectFilter_113::isIsConstruction() const
{
    return m_IsConstruction;
}

void BTConstructionObjectFilter_113::setIsConstruction(bool value)
{
    m_IsConstruction = value;
    m_IsConstructionIsSet = true;
}

bool BTConstructionObjectFilter_113::isConstructionIsSet() const
{
    return m_IsConstructionIsSet;
}

void BTConstructionObjectFilter_113::unsetIsConstruction()
{
    m_IsConstructionIsSet = false;
}
}
}
}
}


