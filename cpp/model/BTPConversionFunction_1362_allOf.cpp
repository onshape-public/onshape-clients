/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPConversionFunction_1362_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPConversionFunction_1362_allOf::BTPConversionFunction_1362_allOf()
{
    m_ToIsSet = false;
    m_r_typeNameIsSet = false;
    m_FromIsSet = false;
    m_SpaceAfterTypeIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPConversionFunction_1362_allOf::~BTPConversionFunction_1362_allOf()
{
}

void BTPConversionFunction_1362_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPConversionFunction_1362_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t("typeName")] = ModelBase::toJson(m_r_typeName);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_SpaceAfterTypeIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterType")] = ModelBase::toJson(m_SpaceAfterType);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPConversionFunction_1362_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralNumber_258> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeName"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralNumber_258> refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterType;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterType);
            setSpaceAfterType(refVal_spaceAfterType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPConversionFunction_1362_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeName"), m_r_typeName));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_SpaceAfterTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterType"), m_SpaceAfterType));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPConversionFunction_1362_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::shared_ptr<BTPLiteralNumber_258> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeName")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeName")), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        std::shared_ptr<BTPLiteralNumber_258> refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterType")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterType")), refVal_spaceAfterType );
        setSpaceAfterType(refVal_spaceAfterType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTPLiteralNumber_258> BTPConversionFunction_1362_allOf::getTo() const
{
    return m_To;
}

void BTPConversionFunction_1362_allOf::setTo(const std::shared_ptr<BTPLiteralNumber_258>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool BTPConversionFunction_1362_allOf::toIsSet() const
{
    return m_ToIsSet;
}

void BTPConversionFunction_1362_allOf::unsetTo()
{
    m_ToIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPConversionFunction_1362_allOf::getRTypeName() const
{
    return m_r_typeName;
}

void BTPConversionFunction_1362_allOf::setRTypeName(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool BTPConversionFunction_1362_allOf::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void BTPConversionFunction_1362_allOf::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
std::shared_ptr<BTPLiteralNumber_258> BTPConversionFunction_1362_allOf::getFrom() const
{
    return m_From;
}

void BTPConversionFunction_1362_allOf::setFrom(const std::shared_ptr<BTPLiteralNumber_258>& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool BTPConversionFunction_1362_allOf::fromIsSet() const
{
    return m_FromIsSet;
}

void BTPConversionFunction_1362_allOf::unsetFrom()
{
    m_FromIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPConversionFunction_1362_allOf::getSpaceAfterType() const
{
    return m_SpaceAfterType;
}

void BTPConversionFunction_1362_allOf::setSpaceAfterType(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterType = value;
    m_SpaceAfterTypeIsSet = true;
}

bool BTPConversionFunction_1362_allOf::spaceAfterTypeIsSet() const
{
    return m_SpaceAfterTypeIsSet;
}

void BTPConversionFunction_1362_allOf::unsetSpaceAfterType()
{
    m_SpaceAfterTypeIsSet = false;
}
utility::string_t BTPConversionFunction_1362_allOf::getBtType() const
{
    return m_BtType;
}

void BTPConversionFunction_1362_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPConversionFunction_1362_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPConversionFunction_1362_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


