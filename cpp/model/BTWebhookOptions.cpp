/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWebhookOptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWebhookOptions::BTWebhookOptions()
{
    m_CollapseEvents = false;
    m_CollapseEventsIsSet = false;
}

BTWebhookOptions::~BTWebhookOptions()
{
}

void BTWebhookOptions::validate()
{
    // TODO: implement validation
}

web::json::value BTWebhookOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CollapseEventsIsSet)
    {
        val[utility::conversions::to_string_t("collapseEvents")] = ModelBase::toJson(m_CollapseEvents);
    }

    return val;
}

bool BTWebhookOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("collapseEvents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collapseEvents"));
        if(!fieldValue.is_null())
        {
            bool refVal_collapseEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_collapseEvents);
            setCollapseEvents(refVal_collapseEvents);
        }
    }
    return ok;
}

void BTWebhookOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CollapseEventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collapseEvents"), m_CollapseEvents));
    }
}

bool BTWebhookOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("collapseEvents")))
    {
        bool refVal_collapseEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collapseEvents")), refVal_collapseEvents );
        setCollapseEvents(refVal_collapseEvents);
    }
    return ok;
}

bool BTWebhookOptions::isCollapseEvents() const
{
    return m_CollapseEvents;
}

void BTWebhookOptions::setCollapseEvents(bool value)
{
    m_CollapseEvents = value;
    m_CollapseEventsIsSet = true;
}

bool BTWebhookOptions::collapseEventsIsSet() const
{
    return m_CollapseEventsIsSet;
}

void BTWebhookOptions::unsetCollapseEvents()
{
    m_CollapseEventsIsSet = false;
}
}
}
}
}


