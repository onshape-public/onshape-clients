/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMetadataPropertyUiHintsInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMetadataPropertyUiHintsInfo::BTMetadataPropertyUiHintsInfo()
{
    m_Multiline = false;
    m_MultilineIsSet = false;
}

BTMetadataPropertyUiHintsInfo::~BTMetadataPropertyUiHintsInfo()
{
}

void BTMetadataPropertyUiHintsInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMetadataPropertyUiHintsInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MultilineIsSet)
    {
        val[utility::conversions::to_string_t("multiline")] = ModelBase::toJson(m_Multiline);
    }

    return val;
}

bool BTMetadataPropertyUiHintsInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("multiline")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("multiline"));
        if(!fieldValue.is_null())
        {
            bool refVal_multiline;
            ok &= ModelBase::fromJson(fieldValue, refVal_multiline);
            setMultiline(refVal_multiline);
        }
    }
    return ok;
}

void BTMetadataPropertyUiHintsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MultilineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("multiline"), m_Multiline));
    }
}

bool BTMetadataPropertyUiHintsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("multiline")))
    {
        bool refVal_multiline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("multiline")), refVal_multiline );
        setMultiline(refVal_multiline);
    }
    return ok;
}

bool BTMetadataPropertyUiHintsInfo::isMultiline() const
{
    return m_Multiline;
}

void BTMetadataPropertyUiHintsInfo::setMultiline(bool value)
{
    m_Multiline = value;
    m_MultilineIsSet = true;
}

bool BTMetadataPropertyUiHintsInfo::multilineIsSet() const
{
    return m_MultilineIsSet;
}

void BTMetadataPropertyUiHintsInfo::unsetMultiline()
{
    m_MultilineIsSet = false;
}
}
}
}
}


