/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMetadataPropertyValidatorInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyValidatorInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyValidatorInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMetadataPropertyValidatorInfo
    : public ModelBase
{
public:
    BTMetadataPropertyValidatorInfo();
    virtual ~BTMetadataPropertyValidatorInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMetadataPropertyValidatorInfo members

    /// <summary>
    /// 
    /// </summary>
    double getMax() const;
    bool maxIsSet() const;
    void unsetMax();

    void setMax(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxCount() const;
    bool maxCountIsSet() const;
    void unsetMaxCount();

    void setMaxCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getMaxDate() const;
    bool maxDateIsSet() const;
    void unsetMaxDate();

    void setMaxDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxLength() const;
    bool maxLengthIsSet() const;
    void unsetMaxLength();

    void setMaxLength(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getMin() const;
    bool minIsSet() const;
    void unsetMin();

    void setMin(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinCount() const;
    bool minCountIsSet() const;
    void unsetMinCount();

    void setMinCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getMinDate() const;
    bool minDateIsSet() const;
    void unsetMinDate();

    void setMinDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinLength() const;
    bool minLengthIsSet() const;
    void unsetMinLength();

    void setMinLength(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPattern() const;
    bool patternIsSet() const;
    void unsetPattern();

    void setPattern(const utility::string_t& value);


protected:
    double m_Max;
    bool m_MaxIsSet;
    int32_t m_MaxCount;
    bool m_MaxCountIsSet;
    utility::datetime m_MaxDate;
    bool m_MaxDateIsSet;
    int32_t m_MaxLength;
    bool m_MaxLengthIsSet;
    double m_Min;
    bool m_MinIsSet;
    int32_t m_MinCount;
    bool m_MinCountIsSet;
    utility::datetime m_MinDate;
    bool m_MinDateIsSet;
    int32_t m_MinLength;
    bool m_MinLengthIsSet;
    utility::string_t m_Pattern;
    bool m_PatternIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMetadataPropertyValidatorInfo_H_ */
