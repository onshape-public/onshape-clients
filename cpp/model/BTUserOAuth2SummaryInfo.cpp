/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUserOAuth2SummaryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUserOAuth2SummaryInfo::BTUserOAuth2SummaryInfo()
{
    m_ClientId = utility::conversions::to_string_t("");
    m_ClientIdIsSet = false;
    m_CompanyIsSet = false;
    m_CompanyPlan = false;
    m_CompanyPlanIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_GlobalPermissionsIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_IsGuest = false;
    m_IsGuestIsSet = false;
    m_IsLight = false;
    m_IsLightIsSet = false;
    m_LastLoginTime = utility::datetime();
    m_LastLoginTimeIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Oauth2Scopes = 0L;
    m_Oauth2ScopesIsSet = false;
    m_PlanGroup = utility::conversions::to_string_t("");
    m_PlanGroupIsSet = false;
    m_Role = 0;
    m_RoleIsSet = false;
    m_RolesIsSet = false;
    m_Source = 0;
    m_SourceIsSet = false;
    m_State = 0;
    m_StateIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTUserOAuth2SummaryInfo::~BTUserOAuth2SummaryInfo()
{
}

void BTUserOAuth2SummaryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTUserOAuth2SummaryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClientIdIsSet)
    {
        val[utility::conversions::to_string_t("clientId")] = ModelBase::toJson(m_ClientId);
    }
    if(m_CompanyIsSet)
    {
        val[utility::conversions::to_string_t("company")] = ModelBase::toJson(m_Company);
    }
    if(m_CompanyPlanIsSet)
    {
        val[utility::conversions::to_string_t("companyPlan")] = ModelBase::toJson(m_CompanyPlan);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_GlobalPermissionsIsSet)
    {
        val[utility::conversions::to_string_t("globalPermissions")] = ModelBase::toJson(m_GlobalPermissions);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_IsGuestIsSet)
    {
        val[utility::conversions::to_string_t("isGuest")] = ModelBase::toJson(m_IsGuest);
    }
    if(m_IsLightIsSet)
    {
        val[utility::conversions::to_string_t("isLight")] = ModelBase::toJson(m_IsLight);
    }
    if(m_LastLoginTimeIsSet)
    {
        val[utility::conversions::to_string_t("lastLoginTime")] = ModelBase::toJson(m_LastLoginTime);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Oauth2ScopesIsSet)
    {
        val[utility::conversions::to_string_t("oauth2Scopes")] = ModelBase::toJson(m_Oauth2Scopes);
    }
    if(m_PlanGroupIsSet)
    {
        val[utility::conversions::to_string_t("planGroup")] = ModelBase::toJson(m_PlanGroup);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }
    if(m_RolesIsSet)
    {
        val[utility::conversions::to_string_t("roles")] = ModelBase::toJson(m_Roles);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t("source")] = ModelBase::toJson(m_Source);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTUserOAuth2SummaryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("clientId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clientId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_clientId);
            setClientId(refVal_clientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("company"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCompanySummaryInfo> refVal_company;
            ok &= ModelBase::fromJson(fieldValue, refVal_company);
            setCompany(refVal_company);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyPlan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyPlan"));
        if(!fieldValue.is_null())
        {
            bool refVal_companyPlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyPlan);
            setCompanyPlan(refVal_companyPlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_firstName;
            ok &= ModelBase::fromJson(fieldValue, refVal_firstName);
            setFirstName(refVal_firstName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("globalPermissions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("globalPermissions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GlobalPermissionInfo> refVal_globalPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_globalPermissions);
            setGlobalPermissions(refVal_globalPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("image"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_image);
            setImage(refVal_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isGuest")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isGuest"));
        if(!fieldValue.is_null())
        {
            bool refVal_isGuest;
            ok &= ModelBase::fromJson(fieldValue, refVal_isGuest);
            setIsGuest(refVal_isGuest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isLight")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isLight"));
        if(!fieldValue.is_null())
        {
            bool refVal_isLight;
            ok &= ModelBase::fromJson(fieldValue, refVal_isLight);
            setIsLight(refVal_isLight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastLoginTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastLoginTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_lastLoginTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastLoginTime);
            setLastLoginTime(refVal_lastLoginTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lastName;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastName);
            setLastName(refVal_lastName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth2Scopes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("oauth2Scopes"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_oauth2Scopes;
            ok &= ModelBase::fromJson(fieldValue, refVal_oauth2Scopes);
            setOauth2Scopes(refVal_oauth2Scopes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planGroup")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planGroup"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_planGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_planGroup);
            setPlanGroup(refVal_planGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("role"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_role;
            ok &= ModelBase::fromJson(fieldValue, refVal_role);
            setRole(refVal_role);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("roles")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("roles"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_roles;
            ok &= ModelBase::fromJson(fieldValue, refVal_roles);
            setRoles(refVal_roles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("source"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_source;
            ok &= ModelBase::fromJson(fieldValue, refVal_source);
            setSource(refVal_source);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTUserOAuth2SummaryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ClientIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientId"), m_ClientId));
    }
    if(m_CompanyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company"), m_Company));
    }
    if(m_CompanyPlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyPlan"), m_CompanyPlan));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    }
    if(m_GlobalPermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalPermissions"), m_GlobalPermissions));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
    }
    if(m_IsGuestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isGuest"), m_IsGuest));
    }
    if(m_IsLightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isLight"), m_IsLight));
    }
    if(m_LastLoginTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastLoginTime"), m_LastLoginTime));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Oauth2ScopesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("oauth2Scopes"), m_Oauth2Scopes));
    }
    if(m_PlanGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planGroup"), m_PlanGroup));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("role"), m_Role));
    }
    if(m_RolesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("roles"), m_Roles));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source"), m_Source));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTUserOAuth2SummaryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("clientId")))
    {
        utility::string_t refVal_clientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientId")), refVal_clientId );
        setClientId(refVal_clientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company")))
    {
        std::shared_ptr<BTCompanySummaryInfo> refVal_company;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("company")), refVal_company );
        setCompany(refVal_company);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyPlan")))
    {
        bool refVal_companyPlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyPlan")), refVal_companyPlan );
        setCompanyPlan(refVal_companyPlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        utility::string_t refVal_firstName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName")), refVal_firstName );
        setFirstName(refVal_firstName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("globalPermissions")))
    {
        std::shared_ptr<GlobalPermissionInfo> refVal_globalPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalPermissions")), refVal_globalPermissions );
        setGlobalPermissions(refVal_globalPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        utility::string_t refVal_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("image")), refVal_image );
        setImage(refVal_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isGuest")))
    {
        bool refVal_isGuest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isGuest")), refVal_isGuest );
        setIsGuest(refVal_isGuest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isLight")))
    {
        bool refVal_isLight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isLight")), refVal_isLight );
        setIsLight(refVal_isLight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastLoginTime")))
    {
        utility::datetime refVal_lastLoginTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastLoginTime")), refVal_lastLoginTime );
        setLastLoginTime(refVal_lastLoginTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        utility::string_t refVal_lastName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName")), refVal_lastName );
        setLastName(refVal_lastName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth2Scopes")))
    {
        int64_t refVal_oauth2Scopes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("oauth2Scopes")), refVal_oauth2Scopes );
        setOauth2Scopes(refVal_oauth2Scopes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planGroup")))
    {
        utility::string_t refVal_planGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planGroup")), refVal_planGroup );
        setPlanGroup(refVal_planGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        int32_t refVal_role;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("role")), refVal_role );
        setRole(refVal_role);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("roles")))
    {
        std::vector<utility::string_t> refVal_roles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("roles")), refVal_roles );
        setRoles(refVal_roles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source")))
    {
        int32_t refVal_source;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("source")), refVal_source );
        setSource(refVal_source);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        int32_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTUserOAuth2SummaryInfo::getClientId() const
{
    return m_ClientId;
}

void BTUserOAuth2SummaryInfo::setClientId(const utility::string_t& value)
{
    m_ClientId = value;
    m_ClientIdIsSet = true;
}

bool BTUserOAuth2SummaryInfo::clientIdIsSet() const
{
    return m_ClientIdIsSet;
}

void BTUserOAuth2SummaryInfo::unsetClientId()
{
    m_ClientIdIsSet = false;
}
std::shared_ptr<BTCompanySummaryInfo> BTUserOAuth2SummaryInfo::getCompany() const
{
    return m_Company;
}

void BTUserOAuth2SummaryInfo::setCompany(const std::shared_ptr<BTCompanySummaryInfo>& value)
{
    m_Company = value;
    m_CompanyIsSet = true;
}

bool BTUserOAuth2SummaryInfo::companyIsSet() const
{
    return m_CompanyIsSet;
}

void BTUserOAuth2SummaryInfo::unsetCompany()
{
    m_CompanyIsSet = false;
}
bool BTUserOAuth2SummaryInfo::isCompanyPlan() const
{
    return m_CompanyPlan;
}

void BTUserOAuth2SummaryInfo::setCompanyPlan(bool value)
{
    m_CompanyPlan = value;
    m_CompanyPlanIsSet = true;
}

bool BTUserOAuth2SummaryInfo::companyPlanIsSet() const
{
    return m_CompanyPlanIsSet;
}

void BTUserOAuth2SummaryInfo::unsetCompanyPlan()
{
    m_CompanyPlanIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getEmail() const
{
    return m_Email;
}

void BTUserOAuth2SummaryInfo::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool BTUserOAuth2SummaryInfo::emailIsSet() const
{
    return m_EmailIsSet;
}

void BTUserOAuth2SummaryInfo::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getFirstName() const
{
    return m_FirstName;
}

void BTUserOAuth2SummaryInfo::setFirstName(const utility::string_t& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool BTUserOAuth2SummaryInfo::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void BTUserOAuth2SummaryInfo::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
std::shared_ptr<GlobalPermissionInfo> BTUserOAuth2SummaryInfo::getGlobalPermissions() const
{
    return m_GlobalPermissions;
}

void BTUserOAuth2SummaryInfo::setGlobalPermissions(const std::shared_ptr<GlobalPermissionInfo>& value)
{
    m_GlobalPermissions = value;
    m_GlobalPermissionsIsSet = true;
}

bool BTUserOAuth2SummaryInfo::globalPermissionsIsSet() const
{
    return m_GlobalPermissionsIsSet;
}

void BTUserOAuth2SummaryInfo::unsetGlobalPermissions()
{
    m_GlobalPermissionsIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getHref() const
{
    return m_Href;
}

void BTUserOAuth2SummaryInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTUserOAuth2SummaryInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTUserOAuth2SummaryInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getId() const
{
    return m_Id;
}

void BTUserOAuth2SummaryInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTUserOAuth2SummaryInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTUserOAuth2SummaryInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getImage() const
{
    return m_Image;
}

void BTUserOAuth2SummaryInfo::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool BTUserOAuth2SummaryInfo::imageIsSet() const
{
    return m_ImageIsSet;
}

void BTUserOAuth2SummaryInfo::unsetImage()
{
    m_ImageIsSet = false;
}
bool BTUserOAuth2SummaryInfo::isIsGuest() const
{
    return m_IsGuest;
}

void BTUserOAuth2SummaryInfo::setIsGuest(bool value)
{
    m_IsGuest = value;
    m_IsGuestIsSet = true;
}

bool BTUserOAuth2SummaryInfo::isGuestIsSet() const
{
    return m_IsGuestIsSet;
}

void BTUserOAuth2SummaryInfo::unsetIsGuest()
{
    m_IsGuestIsSet = false;
}
bool BTUserOAuth2SummaryInfo::isIsLight() const
{
    return m_IsLight;
}

void BTUserOAuth2SummaryInfo::setIsLight(bool value)
{
    m_IsLight = value;
    m_IsLightIsSet = true;
}

bool BTUserOAuth2SummaryInfo::isLightIsSet() const
{
    return m_IsLightIsSet;
}

void BTUserOAuth2SummaryInfo::unsetIsLight()
{
    m_IsLightIsSet = false;
}
utility::datetime BTUserOAuth2SummaryInfo::getLastLoginTime() const
{
    return m_LastLoginTime;
}

void BTUserOAuth2SummaryInfo::setLastLoginTime(const utility::datetime& value)
{
    m_LastLoginTime = value;
    m_LastLoginTimeIsSet = true;
}

bool BTUserOAuth2SummaryInfo::lastLoginTimeIsSet() const
{
    return m_LastLoginTimeIsSet;
}

void BTUserOAuth2SummaryInfo::unsetLastLoginTime()
{
    m_LastLoginTimeIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getLastName() const
{
    return m_LastName;
}

void BTUserOAuth2SummaryInfo::setLastName(const utility::string_t& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool BTUserOAuth2SummaryInfo::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void BTUserOAuth2SummaryInfo::unsetLastName()
{
    m_LastNameIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getName() const
{
    return m_Name;
}

void BTUserOAuth2SummaryInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTUserOAuth2SummaryInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTUserOAuth2SummaryInfo::unsetName()
{
    m_NameIsSet = false;
}
int64_t BTUserOAuth2SummaryInfo::getOauth2Scopes() const
{
    return m_Oauth2Scopes;
}

void BTUserOAuth2SummaryInfo::setOauth2Scopes(int64_t value)
{
    m_Oauth2Scopes = value;
    m_Oauth2ScopesIsSet = true;
}

bool BTUserOAuth2SummaryInfo::oauth2ScopesIsSet() const
{
    return m_Oauth2ScopesIsSet;
}

void BTUserOAuth2SummaryInfo::unsetOauth2Scopes()
{
    m_Oauth2ScopesIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getPlanGroup() const
{
    return m_PlanGroup;
}

void BTUserOAuth2SummaryInfo::setPlanGroup(const utility::string_t& value)
{
    m_PlanGroup = value;
    m_PlanGroupIsSet = true;
}

bool BTUserOAuth2SummaryInfo::planGroupIsSet() const
{
    return m_PlanGroupIsSet;
}

void BTUserOAuth2SummaryInfo::unsetPlanGroup()
{
    m_PlanGroupIsSet = false;
}
int32_t BTUserOAuth2SummaryInfo::getRole() const
{
    return m_Role;
}

void BTUserOAuth2SummaryInfo::setRole(int32_t value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool BTUserOAuth2SummaryInfo::roleIsSet() const
{
    return m_RoleIsSet;
}

void BTUserOAuth2SummaryInfo::unsetRole()
{
    m_RoleIsSet = false;
}
std::vector<utility::string_t>& BTUserOAuth2SummaryInfo::getRoles()
{
    return m_Roles;
}

void BTUserOAuth2SummaryInfo::setRoles(const std::vector<utility::string_t>& value)
{
    m_Roles = value;
    m_RolesIsSet = true;
}

bool BTUserOAuth2SummaryInfo::rolesIsSet() const
{
    return m_RolesIsSet;
}

void BTUserOAuth2SummaryInfo::unsetRoles()
{
    m_RolesIsSet = false;
}
int32_t BTUserOAuth2SummaryInfo::getSource() const
{
    return m_Source;
}

void BTUserOAuth2SummaryInfo::setSource(int32_t value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool BTUserOAuth2SummaryInfo::sourceIsSet() const
{
    return m_SourceIsSet;
}

void BTUserOAuth2SummaryInfo::unsetSource()
{
    m_SourceIsSet = false;
}
int32_t BTUserOAuth2SummaryInfo::getState() const
{
    return m_State;
}

void BTUserOAuth2SummaryInfo::setState(int32_t value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTUserOAuth2SummaryInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTUserOAuth2SummaryInfo::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t BTUserOAuth2SummaryInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTUserOAuth2SummaryInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTUserOAuth2SummaryInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTUserOAuth2SummaryInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


