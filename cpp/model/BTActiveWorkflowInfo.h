/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTActiveWorkflowInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTActiveWorkflowInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTActiveWorkflowInfo_H_


#include "../ModelBase.h"

#include "BTPublishedWorkflowInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTActiveWorkflowInfo
    : public ModelBase
{
public:
    BTActiveWorkflowInfo();
    virtual ~BTActiveWorkflowInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTActiveWorkflowInfo members

    /// <summary>
    /// 
    /// </summary>
    bool isCanCreateReleases() const;
    bool canCreateReleasesIsSet() const;
    void unsetCanCreateReleases();

    void setCanCreateReleases(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanCurrentUserCreateReleases() const;
    bool canCurrentUserCreateReleasesIsSet() const;
    void unsetCanCurrentUserCreateReleases();

    void setCanCurrentUserCreateReleases(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDrawingCanDuplicatePartNumber() const;
    bool drawingCanDuplicatePartNumberIsSet() const;
    void unsetDrawingCanDuplicatePartNumber();

    void setDrawingCanDuplicatePartNumber(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnabledActiveMultipleWorkflows() const;
    bool enabledActiveMultipleWorkflowsIsSet() const;
    void unsetEnabledActiveMultipleWorkflows();

    void setEnabledActiveMultipleWorkflows(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPublishedWorkflowInfo> getObsoletionWorkflow() const;
    bool obsoletionWorkflowIsSet() const;
    void unsetObsoletionWorkflow();

    void setObsoletionWorkflow(const std::shared_ptr<BTPublishedWorkflowInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObsoletionWorkflowId() const;
    bool obsoletionWorkflowIdIsSet() const;
    void unsetObsoletionWorkflowId();

    void setObsoletionWorkflowId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPublishedWorkflowInfo>>& getPickableWorkflows();
    bool pickableWorkflowsIsSet() const;
    void unsetPickableWorkflows();

    void setPickableWorkflows(const std::vector<std::shared_ptr<BTPublishedWorkflowInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPublishedWorkflowInfo> getReleaseWorkflow() const;
    bool releaseWorkflowIsSet() const;
    void unsetReleaseWorkflow();

    void setReleaseWorkflow(const std::shared_ptr<BTPublishedWorkflowInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReleaseWorkflowId() const;
    bool releaseWorkflowIdIsSet() const;
    void unsetReleaseWorkflowId();

    void setReleaseWorkflowId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUsingAutoPartNumbering() const;
    bool usingAutoPartNumberingIsSet() const;
    void unsetUsingAutoPartNumbering();

    void setUsingAutoPartNumbering(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isUsingAutoPartNumberingScheme() const;
    bool usingAutoPartNumberingSchemeIsSet() const;
    void unsetUsingAutoPartNumberingScheme();

    void setUsingAutoPartNumberingScheme(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isUsingManagedWorkflow() const;
    bool usingManagedWorkflowIsSet() const;
    void unsetUsingManagedWorkflow();

    void setUsingManagedWorkflow(bool value);


protected:
    bool m_CanCreateReleases;
    bool m_CanCreateReleasesIsSet;
    bool m_CanCurrentUserCreateReleases;
    bool m_CanCurrentUserCreateReleasesIsSet;
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    bool m_DrawingCanDuplicatePartNumber;
    bool m_DrawingCanDuplicatePartNumberIsSet;
    bool m_EnabledActiveMultipleWorkflows;
    bool m_EnabledActiveMultipleWorkflowsIsSet;
    std::shared_ptr<BTPublishedWorkflowInfo> m_ObsoletionWorkflow;
    bool m_ObsoletionWorkflowIsSet;
    utility::string_t m_ObsoletionWorkflowId;
    bool m_ObsoletionWorkflowIdIsSet;
    std::vector<std::shared_ptr<BTPublishedWorkflowInfo>> m_PickableWorkflows;
    bool m_PickableWorkflowsIsSet;
    std::shared_ptr<BTPublishedWorkflowInfo> m_ReleaseWorkflow;
    bool m_ReleaseWorkflowIsSet;
    utility::string_t m_ReleaseWorkflowId;
    bool m_ReleaseWorkflowIdIsSet;
    bool m_UsingAutoPartNumbering;
    bool m_UsingAutoPartNumberingIsSet;
    bool m_UsingAutoPartNumberingScheme;
    bool m_UsingAutoPartNumberingSchemeIsSet;
    bool m_UsingManagedWorkflow;
    bool m_UsingManagedWorkflowIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTActiveWorkflowInfo_H_ */
