/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPStatementLoopForIn_279.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopForIn_279_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopForIn_279_H_


#include "BTPExpression_9.h"
#include "BTPStatementLoop_277.h"
#include <cpprest/details/basic_types.h>
#include "BTPStatementLoopForIn_279_allOf.h"
#include "BTPIdentifier_8.h"
#include "BTPSpace_10.h"
#include "BTPAnnotation_231.h"
#include "BTPStatement_269.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPStatementLoopForIn_279
    : public BTPStatementLoop_277
{
public:
    BTPStatementLoopForIn_279();
    virtual ~BTPStatementLoopForIn_279();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPStatementLoopForIn_279 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandardType() const;
    bool standardTypeIsSet() const;
    void unsetStandardType();

    void setStandardType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPIdentifier_8> getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const std::shared_ptr<BTPIdentifier_8>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRTypeName() const;
    bool rTypeNameIsSet() const;
    void unsetr_typeName();

    void setRTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPExpression_9> getContainer() const;
    bool containerIsSet() const;
    void unsetContainer();

    void setContainer(const std::shared_ptr<BTPExpression_9>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPIdentifier_8> getVar() const;
    bool varIsSet() const;
    void unsetVar();

    void setVar(const std::shared_ptr<BTPIdentifier_8>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsVarDeclaredHere() const;
    bool isVarDeclaredHereIsSet() const;
    void unsetIsVarDeclaredHere();

    void setIsVarDeclaredHere(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeVar() const;
    bool spaceBeforeVarIsSet() const;
    void unsetSpaceBeforeVar();

    void setSpaceBeforeVar(const std::shared_ptr<BTPSpace_10>& value);


protected:
    utility::string_t m_StandardType;
    bool m_StandardTypeIsSet;
    std::shared_ptr<BTPIdentifier_8> m_Name;
    bool m_NameIsSet;
    utility::string_t m_r_typeName;
    bool m_r_typeNameIsSet;
    std::shared_ptr<BTPExpression_9> m_Container;
    bool m_ContainerIsSet;
    std::shared_ptr<BTPIdentifier_8> m_Var;
    bool m_VarIsSet;
    bool m_IsVarDeclaredHere;
    bool m_IsVarDeclaredHereIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeVar;
    bool m_SpaceBeforeVarIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopForIn_279_H_ */
