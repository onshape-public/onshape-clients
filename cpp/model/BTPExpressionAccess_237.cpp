/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPExpressionAccess_237.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPExpressionAccess_237::BTPExpressionAccess_237()
{
    m_SpaceInAccessorIsSet = false;
    m_AccessorIsSet = false;
    m_BaseIsSet = false;
}

BTPExpressionAccess_237::~BTPExpressionAccess_237()
{
}

void BTPExpressionAccess_237::validate()
{
    // TODO: implement validation
}

web::json::value BTPExpressionAccess_237::toJson() const
{
    web::json::value val = this->BTPExpression_9::toJson();
    
    if(m_SpaceInAccessorIsSet)
    {
        val[utility::conversions::to_string_t("spaceInAccessor")] = ModelBase::toJson(m_SpaceInAccessor);
    }
    if(m_AccessorIsSet)
    {
        val[utility::conversions::to_string_t("accessor")] = ModelBase::toJson(m_Accessor);
    }
    if(m_BaseIsSet)
    {
        val[utility::conversions::to_string_t("base")] = ModelBase::toJson(m_Base);
    }

    return val;
}

bool BTPExpressionAccess_237::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPExpression_9::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("spaceInAccessor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceInAccessor"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceInAccessor;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceInAccessor);
            setSpaceInAccessor(refVal_spaceInAccessor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("accessor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("accessor"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPPropertyAccessor_23> refVal_accessor;
            ok &= ModelBase::fromJson(fieldValue, refVal_accessor);
            setAccessor(refVal_accessor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("base")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("base"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_base;
            ok &= ModelBase::fromJson(fieldValue, refVal_base);
            setBase(refVal_base);
        }
    }
    return ok;
}

void BTPExpressionAccess_237::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_SpaceInAccessorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceInAccessor"), m_SpaceInAccessor));
    }
    if(m_AccessorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accessor"), m_Accessor));
    }
    if(m_BaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("base"), m_Base));
    }
}

bool BTPExpressionAccess_237::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceInAccessor")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceInAccessor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceInAccessor")), refVal_spaceInAccessor );
        setSpaceInAccessor(refVal_spaceInAccessor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("accessor")))
    {
        std::shared_ptr<BTPPropertyAccessor_23> refVal_accessor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("accessor")), refVal_accessor );
        setAccessor(refVal_accessor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("base")))
    {
        std::shared_ptr<BTPExpression_9> refVal_base;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("base")), refVal_base );
        setBase(refVal_base);
    }
    return ok;
}

std::shared_ptr<BTPSpace_10> BTPExpressionAccess_237::getSpaceInAccessor() const
{
    return m_SpaceInAccessor;
}

void BTPExpressionAccess_237::setSpaceInAccessor(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceInAccessor = value;
    m_SpaceInAccessorIsSet = true;
}

bool BTPExpressionAccess_237::spaceInAccessorIsSet() const
{
    return m_SpaceInAccessorIsSet;
}

void BTPExpressionAccess_237::unsetSpaceInAccessor()
{
    m_SpaceInAccessorIsSet = false;
}
std::shared_ptr<BTPPropertyAccessor_23> BTPExpressionAccess_237::getAccessor() const
{
    return m_Accessor;
}

void BTPExpressionAccess_237::setAccessor(const std::shared_ptr<BTPPropertyAccessor_23>& value)
{
    m_Accessor = value;
    m_AccessorIsSet = true;
}

bool BTPExpressionAccess_237::accessorIsSet() const
{
    return m_AccessorIsSet;
}

void BTPExpressionAccess_237::unsetAccessor()
{
    m_AccessorIsSet = false;
}
std::shared_ptr<BTPExpression_9> BTPExpressionAccess_237::getBase() const
{
    return m_Base;
}

void BTPExpressionAccess_237::setBase(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Base = value;
    m_BaseIsSet = true;
}

bool BTPExpressionAccess_237::baseIsSet() const
{
    return m_BaseIsSet;
}

void BTPExpressionAccess_237::unsetBase()
{
    m_BaseIsSet = false;
}
}
}
}
}


