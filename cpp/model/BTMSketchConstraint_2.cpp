/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchConstraint_2.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchConstraint_2::BTMSketchConstraint_2()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ConstraintType = utility::conversions::to_string_t("");
    m_ConstraintTypeIsSet = false;
    m_DrivenDimension = false;
    m_DrivenDimensionIsSet = false;
    m_EntityId = utility::conversions::to_string_t("");
    m_EntityIdIsSet = false;
    m_EntityIdAndReplaceInDependentFields = utility::conversions::to_string_t("");
    m_EntityIdAndReplaceInDependentFieldsIsSet = false;
    m_HasOffsetData1 = false;
    m_HasOffsetData1IsSet = false;
    m_HasOffsetData2 = false;
    m_HasOffsetData2IsSet = false;
    m_HasPierceParameter = false;
    m_HasPierceParameterIsSet = false;
    m_HelpParametersIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_OffsetDistance1 = 0.0;
    m_OffsetDistance1IsSet = false;
    m_OffsetDistance2 = 0.0;
    m_OffsetDistance2IsSet = false;
    m_OffsetOrientation1 = false;
    m_OffsetOrientation1IsSet = false;
    m_OffsetOrientation2 = false;
    m_OffsetOrientation2IsSet = false;
    m_ParametersIsSet = false;
    m_PierceParameter = 0.0;
    m_PierceParameterIsSet = false;
}

BTMSketchConstraint_2::~BTMSketchConstraint_2()
{
}

void BTMSketchConstraint_2::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchConstraint_2::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ConstraintTypeIsSet)
    {
        val[utility::conversions::to_string_t("constraintType")] = ModelBase::toJson(m_ConstraintType);
    }
    if(m_DrivenDimensionIsSet)
    {
        val[utility::conversions::to_string_t("drivenDimension")] = ModelBase::toJson(m_DrivenDimension);
    }
    if(m_EntityIdIsSet)
    {
        val[utility::conversions::to_string_t("entityId")] = ModelBase::toJson(m_EntityId);
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        val[utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")] = ModelBase::toJson(m_EntityIdAndReplaceInDependentFields);
    }
    if(m_HasOffsetData1IsSet)
    {
        val[utility::conversions::to_string_t("hasOffsetData1")] = ModelBase::toJson(m_HasOffsetData1);
    }
    if(m_HasOffsetData2IsSet)
    {
        val[utility::conversions::to_string_t("hasOffsetData2")] = ModelBase::toJson(m_HasOffsetData2);
    }
    if(m_HasPierceParameterIsSet)
    {
        val[utility::conversions::to_string_t("hasPierceParameter")] = ModelBase::toJson(m_HasPierceParameter);
    }
    if(m_HelpParametersIsSet)
    {
        val[utility::conversions::to_string_t("helpParameters")] = ModelBase::toJson(m_HelpParameters);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_OffsetDistance1IsSet)
    {
        val[utility::conversions::to_string_t("offsetDistance1")] = ModelBase::toJson(m_OffsetDistance1);
    }
    if(m_OffsetDistance2IsSet)
    {
        val[utility::conversions::to_string_t("offsetDistance2")] = ModelBase::toJson(m_OffsetDistance2);
    }
    if(m_OffsetOrientation1IsSet)
    {
        val[utility::conversions::to_string_t("offsetOrientation1")] = ModelBase::toJson(m_OffsetOrientation1);
    }
    if(m_OffsetOrientation2IsSet)
    {
        val[utility::conversions::to_string_t("offsetOrientation2")] = ModelBase::toJson(m_OffsetOrientation2);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_PierceParameterIsSet)
    {
        val[utility::conversions::to_string_t("pierceParameter")] = ModelBase::toJson(m_PierceParameter);
    }

    return val;
}

bool BTMSketchConstraint_2::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("constraintType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("constraintType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_constraintType;
            ok &= ModelBase::fromJson(fieldValue, refVal_constraintType);
            setConstraintType(refVal_constraintType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drivenDimension")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drivenDimension"));
        if(!fieldValue.is_null())
        {
            bool refVal_drivenDimension;
            ok &= ModelBase::fromJson(fieldValue, refVal_drivenDimension);
            setDrivenDimension(refVal_drivenDimension);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityId);
            setEntityId(refVal_entityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityIdAndReplaceInDependentFields;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityIdAndReplaceInDependentFields);
            setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasOffsetData1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasOffsetData1"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasOffsetData1;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasOffsetData1);
            setHasOffsetData1(refVal_hasOffsetData1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasOffsetData2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasOffsetData2"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasOffsetData2;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasOffsetData2);
            setHasOffsetData2(refVal_hasOffsetData2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasPierceParameter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasPierceParameter"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasPierceParameter;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasPierceParameter);
            setHasPierceParameter(refVal_hasPierceParameter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("helpParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("helpParameters"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_helpParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_helpParameters);
            setHelpParameters(refVal_helpParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetDistance1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetDistance1"));
        if(!fieldValue.is_null())
        {
            double refVal_offsetDistance1;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetDistance1);
            setOffsetDistance1(refVal_offsetDistance1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetDistance2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetDistance2"));
        if(!fieldValue.is_null())
        {
            double refVal_offsetDistance2;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetDistance2);
            setOffsetDistance2(refVal_offsetDistance2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetOrientation1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetOrientation1"));
        if(!fieldValue.is_null())
        {
            bool refVal_offsetOrientation1;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetOrientation1);
            setOffsetOrientation1(refVal_offsetOrientation1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetOrientation2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetOrientation2"));
        if(!fieldValue.is_null())
        {
            bool refVal_offsetOrientation2;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetOrientation2);
            setOffsetOrientation2(refVal_offsetOrientation2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pierceParameter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pierceParameter"));
        if(!fieldValue.is_null())
        {
            double refVal_pierceParameter;
            ok &= ModelBase::fromJson(fieldValue, refVal_pierceParameter);
            setPierceParameter(refVal_pierceParameter);
        }
    }
    return ok;
}

void BTMSketchConstraint_2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConstraintTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("constraintType"), m_ConstraintType));
    }
    if(m_DrivenDimensionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drivenDimension"), m_DrivenDimension));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"), m_EntityIdAndReplaceInDependentFields));
    }
    if(m_HasOffsetData1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasOffsetData1"), m_HasOffsetData1));
    }
    if(m_HasOffsetData2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasOffsetData2"), m_HasOffsetData2));
    }
    if(m_HasPierceParameterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasPierceParameter"), m_HasPierceParameter));
    }
    if(m_HelpParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("helpParameters"), m_HelpParameters));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_OffsetDistance1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetDistance1"), m_OffsetDistance1));
    }
    if(m_OffsetDistance2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetDistance2"), m_OffsetDistance2));
    }
    if(m_OffsetOrientation1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetOrientation1"), m_OffsetOrientation1));
    }
    if(m_OffsetOrientation2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetOrientation2"), m_OffsetOrientation2));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_PierceParameterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pierceParameter"), m_PierceParameter));
    }
}

bool BTMSketchConstraint_2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("constraintType")))
    {
        utility::string_t refVal_constraintType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("constraintType")), refVal_constraintType );
        setConstraintType(refVal_constraintType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drivenDimension")))
    {
        bool refVal_drivenDimension;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drivenDimension")), refVal_drivenDimension );
        setDrivenDimension(refVal_drivenDimension);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityId")))
    {
        utility::string_t refVal_entityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId")), refVal_entityId );
        setEntityId(refVal_entityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        utility::string_t refVal_entityIdAndReplaceInDependentFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")), refVal_entityIdAndReplaceInDependentFields );
        setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasOffsetData1")))
    {
        bool refVal_hasOffsetData1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasOffsetData1")), refVal_hasOffsetData1 );
        setHasOffsetData1(refVal_hasOffsetData1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasOffsetData2")))
    {
        bool refVal_hasOffsetData2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasOffsetData2")), refVal_hasOffsetData2 );
        setHasOffsetData2(refVal_hasOffsetData2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasPierceParameter")))
    {
        bool refVal_hasPierceParameter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasPierceParameter")), refVal_hasPierceParameter );
        setHasPierceParameter(refVal_hasPierceParameter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("helpParameters")))
    {
        std::vector<double> refVal_helpParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("helpParameters")), refVal_helpParameters );
        setHelpParameters(refVal_helpParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetDistance1")))
    {
        double refVal_offsetDistance1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetDistance1")), refVal_offsetDistance1 );
        setOffsetDistance1(refVal_offsetDistance1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetDistance2")))
    {
        double refVal_offsetDistance2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetDistance2")), refVal_offsetDistance2 );
        setOffsetDistance2(refVal_offsetDistance2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetOrientation1")))
    {
        bool refVal_offsetOrientation1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetOrientation1")), refVal_offsetOrientation1 );
        setOffsetOrientation1(refVal_offsetOrientation1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetOrientation2")))
    {
        bool refVal_offsetOrientation2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetOrientation2")), refVal_offsetOrientation2 );
        setOffsetOrientation2(refVal_offsetOrientation2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pierceParameter")))
    {
        double refVal_pierceParameter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pierceParameter")), refVal_pierceParameter );
        setPierceParameter(refVal_pierceParameter);
    }
    return ok;
}

utility::string_t BTMSketchConstraint_2::getBtType() const
{
    return m_BtType;
}

void BTMSketchConstraint_2::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchConstraint_2::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchConstraint_2::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getConstraintType() const
{
    return m_ConstraintType;
}

void BTMSketchConstraint_2::setConstraintType(const utility::string_t& value)
{
    m_ConstraintType = value;
    m_ConstraintTypeIsSet = true;
}

bool BTMSketchConstraint_2::constraintTypeIsSet() const
{
    return m_ConstraintTypeIsSet;
}

void BTMSketchConstraint_2::unsetConstraintType()
{
    m_ConstraintTypeIsSet = false;
}
bool BTMSketchConstraint_2::isDrivenDimension() const
{
    return m_DrivenDimension;
}

void BTMSketchConstraint_2::setDrivenDimension(bool value)
{
    m_DrivenDimension = value;
    m_DrivenDimensionIsSet = true;
}

bool BTMSketchConstraint_2::drivenDimensionIsSet() const
{
    return m_DrivenDimensionIsSet;
}

void BTMSketchConstraint_2::unsetDrivenDimension()
{
    m_DrivenDimensionIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getEntityId() const
{
    return m_EntityId;
}

void BTMSketchConstraint_2::setEntityId(const utility::string_t& value)
{
    m_EntityId = value;
    m_EntityIdIsSet = true;
}

bool BTMSketchConstraint_2::entityIdIsSet() const
{
    return m_EntityIdIsSet;
}

void BTMSketchConstraint_2::unsetEntityId()
{
    m_EntityIdIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getEntityIdAndReplaceInDependentFields() const
{
    return m_EntityIdAndReplaceInDependentFields;
}

void BTMSketchConstraint_2::setEntityIdAndReplaceInDependentFields(const utility::string_t& value)
{
    m_EntityIdAndReplaceInDependentFields = value;
    m_EntityIdAndReplaceInDependentFieldsIsSet = true;
}

bool BTMSketchConstraint_2::entityIdAndReplaceInDependentFieldsIsSet() const
{
    return m_EntityIdAndReplaceInDependentFieldsIsSet;
}

void BTMSketchConstraint_2::unsetEntityIdAndReplaceInDependentFields()
{
    m_EntityIdAndReplaceInDependentFieldsIsSet = false;
}
bool BTMSketchConstraint_2::isHasOffsetData1() const
{
    return m_HasOffsetData1;
}

void BTMSketchConstraint_2::setHasOffsetData1(bool value)
{
    m_HasOffsetData1 = value;
    m_HasOffsetData1IsSet = true;
}

bool BTMSketchConstraint_2::hasOffsetData1IsSet() const
{
    return m_HasOffsetData1IsSet;
}

void BTMSketchConstraint_2::unsetHasOffsetData1()
{
    m_HasOffsetData1IsSet = false;
}
bool BTMSketchConstraint_2::isHasOffsetData2() const
{
    return m_HasOffsetData2;
}

void BTMSketchConstraint_2::setHasOffsetData2(bool value)
{
    m_HasOffsetData2 = value;
    m_HasOffsetData2IsSet = true;
}

bool BTMSketchConstraint_2::hasOffsetData2IsSet() const
{
    return m_HasOffsetData2IsSet;
}

void BTMSketchConstraint_2::unsetHasOffsetData2()
{
    m_HasOffsetData2IsSet = false;
}
bool BTMSketchConstraint_2::isHasPierceParameter() const
{
    return m_HasPierceParameter;
}

void BTMSketchConstraint_2::setHasPierceParameter(bool value)
{
    m_HasPierceParameter = value;
    m_HasPierceParameterIsSet = true;
}

bool BTMSketchConstraint_2::hasPierceParameterIsSet() const
{
    return m_HasPierceParameterIsSet;
}

void BTMSketchConstraint_2::unsetHasPierceParameter()
{
    m_HasPierceParameterIsSet = false;
}
std::vector<double>& BTMSketchConstraint_2::getHelpParameters()
{
    return m_HelpParameters;
}

void BTMSketchConstraint_2::setHelpParameters(std::vector<double> value)
{
    m_HelpParameters = value;
    m_HelpParametersIsSet = true;
}

bool BTMSketchConstraint_2::helpParametersIsSet() const
{
    return m_HelpParametersIsSet;
}

void BTMSketchConstraint_2::unsetHelpParameters()
{
    m_HelpParametersIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMSketchConstraint_2::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMSketchConstraint_2::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMSketchConstraint_2::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getRNamespace() const
{
    return m_r_namespace;
}

void BTMSketchConstraint_2::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMSketchConstraint_2::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMSketchConstraint_2::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTMSketchConstraint_2::getNodeId() const
{
    return m_NodeId;
}

void BTMSketchConstraint_2::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMSketchConstraint_2::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMSketchConstraint_2::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
double BTMSketchConstraint_2::getOffsetDistance1() const
{
    return m_OffsetDistance1;
}

void BTMSketchConstraint_2::setOffsetDistance1(double value)
{
    m_OffsetDistance1 = value;
    m_OffsetDistance1IsSet = true;
}

bool BTMSketchConstraint_2::offsetDistance1IsSet() const
{
    return m_OffsetDistance1IsSet;
}

void BTMSketchConstraint_2::unsetOffsetDistance1()
{
    m_OffsetDistance1IsSet = false;
}
double BTMSketchConstraint_2::getOffsetDistance2() const
{
    return m_OffsetDistance2;
}

void BTMSketchConstraint_2::setOffsetDistance2(double value)
{
    m_OffsetDistance2 = value;
    m_OffsetDistance2IsSet = true;
}

bool BTMSketchConstraint_2::offsetDistance2IsSet() const
{
    return m_OffsetDistance2IsSet;
}

void BTMSketchConstraint_2::unsetOffsetDistance2()
{
    m_OffsetDistance2IsSet = false;
}
bool BTMSketchConstraint_2::isOffsetOrientation1() const
{
    return m_OffsetOrientation1;
}

void BTMSketchConstraint_2::setOffsetOrientation1(bool value)
{
    m_OffsetOrientation1 = value;
    m_OffsetOrientation1IsSet = true;
}

bool BTMSketchConstraint_2::offsetOrientation1IsSet() const
{
    return m_OffsetOrientation1IsSet;
}

void BTMSketchConstraint_2::unsetOffsetOrientation1()
{
    m_OffsetOrientation1IsSet = false;
}
bool BTMSketchConstraint_2::isOffsetOrientation2() const
{
    return m_OffsetOrientation2;
}

void BTMSketchConstraint_2::setOffsetOrientation2(bool value)
{
    m_OffsetOrientation2 = value;
    m_OffsetOrientation2IsSet = true;
}

bool BTMSketchConstraint_2::offsetOrientation2IsSet() const
{
    return m_OffsetOrientation2IsSet;
}

void BTMSketchConstraint_2::unsetOffsetOrientation2()
{
    m_OffsetOrientation2IsSet = false;
}
std::vector<std::shared_ptr<BTMParameter_1>>& BTMSketchConstraint_2::getParameters()
{
    return m_Parameters;
}

void BTMSketchConstraint_2::setParameters(const std::vector<std::shared_ptr<BTMParameter_1>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BTMSketchConstraint_2::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BTMSketchConstraint_2::unsetParameters()
{
    m_ParametersIsSet = false;
}
double BTMSketchConstraint_2::getPierceParameter() const
{
    return m_PierceParameter;
}

void BTMSketchConstraint_2::setPierceParameter(double value)
{
    m_PierceParameter = value;
    m_PierceParameterIsSet = true;
}

bool BTMSketchConstraint_2::pierceParameterIsSet() const
{
    return m_PierceParameterIsSet;
}

void BTMSketchConstraint_2::unsetPierceParameter()
{
    m_PierceParameterIsSet = false;
}
}
}
}
}


