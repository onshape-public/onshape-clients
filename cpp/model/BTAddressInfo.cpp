/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAddressInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAddressInfo::BTAddressInfo()
{
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_StateCode = utility::conversions::to_string_t("");
    m_StateCodeIsSet = false;
    m_Zip = utility::conversions::to_string_t("");
    m_ZipIsSet = false;
}

BTAddressInfo::~BTAddressInfo()
{
}

void BTAddressInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAddressInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("countryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_StateCodeIsSet)
    {
        val[utility::conversions::to_string_t("stateCode")] = ModelBase::toJson(m_StateCode);
    }
    if(m_ZipIsSet)
    {
        val[utility::conversions::to_string_t("zip")] = ModelBase::toJson(m_Zip);
    }

    return val;
}

bool BTAddressInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("address")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("address"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_address;
            ok &= ModelBase::fromJson(fieldValue, refVal_address);
            setAddress(refVal_address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city;
            ok &= ModelBase::fromJson(fieldValue, refVal_city);
            setCity(refVal_city);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("countryCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("countryCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_countryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_countryCode);
            setCountryCode(refVal_countryCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stateCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stateCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stateCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_stateCode);
            setStateCode(refVal_stateCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zip")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zip"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_zip;
            ok &= ModelBase::fromJson(fieldValue, refVal_zip);
            setZip(refVal_zip);
        }
    }
    return ok;
}

void BTAddressInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    }
    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("countryCode"), m_CountryCode));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_StateCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stateCode"), m_StateCode));
    }
    if(m_ZipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zip"), m_Zip));
    }
}

bool BTAddressInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("address")))
    {
        utility::string_t refVal_address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("address")), refVal_address );
        setAddress(refVal_address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        utility::string_t refVal_city;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("city")), refVal_city );
        setCity(refVal_city);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("country")), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("countryCode")))
    {
        utility::string_t refVal_countryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("countryCode")), refVal_countryCode );
        setCountryCode(refVal_countryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        utility::string_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stateCode")))
    {
        utility::string_t refVal_stateCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stateCode")), refVal_stateCode );
        setStateCode(refVal_stateCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zip")))
    {
        utility::string_t refVal_zip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("zip")), refVal_zip );
        setZip(refVal_zip);
    }
    return ok;
}

utility::string_t BTAddressInfo::getAddress() const
{
    return m_Address;
}

void BTAddressInfo::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool BTAddressInfo::addressIsSet() const
{
    return m_AddressIsSet;
}

void BTAddressInfo::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t BTAddressInfo::getCity() const
{
    return m_City;
}

void BTAddressInfo::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool BTAddressInfo::cityIsSet() const
{
    return m_CityIsSet;
}

void BTAddressInfo::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t BTAddressInfo::getCountry() const
{
    return m_Country;
}

void BTAddressInfo::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool BTAddressInfo::countryIsSet() const
{
    return m_CountryIsSet;
}

void BTAddressInfo::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t BTAddressInfo::getCountryCode() const
{
    return m_CountryCode;
}

void BTAddressInfo::setCountryCode(const utility::string_t& value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}

bool BTAddressInfo::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void BTAddressInfo::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}
utility::string_t BTAddressInfo::getId() const
{
    return m_Id;
}

void BTAddressInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTAddressInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTAddressInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTAddressInfo::getState() const
{
    return m_State;
}

void BTAddressInfo::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTAddressInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTAddressInfo::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t BTAddressInfo::getStateCode() const
{
    return m_StateCode;
}

void BTAddressInfo::setStateCode(const utility::string_t& value)
{
    m_StateCode = value;
    m_StateCodeIsSet = true;
}

bool BTAddressInfo::stateCodeIsSet() const
{
    return m_StateCodeIsSet;
}

void BTAddressInfo::unsetStateCode()
{
    m_StateCodeIsSet = false;
}
utility::string_t BTAddressInfo::getZip() const
{
    return m_Zip;
}

void BTAddressInfo::setZip(const utility::string_t& value)
{
    m_Zip = value;
    m_ZipIsSet = true;
}

bool BTAddressInfo::zipIsSet() const
{
    return m_ZipIsSet;
}

void BTAddressInfo::unsetZip()
{
    m_ZipIsSet = false;
}
}
}
}
}


