/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPSpace_10.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPSpace_10::BTPSpace_10()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_LinesIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
}

BTPSpace_10::~BTPSpace_10()
{
}

void BTPSpace_10::validate()
{
    // TODO: implement validation
}

web::json::value BTPSpace_10::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_LinesIsSet)
    {
        val[utility::conversions::to_string_t("lines")] = ModelBase::toJson(m_Lines);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }

    return val;
}

bool BTPSpace_10::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lines"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_lines;
            ok &= ModelBase::fromJson(fieldValue, refVal_lines);
            setLines(refVal_lines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("text"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_text;
            ok &= ModelBase::fromJson(fieldValue, refVal_text);
            setText(refVal_text);
        }
    }
    return ok;
}

void BTPSpace_10::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_LinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lines"), m_Lines));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
    }
}

bool BTPSpace_10::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lines")))
    {
        std::vector<utility::string_t> refVal_lines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lines")), refVal_lines );
        setLines(refVal_lines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        utility::string_t refVal_text;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("text")), refVal_text );
        setText(refVal_text);
    }
    return ok;
}

utility::string_t BTPSpace_10::getBtType() const
{
    return m_BtType;
}

void BTPSpace_10::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPSpace_10::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPSpace_10::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::vector<utility::string_t>& BTPSpace_10::getLines()
{
    return m_Lines;
}

void BTPSpace_10::setLines(const std::vector<utility::string_t>& value)
{
    m_Lines = value;
    m_LinesIsSet = true;
}

bool BTPSpace_10::linesIsSet() const
{
    return m_LinesIsSet;
}

void BTPSpace_10::unsetLines()
{
    m_LinesIsSet = false;
}
utility::string_t BTPSpace_10::getNodeId() const
{
    return m_NodeId;
}

void BTPSpace_10::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTPSpace_10::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTPSpace_10::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTPSpace_10::getText() const
{
    return m_Text;
}

void BTPSpace_10::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool BTPSpace_10::textIsSet() const
{
    return m_TextIsSet;
}

void BTPSpace_10::unsetText()
{
    m_TextIsSet = false;
}
}
}
}
}


