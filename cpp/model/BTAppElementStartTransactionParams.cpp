/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementStartTransactionParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementStartTransactionParams::BTAppElementStartTransactionParams()
{
    m_ParentChangeId = utility::conversions::to_string_t("");
    m_ParentChangeIdIsSet = false;
    m_ReturnError = false;
    m_ReturnErrorIsSet = false;
}

BTAppElementStartTransactionParams::~BTAppElementStartTransactionParams()
{
}

void BTAppElementStartTransactionParams::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementStartTransactionParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParentChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("parentChangeId")] = ModelBase::toJson(m_ParentChangeId);
    }
    if(m_ReturnErrorIsSet)
    {
        val[utility::conversions::to_string_t("returnError")] = ModelBase::toJson(m_ReturnError);
    }

    return val;
}

bool BTAppElementStartTransactionParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("parentChangeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentChangeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentChangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentChangeId);
            setParentChangeId(refVal_parentChangeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("returnError")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("returnError"));
        if(!fieldValue.is_null())
        {
            bool refVal_returnError;
            ok &= ModelBase::fromJson(fieldValue, refVal_returnError);
            setReturnError(refVal_returnError);
        }
    }
    return ok;
}

void BTAppElementStartTransactionParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ParentChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentChangeId"), m_ParentChangeId));
    }
    if(m_ReturnErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnError"), m_ReturnError));
    }
}

bool BTAppElementStartTransactionParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parentChangeId")))
    {
        utility::string_t refVal_parentChangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentChangeId")), refVal_parentChangeId );
        setParentChangeId(refVal_parentChangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnError")))
    {
        bool refVal_returnError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnError")), refVal_returnError );
        setReturnError(refVal_returnError);
    }
    return ok;
}

utility::string_t BTAppElementStartTransactionParams::getParentChangeId() const
{
    return m_ParentChangeId;
}

void BTAppElementStartTransactionParams::setParentChangeId(const utility::string_t& value)
{
    m_ParentChangeId = value;
    m_ParentChangeIdIsSet = true;
}

bool BTAppElementStartTransactionParams::parentChangeIdIsSet() const
{
    return m_ParentChangeIdIsSet;
}

void BTAppElementStartTransactionParams::unsetParentChangeId()
{
    m_ParentChangeIdIsSet = false;
}
bool BTAppElementStartTransactionParams::isReturnError() const
{
    return m_ReturnError;
}

void BTAppElementStartTransactionParams::setReturnError(bool value)
{
    m_ReturnError = value;
    m_ReturnErrorIsSet = true;
}

bool BTAppElementStartTransactionParams::returnErrorIsSet() const
{
    return m_ReturnErrorIsSet;
}

void BTAppElementStartTransactionParams::unsetReturnError()
{
    m_ReturnErrorIsSet = false;
}
}
}
}
}


