/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPOperatorDeclaration_264.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPOperatorDeclaration_264::BTPOperatorDeclaration_264()
{
    m_r_operator = utility::conversions::to_string_t("");
    m_r_operatorIsSet = false;
    m_SpaceBeforeOperatorIsSet = false;
    m_SpaceAfterOperatorIsSet = false;
}

BTPOperatorDeclaration_264::~BTPOperatorDeclaration_264()
{
}

void BTPOperatorDeclaration_264::validate()
{
    // TODO: implement validation
}

web::json::value BTPOperatorDeclaration_264::toJson() const
{
    web::json::value val = this->BTPProcedureDeclarationBase_266::toJson();
    
    if(m_r_operatorIsSet)
    {
        val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m_r_operator);
    }
    if(m_SpaceBeforeOperatorIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeOperator")] = ModelBase::toJson(m_SpaceBeforeOperator);
    }
    if(m_SpaceAfterOperatorIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterOperator")] = ModelBase::toJson(m_SpaceAfterOperator);
    }

    return val;
}

bool BTPOperatorDeclaration_264::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPProcedureDeclarationBase_266::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("operator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("operator"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_operator;
            ok &= ModelBase::fromJson(fieldValue, refVal_operator);
            setROperator(refVal_operator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeOperator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeOperator"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeOperator;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeOperator);
            setSpaceBeforeOperator(refVal_spaceBeforeOperator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterOperator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterOperator"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterOperator;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterOperator);
            setSpaceAfterOperator(refVal_spaceAfterOperator);
        }
    }
    return ok;
}

void BTPOperatorDeclaration_264::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_DeprecatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecated"), m_Deprecated));
    }
    if(m_SymbolNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbolName"), m_SymbolName));
    }
    if(m_ArgumentsToDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("argumentsToDocument"), m_ArgumentsToDocument));
    }
    if(m_DeprecatedExplanationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecatedExplanation"), m_DeprecatedExplanation));
    }
    if(m_ForExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forExport"), m_ForExport));
    }
    if(m_SpaceAfterExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterExport"), m_SpaceAfterExport));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_ArgumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arguments"), m_Arguments));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_PreconditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precondition"), m_Precondition));
    }
    if(m_SpaceAfterArglistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterArglist"), m_SpaceAfterArglist));
    }
    if(m_SpaceInEmptyListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceInEmptyList"), m_SpaceInEmptyList));
    }
    if(m_ReturnTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnType"), m_ReturnType));
    }
    if(m_r_operatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m_r_operator));
    }
    if(m_SpaceBeforeOperatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeOperator"), m_SpaceBeforeOperator));
    }
    if(m_SpaceAfterOperatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterOperator"), m_SpaceAfterOperator));
    }
}

bool BTPOperatorDeclaration_264::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecated")))
    {
        bool refVal_deprecated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecated")), refVal_deprecated );
        setDeprecated(refVal_deprecated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbolName")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_symbolName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbolName")), refVal_symbolName );
        setSymbolName(refVal_symbolName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("argumentsToDocument")))
    {
        std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_argumentsToDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("argumentsToDocument")), refVal_argumentsToDocument );
        setArgumentsToDocument(refVal_argumentsToDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecatedExplanation")))
    {
        utility::string_t refVal_deprecatedExplanation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecatedExplanation")), refVal_deprecatedExplanation );
        setDeprecatedExplanation(refVal_deprecatedExplanation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("forExport")))
    {
        bool refVal_forExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("forExport")), refVal_forExport );
        setForExport(refVal_forExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterExport")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterExport")), refVal_spaceAfterExport );
        setSpaceAfterExport(refVal_spaceAfterExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arguments")))
    {
        std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_arguments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arguments")), refVal_arguments );
        setArguments(refVal_arguments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        std::shared_ptr<BTPStatementBlock_271> refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precondition")))
    {
        std::shared_ptr<BTPStatement_269> refVal_precondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precondition")), refVal_precondition );
        setPrecondition(refVal_precondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterArglist")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterArglist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterArglist")), refVal_spaceAfterArglist );
        setSpaceAfterArglist(refVal_spaceAfterArglist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceInEmptyList")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceInEmptyList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceInEmptyList")), refVal_spaceInEmptyList );
        setSpaceInEmptyList(refVal_spaceInEmptyList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnType")))
    {
        std::shared_ptr<BTPTypeName_290> refVal_returnType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnType")), refVal_returnType );
        setReturnType(refVal_returnType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operator")))
    {
        utility::string_t refVal_operator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator")), refVal_operator );
        setROperator(refVal_operator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeOperator")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeOperator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeOperator")), refVal_spaceBeforeOperator );
        setSpaceBeforeOperator(refVal_spaceBeforeOperator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterOperator")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterOperator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterOperator")), refVal_spaceAfterOperator );
        setSpaceAfterOperator(refVal_spaceAfterOperator);
    }
    return ok;
}

utility::string_t BTPOperatorDeclaration_264::getROperator() const
{
    return m_r_operator;
}

void BTPOperatorDeclaration_264::setROperator(const utility::string_t& value)
{
    m_r_operator = value;
    m_r_operatorIsSet = true;
}

bool BTPOperatorDeclaration_264::rOperatorIsSet() const
{
    return m_r_operatorIsSet;
}

void BTPOperatorDeclaration_264::unsetr_operator()
{
    m_r_operatorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPOperatorDeclaration_264::getSpaceBeforeOperator() const
{
    return m_SpaceBeforeOperator;
}

void BTPOperatorDeclaration_264::setSpaceBeforeOperator(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeOperator = value;
    m_SpaceBeforeOperatorIsSet = true;
}

bool BTPOperatorDeclaration_264::spaceBeforeOperatorIsSet() const
{
    return m_SpaceBeforeOperatorIsSet;
}

void BTPOperatorDeclaration_264::unsetSpaceBeforeOperator()
{
    m_SpaceBeforeOperatorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPOperatorDeclaration_264::getSpaceAfterOperator() const
{
    return m_SpaceAfterOperator;
}

void BTPOperatorDeclaration_264::setSpaceAfterOperator(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterOperator = value;
    m_SpaceAfterOperatorIsSet = true;
}

bool BTPOperatorDeclaration_264::spaceAfterOperatorIsSet() const
{
    return m_SpaceAfterOperatorIsSet;
}

void BTPOperatorDeclaration_264::unsetSpaceAfterOperator()
{
    m_SpaceAfterOperatorIsSet = false;
}
}
}
}
}


