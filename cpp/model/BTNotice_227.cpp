/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTNotice_227.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTNotice_227::BTNotice_227()
{
    m_Level = utility::conversions::to_string_t("");
    m_LevelIsSet = false;
    m_LocationInfosIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ParameterId = utility::conversions::to_string_t("");
    m_ParameterIdIsSet = false;
    m_StackTraceIsSet = false;
    m_TryNodeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

BTNotice_227::~BTNotice_227()
{
}

void BTNotice_227::validate()
{
    // TODO: implement validation
}

web::json::value BTNotice_227::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t("level")] = ModelBase::toJson(m_Level);
    }
    if(m_LocationInfosIsSet)
    {
        val[utility::conversions::to_string_t("locationInfos")] = ModelBase::toJson(m_LocationInfos);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("parameterId")] = ModelBase::toJson(m_ParameterId);
    }
    if(m_StackTraceIsSet)
    {
        val[utility::conversions::to_string_t("stackTrace")] = ModelBase::toJson(m_StackTrace);
    }
    if(m_TryNodeIsSet)
    {
        val[utility::conversions::to_string_t("tryNode")] = ModelBase::toJson(m_TryNode);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool BTNotice_227::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("level")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("level"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_level;
            ok &= ModelBase::fromJson(fieldValue, refVal_level);
            setLevel(refVal_level);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationInfos")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationInfos"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_locationInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationInfos);
            setLocationInfos(refVal_locationInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterId);
            setParameterId(refVal_parameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stackTrace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stackTrace"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_stackTrace;
            ok &= ModelBase::fromJson(fieldValue, refVal_stackTrace);
            setStackTrace(refVal_stackTrace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tryNode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tryNode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTNodeReference_21> refVal_tryNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_tryNode);
            setTryNode(refVal_tryNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void BTNotice_227::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("level"), m_Level));
    }
    if(m_LocationInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationInfos"), m_LocationInfos));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_StackTraceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stackTrace"), m_StackTrace));
    }
    if(m_TryNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tryNode"), m_TryNode));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool BTNotice_227::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("level")))
    {
        utility::string_t refVal_level;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("level")), refVal_level );
        setLevel(refVal_level);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationInfos")))
    {
        std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_locationInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationInfos")), refVal_locationInfos );
        setLocationInfos(refVal_locationInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stackTrace")))
    {
        std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_stackTrace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stackTrace")), refVal_stackTrace );
        setStackTrace(refVal_stackTrace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tryNode")))
    {
        std::shared_ptr<BTNodeReference_21> refVal_tryNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tryNode")), refVal_tryNode );
        setTryNode(refVal_tryNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

utility::string_t BTNotice_227::getLevel() const
{
    return m_Level;
}

void BTNotice_227::setLevel(const utility::string_t& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool BTNotice_227::levelIsSet() const
{
    return m_LevelIsSet;
}

void BTNotice_227::unsetLevel()
{
    m_LevelIsSet = false;
}
std::vector<std::shared_ptr<BTLocationInfo_226>>& BTNotice_227::getLocationInfos()
{
    return m_LocationInfos;
}

void BTNotice_227::setLocationInfos(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value)
{
    m_LocationInfos = value;
    m_LocationInfosIsSet = true;
}

bool BTNotice_227::locationInfosIsSet() const
{
    return m_LocationInfosIsSet;
}

void BTNotice_227::unsetLocationInfos()
{
    m_LocationInfosIsSet = false;
}
utility::string_t BTNotice_227::getMessage() const
{
    return m_Message;
}

void BTNotice_227::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool BTNotice_227::messageIsSet() const
{
    return m_MessageIsSet;
}

void BTNotice_227::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t BTNotice_227::getNodeId() const
{
    return m_NodeId;
}

void BTNotice_227::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTNotice_227::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTNotice_227::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTNotice_227::getParameterId() const
{
    return m_ParameterId;
}

void BTNotice_227::setParameterId(const utility::string_t& value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}

bool BTNotice_227::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}

void BTNotice_227::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
std::vector<std::shared_ptr<BTLocationInfo_226>>& BTNotice_227::getStackTrace()
{
    return m_StackTrace;
}

void BTNotice_227::setStackTrace(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value)
{
    m_StackTrace = value;
    m_StackTraceIsSet = true;
}

bool BTNotice_227::stackTraceIsSet() const
{
    return m_StackTraceIsSet;
}

void BTNotice_227::unsetStackTrace()
{
    m_StackTraceIsSet = false;
}
std::shared_ptr<BTNodeReference_21> BTNotice_227::getTryNode() const
{
    return m_TryNode;
}

void BTNotice_227::setTryNode(const std::shared_ptr<BTNodeReference_21>& value)
{
    m_TryNode = value;
    m_TryNodeIsSet = true;
}

bool BTNotice_227::tryNodeIsSet() const
{
    return m_TryNodeIsSet;
}

void BTNotice_227::unsetTryNode()
{
    m_TryNodeIsSet = false;
}
utility::string_t BTNotice_227::getType() const
{
    return m_Type;
}

void BTNotice_227::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTNotice_227::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTNotice_227::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


