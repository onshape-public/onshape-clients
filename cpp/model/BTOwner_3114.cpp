/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTOwner_3114.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTOwner_3114::BTOwner_3114()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = utility::conversions::to_string_t("");
    m_OwnerTypeIsSet = false;
    m_OwnerTypeOrdinal = 0;
    m_OwnerTypeOrdinalIsSet = false;
}

BTOwner_3114::~BTOwner_3114()
{
}

void BTOwner_3114::validate()
{
    // TODO: implement validation
}

web::json::value BTOwner_3114::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_OwnerTypeOrdinalIsSet)
    {
        val[utility::conversions::to_string_t("ownerTypeOrdinal")] = ModelBase::toJson(m_OwnerTypeOrdinal);
    }

    return val;
}

bool BTOwner_3114::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerTypeOrdinal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerTypeOrdinal"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerTypeOrdinal;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerTypeOrdinal);
            setOwnerTypeOrdinal(refVal_ownerTypeOrdinal);
        }
    }
    return ok;
}

void BTOwner_3114::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_OwnerTypeOrdinalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerTypeOrdinal"), m_OwnerTypeOrdinal));
    }
}

bool BTOwner_3114::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        utility::string_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerTypeOrdinal")))
    {
        int32_t refVal_ownerTypeOrdinal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerTypeOrdinal")), refVal_ownerTypeOrdinal );
        setOwnerTypeOrdinal(refVal_ownerTypeOrdinal);
    }
    return ok;
}

utility::string_t BTOwner_3114::getBtType() const
{
    return m_BtType;
}

void BTOwner_3114::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTOwner_3114::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTOwner_3114::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTOwner_3114::getOwnerId() const
{
    return m_OwnerId;
}

void BTOwner_3114::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTOwner_3114::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTOwner_3114::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
utility::string_t BTOwner_3114::getOwnerType() const
{
    return m_OwnerType;
}

void BTOwner_3114::setOwnerType(const utility::string_t& value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTOwner_3114::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTOwner_3114::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
int32_t BTOwner_3114::getOwnerTypeOrdinal() const
{
    return m_OwnerTypeOrdinal;
}

void BTOwner_3114::setOwnerTypeOrdinal(int32_t value)
{
    m_OwnerTypeOrdinal = value;
    m_OwnerTypeOrdinalIsSet = true;
}

bool BTOwner_3114::ownerTypeOrdinalIsSet() const
{
    return m_OwnerTypeOrdinalIsSet;
}

void BTOwner_3114::unsetOwnerTypeOrdinal()
{
    m_OwnerTypeOrdinalIsSet = false;
}
}
}
}
}


