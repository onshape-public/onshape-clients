/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchImageEntity_763.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchImageEntity_763::BTMSketchImageEntity_763()
{
    m_OriginX = 0.0;
    m_OriginXIsSet = false;
    m_OriginY = 0.0;
    m_OriginYIsSet = false;
    m_XaxisX = 0.0;
    m_XaxisXIsSet = false;
    m_XaxisY = 0.0;
    m_XaxisYIsSet = false;
    m_AspectRatio = 0.0;
    m_AspectRatioIsSet = false;
}

BTMSketchImageEntity_763::~BTMSketchImageEntity_763()
{
}

void BTMSketchImageEntity_763::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchImageEntity_763::toJson() const
{
    web::json::value val = this->BTMSketchGeomEntity_5::toJson();
    
    if(m_OriginXIsSet)
    {
        val[utility::conversions::to_string_t("originX")] = ModelBase::toJson(m_OriginX);
    }
    if(m_OriginYIsSet)
    {
        val[utility::conversions::to_string_t("originY")] = ModelBase::toJson(m_OriginY);
    }
    if(m_XaxisXIsSet)
    {
        val[utility::conversions::to_string_t("xaxisX")] = ModelBase::toJson(m_XaxisX);
    }
    if(m_XaxisYIsSet)
    {
        val[utility::conversions::to_string_t("xaxisY")] = ModelBase::toJson(m_XaxisY);
    }
    if(m_AspectRatioIsSet)
    {
        val[utility::conversions::to_string_t("aspectRatio")] = ModelBase::toJson(m_AspectRatio);
    }

    return val;
}

bool BTMSketchImageEntity_763::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMSketchGeomEntity_5::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("originX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originX"));
        if(!fieldValue.is_null())
        {
            double refVal_originX;
            ok &= ModelBase::fromJson(fieldValue, refVal_originX);
            setOriginX(refVal_originX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originY"));
        if(!fieldValue.is_null())
        {
            double refVal_originY;
            ok &= ModelBase::fromJson(fieldValue, refVal_originY);
            setOriginY(refVal_originY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xaxisX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("xaxisX"));
        if(!fieldValue.is_null())
        {
            double refVal_xaxisX;
            ok &= ModelBase::fromJson(fieldValue, refVal_xaxisX);
            setXaxisX(refVal_xaxisX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xaxisY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("xaxisY"));
        if(!fieldValue.is_null())
        {
            double refVal_xaxisY;
            ok &= ModelBase::fromJson(fieldValue, refVal_xaxisY);
            setXaxisY(refVal_xaxisY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("aspectRatio")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("aspectRatio"));
        if(!fieldValue.is_null())
        {
            double refVal_aspectRatio;
            ok &= ModelBase::fromJson(fieldValue, refVal_aspectRatio);
            setAspectRatio(refVal_aspectRatio);
        }
    }
    return ok;
}

void BTMSketchImageEntity_763::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ControlBoxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("controlBoxIds"), m_ControlBoxIds));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"), m_EntityIdAndReplaceInDependentFields));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_IsConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConstruction"), m_IsConstruction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_OriginXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originX"), m_OriginX));
    }
    if(m_OriginYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originY"), m_OriginY));
    }
    if(m_XaxisXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xaxisX"), m_XaxisX));
    }
    if(m_XaxisYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xaxisY"), m_XaxisY));
    }
    if(m_AspectRatioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aspectRatio"), m_AspectRatio));
    }
}

bool BTMSketchImageEntity_763::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("controlBoxIds")))
    {
        std::vector<utility::string_t> refVal_controlBoxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("controlBoxIds")), refVal_controlBoxIds );
        setControlBoxIds(refVal_controlBoxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityId")))
    {
        utility::string_t refVal_entityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId")), refVal_entityId );
        setEntityId(refVal_entityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        utility::string_t refVal_entityIdAndReplaceInDependentFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")), refVal_entityIdAndReplaceInDependentFields );
        setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConstruction")))
    {
        bool refVal_isConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConstruction")), refVal_isConstruction );
        setIsConstruction(refVal_isConstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("originX")))
    {
        double refVal_originX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originX")), refVal_originX );
        setOriginX(refVal_originX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("originY")))
    {
        double refVal_originY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originY")), refVal_originY );
        setOriginY(refVal_originY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xaxisX")))
    {
        double refVal_xaxisX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xaxisX")), refVal_xaxisX );
        setXaxisX(refVal_xaxisX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xaxisY")))
    {
        double refVal_xaxisY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xaxisY")), refVal_xaxisY );
        setXaxisY(refVal_xaxisY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("aspectRatio")))
    {
        double refVal_aspectRatio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("aspectRatio")), refVal_aspectRatio );
        setAspectRatio(refVal_aspectRatio);
    }
    return ok;
}

double BTMSketchImageEntity_763::getOriginX() const
{
    return m_OriginX;
}

void BTMSketchImageEntity_763::setOriginX(double value)
{
    m_OriginX = value;
    m_OriginXIsSet = true;
}

bool BTMSketchImageEntity_763::originXIsSet() const
{
    return m_OriginXIsSet;
}

void BTMSketchImageEntity_763::unsetOriginX()
{
    m_OriginXIsSet = false;
}
double BTMSketchImageEntity_763::getOriginY() const
{
    return m_OriginY;
}

void BTMSketchImageEntity_763::setOriginY(double value)
{
    m_OriginY = value;
    m_OriginYIsSet = true;
}

bool BTMSketchImageEntity_763::originYIsSet() const
{
    return m_OriginYIsSet;
}

void BTMSketchImageEntity_763::unsetOriginY()
{
    m_OriginYIsSet = false;
}
double BTMSketchImageEntity_763::getXaxisX() const
{
    return m_XaxisX;
}

void BTMSketchImageEntity_763::setXaxisX(double value)
{
    m_XaxisX = value;
    m_XaxisXIsSet = true;
}

bool BTMSketchImageEntity_763::xaxisXIsSet() const
{
    return m_XaxisXIsSet;
}

void BTMSketchImageEntity_763::unsetXaxisX()
{
    m_XaxisXIsSet = false;
}
double BTMSketchImageEntity_763::getXaxisY() const
{
    return m_XaxisY;
}

void BTMSketchImageEntity_763::setXaxisY(double value)
{
    m_XaxisY = value;
    m_XaxisYIsSet = true;
}

bool BTMSketchImageEntity_763::xaxisYIsSet() const
{
    return m_XaxisYIsSet;
}

void BTMSketchImageEntity_763::unsetXaxisY()
{
    m_XaxisYIsSet = false;
}
double BTMSketchImageEntity_763::getAspectRatio() const
{
    return m_AspectRatio;
}

void BTMSketchImageEntity_763::setAspectRatio(double value)
{
    m_AspectRatio = value;
    m_AspectRatioIsSet = true;
}

bool BTMSketchImageEntity_763::aspectRatioIsSet() const
{
    return m_AspectRatioIsSet;
}

void BTMSketchImageEntity_763::unsetAspectRatio()
{
    m_AspectRatioIsSet = false;
}
}
}
}
}


