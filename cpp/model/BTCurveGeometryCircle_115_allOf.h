/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTCurveGeometryCircle_115_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTCurveGeometryCircle_115_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTCurveGeometryCircle_115_allOf_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTCurveGeometryCircle_115_allOf
    : public ModelBase
{
public:
    BTCurveGeometryCircle_115_allOf();
    virtual ~BTCurveGeometryCircle_115_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTCurveGeometryCircle_115_allOf members

    /// <summary>
    /// 
    /// </summary>
    double getRadius() const;
    bool radiusIsSet() const;
    void unsetRadius();

    void setRadius(double value);

    /// <summary>
    /// 
    /// </summary>
    double getXcenter() const;
    bool xcenterIsSet() const;
    void unsetXcenter();

    void setXcenter(double value);

    /// <summary>
    /// 
    /// </summary>
    double getYcenter() const;
    bool ycenterIsSet() const;
    void unsetYcenter();

    void setYcenter(double value);

    /// <summary>
    /// 
    /// </summary>
    double getXdir() const;
    bool xdirIsSet() const;
    void unsetXdir();

    void setXdir(double value);

    /// <summary>
    /// 
    /// </summary>
    double getYdir() const;
    bool ydirIsSet() const;
    void unsetYdir();

    void setYdir(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isClockwise() const;
    bool clockwiseIsSet() const;
    void unsetClockwise();

    void setClockwise(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    double m_Radius;
    bool m_RadiusIsSet;
    double m_Xcenter;
    bool m_XcenterIsSet;
    double m_Ycenter;
    bool m_YcenterIsSet;
    double m_Xdir;
    bool m_XdirIsSet;
    double m_Ydir;
    bool m_YdirIsSet;
    bool m_Clockwise;
    bool m_ClockwiseIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTCurveGeometryCircle_115_allOf_H_ */
