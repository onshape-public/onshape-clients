/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyFeatureDataInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyFeatureDataInfo::BTAssemblyFeatureDataInfo()
{
    m_MateType = utility::conversions::to_string_t("");
    m_MateTypeIsSet = false;
    m_MatedEntitiesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

BTAssemblyFeatureDataInfo::~BTAssemblyFeatureDataInfo()
{
}

void BTAssemblyFeatureDataInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyFeatureDataInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MateTypeIsSet)
    {
        val[utility::conversions::to_string_t("mateType")] = ModelBase::toJson(m_MateType);
    }
    if(m_MatedEntitiesIsSet)
    {
        val[utility::conversions::to_string_t("matedEntities")] = ModelBase::toJson(m_MatedEntities);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool BTAssemblyFeatureDataInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mateType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mateType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mateType;
            ok &= ModelBase::fromJson(fieldValue, refVal_mateType);
            setMateType(refVal_mateType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("matedEntities")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("matedEntities"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAssemblyMatedEntity>> refVal_matedEntities;
            ok &= ModelBase::fromJson(fieldValue, refVal_matedEntities);
            setMatedEntities(refVal_matedEntities);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    return ok;
}

void BTAssemblyFeatureDataInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MateTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mateType"), m_MateType));
    }
    if(m_MatedEntitiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("matedEntities"), m_MatedEntities));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
}

bool BTAssemblyFeatureDataInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mateType")))
    {
        utility::string_t refVal_mateType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mateType")), refVal_mateType );
        setMateType(refVal_mateType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("matedEntities")))
    {
        std::vector<std::shared_ptr<BTAssemblyMatedEntity>> refVal_matedEntities;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("matedEntities")), refVal_matedEntities );
        setMatedEntities(refVal_matedEntities);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    return ok;
}

utility::string_t BTAssemblyFeatureDataInfo::getMateType() const
{
    return m_MateType;
}

void BTAssemblyFeatureDataInfo::setMateType(const utility::string_t& value)
{
    m_MateType = value;
    m_MateTypeIsSet = true;
}

bool BTAssemblyFeatureDataInfo::mateTypeIsSet() const
{
    return m_MateTypeIsSet;
}

void BTAssemblyFeatureDataInfo::unsetMateType()
{
    m_MateTypeIsSet = false;
}
std::vector<std::shared_ptr<BTAssemblyMatedEntity>>& BTAssemblyFeatureDataInfo::getMatedEntities()
{
    return m_MatedEntities;
}

void BTAssemblyFeatureDataInfo::setMatedEntities(const std::vector<std::shared_ptr<BTAssemblyMatedEntity>>& value)
{
    m_MatedEntities = value;
    m_MatedEntitiesIsSet = true;
}

bool BTAssemblyFeatureDataInfo::matedEntitiesIsSet() const
{
    return m_MatedEntitiesIsSet;
}

void BTAssemblyFeatureDataInfo::unsetMatedEntities()
{
    m_MatedEntitiesIsSet = false;
}
utility::string_t BTAssemblyFeatureDataInfo::getName() const
{
    return m_Name;
}

void BTAssemblyFeatureDataInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTAssemblyFeatureDataInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTAssemblyFeatureDataInfo::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


