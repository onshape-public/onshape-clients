/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPLiteralMap_256.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPLiteralMap_256_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPLiteralMap_256_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTPLiteralMapEntry_257.h"
#include "BTPSpace_10.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPLiteralMap_256
    : public ModelBase
{
public:
    BTPLiteralMap_256();
    virtual ~BTPLiteralMap_256();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPLiteralMap_256 members

    /// <summary>
    /// 
    /// </summary>
    bool isAtomic() const;
    bool atomicIsSet() const;
    void unsetAtomic();

    void setAtomic(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentationType() const;
    bool documentationTypeIsSet() const;
    void unsetDocumentationType();

    void setDocumentationType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEndSourceLocation() const;
    bool endSourceLocationIsSet() const;
    void unsetEndSourceLocation();

    void setEndSourceLocation(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPLiteralMapEntry_257>>& getEntries();
    bool entriesIsSet() const;
    void unsetEntries();

    void setEntries(const std::vector<std::shared_ptr<BTPLiteralMapEntry_257>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShortDescriptor() const;
    bool shortDescriptorIsSet() const;
    void unsetShortDescriptor();

    void setShortDescriptor(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfter() const;
    bool spaceAfterIsSet() const;
    void unsetSpaceAfter();

    void setSpaceAfter(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBefore() const;
    bool spaceBeforeIsSet() const;
    void unsetSpaceBefore();

    void setSpaceBefore(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSpaceDefault() const;
    bool spaceDefaultIsSet() const;
    void unsetSpaceDefault();

    void setSpaceDefault(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceInEmptyList() const;
    bool spaceInEmptyListIsSet() const;
    void unsetSpaceInEmptyList();

    void setSpaceInEmptyList(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getStartSourceLocation() const;
    bool startSourceLocationIsSet() const;
    void unsetStartSourceLocation();

    void setStartSourceLocation(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrailingComma() const;
    bool trailingCommaIsSet() const;
    void unsetTrailingComma();

    void setTrailingComma(bool value);


protected:
    bool m_Atomic;
    bool m_AtomicIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    utility::string_t m_DocumentationType;
    bool m_DocumentationTypeIsSet;
    int32_t m_EndSourceLocation;
    bool m_EndSourceLocationIsSet;
    std::vector<std::shared_ptr<BTPLiteralMapEntry_257>> m_Entries;
    bool m_EntriesIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    utility::string_t m_ShortDescriptor;
    bool m_ShortDescriptorIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfter;
    bool m_SpaceAfterIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBefore;
    bool m_SpaceBeforeIsSet;
    bool m_SpaceDefault;
    bool m_SpaceDefaultIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceInEmptyList;
    bool m_SpaceInEmptyListIsSet;
    int32_t m_StartSourceLocation;
    bool m_StartSourceLocationIsSet;
    bool m_TrailingComma;
    bool m_TrailingCommaIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPLiteralMap_256_H_ */
