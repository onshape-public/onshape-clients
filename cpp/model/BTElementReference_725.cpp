/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTElementReference_725.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTElementReference_725::BTElementReference_725()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_Configured = false;
    m_ConfiguredIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ExternalDocumentWithVersionIsSet = false;
    m_ExternalDocumentWithVersionAndElementIdIsSet = false;
    m_ExternalReference = false;
    m_ExternalReferenceIsSet = false;
    m_FullElementIdIsSet = false;
    m_MicroversionIdAndConfigurationIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
}

BTElementReference_725::~BTElementReference_725()
{
}

void BTElementReference_725::validate()
{
    // TODO: implement validation
}

web::json::value BTElementReference_725::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ConfiguredIsSet)
    {
        val[utility::conversions::to_string_t("configured")] = ModelBase::toJson(m_Configured);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ExternalDocumentWithVersionIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentWithVersion")] = ModelBase::toJson(m_ExternalDocumentWithVersion);
    }
    if(m_ExternalDocumentWithVersionAndElementIdIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")] = ModelBase::toJson(m_ExternalDocumentWithVersionAndElementId);
    }
    if(m_ExternalReferenceIsSet)
    {
        val[utility::conversions::to_string_t("externalReference")] = ModelBase::toJson(m_ExternalReference);
    }
    if(m_FullElementIdIsSet)
    {
        val[utility::conversions::to_string_t("fullElementId")] = ModelBase::toJson(m_FullElementId);
    }
    if(m_MicroversionIdAndConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("microversionIdAndConfiguration")] = ModelBase::toJson(m_MicroversionIdAndConfiguration);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }

    return val;
}

bool BTElementReference_725::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configured")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configured"));
        if(!fieldValue.is_null())
        {
            bool refVal_configured;
            ok &= ModelBase::fromJson(fieldValue, refVal_configured);
            setConfigured(refVal_configured);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalDocumentWithVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentWithVersion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentWithVersionId> refVal_externalDocumentWithVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentWithVersion);
            setExternalDocumentWithVersion(refVal_externalDocumentWithVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentWithVersionAndElementId> refVal_externalDocumentWithVersionAndElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentWithVersionAndElementId);
            setExternalDocumentWithVersionAndElementId(refVal_externalDocumentWithVersionAndElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalReference"));
        if(!fieldValue.is_null())
        {
            bool refVal_externalReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalReference);
            setExternalReference(refVal_externalReference);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fullElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTFullElementId_756> refVal_fullElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullElementId);
            setFullElementId(refVal_fullElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionIdAndConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionIdAndConfiguration"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMicroversionIdAndConfiguration_2338> refVal_microversionIdAndConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionIdAndConfiguration);
            setMicroversionIdAndConfiguration(refVal_microversionIdAndConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    return ok;
}

void BTElementReference_725::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConfiguredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configured"), m_Configured));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ExternalDocumentWithVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersion"), m_ExternalDocumentWithVersion));
    }
    if(m_ExternalDocumentWithVersionAndElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersionAndElementId"), m_ExternalDocumentWithVersionAndElementId));
    }
    if(m_ExternalReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalReference"), m_ExternalReference));
    }
    if(m_FullElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullElementId"), m_FullElementId));
    }
    if(m_MicroversionIdAndConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionIdAndConfiguration"), m_MicroversionIdAndConfiguration));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
}

bool BTElementReference_725::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configured")))
    {
        bool refVal_configured;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configured")), refVal_configured );
        setConfigured(refVal_configured);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersion")))
    {
        std::shared_ptr<BTDocumentWithVersionId> refVal_externalDocumentWithVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersion")), refVal_externalDocumentWithVersion );
        setExternalDocumentWithVersion(refVal_externalDocumentWithVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")))
    {
        std::shared_ptr<BTDocumentWithVersionAndElementId> refVal_externalDocumentWithVersionAndElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")), refVal_externalDocumentWithVersionAndElementId );
        setExternalDocumentWithVersionAndElementId(refVal_externalDocumentWithVersionAndElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalReference")))
    {
        bool refVal_externalReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalReference")), refVal_externalReference );
        setExternalReference(refVal_externalReference);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullElementId")))
    {
        std::shared_ptr<BTFullElementId_756> refVal_fullElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullElementId")), refVal_fullElementId );
        setFullElementId(refVal_fullElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionIdAndConfiguration")))
    {
        std::shared_ptr<BTMicroversionIdAndConfiguration_2338> refVal_microversionIdAndConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionIdAndConfiguration")), refVal_microversionIdAndConfiguration );
        setMicroversionIdAndConfiguration(refVal_microversionIdAndConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    return ok;
}

utility::string_t BTElementReference_725::getBtType() const
{
    return m_BtType;
}

void BTElementReference_725::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTElementReference_725::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTElementReference_725::unsetBtType()
{
    m_BtTypeIsSet = false;
}
bool BTElementReference_725::isConfigured() const
{
    return m_Configured;
}

void BTElementReference_725::setConfigured(bool value)
{
    m_Configured = value;
    m_ConfiguredIsSet = true;
}

bool BTElementReference_725::configuredIsSet() const
{
    return m_ConfiguredIsSet;
}

void BTElementReference_725::unsetConfigured()
{
    m_ConfiguredIsSet = false;
}
utility::string_t BTElementReference_725::getElementId() const
{
    return m_ElementId;
}

void BTElementReference_725::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTElementReference_725::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTElementReference_725::unsetElementId()
{
    m_ElementIdIsSet = false;
}
std::shared_ptr<BTDocumentWithVersionId> BTElementReference_725::getExternalDocumentWithVersion() const
{
    return m_ExternalDocumentWithVersion;
}

void BTElementReference_725::setExternalDocumentWithVersion(const std::shared_ptr<BTDocumentWithVersionId>& value)
{
    m_ExternalDocumentWithVersion = value;
    m_ExternalDocumentWithVersionIsSet = true;
}

bool BTElementReference_725::externalDocumentWithVersionIsSet() const
{
    return m_ExternalDocumentWithVersionIsSet;
}

void BTElementReference_725::unsetExternalDocumentWithVersion()
{
    m_ExternalDocumentWithVersionIsSet = false;
}
std::shared_ptr<BTDocumentWithVersionAndElementId> BTElementReference_725::getExternalDocumentWithVersionAndElementId() const
{
    return m_ExternalDocumentWithVersionAndElementId;
}

void BTElementReference_725::setExternalDocumentWithVersionAndElementId(const std::shared_ptr<BTDocumentWithVersionAndElementId>& value)
{
    m_ExternalDocumentWithVersionAndElementId = value;
    m_ExternalDocumentWithVersionAndElementIdIsSet = true;
}

bool BTElementReference_725::externalDocumentWithVersionAndElementIdIsSet() const
{
    return m_ExternalDocumentWithVersionAndElementIdIsSet;
}

void BTElementReference_725::unsetExternalDocumentWithVersionAndElementId()
{
    m_ExternalDocumentWithVersionAndElementIdIsSet = false;
}
bool BTElementReference_725::isExternalReference() const
{
    return m_ExternalReference;
}

void BTElementReference_725::setExternalReference(bool value)
{
    m_ExternalReference = value;
    m_ExternalReferenceIsSet = true;
}

bool BTElementReference_725::externalReferenceIsSet() const
{
    return m_ExternalReferenceIsSet;
}

void BTElementReference_725::unsetExternalReference()
{
    m_ExternalReferenceIsSet = false;
}
std::shared_ptr<BTFullElementId_756> BTElementReference_725::getFullElementId() const
{
    return m_FullElementId;
}

void BTElementReference_725::setFullElementId(const std::shared_ptr<BTFullElementId_756>& value)
{
    m_FullElementId = value;
    m_FullElementIdIsSet = true;
}

bool BTElementReference_725::fullElementIdIsSet() const
{
    return m_FullElementIdIsSet;
}

void BTElementReference_725::unsetFullElementId()
{
    m_FullElementIdIsSet = false;
}
std::shared_ptr<BTMicroversionIdAndConfiguration_2338> BTElementReference_725::getMicroversionIdAndConfiguration() const
{
    return m_MicroversionIdAndConfiguration;
}

void BTElementReference_725::setMicroversionIdAndConfiguration(const std::shared_ptr<BTMicroversionIdAndConfiguration_2338>& value)
{
    m_MicroversionIdAndConfiguration = value;
    m_MicroversionIdAndConfigurationIsSet = true;
}

bool BTElementReference_725::microversionIdAndConfigurationIsSet() const
{
    return m_MicroversionIdAndConfigurationIsSet;
}

void BTElementReference_725::unsetMicroversionIdAndConfiguration()
{
    m_MicroversionIdAndConfigurationIsSet = false;
}
utility::string_t BTElementReference_725::getNodeId() const
{
    return m_NodeId;
}

void BTElementReference_725::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTElementReference_725::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTElementReference_725::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
}
}
}
}


