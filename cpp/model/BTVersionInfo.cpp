/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTVersionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTVersionInfo::BTVersionInfo()
{
    m_Purpose = 0;
    m_PurposeIsSet = false;
}

BTVersionInfo::~BTVersionInfo()
{
}

void BTVersionInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTVersionInfo::toJson() const
{
    web::json::value val = this->BTVersionInfoBase::toJson();
    
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t("purpose")] = ModelBase::toJson(m_Purpose);
    }

    return val;
}

bool BTVersionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTVersionInfoBase::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("purpose")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("purpose"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_purpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_purpose);
            setPurpose(refVal_purpose);
        }
    }
    return ok;
}

void BTVersionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_LastModifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastModifier"), m_LastModifier));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_CreatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creator"), m_Creator));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnail"), m_Thumbnail));
    }
    if(m_MicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversion"), m_Microversion));
    }
    if(m_ParentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parents"), m_Parents));
    }
    if(m_OverrideDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("overrideDate"), m_OverrideDate));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parent"), m_Parent));
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("purpose"), m_Purpose));
    }
}

bool BTVersionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastModifier")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_lastModifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastModifier")), refVal_lastModifier );
        setLastModifier(refVal_lastModifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creator")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_creator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creator")), refVal_creator );
        setCreator(refVal_creator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnail")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnail")), refVal_thumbnail );
        setThumbnail(refVal_thumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversion")))
    {
        utility::string_t refVal_microversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversion")), refVal_microversion );
        setMicroversion(refVal_microversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parents")))
    {
        std::vector<std::shared_ptr<BTVersionInfo>> refVal_parents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parents")), refVal_parents );
        setParents(refVal_parents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("overrideDate")))
    {
        utility::datetime refVal_overrideDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("overrideDate")), refVal_overrideDate );
        setOverrideDate(refVal_overrideDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parent")))
    {
        utility::string_t refVal_parent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parent")), refVal_parent );
        setParent(refVal_parent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("purpose")))
    {
        int32_t refVal_purpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("purpose")), refVal_purpose );
        setPurpose(refVal_purpose);
    }
    return ok;
}

int32_t BTVersionInfo::getPurpose() const
{
    return m_Purpose;
}

void BTVersionInfo::setPurpose(int32_t value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool BTVersionInfo::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void BTVersionInfo::unsetPurpose()
{
    m_PurposeIsSet = false;
}
}
}
}
}


