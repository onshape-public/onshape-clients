/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMSketchGeomEntity_5.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchGeomEntity_5_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchGeomEntity_5_H_


#include "../ModelBase.h"

#include "BTMParameter_1.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMSketchGeomEntity_5
    : public ModelBase
{
public:
    BTMSketchGeomEntity_5();
    virtual ~BTMSketchGeomEntity_5();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMSketchGeomEntity_5 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getControlBoxIds();
    bool controlBoxIdsIsSet() const;
    void unsetControlBoxIds();

    void setControlBoxIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityId() const;
    bool entityIdIsSet() const;
    void unsetEntityId();

    void setEntityId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityIdAndReplaceInDependentFields() const;
    bool entityIdAndReplaceInDependentFieldsIsSet() const;
    void unsetEntityIdAndReplaceInDependentFields();

    void setEntityIdAndReplaceInDependentFields(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportMicroversion() const;
    bool importMicroversionIsSet() const;
    void unsetImportMicroversion();

    void setImportMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsConstruction() const;
    bool isConstructionIsSet() const;
    void unsetIsConstruction();

    void setIsConstruction(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMParameter_1>>& getParameters();
    bool parametersIsSet() const;
    void unsetParameters();

    void setParameters(const std::vector<std::shared_ptr<BTMParameter_1>>& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    std::vector<utility::string_t> m_ControlBoxIds;
    bool m_ControlBoxIdsIsSet;
    utility::string_t m_EntityId;
    bool m_EntityIdIsSet;
    utility::string_t m_EntityIdAndReplaceInDependentFields;
    bool m_EntityIdAndReplaceInDependentFieldsIsSet;
    utility::string_t m_ImportMicroversion;
    bool m_ImportMicroversionIsSet;
    bool m_IsConstruction;
    bool m_IsConstructionIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    std::vector<std::shared_ptr<BTMParameter_1>> m_Parameters;
    bool m_ParametersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchGeomEntity_5_H_ */
