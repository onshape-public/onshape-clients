/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWorkspaceInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWorkspaceInfo_allOf::BTWorkspaceInfo_allOf()
{
    m_IsReadOnly = false;
    m_IsReadOnlyIsSet = false;
    m_CanDelete = false;
    m_CanDeleteIsSet = false;
}

BTWorkspaceInfo_allOf::~BTWorkspaceInfo_allOf()
{
}

void BTWorkspaceInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTWorkspaceInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("isReadOnly")] = ModelBase::toJson(m_IsReadOnly);
    }
    if(m_CanDeleteIsSet)
    {
        val[utility::conversions::to_string_t("canDelete")] = ModelBase::toJson(m_CanDelete);
    }

    return val;
}

bool BTWorkspaceInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("isReadOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isReadOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isReadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isReadOnly);
            setIsReadOnly(refVal_isReadOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canDelete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canDelete"));
        if(!fieldValue.is_null())
        {
            bool refVal_canDelete;
            ok &= ModelBase::fromJson(fieldValue, refVal_canDelete);
            setCanDelete(refVal_canDelete);
        }
    }
    return ok;
}

void BTWorkspaceInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IsReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isReadOnly"), m_IsReadOnly));
    }
    if(m_CanDeleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canDelete"), m_CanDelete));
    }
}

bool BTWorkspaceInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("isReadOnly")))
    {
        bool refVal_isReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isReadOnly")), refVal_isReadOnly );
        setIsReadOnly(refVal_isReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canDelete")))
    {
        bool refVal_canDelete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canDelete")), refVal_canDelete );
        setCanDelete(refVal_canDelete);
    }
    return ok;
}

bool BTWorkspaceInfo_allOf::isIsReadOnly() const
{
    return m_IsReadOnly;
}

void BTWorkspaceInfo_allOf::setIsReadOnly(bool value)
{
    m_IsReadOnly = value;
    m_IsReadOnlyIsSet = true;
}

bool BTWorkspaceInfo_allOf::isReadOnlyIsSet() const
{
    return m_IsReadOnlyIsSet;
}

void BTWorkspaceInfo_allOf::unsetIsReadOnly()
{
    m_IsReadOnlyIsSet = false;
}
bool BTWorkspaceInfo_allOf::isCanDelete() const
{
    return m_CanDelete;
}

void BTWorkspaceInfo_allOf::setCanDelete(bool value)
{
    m_CanDelete = value;
    m_CanDeleteIsSet = true;
}

bool BTWorkspaceInfo_allOf::canDeleteIsSet() const
{
    return m_CanDeleteIsSet;
}

void BTWorkspaceInfo_allOf::unsetCanDelete()
{
    m_CanDeleteIsSet = false;
}
}
}
}
}


