/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCommentInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCommentInfo::BTCommentInfo()
{
    m_AssemblyFeaturesIsSet = false;
    m_AssignedAt = utility::datetime();
    m_AssignedAtIsSet = false;
    m_AssigneeIsSet = false;
    m_AttachmentIsSet = false;
    m_CanDelete = false;
    m_CanDeleteIsSet = false;
    m_CanResolveOrReopen = false;
    m_CanResolveOrReopenIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementFeature = utility::conversions::to_string_t("");
    m_ElementFeatureIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementOccurrencesIsSet = false;
    m_ElementQuery = utility::conversions::to_string_t("");
    m_ElementQueryIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_ReleasePackageId = utility::conversions::to_string_t("");
    m_ReleasePackageIdIsSet = false;
    m_ReopenedAt = utility::datetime();
    m_ReopenedAtIsSet = false;
    m_ReopenedByIsSet = false;
    m_ReplyCount = 0L;
    m_ReplyCountIsSet = false;
    m_ResolvedAt = utility::datetime();
    m_ResolvedAtIsSet = false;
    m_ResolvedByIsSet = false;
    m_State = 0;
    m_StateIsSet = false;
    m_ThumbnailIsSet = false;
    m_TopLevel = false;
    m_TopLevelIsSet = false;
    m_UserIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_ViewDataIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTCommentInfo::~BTCommentInfo()
{
}

void BTCommentInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCommentInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AssemblyFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("assemblyFeatures")] = ModelBase::toJson(m_AssemblyFeatures);
    }
    if(m_AssignedAtIsSet)
    {
        val[utility::conversions::to_string_t("assignedAt")] = ModelBase::toJson(m_AssignedAt);
    }
    if(m_AssigneeIsSet)
    {
        val[utility::conversions::to_string_t("assignee")] = ModelBase::toJson(m_Assignee);
    }
    if(m_AttachmentIsSet)
    {
        val[utility::conversions::to_string_t("attachment")] = ModelBase::toJson(m_Attachment);
    }
    if(m_CanDeleteIsSet)
    {
        val[utility::conversions::to_string_t("canDelete")] = ModelBase::toJson(m_CanDelete);
    }
    if(m_CanResolveOrReopenIsSet)
    {
        val[utility::conversions::to_string_t("canResolveOrReopen")] = ModelBase::toJson(m_CanResolveOrReopen);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementFeatureIsSet)
    {
        val[utility::conversions::to_string_t("elementFeature")] = ModelBase::toJson(m_ElementFeature);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementOccurrencesIsSet)
    {
        val[utility::conversions::to_string_t("elementOccurrences")] = ModelBase::toJson(m_ElementOccurrences);
    }
    if(m_ElementQueryIsSet)
    {
        val[utility::conversions::to_string_t("elementQuery")] = ModelBase::toJson(m_ElementQuery);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_ReleasePackageIdIsSet)
    {
        val[utility::conversions::to_string_t("releasePackageId")] = ModelBase::toJson(m_ReleasePackageId);
    }
    if(m_ReopenedAtIsSet)
    {
        val[utility::conversions::to_string_t("reopenedAt")] = ModelBase::toJson(m_ReopenedAt);
    }
    if(m_ReopenedByIsSet)
    {
        val[utility::conversions::to_string_t("reopenedBy")] = ModelBase::toJson(m_ReopenedBy);
    }
    if(m_ReplyCountIsSet)
    {
        val[utility::conversions::to_string_t("replyCount")] = ModelBase::toJson(m_ReplyCount);
    }
    if(m_ResolvedAtIsSet)
    {
        val[utility::conversions::to_string_t("resolvedAt")] = ModelBase::toJson(m_ResolvedAt);
    }
    if(m_ResolvedByIsSet)
    {
        val[utility::conversions::to_string_t("resolvedBy")] = ModelBase::toJson(m_ResolvedBy);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_ThumbnailIsSet)
    {
        val[utility::conversions::to_string_t("thumbnail")] = ModelBase::toJson(m_Thumbnail);
    }
    if(m_TopLevelIsSet)
    {
        val[utility::conversions::to_string_t("topLevel")] = ModelBase::toJson(m_TopLevel);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_ViewDataIsSet)
    {
        val[utility::conversions::to_string_t("viewData")] = ModelBase::toJson(m_ViewData);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTCommentInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("assemblyFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("assemblyFeatures"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_assemblyFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_assemblyFeatures);
            setAssemblyFeatures(refVal_assemblyFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("assignedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("assignedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_assignedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_assignedAt);
            setAssignedAt(refVal_assignedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("assignee")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("assignee"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_assignee;
            ok &= ModelBase::fromJson(fieldValue, refVal_assignee);
            setAssignee(refVal_assignee);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachment"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCommentAttachmentInfo> refVal_attachment;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachment);
            setAttachment(refVal_attachment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canDelete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canDelete"));
        if(!fieldValue.is_null())
        {
            bool refVal_canDelete;
            ok &= ModelBase::fromJson(fieldValue, refVal_canDelete);
            setCanDelete(refVal_canDelete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canResolveOrReopen")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canResolveOrReopen"));
        if(!fieldValue.is_null())
        {
            bool refVal_canResolveOrReopen;
            ok &= ModelBase::fromJson(fieldValue, refVal_canResolveOrReopen);
            setCanResolveOrReopen(refVal_canResolveOrReopen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementFeature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementFeature"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementFeature;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementFeature);
            setElementFeature(refVal_elementFeature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementOccurrences")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementOccurrences"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_elementOccurrences;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementOccurrences);
            setElementOccurrences(refVal_elementOccurrences);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementQuery);
            setElementQuery(refVal_elementQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releasePackageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releasePackageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_releasePackageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_releasePackageId);
            setReleasePackageId(refVal_releasePackageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reopenedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reopenedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_reopenedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_reopenedAt);
            setReopenedAt(refVal_reopenedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reopenedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reopenedBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_reopenedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_reopenedBy);
            setReopenedBy(refVal_reopenedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replyCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("replyCount"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_replyCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_replyCount);
            setReplyCount(refVal_replyCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resolvedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolvedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_resolvedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolvedAt);
            setResolvedAt(refVal_resolvedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resolvedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolvedBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_resolvedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolvedBy);
            setResolvedBy(refVal_resolvedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCommentAttachmentInfo> refVal_thumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnail);
            setThumbnail(refVal_thumbnail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topLevel")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topLevel"));
        if(!fieldValue.is_null())
        {
            bool refVal_topLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_topLevel);
            setTopLevel(refVal_topLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTViewDataInfo> refVal_viewData;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewData);
            setViewData(refVal_viewData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTCommentInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AssemblyFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assemblyFeatures"), m_AssemblyFeatures));
    }
    if(m_AssignedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assignedAt"), m_AssignedAt));
    }
    if(m_AssigneeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assignee"), m_Assignee));
    }
    if(m_AttachmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachment"), m_Attachment));
    }
    if(m_CanDeleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canDelete"), m_CanDelete));
    }
    if(m_CanResolveOrReopenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canResolveOrReopen"), m_CanResolveOrReopen));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementFeatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementFeature"), m_ElementFeature));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementOccurrencesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementOccurrences"), m_ElementOccurrences));
    }
    if(m_ElementQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementQuery"), m_ElementQuery));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_ReleasePackageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releasePackageId"), m_ReleasePackageId));
    }
    if(m_ReopenedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reopenedAt"), m_ReopenedAt));
    }
    if(m_ReopenedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reopenedBy"), m_ReopenedBy));
    }
    if(m_ReplyCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replyCount"), m_ReplyCount));
    }
    if(m_ResolvedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolvedAt"), m_ResolvedAt));
    }
    if(m_ResolvedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolvedBy"), m_ResolvedBy));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnail"), m_Thumbnail));
    }
    if(m_TopLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topLevel"), m_TopLevel));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_ViewDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewData"), m_ViewData));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTCommentInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("assemblyFeatures")))
    {
        std::vector<utility::string_t> refVal_assemblyFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("assemblyFeatures")), refVal_assemblyFeatures );
        setAssemblyFeatures(refVal_assemblyFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assignedAt")))
    {
        utility::datetime refVal_assignedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("assignedAt")), refVal_assignedAt );
        setAssignedAt(refVal_assignedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assignee")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_assignee;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("assignee")), refVal_assignee );
        setAssignee(refVal_assignee);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachment")))
    {
        std::shared_ptr<BTCommentAttachmentInfo> refVal_attachment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachment")), refVal_attachment );
        setAttachment(refVal_attachment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canDelete")))
    {
        bool refVal_canDelete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canDelete")), refVal_canDelete );
        setCanDelete(refVal_canDelete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canResolveOrReopen")))
    {
        bool refVal_canResolveOrReopen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canResolveOrReopen")), refVal_canResolveOrReopen );
        setCanResolveOrReopen(refVal_canResolveOrReopen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementFeature")))
    {
        utility::string_t refVal_elementFeature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementFeature")), refVal_elementFeature );
        setElementFeature(refVal_elementFeature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementOccurrences")))
    {
        std::vector<utility::string_t> refVal_elementOccurrences;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementOccurrences")), refVal_elementOccurrences );
        setElementOccurrences(refVal_elementOccurrences);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementQuery")))
    {
        utility::string_t refVal_elementQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementQuery")), refVal_elementQuery );
        setElementQuery(refVal_elementQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releasePackageId")))
    {
        utility::string_t refVal_releasePackageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releasePackageId")), refVal_releasePackageId );
        setReleasePackageId(refVal_releasePackageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reopenedAt")))
    {
        utility::datetime refVal_reopenedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reopenedAt")), refVal_reopenedAt );
        setReopenedAt(refVal_reopenedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reopenedBy")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_reopenedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reopenedBy")), refVal_reopenedBy );
        setReopenedBy(refVal_reopenedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replyCount")))
    {
        int64_t refVal_replyCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("replyCount")), refVal_replyCount );
        setReplyCount(refVal_replyCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resolvedAt")))
    {
        utility::datetime refVal_resolvedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolvedAt")), refVal_resolvedAt );
        setResolvedAt(refVal_resolvedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resolvedBy")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_resolvedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolvedBy")), refVal_resolvedBy );
        setResolvedBy(refVal_resolvedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        int32_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnail")))
    {
        std::shared_ptr<BTCommentAttachmentInfo> refVal_thumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnail")), refVal_thumbnail );
        setThumbnail(refVal_thumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topLevel")))
    {
        bool refVal_topLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topLevel")), refVal_topLevel );
        setTopLevel(refVal_topLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user")), refVal_user );
        setUser(refVal_user);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewData")))
    {
        std::shared_ptr<BTViewDataInfo> refVal_viewData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewData")), refVal_viewData );
        setViewData(refVal_viewData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

std::vector<utility::string_t>& BTCommentInfo::getAssemblyFeatures()
{
    return m_AssemblyFeatures;
}

void BTCommentInfo::setAssemblyFeatures(const std::vector<utility::string_t>& value)
{
    m_AssemblyFeatures = value;
    m_AssemblyFeaturesIsSet = true;
}

bool BTCommentInfo::assemblyFeaturesIsSet() const
{
    return m_AssemblyFeaturesIsSet;
}

void BTCommentInfo::unsetAssemblyFeatures()
{
    m_AssemblyFeaturesIsSet = false;
}
utility::datetime BTCommentInfo::getAssignedAt() const
{
    return m_AssignedAt;
}

void BTCommentInfo::setAssignedAt(const utility::datetime& value)
{
    m_AssignedAt = value;
    m_AssignedAtIsSet = true;
}

bool BTCommentInfo::assignedAtIsSet() const
{
    return m_AssignedAtIsSet;
}

void BTCommentInfo::unsetAssignedAt()
{
    m_AssignedAtIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTCommentInfo::getAssignee() const
{
    return m_Assignee;
}

void BTCommentInfo::setAssignee(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_Assignee = value;
    m_AssigneeIsSet = true;
}

bool BTCommentInfo::assigneeIsSet() const
{
    return m_AssigneeIsSet;
}

void BTCommentInfo::unsetAssignee()
{
    m_AssigneeIsSet = false;
}
std::shared_ptr<BTCommentAttachmentInfo> BTCommentInfo::getAttachment() const
{
    return m_Attachment;
}

void BTCommentInfo::setAttachment(const std::shared_ptr<BTCommentAttachmentInfo>& value)
{
    m_Attachment = value;
    m_AttachmentIsSet = true;
}

bool BTCommentInfo::attachmentIsSet() const
{
    return m_AttachmentIsSet;
}

void BTCommentInfo::unsetAttachment()
{
    m_AttachmentIsSet = false;
}
bool BTCommentInfo::isCanDelete() const
{
    return m_CanDelete;
}

void BTCommentInfo::setCanDelete(bool value)
{
    m_CanDelete = value;
    m_CanDeleteIsSet = true;
}

bool BTCommentInfo::canDeleteIsSet() const
{
    return m_CanDeleteIsSet;
}

void BTCommentInfo::unsetCanDelete()
{
    m_CanDeleteIsSet = false;
}
bool BTCommentInfo::isCanResolveOrReopen() const
{
    return m_CanResolveOrReopen;
}

void BTCommentInfo::setCanResolveOrReopen(bool value)
{
    m_CanResolveOrReopen = value;
    m_CanResolveOrReopenIsSet = true;
}

bool BTCommentInfo::canResolveOrReopenIsSet() const
{
    return m_CanResolveOrReopenIsSet;
}

void BTCommentInfo::unsetCanResolveOrReopen()
{
    m_CanResolveOrReopenIsSet = false;
}
utility::datetime BTCommentInfo::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTCommentInfo::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTCommentInfo::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTCommentInfo::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t BTCommentInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTCommentInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTCommentInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTCommentInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTCommentInfo::getElementFeature() const
{
    return m_ElementFeature;
}

void BTCommentInfo::setElementFeature(const utility::string_t& value)
{
    m_ElementFeature = value;
    m_ElementFeatureIsSet = true;
}

bool BTCommentInfo::elementFeatureIsSet() const
{
    return m_ElementFeatureIsSet;
}

void BTCommentInfo::unsetElementFeature()
{
    m_ElementFeatureIsSet = false;
}
utility::string_t BTCommentInfo::getElementId() const
{
    return m_ElementId;
}

void BTCommentInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTCommentInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTCommentInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
std::vector<utility::string_t>& BTCommentInfo::getElementOccurrences()
{
    return m_ElementOccurrences;
}

void BTCommentInfo::setElementOccurrences(const std::vector<utility::string_t>& value)
{
    m_ElementOccurrences = value;
    m_ElementOccurrencesIsSet = true;
}

bool BTCommentInfo::elementOccurrencesIsSet() const
{
    return m_ElementOccurrencesIsSet;
}

void BTCommentInfo::unsetElementOccurrences()
{
    m_ElementOccurrencesIsSet = false;
}
utility::string_t BTCommentInfo::getElementQuery() const
{
    return m_ElementQuery;
}

void BTCommentInfo::setElementQuery(const utility::string_t& value)
{
    m_ElementQuery = value;
    m_ElementQueryIsSet = true;
}

bool BTCommentInfo::elementQueryIsSet() const
{
    return m_ElementQueryIsSet;
}

void BTCommentInfo::unsetElementQuery()
{
    m_ElementQueryIsSet = false;
}
utility::string_t BTCommentInfo::getHref() const
{
    return m_Href;
}

void BTCommentInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTCommentInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTCommentInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTCommentInfo::getId() const
{
    return m_Id;
}

void BTCommentInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTCommentInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTCommentInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTCommentInfo::getMessage() const
{
    return m_Message;
}

void BTCommentInfo::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool BTCommentInfo::messageIsSet() const
{
    return m_MessageIsSet;
}

void BTCommentInfo::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t BTCommentInfo::getName() const
{
    return m_Name;
}

void BTCommentInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTCommentInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTCommentInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTCommentInfo::getParentId() const
{
    return m_ParentId;
}

void BTCommentInfo::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTCommentInfo::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTCommentInfo::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTCommentInfo::getReleasePackageId() const
{
    return m_ReleasePackageId;
}

void BTCommentInfo::setReleasePackageId(const utility::string_t& value)
{
    m_ReleasePackageId = value;
    m_ReleasePackageIdIsSet = true;
}

bool BTCommentInfo::releasePackageIdIsSet() const
{
    return m_ReleasePackageIdIsSet;
}

void BTCommentInfo::unsetReleasePackageId()
{
    m_ReleasePackageIdIsSet = false;
}
utility::datetime BTCommentInfo::getReopenedAt() const
{
    return m_ReopenedAt;
}

void BTCommentInfo::setReopenedAt(const utility::datetime& value)
{
    m_ReopenedAt = value;
    m_ReopenedAtIsSet = true;
}

bool BTCommentInfo::reopenedAtIsSet() const
{
    return m_ReopenedAtIsSet;
}

void BTCommentInfo::unsetReopenedAt()
{
    m_ReopenedAtIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTCommentInfo::getReopenedBy() const
{
    return m_ReopenedBy;
}

void BTCommentInfo::setReopenedBy(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_ReopenedBy = value;
    m_ReopenedByIsSet = true;
}

bool BTCommentInfo::reopenedByIsSet() const
{
    return m_ReopenedByIsSet;
}

void BTCommentInfo::unsetReopenedBy()
{
    m_ReopenedByIsSet = false;
}
int64_t BTCommentInfo::getReplyCount() const
{
    return m_ReplyCount;
}

void BTCommentInfo::setReplyCount(int64_t value)
{
    m_ReplyCount = value;
    m_ReplyCountIsSet = true;
}

bool BTCommentInfo::replyCountIsSet() const
{
    return m_ReplyCountIsSet;
}

void BTCommentInfo::unsetReplyCount()
{
    m_ReplyCountIsSet = false;
}
utility::datetime BTCommentInfo::getResolvedAt() const
{
    return m_ResolvedAt;
}

void BTCommentInfo::setResolvedAt(const utility::datetime& value)
{
    m_ResolvedAt = value;
    m_ResolvedAtIsSet = true;
}

bool BTCommentInfo::resolvedAtIsSet() const
{
    return m_ResolvedAtIsSet;
}

void BTCommentInfo::unsetResolvedAt()
{
    m_ResolvedAtIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTCommentInfo::getResolvedBy() const
{
    return m_ResolvedBy;
}

void BTCommentInfo::setResolvedBy(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_ResolvedBy = value;
    m_ResolvedByIsSet = true;
}

bool BTCommentInfo::resolvedByIsSet() const
{
    return m_ResolvedByIsSet;
}

void BTCommentInfo::unsetResolvedBy()
{
    m_ResolvedByIsSet = false;
}
int32_t BTCommentInfo::getState() const
{
    return m_State;
}

void BTCommentInfo::setState(int32_t value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTCommentInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTCommentInfo::unsetState()
{
    m_StateIsSet = false;
}
std::shared_ptr<BTCommentAttachmentInfo> BTCommentInfo::getThumbnail() const
{
    return m_Thumbnail;
}

void BTCommentInfo::setThumbnail(const std::shared_ptr<BTCommentAttachmentInfo>& value)
{
    m_Thumbnail = value;
    m_ThumbnailIsSet = true;
}

bool BTCommentInfo::thumbnailIsSet() const
{
    return m_ThumbnailIsSet;
}

void BTCommentInfo::unsetThumbnail()
{
    m_ThumbnailIsSet = false;
}
bool BTCommentInfo::isTopLevel() const
{
    return m_TopLevel;
}

void BTCommentInfo::setTopLevel(bool value)
{
    m_TopLevel = value;
    m_TopLevelIsSet = true;
}

bool BTCommentInfo::topLevelIsSet() const
{
    return m_TopLevelIsSet;
}

void BTCommentInfo::unsetTopLevel()
{
    m_TopLevelIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTCommentInfo::getUser() const
{
    return m_User;
}

void BTCommentInfo::setUser(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool BTCommentInfo::userIsSet() const
{
    return m_UserIsSet;
}

void BTCommentInfo::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t BTCommentInfo::getVersionId() const
{
    return m_VersionId;
}

void BTCommentInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTCommentInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTCommentInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
std::shared_ptr<BTViewDataInfo> BTCommentInfo::getViewData() const
{
    return m_ViewData;
}

void BTCommentInfo::setViewData(const std::shared_ptr<BTViewDataInfo>& value)
{
    m_ViewData = value;
    m_ViewDataIsSet = true;
}

bool BTCommentInfo::viewDataIsSet() const
{
    return m_ViewDataIsSet;
}

void BTCommentInfo::unsetViewData()
{
    m_ViewDataIsSet = false;
}
utility::string_t BTCommentInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTCommentInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTCommentInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTCommentInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
utility::string_t BTCommentInfo::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTCommentInfo::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTCommentInfo::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTCommentInfo::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


