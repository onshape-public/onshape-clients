/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecReferencePartStudio_1256_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecReferencePartStudio_1256_allOf::BTParameterSpecReferencePartStudio_1256_allOf()
{
    m_MaxNumberOfPicks = 0;
    m_MaxNumberOfPicksIsSet = false;
    m_AllowedInsertableTypesIsSet = false;
    m_ComputedConfigurationInputsIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTParameterSpecReferencePartStudio_1256_allOf::~BTParameterSpecReferencePartStudio_1256_allOf()
{
}

void BTParameterSpecReferencePartStudio_1256_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecReferencePartStudio_1256_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MaxNumberOfPicksIsSet)
    {
        val[utility::conversions::to_string_t("maxNumberOfPicks")] = ModelBase::toJson(m_MaxNumberOfPicks);
    }
    if(m_AllowedInsertableTypesIsSet)
    {
        val[utility::conversions::to_string_t("allowedInsertableTypes")] = ModelBase::toJson(m_AllowedInsertableTypes);
    }
    if(m_ComputedConfigurationInputsIsSet)
    {
        val[utility::conversions::to_string_t("computedConfigurationInputs")] = ModelBase::toJson(m_ComputedConfigurationInputs);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTParameterSpecReferencePartStudio_1256_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxNumberOfPicks"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_maxNumberOfPicks;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxNumberOfPicks);
            setMaxNumberOfPicks(refVal_maxNumberOfPicks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedInsertableTypes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowedInsertableTypes"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_allowedInsertableTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowedInsertableTypes);
            setAllowedInsertableTypes(refVal_allowedInsertableTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("computedConfigurationInputs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("computedConfigurationInputs"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTComputedConfigurationInputSpec_2525>> refVal_computedConfigurationInputs;
            ok &= ModelBase::fromJson(fieldValue, refVal_computedConfigurationInputs);
            setComputedConfigurationInputs(refVal_computedConfigurationInputs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTParameterSpecReferencePartStudio_1256_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MaxNumberOfPicksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxNumberOfPicks"), m_MaxNumberOfPicks));
    }
    if(m_AllowedInsertableTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowedInsertableTypes"), m_AllowedInsertableTypes));
    }
    if(m_ComputedConfigurationInputsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("computedConfigurationInputs"), m_ComputedConfigurationInputs));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTParameterSpecReferencePartStudio_1256_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        int32_t refVal_maxNumberOfPicks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxNumberOfPicks")), refVal_maxNumberOfPicks );
        setMaxNumberOfPicks(refVal_maxNumberOfPicks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedInsertableTypes")))
    {
        std::vector<utility::string_t> refVal_allowedInsertableTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowedInsertableTypes")), refVal_allowedInsertableTypes );
        setAllowedInsertableTypes(refVal_allowedInsertableTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("computedConfigurationInputs")))
    {
        std::vector<std::shared_ptr<BTComputedConfigurationInputSpec_2525>> refVal_computedConfigurationInputs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("computedConfigurationInputs")), refVal_computedConfigurationInputs );
        setComputedConfigurationInputs(refVal_computedConfigurationInputs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

int32_t BTParameterSpecReferencePartStudio_1256_allOf::getMaxNumberOfPicks() const
{
    return m_MaxNumberOfPicks;
}

void BTParameterSpecReferencePartStudio_1256_allOf::setMaxNumberOfPicks(int32_t value)
{
    m_MaxNumberOfPicks = value;
    m_MaxNumberOfPicksIsSet = true;
}

bool BTParameterSpecReferencePartStudio_1256_allOf::maxNumberOfPicksIsSet() const
{
    return m_MaxNumberOfPicksIsSet;
}

void BTParameterSpecReferencePartStudio_1256_allOf::unsetMaxNumberOfPicks()
{
    m_MaxNumberOfPicksIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecReferencePartStudio_1256_allOf::getAllowedInsertableTypes()
{
    return m_AllowedInsertableTypes;
}

void BTParameterSpecReferencePartStudio_1256_allOf::setAllowedInsertableTypes(const std::vector<utility::string_t>& value)
{
    m_AllowedInsertableTypes = value;
    m_AllowedInsertableTypesIsSet = true;
}

bool BTParameterSpecReferencePartStudio_1256_allOf::allowedInsertableTypesIsSet() const
{
    return m_AllowedInsertableTypesIsSet;
}

void BTParameterSpecReferencePartStudio_1256_allOf::unsetAllowedInsertableTypes()
{
    m_AllowedInsertableTypesIsSet = false;
}
std::vector<std::shared_ptr<BTComputedConfigurationInputSpec_2525>>& BTParameterSpecReferencePartStudio_1256_allOf::getComputedConfigurationInputs()
{
    return m_ComputedConfigurationInputs;
}

void BTParameterSpecReferencePartStudio_1256_allOf::setComputedConfigurationInputs(const std::vector<std::shared_ptr<BTComputedConfigurationInputSpec_2525>>& value)
{
    m_ComputedConfigurationInputs = value;
    m_ComputedConfigurationInputsIsSet = true;
}

bool BTParameterSpecReferencePartStudio_1256_allOf::computedConfigurationInputsIsSet() const
{
    return m_ComputedConfigurationInputsIsSet;
}

void BTParameterSpecReferencePartStudio_1256_allOf::unsetComputedConfigurationInputs()
{
    m_ComputedConfigurationInputsIsSet = false;
}
utility::string_t BTParameterSpecReferencePartStudio_1256_allOf::getBtType() const
{
    return m_BtType;
}

void BTParameterSpecReferencePartStudio_1256_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpecReferencePartStudio_1256_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpecReferencePartStudio_1256_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


