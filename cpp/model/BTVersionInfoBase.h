/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTVersionInfoBase.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTVersionInfoBase_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTVersionInfoBase_H_


#include "BTBaseInfo.h"
#include "BTVersionInfoBase_allOf.h"
#include "BTVersionInfo.h"
#include "BTThumbnailInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTUserBasicSummaryInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTVersionInfoBase
    : public BTBaseInfo
{
public:
    BTVersionInfoBase();
    virtual ~BTVersionInfoBase();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTVersionInfoBase members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedAt() const;
    bool modifiedAtIsSet() const;
    void unsetModifiedAt();

    void setModifiedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserBasicSummaryInfo> getLastModifier() const;
    bool lastModifierIsSet() const;
    void unsetLastModifier();

    void setLastModifier(const std::shared_ptr<BTUserBasicSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserBasicSummaryInfo> getCreator() const;
    bool creatorIsSet() const;
    void unsetCreator();

    void setCreator(const std::shared_ptr<BTUserBasicSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTThumbnailInfo> getThumbnail() const;
    bool thumbnailIsSet() const;
    void unsetThumbnail();

    void setThumbnail(const std::shared_ptr<BTThumbnailInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMicroversion() const;
    bool microversionIsSet() const;
    void unsetMicroversion();

    void setMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVersionInfo>>& getParents();
    bool parentsIsSet() const;
    void unsetParents();

    void setParents(const std::vector<std::shared_ptr<BTVersionInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getOverrideDate() const;
    bool overrideDateIsSet() const;
    void unsetOverrideDate();

    void setOverrideDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(const utility::string_t& value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::datetime m_ModifiedAt;
    bool m_ModifiedAtIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::shared_ptr<BTUserBasicSummaryInfo> m_LastModifier;
    bool m_LastModifierIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    std::shared_ptr<BTUserBasicSummaryInfo> m_Creator;
    bool m_CreatorIsSet;
    std::shared_ptr<BTThumbnailInfo> m_Thumbnail;
    bool m_ThumbnailIsSet;
    utility::string_t m_Microversion;
    bool m_MicroversionIsSet;
    std::vector<std::shared_ptr<BTVersionInfo>> m_Parents;
    bool m_ParentsIsSet;
    utility::datetime m_OverrideDate;
    bool m_OverrideDateIsSet;
    utility::string_t m_Parent;
    bool m_ParentIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTVersionInfoBase_H_ */
