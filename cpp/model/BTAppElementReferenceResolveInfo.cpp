/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementReferenceResolveInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementReferenceResolveInfo::BTAppElementReferenceResolveInfo()
{
    m_ChangeId = utility::conversions::to_string_t("");
    m_ChangeIdIsSet = false;
    m_ErrorCode = 0;
    m_ErrorCodeIsSet = false;
    m_ErrorDescription = utility::conversions::to_string_t("");
    m_ErrorDescriptionIsSet = false;
    m_ErrorValue = utility::conversions::to_string_t("");
    m_ErrorValueIsSet = false;
    m_IdTag = utility::conversions::to_string_t("");
    m_IdTagIsSet = false;
    m_IdTagIsValid = false;
    m_IdTagIsValidIsSet = false;
    m_IsConfigurable = false;
    m_IsConfigurableIsSet = false;
    m_IsFlattenedPart = false;
    m_IsFlattenedPartIsSet = false;
    m_IsSketchOnly = false;
    m_IsSketchOnlyIsSet = false;
    m_IsSurface = false;
    m_IsSurfaceIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_ReferenceId = utility::conversions::to_string_t("");
    m_ReferenceIdIsSet = false;
    m_ReferenceType = 0;
    m_ReferenceTypeIsSet = false;
    m_ResolvedDocumentMicroversionId = utility::conversions::to_string_t("");
    m_ResolvedDocumentMicroversionIdIsSet = false;
    m_ResolvedElementMicroversionId = utility::conversions::to_string_t("");
    m_ResolvedElementMicroversionIdIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_SketchIdsIsSet = false;
    m_TargetConfiguration = utility::conversions::to_string_t("");
    m_TargetConfigurationIsSet = false;
    m_TargetDocumentId = utility::conversions::to_string_t("");
    m_TargetDocumentIdIsSet = false;
    m_TargetDocumentMicroversionId = utility::conversions::to_string_t("");
    m_TargetDocumentMicroversionIdIsSet = false;
    m_TargetElementId = utility::conversions::to_string_t("");
    m_TargetElementIdIsSet = false;
    m_TargetElementMicroversionId = utility::conversions::to_string_t("");
    m_TargetElementMicroversionIdIsSet = false;
    m_TargetVersionId = utility::conversions::to_string_t("");
    m_TargetVersionIdIsSet = false;
    m_TrackNewVersions = false;
    m_TrackNewVersionsIsSet = false;
}

BTAppElementReferenceResolveInfo::~BTAppElementReferenceResolveInfo()
{
}

void BTAppElementReferenceResolveInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementReferenceResolveInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("changeId")] = ModelBase::toJson(m_ChangeId);
    }
    if(m_ErrorCodeIsSet)
    {
        val[utility::conversions::to_string_t("errorCode")] = ModelBase::toJson(m_ErrorCode);
    }
    if(m_ErrorDescriptionIsSet)
    {
        val[utility::conversions::to_string_t("errorDescription")] = ModelBase::toJson(m_ErrorDescription);
    }
    if(m_ErrorValueIsSet)
    {
        val[utility::conversions::to_string_t("errorValue")] = ModelBase::toJson(m_ErrorValue);
    }
    if(m_IdTagIsSet)
    {
        val[utility::conversions::to_string_t("idTag")] = ModelBase::toJson(m_IdTag);
    }
    if(m_IdTagIsValidIsSet)
    {
        val[utility::conversions::to_string_t("idTagIsValid")] = ModelBase::toJson(m_IdTagIsValid);
    }
    if(m_IsConfigurableIsSet)
    {
        val[utility::conversions::to_string_t("isConfigurable")] = ModelBase::toJson(m_IsConfigurable);
    }
    if(m_IsFlattenedPartIsSet)
    {
        val[utility::conversions::to_string_t("isFlattenedPart")] = ModelBase::toJson(m_IsFlattenedPart);
    }
    if(m_IsSketchOnlyIsSet)
    {
        val[utility::conversions::to_string_t("isSketchOnly")] = ModelBase::toJson(m_IsSketchOnly);
    }
    if(m_IsSurfaceIsSet)
    {
        val[utility::conversions::to_string_t("isSurface")] = ModelBase::toJson(m_IsSurface);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_ReferenceIdIsSet)
    {
        val[utility::conversions::to_string_t("referenceId")] = ModelBase::toJson(m_ReferenceId);
    }
    if(m_ReferenceTypeIsSet)
    {
        val[utility::conversions::to_string_t("referenceType")] = ModelBase::toJson(m_ReferenceType);
    }
    if(m_ResolvedDocumentMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("resolvedDocumentMicroversionId")] = ModelBase::toJson(m_ResolvedDocumentMicroversionId);
    }
    if(m_ResolvedElementMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("resolvedElementMicroversionId")] = ModelBase::toJson(m_ResolvedElementMicroversionId);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_SketchIdsIsSet)
    {
        val[utility::conversions::to_string_t("sketchIds")] = ModelBase::toJson(m_SketchIds);
    }
    if(m_TargetConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("targetConfiguration")] = ModelBase::toJson(m_TargetConfiguration);
    }
    if(m_TargetDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("targetDocumentId")] = ModelBase::toJson(m_TargetDocumentId);
    }
    if(m_TargetDocumentMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetDocumentMicroversionId")] = ModelBase::toJson(m_TargetDocumentMicroversionId);
    }
    if(m_TargetElementIdIsSet)
    {
        val[utility::conversions::to_string_t("targetElementId")] = ModelBase::toJson(m_TargetElementId);
    }
    if(m_TargetElementMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetElementMicroversionId")] = ModelBase::toJson(m_TargetElementMicroversionId);
    }
    if(m_TargetVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetVersionId")] = ModelBase::toJson(m_TargetVersionId);
    }
    if(m_TrackNewVersionsIsSet)
    {
        val[utility::conversions::to_string_t("trackNewVersions")] = ModelBase::toJson(m_TrackNewVersions);
    }

    return val;
}

bool BTAppElementReferenceResolveInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_changeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_changeId);
            setChangeId(refVal_changeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_errorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorCode);
            setErrorCode(refVal_errorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorDescription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorDescription"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorDescription);
            setErrorDescription(refVal_errorDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorValue);
            setErrorValue(refVal_errorValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idTag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idTag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_idTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_idTag);
            setIdTag(refVal_idTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idTagIsValid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idTagIsValid"));
        if(!fieldValue.is_null())
        {
            bool refVal_idTagIsValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_idTagIsValid);
            setIdTagIsValid(refVal_idTagIsValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isConfigurable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isConfigurable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isConfigurable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isConfigurable);
            setIsConfigurable(refVal_isConfigurable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFlattenedPart")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFlattenedPart"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFlattenedPart;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFlattenedPart);
            setIsFlattenedPart(refVal_isFlattenedPart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSketchOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSketchOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSketchOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSketchOnly);
            setIsSketchOnly(refVal_isSketchOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSurface")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSurface"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSurface;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSurface);
            setIsSurface(refVal_isSurface);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referenceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_referenceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_referenceId);
            setReferenceId(refVal_referenceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referenceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referenceType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_referenceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_referenceType);
            setReferenceType(refVal_referenceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resolvedDocumentMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolvedDocumentMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resolvedDocumentMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolvedDocumentMicroversionId);
            setResolvedDocumentMicroversionId(refVal_resolvedDocumentMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resolvedElementMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolvedElementMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resolvedElementMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolvedElementMicroversionId);
            setResolvedElementMicroversionId(refVal_resolvedElementMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sketchIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sketchIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sketchIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sketchIds);
            setSketchIds(refVal_sketchIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetConfiguration);
            setTargetConfiguration(refVal_targetConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetDocumentId);
            setTargetDocumentId(refVal_targetDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetDocumentMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetDocumentMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetDocumentMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetDocumentMicroversionId);
            setTargetDocumentMicroversionId(refVal_targetDocumentMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetElementId);
            setTargetElementId(refVal_targetElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetElementMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetElementMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetElementMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetElementMicroversionId);
            setTargetElementMicroversionId(refVal_targetElementMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetVersionId);
            setTargetVersionId(refVal_targetVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trackNewVersions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trackNewVersions"));
        if(!fieldValue.is_null())
        {
            bool refVal_trackNewVersions;
            ok &= ModelBase::fromJson(fieldValue, refVal_trackNewVersions);
            setTrackNewVersions(refVal_trackNewVersions);
        }
    }
    return ok;
}

void BTAppElementReferenceResolveInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changeId"), m_ChangeId));
    }
    if(m_ErrorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorCode"), m_ErrorCode));
    }
    if(m_ErrorDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorDescription"), m_ErrorDescription));
    }
    if(m_ErrorValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorValue"), m_ErrorValue));
    }
    if(m_IdTagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idTag"), m_IdTag));
    }
    if(m_IdTagIsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idTagIsValid"), m_IdTagIsValid));
    }
    if(m_IsConfigurableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConfigurable"), m_IsConfigurable));
    }
    if(m_IsFlattenedPartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFlattenedPart"), m_IsFlattenedPart));
    }
    if(m_IsSketchOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSketchOnly"), m_IsSketchOnly));
    }
    if(m_IsSurfaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSurface"), m_IsSurface));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_ReferenceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceId"), m_ReferenceId));
    }
    if(m_ReferenceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referenceType"), m_ReferenceType));
    }
    if(m_ResolvedDocumentMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolvedDocumentMicroversionId"), m_ResolvedDocumentMicroversionId));
    }
    if(m_ResolvedElementMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolvedElementMicroversionId"), m_ResolvedElementMicroversionId));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_SketchIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sketchIds"), m_SketchIds));
    }
    if(m_TargetConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetConfiguration"), m_TargetConfiguration));
    }
    if(m_TargetDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetDocumentId"), m_TargetDocumentId));
    }
    if(m_TargetDocumentMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetDocumentMicroversionId"), m_TargetDocumentMicroversionId));
    }
    if(m_TargetElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetElementId"), m_TargetElementId));
    }
    if(m_TargetElementMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetElementMicroversionId"), m_TargetElementMicroversionId));
    }
    if(m_TargetVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetVersionId"), m_TargetVersionId));
    }
    if(m_TrackNewVersionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trackNewVersions"), m_TrackNewVersions));
    }
}

bool BTAppElementReferenceResolveInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changeId")))
    {
        utility::string_t refVal_changeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changeId")), refVal_changeId );
        setChangeId(refVal_changeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorCode")))
    {
        int32_t refVal_errorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorCode")), refVal_errorCode );
        setErrorCode(refVal_errorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorDescription")))
    {
        utility::string_t refVal_errorDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorDescription")), refVal_errorDescription );
        setErrorDescription(refVal_errorDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorValue")))
    {
        utility::string_t refVal_errorValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorValue")), refVal_errorValue );
        setErrorValue(refVal_errorValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idTag")))
    {
        utility::string_t refVal_idTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idTag")), refVal_idTag );
        setIdTag(refVal_idTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idTagIsValid")))
    {
        bool refVal_idTagIsValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idTagIsValid")), refVal_idTagIsValid );
        setIdTagIsValid(refVal_idTagIsValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConfigurable")))
    {
        bool refVal_isConfigurable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConfigurable")), refVal_isConfigurable );
        setIsConfigurable(refVal_isConfigurable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFlattenedPart")))
    {
        bool refVal_isFlattenedPart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFlattenedPart")), refVal_isFlattenedPart );
        setIsFlattenedPart(refVal_isFlattenedPart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSketchOnly")))
    {
        bool refVal_isSketchOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSketchOnly")), refVal_isSketchOnly );
        setIsSketchOnly(refVal_isSketchOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSurface")))
    {
        bool refVal_isSurface;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSurface")), refVal_isSurface );
        setIsSurface(refVal_isSurface);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceId")))
    {
        utility::string_t refVal_referenceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceId")), refVal_referenceId );
        setReferenceId(refVal_referenceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referenceType")))
    {
        int32_t refVal_referenceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referenceType")), refVal_referenceType );
        setReferenceType(refVal_referenceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resolvedDocumentMicroversionId")))
    {
        utility::string_t refVal_resolvedDocumentMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolvedDocumentMicroversionId")), refVal_resolvedDocumentMicroversionId );
        setResolvedDocumentMicroversionId(refVal_resolvedDocumentMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resolvedElementMicroversionId")))
    {
        utility::string_t refVal_resolvedElementMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolvedElementMicroversionId")), refVal_resolvedElementMicroversionId );
        setResolvedElementMicroversionId(refVal_resolvedElementMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sketchIds")))
    {
        std::vector<utility::string_t> refVal_sketchIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sketchIds")), refVal_sketchIds );
        setSketchIds(refVal_sketchIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetConfiguration")))
    {
        utility::string_t refVal_targetConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetConfiguration")), refVal_targetConfiguration );
        setTargetConfiguration(refVal_targetConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetDocumentId")))
    {
        utility::string_t refVal_targetDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetDocumentId")), refVal_targetDocumentId );
        setTargetDocumentId(refVal_targetDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetDocumentMicroversionId")))
    {
        utility::string_t refVal_targetDocumentMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetDocumentMicroversionId")), refVal_targetDocumentMicroversionId );
        setTargetDocumentMicroversionId(refVal_targetDocumentMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetElementId")))
    {
        utility::string_t refVal_targetElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetElementId")), refVal_targetElementId );
        setTargetElementId(refVal_targetElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetElementMicroversionId")))
    {
        utility::string_t refVal_targetElementMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetElementMicroversionId")), refVal_targetElementMicroversionId );
        setTargetElementMicroversionId(refVal_targetElementMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetVersionId")))
    {
        utility::string_t refVal_targetVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetVersionId")), refVal_targetVersionId );
        setTargetVersionId(refVal_targetVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trackNewVersions")))
    {
        bool refVal_trackNewVersions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trackNewVersions")), refVal_trackNewVersions );
        setTrackNewVersions(refVal_trackNewVersions);
    }
    return ok;
}

utility::string_t BTAppElementReferenceResolveInfo::getChangeId() const
{
    return m_ChangeId;
}

void BTAppElementReferenceResolveInfo::setChangeId(const utility::string_t& value)
{
    m_ChangeId = value;
    m_ChangeIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::changeIdIsSet() const
{
    return m_ChangeIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetChangeId()
{
    m_ChangeIdIsSet = false;
}
int32_t BTAppElementReferenceResolveInfo::getErrorCode() const
{
    return m_ErrorCode;
}

void BTAppElementReferenceResolveInfo::setErrorCode(int32_t value)
{
    m_ErrorCode = value;
    m_ErrorCodeIsSet = true;
}

bool BTAppElementReferenceResolveInfo::errorCodeIsSet() const
{
    return m_ErrorCodeIsSet;
}

void BTAppElementReferenceResolveInfo::unsetErrorCode()
{
    m_ErrorCodeIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getErrorDescription() const
{
    return m_ErrorDescription;
}

void BTAppElementReferenceResolveInfo::setErrorDescription(const utility::string_t& value)
{
    m_ErrorDescription = value;
    m_ErrorDescriptionIsSet = true;
}

bool BTAppElementReferenceResolveInfo::errorDescriptionIsSet() const
{
    return m_ErrorDescriptionIsSet;
}

void BTAppElementReferenceResolveInfo::unsetErrorDescription()
{
    m_ErrorDescriptionIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getErrorValue() const
{
    return m_ErrorValue;
}

void BTAppElementReferenceResolveInfo::setErrorValue(const utility::string_t& value)
{
    m_ErrorValue = value;
    m_ErrorValueIsSet = true;
}

bool BTAppElementReferenceResolveInfo::errorValueIsSet() const
{
    return m_ErrorValueIsSet;
}

void BTAppElementReferenceResolveInfo::unsetErrorValue()
{
    m_ErrorValueIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getIdTag() const
{
    return m_IdTag;
}

void BTAppElementReferenceResolveInfo::setIdTag(const utility::string_t& value)
{
    m_IdTag = value;
    m_IdTagIsSet = true;
}

bool BTAppElementReferenceResolveInfo::idTagIsSet() const
{
    return m_IdTagIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIdTag()
{
    m_IdTagIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isIdTagIsValid() const
{
    return m_IdTagIsValid;
}

void BTAppElementReferenceResolveInfo::setIdTagIsValid(bool value)
{
    m_IdTagIsValid = value;
    m_IdTagIsValidIsSet = true;
}

bool BTAppElementReferenceResolveInfo::idTagIsValidIsSet() const
{
    return m_IdTagIsValidIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIdTagIsValid()
{
    m_IdTagIsValidIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isIsConfigurable() const
{
    return m_IsConfigurable;
}

void BTAppElementReferenceResolveInfo::setIsConfigurable(bool value)
{
    m_IsConfigurable = value;
    m_IsConfigurableIsSet = true;
}

bool BTAppElementReferenceResolveInfo::isConfigurableIsSet() const
{
    return m_IsConfigurableIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIsConfigurable()
{
    m_IsConfigurableIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isIsFlattenedPart() const
{
    return m_IsFlattenedPart;
}

void BTAppElementReferenceResolveInfo::setIsFlattenedPart(bool value)
{
    m_IsFlattenedPart = value;
    m_IsFlattenedPartIsSet = true;
}

bool BTAppElementReferenceResolveInfo::isFlattenedPartIsSet() const
{
    return m_IsFlattenedPartIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIsFlattenedPart()
{
    m_IsFlattenedPartIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isIsSketchOnly() const
{
    return m_IsSketchOnly;
}

void BTAppElementReferenceResolveInfo::setIsSketchOnly(bool value)
{
    m_IsSketchOnly = value;
    m_IsSketchOnlyIsSet = true;
}

bool BTAppElementReferenceResolveInfo::isSketchOnlyIsSet() const
{
    return m_IsSketchOnlyIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIsSketchOnly()
{
    m_IsSketchOnlyIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isIsSurface() const
{
    return m_IsSurface;
}

void BTAppElementReferenceResolveInfo::setIsSurface(bool value)
{
    m_IsSurface = value;
    m_IsSurfaceIsSet = true;
}

bool BTAppElementReferenceResolveInfo::isSurfaceIsSet() const
{
    return m_IsSurfaceIsSet;
}

void BTAppElementReferenceResolveInfo::unsetIsSurface()
{
    m_IsSurfaceIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getPartNumber() const
{
    return m_PartNumber;
}

void BTAppElementReferenceResolveInfo::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTAppElementReferenceResolveInfo::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTAppElementReferenceResolveInfo::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getReferenceId() const
{
    return m_ReferenceId;
}

void BTAppElementReferenceResolveInfo::setReferenceId(const utility::string_t& value)
{
    m_ReferenceId = value;
    m_ReferenceIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::referenceIdIsSet() const
{
    return m_ReferenceIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetReferenceId()
{
    m_ReferenceIdIsSet = false;
}
int32_t BTAppElementReferenceResolveInfo::getReferenceType() const
{
    return m_ReferenceType;
}

void BTAppElementReferenceResolveInfo::setReferenceType(int32_t value)
{
    m_ReferenceType = value;
    m_ReferenceTypeIsSet = true;
}

bool BTAppElementReferenceResolveInfo::referenceTypeIsSet() const
{
    return m_ReferenceTypeIsSet;
}

void BTAppElementReferenceResolveInfo::unsetReferenceType()
{
    m_ReferenceTypeIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getResolvedDocumentMicroversionId() const
{
    return m_ResolvedDocumentMicroversionId;
}

void BTAppElementReferenceResolveInfo::setResolvedDocumentMicroversionId(const utility::string_t& value)
{
    m_ResolvedDocumentMicroversionId = value;
    m_ResolvedDocumentMicroversionIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::resolvedDocumentMicroversionIdIsSet() const
{
    return m_ResolvedDocumentMicroversionIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetResolvedDocumentMicroversionId()
{
    m_ResolvedDocumentMicroversionIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getResolvedElementMicroversionId() const
{
    return m_ResolvedElementMicroversionId;
}

void BTAppElementReferenceResolveInfo::setResolvedElementMicroversionId(const utility::string_t& value)
{
    m_ResolvedElementMicroversionId = value;
    m_ResolvedElementMicroversionIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::resolvedElementMicroversionIdIsSet() const
{
    return m_ResolvedElementMicroversionIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetResolvedElementMicroversionId()
{
    m_ResolvedElementMicroversionIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getRevision() const
{
    return m_Revision;
}

void BTAppElementReferenceResolveInfo::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTAppElementReferenceResolveInfo::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTAppElementReferenceResolveInfo::unsetRevision()
{
    m_RevisionIsSet = false;
}
std::vector<utility::string_t>& BTAppElementReferenceResolveInfo::getSketchIds()
{
    return m_SketchIds;
}

void BTAppElementReferenceResolveInfo::setSketchIds(const std::vector<utility::string_t>& value)
{
    m_SketchIds = value;
    m_SketchIdsIsSet = true;
}

bool BTAppElementReferenceResolveInfo::sketchIdsIsSet() const
{
    return m_SketchIdsIsSet;
}

void BTAppElementReferenceResolveInfo::unsetSketchIds()
{
    m_SketchIdsIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetConfiguration() const
{
    return m_TargetConfiguration;
}

void BTAppElementReferenceResolveInfo::setTargetConfiguration(const utility::string_t& value)
{
    m_TargetConfiguration = value;
    m_TargetConfigurationIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetConfigurationIsSet() const
{
    return m_TargetConfigurationIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetConfiguration()
{
    m_TargetConfigurationIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetDocumentId() const
{
    return m_TargetDocumentId;
}

void BTAppElementReferenceResolveInfo::setTargetDocumentId(const utility::string_t& value)
{
    m_TargetDocumentId = value;
    m_TargetDocumentIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetDocumentIdIsSet() const
{
    return m_TargetDocumentIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetDocumentId()
{
    m_TargetDocumentIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetDocumentMicroversionId() const
{
    return m_TargetDocumentMicroversionId;
}

void BTAppElementReferenceResolveInfo::setTargetDocumentMicroversionId(const utility::string_t& value)
{
    m_TargetDocumentMicroversionId = value;
    m_TargetDocumentMicroversionIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetDocumentMicroversionIdIsSet() const
{
    return m_TargetDocumentMicroversionIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetDocumentMicroversionId()
{
    m_TargetDocumentMicroversionIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetElementId() const
{
    return m_TargetElementId;
}

void BTAppElementReferenceResolveInfo::setTargetElementId(const utility::string_t& value)
{
    m_TargetElementId = value;
    m_TargetElementIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetElementIdIsSet() const
{
    return m_TargetElementIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetElementId()
{
    m_TargetElementIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetElementMicroversionId() const
{
    return m_TargetElementMicroversionId;
}

void BTAppElementReferenceResolveInfo::setTargetElementMicroversionId(const utility::string_t& value)
{
    m_TargetElementMicroversionId = value;
    m_TargetElementMicroversionIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetElementMicroversionIdIsSet() const
{
    return m_TargetElementMicroversionIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetElementMicroversionId()
{
    m_TargetElementMicroversionIdIsSet = false;
}
utility::string_t BTAppElementReferenceResolveInfo::getTargetVersionId() const
{
    return m_TargetVersionId;
}

void BTAppElementReferenceResolveInfo::setTargetVersionId(const utility::string_t& value)
{
    m_TargetVersionId = value;
    m_TargetVersionIdIsSet = true;
}

bool BTAppElementReferenceResolveInfo::targetVersionIdIsSet() const
{
    return m_TargetVersionIdIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTargetVersionId()
{
    m_TargetVersionIdIsSet = false;
}
bool BTAppElementReferenceResolveInfo::isTrackNewVersions() const
{
    return m_TrackNewVersions;
}

void BTAppElementReferenceResolveInfo::setTrackNewVersions(bool value)
{
    m_TrackNewVersions = value;
    m_TrackNewVersionsIsSet = true;
}

bool BTAppElementReferenceResolveInfo::trackNewVersionsIsSet() const
{
    return m_TrackNewVersionsIsSet;
}

void BTAppElementReferenceResolveInfo::unsetTrackNewVersions()
{
    m_TrackNewVersionsIsSet = false;
}
}
}
}
}


