/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMassPropertiesInfo_null.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMassPropertiesInfo_null::BTMassPropertiesInfo_null()
{
    m_CentroidIsSet = false;
    m_HasMass = false;
    m_HasMassIsSet = false;
    m_InertiaIsSet = false;
    m_MassIsSet = false;
    m_MassMissingCount = 0;
    m_MassMissingCountIsSet = false;
    m_PeripheryIsSet = false;
    m_PrincipalAxesIsSet = false;
    m_PrincipalInertiaIsSet = false;
    m_VolumeIsSet = false;
}

BTMassPropertiesInfo_null::~BTMassPropertiesInfo_null()
{
}

void BTMassPropertiesInfo_null::validate()
{
    // TODO: implement validation
}

web::json::value BTMassPropertiesInfo_null::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CentroidIsSet)
    {
        val[utility::conversions::to_string_t("centroid")] = ModelBase::toJson(m_Centroid);
    }
    if(m_HasMassIsSet)
    {
        val[utility::conversions::to_string_t("hasMass")] = ModelBase::toJson(m_HasMass);
    }
    if(m_InertiaIsSet)
    {
        val[utility::conversions::to_string_t("inertia")] = ModelBase::toJson(m_Inertia);
    }
    if(m_MassIsSet)
    {
        val[utility::conversions::to_string_t("mass")] = ModelBase::toJson(m_Mass);
    }
    if(m_MassMissingCountIsSet)
    {
        val[utility::conversions::to_string_t("massMissingCount")] = ModelBase::toJson(m_MassMissingCount);
    }
    if(m_PeripheryIsSet)
    {
        val[utility::conversions::to_string_t("periphery")] = ModelBase::toJson(m_Periphery);
    }
    if(m_PrincipalAxesIsSet)
    {
        val[utility::conversions::to_string_t("principalAxes")] = ModelBase::toJson(m_PrincipalAxes);
    }
    if(m_PrincipalInertiaIsSet)
    {
        val[utility::conversions::to_string_t("principalInertia")] = ModelBase::toJson(m_PrincipalInertia);
    }
    if(m_VolumeIsSet)
    {
        val[utility::conversions::to_string_t("volume")] = ModelBase::toJson(m_Volume);
    }

    return val;
}

bool BTMassPropertiesInfo_null::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("centroid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("centroid"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_centroid;
            ok &= ModelBase::fromJson(fieldValue, refVal_centroid);
            setCentroid(refVal_centroid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasMass")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasMass"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasMass;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasMass);
            setHasMass(refVal_hasMass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inertia")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inertia"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_inertia;
            ok &= ModelBase::fromJson(fieldValue, refVal_inertia);
            setInertia(refVal_inertia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mass")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mass"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_mass;
            ok &= ModelBase::fromJson(fieldValue, refVal_mass);
            setMass(refVal_mass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("massMissingCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("massMissingCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_massMissingCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_massMissingCount);
            setMassMissingCount(refVal_massMissingCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("periphery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("periphery"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_periphery;
            ok &= ModelBase::fromJson(fieldValue, refVal_periphery);
            setPeriphery(refVal_periphery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("principalAxes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("principalAxes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVector3d_389>> refVal_principalAxes;
            ok &= ModelBase::fromJson(fieldValue, refVal_principalAxes);
            setPrincipalAxes(refVal_principalAxes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("principalInertia")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("principalInertia"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_principalInertia;
            ok &= ModelBase::fromJson(fieldValue, refVal_principalInertia);
            setPrincipalInertia(refVal_principalInertia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("volume")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("volume"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_volume;
            ok &= ModelBase::fromJson(fieldValue, refVal_volume);
            setVolume(refVal_volume);
        }
    }
    return ok;
}

void BTMassPropertiesInfo_null::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CentroidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("centroid"), m_Centroid));
    }
    if(m_HasMassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasMass"), m_HasMass));
    }
    if(m_InertiaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inertia"), m_Inertia));
    }
    if(m_MassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mass"), m_Mass));
    }
    if(m_MassMissingCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("massMissingCount"), m_MassMissingCount));
    }
    if(m_PeripheryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("periphery"), m_Periphery));
    }
    if(m_PrincipalAxesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("principalAxes"), m_PrincipalAxes));
    }
    if(m_PrincipalInertiaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("principalInertia"), m_PrincipalInertia));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("volume"), m_Volume));
    }
}

bool BTMassPropertiesInfo_null::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("centroid")))
    {
        std::vector<double> refVal_centroid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("centroid")), refVal_centroid );
        setCentroid(refVal_centroid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasMass")))
    {
        bool refVal_hasMass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasMass")), refVal_hasMass );
        setHasMass(refVal_hasMass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inertia")))
    {
        std::vector<double> refVal_inertia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inertia")), refVal_inertia );
        setInertia(refVal_inertia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mass")))
    {
        std::vector<double> refVal_mass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mass")), refVal_mass );
        setMass(refVal_mass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("massMissingCount")))
    {
        int32_t refVal_massMissingCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("massMissingCount")), refVal_massMissingCount );
        setMassMissingCount(refVal_massMissingCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("periphery")))
    {
        std::vector<double> refVal_periphery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("periphery")), refVal_periphery );
        setPeriphery(refVal_periphery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("principalAxes")))
    {
        std::vector<std::shared_ptr<BTVector3d_389>> refVal_principalAxes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("principalAxes")), refVal_principalAxes );
        setPrincipalAxes(refVal_principalAxes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("principalInertia")))
    {
        std::vector<double> refVal_principalInertia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("principalInertia")), refVal_principalInertia );
        setPrincipalInertia(refVal_principalInertia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("volume")))
    {
        std::vector<double> refVal_volume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("volume")), refVal_volume );
        setVolume(refVal_volume);
    }
    return ok;
}

std::vector<double>& BTMassPropertiesInfo_null::getCentroid()
{
    return m_Centroid;
}

void BTMassPropertiesInfo_null::setCentroid(std::vector<double> value)
{
    m_Centroid = value;
    m_CentroidIsSet = true;
}

bool BTMassPropertiesInfo_null::centroidIsSet() const
{
    return m_CentroidIsSet;
}

void BTMassPropertiesInfo_null::unsetCentroid()
{
    m_CentroidIsSet = false;
}
bool BTMassPropertiesInfo_null::isHasMass() const
{
    return m_HasMass;
}

void BTMassPropertiesInfo_null::setHasMass(bool value)
{
    m_HasMass = value;
    m_HasMassIsSet = true;
}

bool BTMassPropertiesInfo_null::hasMassIsSet() const
{
    return m_HasMassIsSet;
}

void BTMassPropertiesInfo_null::unsetHasMass()
{
    m_HasMassIsSet = false;
}
std::vector<double>& BTMassPropertiesInfo_null::getInertia()
{
    return m_Inertia;
}

void BTMassPropertiesInfo_null::setInertia(std::vector<double> value)
{
    m_Inertia = value;
    m_InertiaIsSet = true;
}

bool BTMassPropertiesInfo_null::inertiaIsSet() const
{
    return m_InertiaIsSet;
}

void BTMassPropertiesInfo_null::unsetInertia()
{
    m_InertiaIsSet = false;
}
std::vector<double>& BTMassPropertiesInfo_null::getMass()
{
    return m_Mass;
}

void BTMassPropertiesInfo_null::setMass(std::vector<double> value)
{
    m_Mass = value;
    m_MassIsSet = true;
}

bool BTMassPropertiesInfo_null::massIsSet() const
{
    return m_MassIsSet;
}

void BTMassPropertiesInfo_null::unsetMass()
{
    m_MassIsSet = false;
}
int32_t BTMassPropertiesInfo_null::getMassMissingCount() const
{
    return m_MassMissingCount;
}

void BTMassPropertiesInfo_null::setMassMissingCount(int32_t value)
{
    m_MassMissingCount = value;
    m_MassMissingCountIsSet = true;
}

bool BTMassPropertiesInfo_null::massMissingCountIsSet() const
{
    return m_MassMissingCountIsSet;
}

void BTMassPropertiesInfo_null::unsetMassMissingCount()
{
    m_MassMissingCountIsSet = false;
}
std::vector<double>& BTMassPropertiesInfo_null::getPeriphery()
{
    return m_Periphery;
}

void BTMassPropertiesInfo_null::setPeriphery(std::vector<double> value)
{
    m_Periphery = value;
    m_PeripheryIsSet = true;
}

bool BTMassPropertiesInfo_null::peripheryIsSet() const
{
    return m_PeripheryIsSet;
}

void BTMassPropertiesInfo_null::unsetPeriphery()
{
    m_PeripheryIsSet = false;
}
std::vector<std::shared_ptr<BTVector3d_389>>& BTMassPropertiesInfo_null::getPrincipalAxes()
{
    return m_PrincipalAxes;
}

void BTMassPropertiesInfo_null::setPrincipalAxes(const std::vector<std::shared_ptr<BTVector3d_389>>& value)
{
    m_PrincipalAxes = value;
    m_PrincipalAxesIsSet = true;
}

bool BTMassPropertiesInfo_null::principalAxesIsSet() const
{
    return m_PrincipalAxesIsSet;
}

void BTMassPropertiesInfo_null::unsetPrincipalAxes()
{
    m_PrincipalAxesIsSet = false;
}
std::vector<double>& BTMassPropertiesInfo_null::getPrincipalInertia()
{
    return m_PrincipalInertia;
}

void BTMassPropertiesInfo_null::setPrincipalInertia(std::vector<double> value)
{
    m_PrincipalInertia = value;
    m_PrincipalInertiaIsSet = true;
}

bool BTMassPropertiesInfo_null::principalInertiaIsSet() const
{
    return m_PrincipalInertiaIsSet;
}

void BTMassPropertiesInfo_null::unsetPrincipalInertia()
{
    m_PrincipalInertiaIsSet = false;
}
std::vector<double>& BTMassPropertiesInfo_null::getVolume()
{
    return m_Volume;
}

void BTMassPropertiesInfo_null::setVolume(std::vector<double> value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}

bool BTMassPropertiesInfo_null::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void BTMassPropertiesInfo_null::unsetVolume()
{
    m_VolumeIsSet = false;
}
}
}
}
}


