/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTGraphicsAppearance_1152.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTGraphicsAppearance_1152_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTGraphicsAppearance_1152_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTGraphicsAppearance_1152
    : public ModelBase
{
public:
    BTGraphicsAppearance_1152();
    virtual ~BTGraphicsAppearance_1152();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTGraphicsAppearance_1152 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getColor();
    bool colorIsSet() const;
    void unsetColor();

    void setColor(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNonTrivial() const;
    bool nonTrivialIsSet() const;
    void unsetNonTrivial();

    void setNonTrivial(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOpacity() const;
    bool opacityIsSet() const;
    void unsetOpacity();

    void setOpacity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isReset() const;
    bool resetIsSet() const;
    void unsetReset();

    void setReset(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRgbaColor();
    bool rgbaColorIsSet() const;
    void unsetRgbaColor();

    void setRgbaColor(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUsableAppearance() const;
    bool usableAppearanceIsSet() const;
    void unsetUsableAppearance();

    void setUsableAppearance(bool value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    std::vector<utility::string_t> m_Color;
    bool m_ColorIsSet;
    bool m_NonTrivial;
    bool m_NonTrivialIsSet;
    int32_t m_Opacity;
    bool m_OpacityIsSet;
    bool m_Reset;
    bool m_ResetIsSet;
    std::vector<utility::string_t> m_RgbaColor;
    bool m_RgbaColorIsSet;
    bool m_UsableAppearance;
    bool m_UsableAppearanceIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTGraphicsAppearance_1152_H_ */
