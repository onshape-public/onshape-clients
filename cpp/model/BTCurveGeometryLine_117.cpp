/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCurveGeometryLine_117.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCurveGeometryLine_117::BTCurveGeometryLine_117()
{
    m_PntX = 0.0;
    m_PntXIsSet = false;
    m_PntY = 0.0;
    m_PntYIsSet = false;
    m_DirX = 0.0;
    m_DirXIsSet = false;
    m_DirY = 0.0;
    m_DirYIsSet = false;
}

BTCurveGeometryLine_117::~BTCurveGeometryLine_117()
{
}

void BTCurveGeometryLine_117::validate()
{
    // TODO: implement validation
}

web::json::value BTCurveGeometryLine_117::toJson() const
{
    web::json::value val = this->BTCurveGeometry_114::toJson();
    
    if(m_PntXIsSet)
    {
        val[utility::conversions::to_string_t("pntX")] = ModelBase::toJson(m_PntX);
    }
    if(m_PntYIsSet)
    {
        val[utility::conversions::to_string_t("pntY")] = ModelBase::toJson(m_PntY);
    }
    if(m_DirXIsSet)
    {
        val[utility::conversions::to_string_t("dirX")] = ModelBase::toJson(m_DirX);
    }
    if(m_DirYIsSet)
    {
        val[utility::conversions::to_string_t("dirY")] = ModelBase::toJson(m_DirY);
    }

    return val;
}

bool BTCurveGeometryLine_117::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTCurveGeometry_114::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("pntX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pntX"));
        if(!fieldValue.is_null())
        {
            double refVal_pntX;
            ok &= ModelBase::fromJson(fieldValue, refVal_pntX);
            setPntX(refVal_pntX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pntY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pntY"));
        if(!fieldValue.is_null())
        {
            double refVal_pntY;
            ok &= ModelBase::fromJson(fieldValue, refVal_pntY);
            setPntY(refVal_pntY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dirX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dirX"));
        if(!fieldValue.is_null())
        {
            double refVal_dirX;
            ok &= ModelBase::fromJson(fieldValue, refVal_dirX);
            setDirX(refVal_dirX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dirY")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dirY"));
        if(!fieldValue.is_null())
        {
            double refVal_dirY;
            ok &= ModelBase::fromJson(fieldValue, refVal_dirY);
            setDirY(refVal_dirY);
        }
    }
    return ok;
}

void BTCurveGeometryLine_117::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_PntXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pntX"), m_PntX));
    }
    if(m_PntYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pntY"), m_PntY));
    }
    if(m_DirXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dirX"), m_DirX));
    }
    if(m_DirYIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dirY"), m_DirY));
    }
}

bool BTCurveGeometryLine_117::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pntX")))
    {
        double refVal_pntX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pntX")), refVal_pntX );
        setPntX(refVal_pntX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pntY")))
    {
        double refVal_pntY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pntY")), refVal_pntY );
        setPntY(refVal_pntY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dirX")))
    {
        double refVal_dirX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dirX")), refVal_dirX );
        setDirX(refVal_dirX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dirY")))
    {
        double refVal_dirY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dirY")), refVal_dirY );
        setDirY(refVal_dirY);
    }
    return ok;
}

double BTCurveGeometryLine_117::getPntX() const
{
    return m_PntX;
}

void BTCurveGeometryLine_117::setPntX(double value)
{
    m_PntX = value;
    m_PntXIsSet = true;
}

bool BTCurveGeometryLine_117::pntXIsSet() const
{
    return m_PntXIsSet;
}

void BTCurveGeometryLine_117::unsetPntX()
{
    m_PntXIsSet = false;
}
double BTCurveGeometryLine_117::getPntY() const
{
    return m_PntY;
}

void BTCurveGeometryLine_117::setPntY(double value)
{
    m_PntY = value;
    m_PntYIsSet = true;
}

bool BTCurveGeometryLine_117::pntYIsSet() const
{
    return m_PntYIsSet;
}

void BTCurveGeometryLine_117::unsetPntY()
{
    m_PntYIsSet = false;
}
double BTCurveGeometryLine_117::getDirX() const
{
    return m_DirX;
}

void BTCurveGeometryLine_117::setDirX(double value)
{
    m_DirX = value;
    m_DirXIsSet = true;
}

bool BTCurveGeometryLine_117::dirXIsSet() const
{
    return m_DirXIsSet;
}

void BTCurveGeometryLine_117::unsetDirX()
{
    m_DirXIsSet = false;
}
double BTCurveGeometryLine_117::getDirY() const
{
    return m_DirY;
}

void BTCurveGeometryLine_117::setDirY(double value)
{
    m_DirY = value;
    m_DirYIsSet = true;
}

bool BTCurveGeometryLine_117::dirYIsSet() const
{
    return m_DirYIsSet;
}

void BTCurveGeometryLine_117::unsetDirY()
{
    m_DirYIsSet = false;
}
}
}
}
}


