/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BodyPart.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BodyPart_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BodyPart_H_


#include "../ModelBase.h"

#include "ParameterizedHeader.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"
#include "MultiPart.h"
#include <map>
#include <vector>
#include "BodyPart_mediaType.h"
#include "ContentDisposition.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BodyPart
    : public ModelBase
{
public:
    BodyPart();
    virtual ~BodyPart();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BodyPart members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ContentDisposition> getContentDisposition() const;
    bool contentDispositionIsSet() const;
    void unsetContentDisposition();

    void setContentDisposition(const std::shared_ptr<ContentDisposition>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getEntity() const;
    bool entityIsSet() const;
    void unsetEntity();

    void setEntity(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::vector<utility::string_t>>& getHeaders();
    bool headersIsSet() const;
    void unsetHeaders();

    void setHeaders(const std::map<utility::string_t, std::vector<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BodyPart_mediaType> getMediaType() const;
    bool mediaTypeIsSet() const;
    void unsetMediaType();

    void setMediaType(const std::shared_ptr<BodyPart_mediaType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getMessageBodyWorkers() const;
    bool messageBodyWorkersIsSet() const;
    void unsetMessageBodyWorkers();

    void setMessageBodyWorkers(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::vector<std::shared_ptr<ParameterizedHeader>>>& getParameterizedHeaders();
    bool parameterizedHeadersIsSet() const;
    void unsetParameterizedHeaders();

    void setParameterizedHeaders(const std::map<utility::string_t, std::vector<std::shared_ptr<ParameterizedHeader>>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MultiPart> getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(const std::shared_ptr<MultiPart>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getProviders() const;
    bool providersIsSet() const;
    void unsetProviders();

    void setProviders(const std::shared_ptr<Object>& value);


protected:
    std::shared_ptr<ContentDisposition> m_ContentDisposition;
    bool m_ContentDispositionIsSet;
    std::shared_ptr<Object> m_Entity;
    bool m_EntityIsSet;
    std::map<utility::string_t, std::vector<utility::string_t>> m_Headers;
    bool m_HeadersIsSet;
    std::shared_ptr<BodyPart_mediaType> m_MediaType;
    bool m_MediaTypeIsSet;
    std::shared_ptr<Object> m_MessageBodyWorkers;
    bool m_MessageBodyWorkersIsSet;
    std::map<utility::string_t, std::vector<std::shared_ptr<ParameterizedHeader>>> m_ParameterizedHeaders;
    bool m_ParameterizedHeadersIsSet;
    std::shared_ptr<MultiPart> m_Parent;
    bool m_ParentIsSet;
    std::shared_ptr<Object> m_Providers;
    bool m_ProvidersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BodyPart_H_ */
