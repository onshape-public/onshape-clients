/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTRootDiffInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootDiffInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootDiffInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "BTDiffInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTRootDiffInfo
    : public ModelBase
{
public:
    BTRootDiffInfo();
    virtual ~BTRootDiffInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTRootDiffInfo members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTDiffInfo>>& getChanges();
    bool changesIsSet() const;
    void unsetChanges();

    void setChanges(const std::map<utility::string_t, std::shared_ptr<BTDiffInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& getCollectionChanges();
    bool collectionChangesIsSet() const;
    void unsetCollectionChanges();

    void setCollectionChanges(const std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityType() const;
    bool entityTypeIsSet() const;
    void unsetEntityType();

    void setEntityType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getGeometryChangeMessages();
    bool geometryChangeMessagesIsSet() const;
    void unsetGeometryChangeMessages();

    void setGeometryChangeMessages(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceConfiguration() const;
    bool sourceConfigurationIsSet() const;
    void unsetSourceConfiguration();

    void setSourceConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceId() const;
    bool sourceIdIsSet() const;
    void unsetSourceId();

    void setSourceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceMicroversionId() const;
    bool sourceMicroversionIdIsSet() const;
    void unsetSourceMicroversionId();

    void setSourceMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceValue() const;
    bool sourceValueIsSet() const;
    void unsetSourceValue();

    void setSourceValue(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceVersionId() const;
    bool sourceVersionIdIsSet() const;
    void unsetSourceVersionId();

    void setSourceVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceWorkspaceId() const;
    bool sourceWorkspaceIdIsSet() const;
    void unsetSourceWorkspaceId();

    void setSourceWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetConfiguration() const;
    bool targetConfigurationIsSet() const;
    void unsetTargetConfiguration();

    void setTargetConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetId() const;
    bool targetIdIsSet() const;
    void unsetTargetId();

    void setTargetId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetMicroversionId() const;
    bool targetMicroversionIdIsSet() const;
    void unsetTargetMicroversionId();

    void setTargetMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetValue() const;
    bool targetValueIsSet() const;
    void unsetTargetValue();

    void setTargetValue(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetVersionId() const;
    bool targetVersionIdIsSet() const;
    void unsetTargetVersionId();

    void setTargetVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetWorkspaceId() const;
    bool targetWorkspaceIdIsSet() const;
    void unsetTargetWorkspaceId();

    void setTargetWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    std::map<utility::string_t, std::shared_ptr<BTDiffInfo>> m_Changes;
    bool m_ChangesIsSet;
    std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>> m_CollectionChanges;
    bool m_CollectionChangesIsSet;
    utility::string_t m_EntityType;
    bool m_EntityTypeIsSet;
    std::vector<utility::string_t> m_GeometryChangeMessages;
    bool m_GeometryChangeMessagesIsSet;
    utility::string_t m_SourceConfiguration;
    bool m_SourceConfigurationIsSet;
    utility::string_t m_SourceId;
    bool m_SourceIdIsSet;
    utility::string_t m_SourceMicroversionId;
    bool m_SourceMicroversionIdIsSet;
    utility::string_t m_SourceValue;
    bool m_SourceValueIsSet;
    utility::string_t m_SourceVersionId;
    bool m_SourceVersionIdIsSet;
    utility::string_t m_SourceWorkspaceId;
    bool m_SourceWorkspaceIdIsSet;
    utility::string_t m_TargetConfiguration;
    bool m_TargetConfigurationIsSet;
    utility::string_t m_TargetId;
    bool m_TargetIdIsSet;
    utility::string_t m_TargetMicroversionId;
    bool m_TargetMicroversionIdIsSet;
    utility::string_t m_TargetValue;
    bool m_TargetValueIsSet;
    utility::string_t m_TargetVersionId;
    bool m_TargetVersionIdIsSet;
    utility::string_t m_TargetWorkspaceId;
    bool m_TargetWorkspaceIdIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTRootDiffInfo_H_ */
