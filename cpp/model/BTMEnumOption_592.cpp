/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMEnumOption_592.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMEnumOption_592::BTMEnumOption_592()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_Option = utility::conversions::to_string_t("");
    m_OptionIsSet = false;
    m_OptionName = utility::conversions::to_string_t("");
    m_OptionNameIsSet = false;
}

BTMEnumOption_592::~BTMEnumOption_592()
{
}

void BTMEnumOption_592::validate()
{
    // TODO: implement validation
}

web::json::value BTMEnumOption_592::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_OptionIsSet)
    {
        val[utility::conversions::to_string_t("option")] = ModelBase::toJson(m_Option);
    }
    if(m_OptionNameIsSet)
    {
        val[utility::conversions::to_string_t("optionName")] = ModelBase::toJson(m_OptionName);
    }

    return val;
}

bool BTMEnumOption_592::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("option")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("option"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_option;
            ok &= ModelBase::fromJson(fieldValue, refVal_option);
            setOption(refVal_option);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("optionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_optionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_optionName);
            setOptionName(refVal_optionName);
        }
    }
    return ok;
}

void BTMEnumOption_592::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_OptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("option"), m_Option));
    }
    if(m_OptionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionName"), m_OptionName));
    }
}

bool BTMEnumOption_592::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("option")))
    {
        utility::string_t refVal_option;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("option")), refVal_option );
        setOption(refVal_option);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionName")))
    {
        utility::string_t refVal_optionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionName")), refVal_optionName );
        setOptionName(refVal_optionName);
    }
    return ok;
}

utility::string_t BTMEnumOption_592::getBtType() const
{
    return m_BtType;
}

void BTMEnumOption_592::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMEnumOption_592::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMEnumOption_592::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTMEnumOption_592::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMEnumOption_592::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMEnumOption_592::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMEnumOption_592::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMEnumOption_592::getNodeId() const
{
    return m_NodeId;
}

void BTMEnumOption_592::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMEnumOption_592::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMEnumOption_592::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTMEnumOption_592::getOption() const
{
    return m_Option;
}

void BTMEnumOption_592::setOption(const utility::string_t& value)
{
    m_Option = value;
    m_OptionIsSet = true;
}

bool BTMEnumOption_592::optionIsSet() const
{
    return m_OptionIsSet;
}

void BTMEnumOption_592::unsetOption()
{
    m_OptionIsSet = false;
}
utility::string_t BTMEnumOption_592::getOptionName() const
{
    return m_OptionName;
}

void BTMEnumOption_592::setOptionName(const utility::string_t& value)
{
    m_OptionName = value;
    m_OptionNameIsSet = true;
}

bool BTMEnumOption_592::optionNameIsSet() const
{
    return m_OptionNameIsSet;
}

void BTMEnumOption_592::unsetOptionName()
{
    m_OptionNameIsSet = false;
}
}
}
}
}


