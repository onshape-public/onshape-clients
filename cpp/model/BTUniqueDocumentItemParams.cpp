/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUniqueDocumentItemParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUniqueDocumentItemParams::BTUniqueDocumentItemParams()
{
    m_ApiConfiguration = utility::conversions::to_string_t("");
    m_ApiConfigurationIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementType = utility::conversions::to_string_t("");
    m_ElementTypeIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTUniqueDocumentItemParams::~BTUniqueDocumentItemParams()
{
}

void BTUniqueDocumentItemParams::validate()
{
    // TODO: implement validation
}

web::json::value BTUniqueDocumentItemParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApiConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("apiConfiguration")] = ModelBase::toJson(m_ApiConfiguration);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementTypeIsSet)
    {
        val[utility::conversions::to_string_t("elementType")] = ModelBase::toJson(m_ElementType);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTUniqueDocumentItemParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("apiConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("apiConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apiConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_apiConfiguration);
            setApiConfiguration(refVal_apiConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementType;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementType);
            setElementType(refVal_elementType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTUniqueDocumentItemParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ApiConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("apiConfiguration"), m_ApiConfiguration));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementType"), m_ElementType));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTUniqueDocumentItemParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("apiConfiguration")))
    {
        utility::string_t refVal_apiConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("apiConfiguration")), refVal_apiConfiguration );
        setApiConfiguration(refVal_apiConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementType")))
    {
        utility::string_t refVal_elementType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementType")), refVal_elementType );
        setElementType(refVal_elementType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

utility::string_t BTUniqueDocumentItemParams::getApiConfiguration() const
{
    return m_ApiConfiguration;
}

void BTUniqueDocumentItemParams::setApiConfiguration(const utility::string_t& value)
{
    m_ApiConfiguration = value;
    m_ApiConfigurationIsSet = true;
}

bool BTUniqueDocumentItemParams::apiConfigurationIsSet() const
{
    return m_ApiConfigurationIsSet;
}

void BTUniqueDocumentItemParams::unsetApiConfiguration()
{
    m_ApiConfigurationIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getDocumentId() const
{
    return m_DocumentId;
}

void BTUniqueDocumentItemParams::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTUniqueDocumentItemParams::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTUniqueDocumentItemParams::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getElementId() const
{
    return m_ElementId;
}

void BTUniqueDocumentItemParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTUniqueDocumentItemParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTUniqueDocumentItemParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getElementType() const
{
    return m_ElementType;
}

void BTUniqueDocumentItemParams::setElementType(const utility::string_t& value)
{
    m_ElementType = value;
    m_ElementTypeIsSet = true;
}

bool BTUniqueDocumentItemParams::elementTypeIsSet() const
{
    return m_ElementTypeIsSet;
}

void BTUniqueDocumentItemParams::unsetElementType()
{
    m_ElementTypeIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getPartId() const
{
    return m_PartId;
}

void BTUniqueDocumentItemParams::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTUniqueDocumentItemParams::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTUniqueDocumentItemParams::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getPartNumber() const
{
    return m_PartNumber;
}

void BTUniqueDocumentItemParams::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTUniqueDocumentItemParams::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTUniqueDocumentItemParams::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getRevision() const
{
    return m_Revision;
}

void BTUniqueDocumentItemParams::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTUniqueDocumentItemParams::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTUniqueDocumentItemParams::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getVersionId() const
{
    return m_VersionId;
}

void BTUniqueDocumentItemParams::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTUniqueDocumentItemParams::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTUniqueDocumentItemParams::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTUniqueDocumentItemParams::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTUniqueDocumentItemParams::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTUniqueDocumentItemParams::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTUniqueDocumentItemParams::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


