/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssociativeDataInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssociativeDataInfo::BTAssociativeDataInfo()
{
    m_AssociativeDataId = utility::conversions::to_string_t("");
    m_AssociativeDataIdIsSet = false;
    m_DataIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentMicroversion = utility::conversions::to_string_t("");
    m_DocumentMicroversionIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_IdTag = utility::conversions::to_string_t("");
    m_IdTagIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_OccurrenceId = utility::conversions::to_string_t("");
    m_OccurrenceIdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
}

BTAssociativeDataInfo::~BTAssociativeDataInfo()
{
}

void BTAssociativeDataInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAssociativeDataInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AssociativeDataIdIsSet)
    {
        val[utility::conversions::to_string_t("associativeDataId")] = ModelBase::toJson(m_AssociativeDataId);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("documentMicroversion")] = ModelBase::toJson(m_DocumentMicroversion);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_IdTagIsSet)
    {
        val[utility::conversions::to_string_t("idTag")] = ModelBase::toJson(m_IdTag);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_OccurrenceIdIsSet)
    {
        val[utility::conversions::to_string_t("occurrenceId")] = ModelBase::toJson(m_OccurrenceId);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }

    return val;
}

bool BTAssociativeDataInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("associativeDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("associativeDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_associativeDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_associativeDataId);
            setAssociativeDataId(refVal_associativeDataId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTNameValuePair>> refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentMicroversion);
            setDocumentMicroversion(refVal_documentMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idTag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idTag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_idTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_idTag);
            setIdTag(refVal_idTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occurrenceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("occurrenceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_occurrenceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_occurrenceId);
            setOccurrenceId(refVal_occurrenceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    return ok;
}

void BTAssociativeDataInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AssociativeDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("associativeDataId"), m_AssociativeDataId));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentMicroversion"), m_DocumentMicroversion));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_IdTagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idTag"), m_IdTag));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_OccurrenceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occurrenceId"), m_OccurrenceId));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
}

bool BTAssociativeDataInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("associativeDataId")))
    {
        utility::string_t refVal_associativeDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("associativeDataId")), refVal_associativeDataId );
        setAssociativeDataId(refVal_associativeDataId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        std::vector<std::shared_ptr<BTNameValuePair>> refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentMicroversion")))
    {
        utility::string_t refVal_documentMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentMicroversion")), refVal_documentMicroversion );
        setDocumentMicroversion(refVal_documentMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idTag")))
    {
        utility::string_t refVal_idTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idTag")), refVal_idTag );
        setIdTag(refVal_idTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occurrenceId")))
    {
        utility::string_t refVal_occurrenceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("occurrenceId")), refVal_occurrenceId );
        setOccurrenceId(refVal_occurrenceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    return ok;
}

utility::string_t BTAssociativeDataInfo::getAssociativeDataId() const
{
    return m_AssociativeDataId;
}

void BTAssociativeDataInfo::setAssociativeDataId(const utility::string_t& value)
{
    m_AssociativeDataId = value;
    m_AssociativeDataIdIsSet = true;
}

bool BTAssociativeDataInfo::associativeDataIdIsSet() const
{
    return m_AssociativeDataIdIsSet;
}

void BTAssociativeDataInfo::unsetAssociativeDataId()
{
    m_AssociativeDataIdIsSet = false;
}
std::vector<std::shared_ptr<BTNameValuePair>>& BTAssociativeDataInfo::getData()
{
    return m_Data;
}

void BTAssociativeDataInfo::setData(const std::vector<std::shared_ptr<BTNameValuePair>>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool BTAssociativeDataInfo::dataIsSet() const
{
    return m_DataIsSet;
}

void BTAssociativeDataInfo::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTAssociativeDataInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTAssociativeDataInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTAssociativeDataInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getDocumentMicroversion() const
{
    return m_DocumentMicroversion;
}

void BTAssociativeDataInfo::setDocumentMicroversion(const utility::string_t& value)
{
    m_DocumentMicroversion = value;
    m_DocumentMicroversionIsSet = true;
}

bool BTAssociativeDataInfo::documentMicroversionIsSet() const
{
    return m_DocumentMicroversionIsSet;
}

void BTAssociativeDataInfo::unsetDocumentMicroversion()
{
    m_DocumentMicroversionIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getElementId() const
{
    return m_ElementId;
}

void BTAssociativeDataInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTAssociativeDataInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTAssociativeDataInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getIdTag() const
{
    return m_IdTag;
}

void BTAssociativeDataInfo::setIdTag(const utility::string_t& value)
{
    m_IdTag = value;
    m_IdTagIsSet = true;
}

bool BTAssociativeDataInfo::idTagIsSet() const
{
    return m_IdTagIsSet;
}

void BTAssociativeDataInfo::unsetIdTag()
{
    m_IdTagIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTAssociativeDataInfo::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTAssociativeDataInfo::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTAssociativeDataInfo::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getOccurrenceId() const
{
    return m_OccurrenceId;
}

void BTAssociativeDataInfo::setOccurrenceId(const utility::string_t& value)
{
    m_OccurrenceId = value;
    m_OccurrenceIdIsSet = true;
}

bool BTAssociativeDataInfo::occurrenceIdIsSet() const
{
    return m_OccurrenceIdIsSet;
}

void BTAssociativeDataInfo::unsetOccurrenceId()
{
    m_OccurrenceIdIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getType() const
{
    return m_Type;
}

void BTAssociativeDataInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTAssociativeDataInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTAssociativeDataInfo::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BTAssociativeDataInfo::getVersionId() const
{
    return m_VersionId;
}

void BTAssociativeDataInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTAssociativeDataInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTAssociativeDataInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
}
}
}
}


