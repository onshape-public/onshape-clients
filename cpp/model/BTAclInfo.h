/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTAclInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTAclInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTAclInfo_H_


#include "../ModelBase.h"

#include "BTInheritedAclInfo.h"
#include "BTAclEntryInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "BTOwnerInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTAclInfo
    : public ModelBase
{
public:
    BTAclInfo();
    virtual ~BTAclInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTAclInfo members

    /// <summary>
    /// 
    /// </summary>
    bool isAdmin() const;
    bool adminIsSet() const;
    void unsetAdmin();

    void setAdmin(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAclEntryInfo>>& getEntries();
    bool entriesIsSet() const;
    void unsetEntries();

    void setEntries(const std::vector<std::shared_ptr<BTAclEntryInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTInheritedAclInfo>>& getInheritedAcls();
    bool inheritedAclsIsSet() const;
    void unsetInheritedAcls();

    void setInheritedAcls(const std::vector<std::shared_ptr<BTInheritedAclInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObjectId() const;
    bool objectIdIsSet() const;
    void unsetObjectId();

    void setObjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getObjectType() const;
    bool objectTypeIsSet() const;
    void unsetObjectType();

    void setObjectType(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTOwnerInfo> getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const std::shared_ptr<BTOwnerInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isRPublic() const;
    bool rPublicIsSet() const;
    void unsetr_public();

    void setRPublic(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSharedWithSupport() const;
    bool sharedWithSupportIsSet() const;
    void unsetSharedWithSupport();

    void setSharedWithSupport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVisibility() const;
    bool visibilityIsSet() const;
    void unsetVisibility();

    void setVisibility(const utility::string_t& value);


protected:
    bool m_Admin;
    bool m_AdminIsSet;
    std::vector<std::shared_ptr<BTAclEntryInfo>> m_Entries;
    bool m_EntriesIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::vector<std::shared_ptr<BTInheritedAclInfo>> m_InheritedAcls;
    bool m_InheritedAclsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_ObjectId;
    bool m_ObjectIdIsSet;
    int64_t m_ObjectType;
    bool m_ObjectTypeIsSet;
    std::shared_ptr<BTOwnerInfo> m_Owner;
    bool m_OwnerIsSet;
    bool m_r_public;
    bool m_r_publicIsSet;
    bool m_SharedWithSupport;
    bool m_SharedWithSupportIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
    utility::string_t m_Visibility;
    bool m_VisibilityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTAclInfo_H_ */
