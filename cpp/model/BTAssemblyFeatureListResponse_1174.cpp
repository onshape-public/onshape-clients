/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyFeatureListResponse_1174.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyFeatureListResponse_1174::BTAssemblyFeatureListResponse_1174()
{
    m_FeaturesIsSet = false;
    m_IsComplete = false;
    m_IsCompleteIsSet = false;
    m_FeatureStatesIsSet = false;
}

BTAssemblyFeatureListResponse_1174::~BTAssemblyFeatureListResponse_1174()
{
}

void BTAssemblyFeatureListResponse_1174::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyFeatureListResponse_1174::toJson() const
{
    web::json::value val = this->BTFeatureApiBase_1430::toJson();
    
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);
    }
    if(m_IsCompleteIsSet)
    {
        val[utility::conversions::to_string_t("isComplete")] = ModelBase::toJson(m_IsComplete);
    }
    if(m_FeatureStatesIsSet)
    {
        val[utility::conversions::to_string_t("featureStates")] = ModelBase::toJson(m_FeatureStates);
    }

    return val;
}

bool BTAssemblyFeatureListResponse_1174::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTFeatureApiBase_1430::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("features")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("features"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMAssemblyFeature_887>> refVal_features;
            ok &= ModelBase::fromJson(fieldValue, refVal_features);
            setFeatures(refVal_features);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isComplete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isComplete"));
        if(!fieldValue.is_null())
        {
            bool refVal_isComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_isComplete);
            setIsComplete(refVal_isComplete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureStates")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureStates"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>> refVal_featureStates;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureStates);
            setFeatureStates(refVal_featureStates);
        }
    }
    return ok;
}

void BTAssemblyFeatureListResponse_1174::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_LibraryVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryVersion"), m_LibraryVersion));
    }
    if(m_MicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionSkew"), m_MicroversionSkew));
    }
    if(m_RejectMicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rejectMicroversionSkew"), m_RejectMicroversionSkew));
    }
    if(m_SerializationVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serializationVersion"), m_SerializationVersion));
    }
    if(m_SourceMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversion"), m_SourceMicroversion));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), m_Features));
    }
    if(m_IsCompleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isComplete"), m_IsComplete));
    }
    if(m_FeatureStatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureStates"), m_FeatureStates));
    }
}

bool BTAssemblyFeatureListResponse_1174::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryVersion")))
    {
        int32_t refVal_libraryVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryVersion")), refVal_libraryVersion );
        setLibraryVersion(refVal_libraryVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionSkew")))
    {
        bool refVal_microversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionSkew")), refVal_microversionSkew );
        setMicroversionSkew(refVal_microversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rejectMicroversionSkew")))
    {
        bool refVal_rejectMicroversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rejectMicroversionSkew")), refVal_rejectMicroversionSkew );
        setRejectMicroversionSkew(refVal_rejectMicroversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serializationVersion")))
    {
        utility::string_t refVal_serializationVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serializationVersion")), refVal_serializationVersion );
        setSerializationVersion(refVal_serializationVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversion")))
    {
        utility::string_t refVal_sourceMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversion")), refVal_sourceMicroversion );
        setSourceMicroversion(refVal_sourceMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("features")))
    {
        std::vector<std::shared_ptr<BTMAssemblyFeature_887>> refVal_features;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("features")), refVal_features );
        setFeatures(refVal_features);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isComplete")))
    {
        bool refVal_isComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isComplete")), refVal_isComplete );
        setIsComplete(refVal_isComplete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureStates")))
    {
        std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>> refVal_featureStates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureStates")), refVal_featureStates );
        setFeatureStates(refVal_featureStates);
    }
    return ok;
}

std::vector<std::shared_ptr<BTMAssemblyFeature_887>>& BTAssemblyFeatureListResponse_1174::getFeatures()
{
    return m_Features;
}

void BTAssemblyFeatureListResponse_1174::setFeatures(const std::vector<std::shared_ptr<BTMAssemblyFeature_887>>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool BTAssemblyFeatureListResponse_1174::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void BTAssemblyFeatureListResponse_1174::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
bool BTAssemblyFeatureListResponse_1174::isIsComplete() const
{
    return m_IsComplete;
}

void BTAssemblyFeatureListResponse_1174::setIsComplete(bool value)
{
    m_IsComplete = value;
    m_IsCompleteIsSet = true;
}

bool BTAssemblyFeatureListResponse_1174::isCompleteIsSet() const
{
    return m_IsCompleteIsSet;
}

void BTAssemblyFeatureListResponse_1174::unsetIsComplete()
{
    m_IsCompleteIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>>& BTAssemblyFeatureListResponse_1174::getFeatureStates()
{
    return m_FeatureStates;
}

void BTAssemblyFeatureListResponse_1174::setFeatureStates(const std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>>& value)
{
    m_FeatureStates = value;
    m_FeatureStatesIsSet = true;
}

bool BTAssemblyFeatureListResponse_1174::featureStatesIsSet() const
{
    return m_FeatureStatesIsSet;
}

void BTAssemblyFeatureListResponse_1174::unsetFeatureStates()
{
    m_FeatureStatesIsSet = false;
}
}
}
}
}


