/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDiscountInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDiscountInfo::BTDiscountInfo()
{
    m_AccountBalance = 0;
    m_AccountBalanceIsSet = false;
    m_AmountOff = 0;
    m_AmountOffIsSet = false;
    m_CouponType = 0;
    m_CouponTypeIsSet = false;
    m_CouponValidMonths = 0;
    m_CouponValidMonthsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_CreatedByIsSet = false;
    m_ExpiresAt = utility::datetime();
    m_ExpiresAtIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_PercentOff = 0;
    m_PercentOffIsSet = false;
    m_PlanId = utility::conversions::to_string_t("");
    m_PlanIdIsSet = false;
    m_TrialEndDate = utility::conversions::to_string_t("");
    m_TrialEndDateIsSet = false;
    m_UsedAt = utility::datetime();
    m_UsedAtIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTDiscountInfo::~BTDiscountInfo()
{
}

void BTDiscountInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDiscountInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountBalanceIsSet)
    {
        val[utility::conversions::to_string_t("accountBalance")] = ModelBase::toJson(m_AccountBalance);
    }
    if(m_AmountOffIsSet)
    {
        val[utility::conversions::to_string_t("amountOff")] = ModelBase::toJson(m_AmountOff);
    }
    if(m_CouponTypeIsSet)
    {
        val[utility::conversions::to_string_t("couponType")] = ModelBase::toJson(m_CouponType);
    }
    if(m_CouponValidMonthsIsSet)
    {
        val[utility::conversions::to_string_t("couponValidMonths")] = ModelBase::toJson(m_CouponValidMonths);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t("createdBy")] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_ExpiresAtIsSet)
    {
        val[utility::conversions::to_string_t("expiresAt")] = ModelBase::toJson(m_ExpiresAt);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_PercentOffIsSet)
    {
        val[utility::conversions::to_string_t("percentOff")] = ModelBase::toJson(m_PercentOff);
    }
    if(m_PlanIdIsSet)
    {
        val[utility::conversions::to_string_t("planId")] = ModelBase::toJson(m_PlanId);
    }
    if(m_TrialEndDateIsSet)
    {
        val[utility::conversions::to_string_t("trialEndDate")] = ModelBase::toJson(m_TrialEndDate);
    }
    if(m_UsedAtIsSet)
    {
        val[utility::conversions::to_string_t("usedAt")] = ModelBase::toJson(m_UsedAt);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTDiscountInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("accountBalance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("accountBalance"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_accountBalance;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountBalance);
            setAccountBalance(refVal_accountBalance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amountOff")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amountOff"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_amountOff;
            ok &= ModelBase::fromJson(fieldValue, refVal_amountOff);
            setAmountOff(refVal_amountOff);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("couponType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("couponType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_couponType;
            ok &= ModelBase::fromJson(fieldValue, refVal_couponType);
            setCouponType(refVal_couponType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("couponValidMonths")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("couponValidMonths"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_couponValidMonths;
            ok &= ModelBase::fromJson(fieldValue, refVal_couponValidMonths);
            setCouponValidMonths(refVal_couponValidMonths);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expiresAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expiresAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAt);
            setExpiresAt(refVal_expiresAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("percentOff")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("percentOff"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_percentOff;
            ok &= ModelBase::fromJson(fieldValue, refVal_percentOff);
            setPercentOff(refVal_percentOff);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_planId;
            ok &= ModelBase::fromJson(fieldValue, refVal_planId);
            setPlanId(refVal_planId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trialEndDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trialEndDate"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_trialEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_trialEndDate);
            setTrialEndDate(refVal_trialEndDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("usedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_usedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_usedAt);
            setUsedAt(refVal_usedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTDiscountInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AccountBalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accountBalance"), m_AccountBalance));
    }
    if(m_AmountOffIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amountOff"), m_AmountOff));
    }
    if(m_CouponTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("couponType"), m_CouponType));
    }
    if(m_CouponValidMonthsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("couponValidMonths"), m_CouponValidMonths));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_ExpiresAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expiresAt"), m_ExpiresAt));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_PercentOffIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("percentOff"), m_PercentOff));
    }
    if(m_PlanIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planId"), m_PlanId));
    }
    if(m_TrialEndDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trialEndDate"), m_TrialEndDate));
    }
    if(m_UsedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("usedAt"), m_UsedAt));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTDiscountInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("accountBalance")))
    {
        int32_t refVal_accountBalance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("accountBalance")), refVal_accountBalance );
        setAccountBalance(refVal_accountBalance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amountOff")))
    {
        int32_t refVal_amountOff;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amountOff")), refVal_amountOff );
        setAmountOff(refVal_amountOff);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("couponType")))
    {
        int32_t refVal_couponType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("couponType")), refVal_couponType );
        setCouponType(refVal_couponType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("couponValidMonths")))
    {
        int32_t refVal_couponValidMonths;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("couponValidMonths")), refVal_couponValidMonths );
        setCouponValidMonths(refVal_couponValidMonths);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expiresAt")))
    {
        utility::datetime refVal_expiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expiresAt")), refVal_expiresAt );
        setExpiresAt(refVal_expiresAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("percentOff")))
    {
        int32_t refVal_percentOff;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("percentOff")), refVal_percentOff );
        setPercentOff(refVal_percentOff);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planId")))
    {
        utility::string_t refVal_planId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planId")), refVal_planId );
        setPlanId(refVal_planId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trialEndDate")))
    {
        utility::string_t refVal_trialEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trialEndDate")), refVal_trialEndDate );
        setTrialEndDate(refVal_trialEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usedAt")))
    {
        utility::datetime refVal_usedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("usedAt")), refVal_usedAt );
        setUsedAt(refVal_usedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

int32_t BTDiscountInfo::getAccountBalance() const
{
    return m_AccountBalance;
}

void BTDiscountInfo::setAccountBalance(int32_t value)
{
    m_AccountBalance = value;
    m_AccountBalanceIsSet = true;
}

bool BTDiscountInfo::accountBalanceIsSet() const
{
    return m_AccountBalanceIsSet;
}

void BTDiscountInfo::unsetAccountBalance()
{
    m_AccountBalanceIsSet = false;
}
int32_t BTDiscountInfo::getAmountOff() const
{
    return m_AmountOff;
}

void BTDiscountInfo::setAmountOff(int32_t value)
{
    m_AmountOff = value;
    m_AmountOffIsSet = true;
}

bool BTDiscountInfo::amountOffIsSet() const
{
    return m_AmountOffIsSet;
}

void BTDiscountInfo::unsetAmountOff()
{
    m_AmountOffIsSet = false;
}
int32_t BTDiscountInfo::getCouponType() const
{
    return m_CouponType;
}

void BTDiscountInfo::setCouponType(int32_t value)
{
    m_CouponType = value;
    m_CouponTypeIsSet = true;
}

bool BTDiscountInfo::couponTypeIsSet() const
{
    return m_CouponTypeIsSet;
}

void BTDiscountInfo::unsetCouponType()
{
    m_CouponTypeIsSet = false;
}
int32_t BTDiscountInfo::getCouponValidMonths() const
{
    return m_CouponValidMonths;
}

void BTDiscountInfo::setCouponValidMonths(int32_t value)
{
    m_CouponValidMonths = value;
    m_CouponValidMonthsIsSet = true;
}

bool BTDiscountInfo::couponValidMonthsIsSet() const
{
    return m_CouponValidMonthsIsSet;
}

void BTDiscountInfo::unsetCouponValidMonths()
{
    m_CouponValidMonthsIsSet = false;
}
utility::datetime BTDiscountInfo::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTDiscountInfo::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTDiscountInfo::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTDiscountInfo::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTDiscountInfo::getCreatedBy() const
{
    return m_CreatedBy;
}

void BTDiscountInfo::setCreatedBy(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool BTDiscountInfo::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void BTDiscountInfo::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::datetime BTDiscountInfo::getExpiresAt() const
{
    return m_ExpiresAt;
}

void BTDiscountInfo::setExpiresAt(const utility::datetime& value)
{
    m_ExpiresAt = value;
    m_ExpiresAtIsSet = true;
}

bool BTDiscountInfo::expiresAtIsSet() const
{
    return m_ExpiresAtIsSet;
}

void BTDiscountInfo::unsetExpiresAt()
{
    m_ExpiresAtIsSet = false;
}
utility::string_t BTDiscountInfo::getHref() const
{
    return m_Href;
}

void BTDiscountInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTDiscountInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTDiscountInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTDiscountInfo::getId() const
{
    return m_Id;
}

void BTDiscountInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTDiscountInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTDiscountInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTDiscountInfo::getName() const
{
    return m_Name;
}

void BTDiscountInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTDiscountInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTDiscountInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTDiscountInfo::getOwnerId() const
{
    return m_OwnerId;
}

void BTDiscountInfo::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTDiscountInfo::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTDiscountInfo::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
int32_t BTDiscountInfo::getPercentOff() const
{
    return m_PercentOff;
}

void BTDiscountInfo::setPercentOff(int32_t value)
{
    m_PercentOff = value;
    m_PercentOffIsSet = true;
}

bool BTDiscountInfo::percentOffIsSet() const
{
    return m_PercentOffIsSet;
}

void BTDiscountInfo::unsetPercentOff()
{
    m_PercentOffIsSet = false;
}
utility::string_t BTDiscountInfo::getPlanId() const
{
    return m_PlanId;
}

void BTDiscountInfo::setPlanId(const utility::string_t& value)
{
    m_PlanId = value;
    m_PlanIdIsSet = true;
}

bool BTDiscountInfo::planIdIsSet() const
{
    return m_PlanIdIsSet;
}

void BTDiscountInfo::unsetPlanId()
{
    m_PlanIdIsSet = false;
}
utility::string_t BTDiscountInfo::getTrialEndDate() const
{
    return m_TrialEndDate;
}

void BTDiscountInfo::setTrialEndDate(const utility::string_t& value)
{
    m_TrialEndDate = value;
    m_TrialEndDateIsSet = true;
}

bool BTDiscountInfo::trialEndDateIsSet() const
{
    return m_TrialEndDateIsSet;
}

void BTDiscountInfo::unsetTrialEndDate()
{
    m_TrialEndDateIsSet = false;
}
utility::datetime BTDiscountInfo::getUsedAt() const
{
    return m_UsedAt;
}

void BTDiscountInfo::setUsedAt(const utility::datetime& value)
{
    m_UsedAt = value;
    m_UsedAtIsSet = true;
}

bool BTDiscountInfo::usedAtIsSet() const
{
    return m_UsedAtIsSet;
}

void BTDiscountInfo::unsetUsedAt()
{
    m_UsedAtIsSet = false;
}
utility::string_t BTDiscountInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTDiscountInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTDiscountInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTDiscountInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


