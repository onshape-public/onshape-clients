/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureSpec_129.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureSpec_129::BTFeatureSpec_129()
{
    m_AdditionalLocalizedStrings = 0;
    m_AdditionalLocalizedStringsIsSet = false;
    m_AllParametersIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_EditingLogicIsSet = false;
    m_FeatureNameTemplate = utility::conversions::to_string_t("");
    m_FeatureNameTemplateIsSet = false;
    m_FeatureType = utility::conversions::to_string_t("");
    m_FeatureTypeIsSet = false;
    m_FeatureTypeName = utility::conversions::to_string_t("");
    m_FeatureTypeNameIsSet = false;
    m_FilterSelectorsIsSet = false;
    m_FullFeatureType = utility::conversions::to_string_t("");
    m_FullFeatureTypeIsSet = false;
    m_GroupsIsSet = false;
    m_IconUri = utility::conversions::to_string_t("");
    m_IconUriIsSet = false;
    m_LanguageVersion = 0;
    m_LanguageVersionIsSet = false;
    m_LinkedLocationName = utility::conversions::to_string_t("");
    m_LinkedLocationNameIsSet = false;
    m_LocalizableName = utility::conversions::to_string_t("");
    m_LocalizableNameIsSet = false;
    m_LocalizedName = utility::conversions::to_string_t("");
    m_LocalizedNameIsSet = false;
    m_LocationInfosIsSet = false;
    m_ManipulatorChangeFunction = utility::conversions::to_string_t("");
    m_ManipulatorChangeFunctionIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_NamespaceIncludingEnums = utility::conversions::to_string_t("");
    m_NamespaceIncludingEnumsIsSet = false;
    m_NamespaceTheSource = false;
    m_NamespaceTheSourceIsSet = false;
    m_ParametersIsSet = false;
    m_Signature = utility::conversions::to_string_t("");
    m_SignatureIsSet = false;
    m_SourceLocationIsSet = false;
    m_SourceMicroversionId = utility::conversions::to_string_t("");
    m_SourceMicroversionIdIsSet = false;
    m_StringsToLocalizeIsSet = false;
    m_TableSpec = false;
    m_TableSpecIsSet = false;
    m_UiHintsIsSet = false;
}

BTFeatureSpec_129::~BTFeatureSpec_129()
{
}

void BTFeatureSpec_129::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureSpec_129::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdditionalLocalizedStringsIsSet)
    {
        val[utility::conversions::to_string_t("additionalLocalizedStrings")] = ModelBase::toJson(m_AdditionalLocalizedStrings);
    }
    if(m_AllParametersIsSet)
    {
        val[utility::conversions::to_string_t("allParameters")] = ModelBase::toJson(m_AllParameters);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_EditingLogicIsSet)
    {
        val[utility::conversions::to_string_t("editingLogic")] = ModelBase::toJson(m_EditingLogic);
    }
    if(m_FeatureNameTemplateIsSet)
    {
        val[utility::conversions::to_string_t("featureNameTemplate")] = ModelBase::toJson(m_FeatureNameTemplate);
    }
    if(m_FeatureTypeIsSet)
    {
        val[utility::conversions::to_string_t("featureType")] = ModelBase::toJson(m_FeatureType);
    }
    if(m_FeatureTypeNameIsSet)
    {
        val[utility::conversions::to_string_t("featureTypeName")] = ModelBase::toJson(m_FeatureTypeName);
    }
    if(m_FilterSelectorsIsSet)
    {
        val[utility::conversions::to_string_t("filterSelectors")] = ModelBase::toJson(m_FilterSelectors);
    }
    if(m_FullFeatureTypeIsSet)
    {
        val[utility::conversions::to_string_t("fullFeatureType")] = ModelBase::toJson(m_FullFeatureType);
    }
    if(m_GroupsIsSet)
    {
        val[utility::conversions::to_string_t("groups")] = ModelBase::toJson(m_Groups);
    }
    if(m_IconUriIsSet)
    {
        val[utility::conversions::to_string_t("iconUri")] = ModelBase::toJson(m_IconUri);
    }
    if(m_LanguageVersionIsSet)
    {
        val[utility::conversions::to_string_t("languageVersion")] = ModelBase::toJson(m_LanguageVersion);
    }
    if(m_LinkedLocationNameIsSet)
    {
        val[utility::conversions::to_string_t("linkedLocationName")] = ModelBase::toJson(m_LinkedLocationName);
    }
    if(m_LocalizableNameIsSet)
    {
        val[utility::conversions::to_string_t("localizableName")] = ModelBase::toJson(m_LocalizableName);
    }
    if(m_LocalizedNameIsSet)
    {
        val[utility::conversions::to_string_t("localizedName")] = ModelBase::toJson(m_LocalizedName);
    }
    if(m_LocationInfosIsSet)
    {
        val[utility::conversions::to_string_t("locationInfos")] = ModelBase::toJson(m_LocationInfos);
    }
    if(m_ManipulatorChangeFunctionIsSet)
    {
        val[utility::conversions::to_string_t("manipulatorChangeFunction")] = ModelBase::toJson(m_ManipulatorChangeFunction);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_NamespaceIncludingEnumsIsSet)
    {
        val[utility::conversions::to_string_t("namespaceIncludingEnums")] = ModelBase::toJson(m_NamespaceIncludingEnums);
    }
    if(m_NamespaceTheSourceIsSet)
    {
        val[utility::conversions::to_string_t("namespaceTheSource")] = ModelBase::toJson(m_NamespaceTheSource);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_SignatureIsSet)
    {
        val[utility::conversions::to_string_t("signature")] = ModelBase::toJson(m_Signature);
    }
    if(m_SourceLocationIsSet)
    {
        val[utility::conversions::to_string_t("sourceLocation")] = ModelBase::toJson(m_SourceLocation);
    }
    if(m_SourceMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceMicroversionId")] = ModelBase::toJson(m_SourceMicroversionId);
    }
    if(m_StringsToLocalizeIsSet)
    {
        val[utility::conversions::to_string_t("stringsToLocalize")] = ModelBase::toJson(m_StringsToLocalize);
    }
    if(m_TableSpecIsSet)
    {
        val[utility::conversions::to_string_t("tableSpec")] = ModelBase::toJson(m_TableSpec);
    }
    if(m_UiHintsIsSet)
    {
        val[utility::conversions::to_string_t("uiHints")] = ModelBase::toJson(m_UiHints);
    }

    return val;
}

bool BTFeatureSpec_129::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalLocalizedStrings"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_additionalLocalizedStrings;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalLocalizedStrings);
            setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allParameters"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_allParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_allParameters);
            setAllParameters(refVal_allParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editingLogic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editingLogic"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTEditingLogic_2350> refVal_editingLogic;
            ok &= ModelBase::fromJson(fieldValue, refVal_editingLogic);
            setEditingLogic(refVal_editingLogic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureNameTemplate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureNameTemplate"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureNameTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureNameTemplate);
            setFeatureNameTemplate(refVal_featureNameTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureType);
            setFeatureType(refVal_featureType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureTypeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureTypeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureTypeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureTypeName);
            setFeatureTypeName(refVal_featureTypeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filterSelectors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filterSelectors"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_filterSelectors;
            ok &= ModelBase::fromJson(fieldValue, refVal_filterSelectors);
            setFilterSelectors(refVal_filterSelectors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullFeatureType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fullFeatureType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullFeatureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullFeatureType);
            setFullFeatureType(refVal_fullFeatureType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groups")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groups"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTParameterGroupSpec_3469>> refVal_groups;
            ok &= ModelBase::fromJson(fieldValue, refVal_groups);
            setGroups(refVal_groups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iconUri")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iconUri"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iconUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_iconUri);
            setIconUri(refVal_iconUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("languageVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("languageVersion"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_languageVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_languageVersion);
            setLanguageVersion(refVal_languageVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkedLocationName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkedLocationName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkedLocationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkedLocationName);
            setLinkedLocationName(refVal_linkedLocationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizableName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizableName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizableName);
            setLocalizableName(refVal_localizableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizedName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizedName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizedName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizedName);
            setLocalizedName(refVal_localizedName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationInfos")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationInfos"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_locationInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationInfos);
            setLocationInfos(refVal_locationInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("manipulatorChangeFunction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("manipulatorChangeFunction"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_manipulatorChangeFunction;
            ok &= ModelBase::fromJson(fieldValue, refVal_manipulatorChangeFunction);
            setManipulatorChangeFunction(refVal_manipulatorChangeFunction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespaceIncludingEnums")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespaceIncludingEnums"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespaceIncludingEnums;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespaceIncludingEnums);
            setNamespaceIncludingEnums(refVal_namespaceIncludingEnums);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespaceTheSource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespaceTheSource"));
        if(!fieldValue.is_null())
        {
            bool refVal_namespaceTheSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespaceTheSource);
            setNamespaceTheSource(refVal_namespaceTheSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signature"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_signature);
            setSignature(refVal_signature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceLocation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceLocation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTLocationInfo_226> refVal_sourceLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceLocation);
            setSourceLocation(refVal_sourceLocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceMicroversionId);
            setSourceMicroversionId(refVal_sourceMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringsToLocalize")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stringsToLocalize"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_stringsToLocalize;
            ok &= ModelBase::fromJson(fieldValue, refVal_stringsToLocalize);
            setStringsToLocalize(refVal_stringsToLocalize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tableSpec")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tableSpec"));
        if(!fieldValue.is_null())
        {
            bool refVal_tableSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_tableSpec);
            setTableSpec(refVal_tableSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiHints")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiHints"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_uiHints;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiHints);
            setUiHints(refVal_uiHints);
        }
    }
    return ok;
}

void BTFeatureSpec_129::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_AllParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allParameters"), m_AllParameters));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_EditingLogicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editingLogic"), m_EditingLogic));
    }
    if(m_FeatureNameTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureNameTemplate"), m_FeatureNameTemplate));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_FeatureTypeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureTypeName"), m_FeatureTypeName));
    }
    if(m_FilterSelectorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filterSelectors"), m_FilterSelectors));
    }
    if(m_FullFeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullFeatureType"), m_FullFeatureType));
    }
    if(m_GroupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groups"), m_Groups));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LanguageVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("languageVersion"), m_LanguageVersion));
    }
    if(m_LinkedLocationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkedLocationName"), m_LinkedLocationName));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_LocationInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationInfos"), m_LocationInfos));
    }
    if(m_ManipulatorChangeFunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("manipulatorChangeFunction"), m_ManipulatorChangeFunction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NamespaceIncludingEnumsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceIncludingEnums"), m_NamespaceIncludingEnums));
    }
    if(m_NamespaceTheSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceTheSource"), m_NamespaceTheSource));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_SignatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_Signature));
    }
    if(m_SourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceLocation"), m_SourceLocation));
    }
    if(m_SourceMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversionId"), m_SourceMicroversionId));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_TableSpecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableSpec"), m_TableSpec));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
}

bool BTFeatureSpec_129::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allParameters")))
    {
        std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_allParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allParameters")), refVal_allParameters );
        setAllParameters(refVal_allParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editingLogic")))
    {
        std::shared_ptr<BTEditingLogic_2350> refVal_editingLogic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editingLogic")), refVal_editingLogic );
        setEditingLogic(refVal_editingLogic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureNameTemplate")))
    {
        utility::string_t refVal_featureNameTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureNameTemplate")), refVal_featureNameTemplate );
        setFeatureNameTemplate(refVal_featureNameTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureTypeName")))
    {
        utility::string_t refVal_featureTypeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureTypeName")), refVal_featureTypeName );
        setFeatureTypeName(refVal_featureTypeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filterSelectors")))
    {
        std::vector<utility::string_t> refVal_filterSelectors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filterSelectors")), refVal_filterSelectors );
        setFilterSelectors(refVal_filterSelectors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullFeatureType")))
    {
        utility::string_t refVal_fullFeatureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullFeatureType")), refVal_fullFeatureType );
        setFullFeatureType(refVal_fullFeatureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        std::vector<std::shared_ptr<BTParameterGroupSpec_3469>> refVal_groups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groups")), refVal_groups );
        setGroups(refVal_groups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("languageVersion")))
    {
        int32_t refVal_languageVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("languageVersion")), refVal_languageVersion );
        setLanguageVersion(refVal_languageVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkedLocationName")))
    {
        utility::string_t refVal_linkedLocationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkedLocationName")), refVal_linkedLocationName );
        setLinkedLocationName(refVal_linkedLocationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationInfos")))
    {
        std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_locationInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationInfos")), refVal_locationInfos );
        setLocationInfos(refVal_locationInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("manipulatorChangeFunction")))
    {
        utility::string_t refVal_manipulatorChangeFunction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("manipulatorChangeFunction")), refVal_manipulatorChangeFunction );
        setManipulatorChangeFunction(refVal_manipulatorChangeFunction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceIncludingEnums")))
    {
        utility::string_t refVal_namespaceIncludingEnums;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceIncludingEnums")), refVal_namespaceIncludingEnums );
        setNamespaceIncludingEnums(refVal_namespaceIncludingEnums);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceTheSource")))
    {
        bool refVal_namespaceTheSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceTheSource")), refVal_namespaceTheSource );
        setNamespaceTheSource(refVal_namespaceTheSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signature")))
    {
        utility::string_t refVal_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature")), refVal_signature );
        setSignature(refVal_signature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceLocation")))
    {
        std::shared_ptr<BTLocationInfo_226> refVal_sourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceLocation")), refVal_sourceLocation );
        setSourceLocation(refVal_sourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversionId")))
    {
        utility::string_t refVal_sourceMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversionId")), refVal_sourceMicroversionId );
        setSourceMicroversionId(refVal_sourceMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableSpec")))
    {
        bool refVal_tableSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableSpec")), refVal_tableSpec );
        setTableSpec(refVal_tableSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    return ok;
}

int32_t BTFeatureSpec_129::getAdditionalLocalizedStrings() const
{
    return m_AdditionalLocalizedStrings;
}

void BTFeatureSpec_129::setAdditionalLocalizedStrings(int32_t value)
{
    m_AdditionalLocalizedStrings = value;
    m_AdditionalLocalizedStringsIsSet = true;
}

bool BTFeatureSpec_129::additionalLocalizedStringsIsSet() const
{
    return m_AdditionalLocalizedStringsIsSet;
}

void BTFeatureSpec_129::unsetAdditionalLocalizedStrings()
{
    m_AdditionalLocalizedStringsIsSet = false;
}
std::vector<std::shared_ptr<BTParameterSpec_6>>& BTFeatureSpec_129::getAllParameters()
{
    return m_AllParameters;
}

void BTFeatureSpec_129::setAllParameters(const std::vector<std::shared_ptr<BTParameterSpec_6>>& value)
{
    m_AllParameters = value;
    m_AllParametersIsSet = true;
}

bool BTFeatureSpec_129::allParametersIsSet() const
{
    return m_AllParametersIsSet;
}

void BTFeatureSpec_129::unsetAllParameters()
{
    m_AllParametersIsSet = false;
}
utility::string_t BTFeatureSpec_129::getBtType() const
{
    return m_BtType;
}

void BTFeatureSpec_129::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTFeatureSpec_129::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTFeatureSpec_129::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::shared_ptr<BTEditingLogic_2350> BTFeatureSpec_129::getEditingLogic() const
{
    return m_EditingLogic;
}

void BTFeatureSpec_129::setEditingLogic(const std::shared_ptr<BTEditingLogic_2350>& value)
{
    m_EditingLogic = value;
    m_EditingLogicIsSet = true;
}

bool BTFeatureSpec_129::editingLogicIsSet() const
{
    return m_EditingLogicIsSet;
}

void BTFeatureSpec_129::unsetEditingLogic()
{
    m_EditingLogicIsSet = false;
}
utility::string_t BTFeatureSpec_129::getFeatureNameTemplate() const
{
    return m_FeatureNameTemplate;
}

void BTFeatureSpec_129::setFeatureNameTemplate(const utility::string_t& value)
{
    m_FeatureNameTemplate = value;
    m_FeatureNameTemplateIsSet = true;
}

bool BTFeatureSpec_129::featureNameTemplateIsSet() const
{
    return m_FeatureNameTemplateIsSet;
}

void BTFeatureSpec_129::unsetFeatureNameTemplate()
{
    m_FeatureNameTemplateIsSet = false;
}
utility::string_t BTFeatureSpec_129::getFeatureType() const
{
    return m_FeatureType;
}

void BTFeatureSpec_129::setFeatureType(const utility::string_t& value)
{
    m_FeatureType = value;
    m_FeatureTypeIsSet = true;
}

bool BTFeatureSpec_129::featureTypeIsSet() const
{
    return m_FeatureTypeIsSet;
}

void BTFeatureSpec_129::unsetFeatureType()
{
    m_FeatureTypeIsSet = false;
}
utility::string_t BTFeatureSpec_129::getFeatureTypeName() const
{
    return m_FeatureTypeName;
}

void BTFeatureSpec_129::setFeatureTypeName(const utility::string_t& value)
{
    m_FeatureTypeName = value;
    m_FeatureTypeNameIsSet = true;
}

bool BTFeatureSpec_129::featureTypeNameIsSet() const
{
    return m_FeatureTypeNameIsSet;
}

void BTFeatureSpec_129::unsetFeatureTypeName()
{
    m_FeatureTypeNameIsSet = false;
}
std::vector<utility::string_t>& BTFeatureSpec_129::getFilterSelectors()
{
    return m_FilterSelectors;
}

void BTFeatureSpec_129::setFilterSelectors(const std::vector<utility::string_t>& value)
{
    m_FilterSelectors = value;
    m_FilterSelectorsIsSet = true;
}

bool BTFeatureSpec_129::filterSelectorsIsSet() const
{
    return m_FilterSelectorsIsSet;
}

void BTFeatureSpec_129::unsetFilterSelectors()
{
    m_FilterSelectorsIsSet = false;
}
utility::string_t BTFeatureSpec_129::getFullFeatureType() const
{
    return m_FullFeatureType;
}

void BTFeatureSpec_129::setFullFeatureType(const utility::string_t& value)
{
    m_FullFeatureType = value;
    m_FullFeatureTypeIsSet = true;
}

bool BTFeatureSpec_129::fullFeatureTypeIsSet() const
{
    return m_FullFeatureTypeIsSet;
}

void BTFeatureSpec_129::unsetFullFeatureType()
{
    m_FullFeatureTypeIsSet = false;
}
std::vector<std::shared_ptr<BTParameterGroupSpec_3469>>& BTFeatureSpec_129::getGroups()
{
    return m_Groups;
}

void BTFeatureSpec_129::setGroups(const std::vector<std::shared_ptr<BTParameterGroupSpec_3469>>& value)
{
    m_Groups = value;
    m_GroupsIsSet = true;
}

bool BTFeatureSpec_129::groupsIsSet() const
{
    return m_GroupsIsSet;
}

void BTFeatureSpec_129::unsetGroups()
{
    m_GroupsIsSet = false;
}
utility::string_t BTFeatureSpec_129::getIconUri() const
{
    return m_IconUri;
}

void BTFeatureSpec_129::setIconUri(const utility::string_t& value)
{
    m_IconUri = value;
    m_IconUriIsSet = true;
}

bool BTFeatureSpec_129::iconUriIsSet() const
{
    return m_IconUriIsSet;
}

void BTFeatureSpec_129::unsetIconUri()
{
    m_IconUriIsSet = false;
}
int32_t BTFeatureSpec_129::getLanguageVersion() const
{
    return m_LanguageVersion;
}

void BTFeatureSpec_129::setLanguageVersion(int32_t value)
{
    m_LanguageVersion = value;
    m_LanguageVersionIsSet = true;
}

bool BTFeatureSpec_129::languageVersionIsSet() const
{
    return m_LanguageVersionIsSet;
}

void BTFeatureSpec_129::unsetLanguageVersion()
{
    m_LanguageVersionIsSet = false;
}
utility::string_t BTFeatureSpec_129::getLinkedLocationName() const
{
    return m_LinkedLocationName;
}

void BTFeatureSpec_129::setLinkedLocationName(const utility::string_t& value)
{
    m_LinkedLocationName = value;
    m_LinkedLocationNameIsSet = true;
}

bool BTFeatureSpec_129::linkedLocationNameIsSet() const
{
    return m_LinkedLocationNameIsSet;
}

void BTFeatureSpec_129::unsetLinkedLocationName()
{
    m_LinkedLocationNameIsSet = false;
}
utility::string_t BTFeatureSpec_129::getLocalizableName() const
{
    return m_LocalizableName;
}

void BTFeatureSpec_129::setLocalizableName(const utility::string_t& value)
{
    m_LocalizableName = value;
    m_LocalizableNameIsSet = true;
}

bool BTFeatureSpec_129::localizableNameIsSet() const
{
    return m_LocalizableNameIsSet;
}

void BTFeatureSpec_129::unsetLocalizableName()
{
    m_LocalizableNameIsSet = false;
}
utility::string_t BTFeatureSpec_129::getLocalizedName() const
{
    return m_LocalizedName;
}

void BTFeatureSpec_129::setLocalizedName(const utility::string_t& value)
{
    m_LocalizedName = value;
    m_LocalizedNameIsSet = true;
}

bool BTFeatureSpec_129::localizedNameIsSet() const
{
    return m_LocalizedNameIsSet;
}

void BTFeatureSpec_129::unsetLocalizedName()
{
    m_LocalizedNameIsSet = false;
}
std::vector<std::shared_ptr<BTLocationInfo_226>>& BTFeatureSpec_129::getLocationInfos()
{
    return m_LocationInfos;
}

void BTFeatureSpec_129::setLocationInfos(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value)
{
    m_LocationInfos = value;
    m_LocationInfosIsSet = true;
}

bool BTFeatureSpec_129::locationInfosIsSet() const
{
    return m_LocationInfosIsSet;
}

void BTFeatureSpec_129::unsetLocationInfos()
{
    m_LocationInfosIsSet = false;
}
utility::string_t BTFeatureSpec_129::getManipulatorChangeFunction() const
{
    return m_ManipulatorChangeFunction;
}

void BTFeatureSpec_129::setManipulatorChangeFunction(const utility::string_t& value)
{
    m_ManipulatorChangeFunction = value;
    m_ManipulatorChangeFunctionIsSet = true;
}

bool BTFeatureSpec_129::manipulatorChangeFunctionIsSet() const
{
    return m_ManipulatorChangeFunctionIsSet;
}

void BTFeatureSpec_129::unsetManipulatorChangeFunction()
{
    m_ManipulatorChangeFunctionIsSet = false;
}
utility::string_t BTFeatureSpec_129::getRNamespace() const
{
    return m_r_namespace;
}

void BTFeatureSpec_129::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTFeatureSpec_129::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTFeatureSpec_129::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTFeatureSpec_129::getNamespaceIncludingEnums() const
{
    return m_NamespaceIncludingEnums;
}

void BTFeatureSpec_129::setNamespaceIncludingEnums(const utility::string_t& value)
{
    m_NamespaceIncludingEnums = value;
    m_NamespaceIncludingEnumsIsSet = true;
}

bool BTFeatureSpec_129::namespaceIncludingEnumsIsSet() const
{
    return m_NamespaceIncludingEnumsIsSet;
}

void BTFeatureSpec_129::unsetNamespaceIncludingEnums()
{
    m_NamespaceIncludingEnumsIsSet = false;
}
bool BTFeatureSpec_129::isNamespaceTheSource() const
{
    return m_NamespaceTheSource;
}

void BTFeatureSpec_129::setNamespaceTheSource(bool value)
{
    m_NamespaceTheSource = value;
    m_NamespaceTheSourceIsSet = true;
}

bool BTFeatureSpec_129::namespaceTheSourceIsSet() const
{
    return m_NamespaceTheSourceIsSet;
}

void BTFeatureSpec_129::unsetNamespaceTheSource()
{
    m_NamespaceTheSourceIsSet = false;
}
std::vector<std::shared_ptr<BTParameterSpec_6>>& BTFeatureSpec_129::getParameters()
{
    return m_Parameters;
}

void BTFeatureSpec_129::setParameters(const std::vector<std::shared_ptr<BTParameterSpec_6>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BTFeatureSpec_129::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BTFeatureSpec_129::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::string_t BTFeatureSpec_129::getSignature() const
{
    return m_Signature;
}

void BTFeatureSpec_129::setSignature(const utility::string_t& value)
{
    m_Signature = value;
    m_SignatureIsSet = true;
}

bool BTFeatureSpec_129::signatureIsSet() const
{
    return m_SignatureIsSet;
}

void BTFeatureSpec_129::unsetSignature()
{
    m_SignatureIsSet = false;
}
std::shared_ptr<BTLocationInfo_226> BTFeatureSpec_129::getSourceLocation() const
{
    return m_SourceLocation;
}

void BTFeatureSpec_129::setSourceLocation(const std::shared_ptr<BTLocationInfo_226>& value)
{
    m_SourceLocation = value;
    m_SourceLocationIsSet = true;
}

bool BTFeatureSpec_129::sourceLocationIsSet() const
{
    return m_SourceLocationIsSet;
}

void BTFeatureSpec_129::unsetSourceLocation()
{
    m_SourceLocationIsSet = false;
}
utility::string_t BTFeatureSpec_129::getSourceMicroversionId() const
{
    return m_SourceMicroversionId;
}

void BTFeatureSpec_129::setSourceMicroversionId(const utility::string_t& value)
{
    m_SourceMicroversionId = value;
    m_SourceMicroversionIdIsSet = true;
}

bool BTFeatureSpec_129::sourceMicroversionIdIsSet() const
{
    return m_SourceMicroversionIdIsSet;
}

void BTFeatureSpec_129::unsetSourceMicroversionId()
{
    m_SourceMicroversionIdIsSet = false;
}
std::vector<utility::string_t>& BTFeatureSpec_129::getStringsToLocalize()
{
    return m_StringsToLocalize;
}

void BTFeatureSpec_129::setStringsToLocalize(const std::vector<utility::string_t>& value)
{
    m_StringsToLocalize = value;
    m_StringsToLocalizeIsSet = true;
}

bool BTFeatureSpec_129::stringsToLocalizeIsSet() const
{
    return m_StringsToLocalizeIsSet;
}

void BTFeatureSpec_129::unsetStringsToLocalize()
{
    m_StringsToLocalizeIsSet = false;
}
bool BTFeatureSpec_129::isTableSpec() const
{
    return m_TableSpec;
}

void BTFeatureSpec_129::setTableSpec(bool value)
{
    m_TableSpec = value;
    m_TableSpecIsSet = true;
}

bool BTFeatureSpec_129::tableSpecIsSet() const
{
    return m_TableSpecIsSet;
}

void BTFeatureSpec_129::unsetTableSpec()
{
    m_TableSpecIsSet = false;
}
std::vector<utility::string_t>& BTFeatureSpec_129::getUiHints()
{
    return m_UiHints;
}

void BTFeatureSpec_129::setUiHints(const std::vector<utility::string_t>& value)
{
    m_UiHints = value;
    m_UiHintsIsSet = true;
}

bool BTFeatureSpec_129::uiHintsIsSet() const
{
    return m_UiHintsIsSet;
}

void BTFeatureSpec_129::unsetUiHints()
{
    m_UiHintsIsSet = false;
}
}
}
}
}


