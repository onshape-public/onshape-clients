/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonNode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




JsonNode::JsonNode()
{
    m_array = false;
    m_arrayIsSet = false;
    m_BigDecimal = false;
    m_BigDecimalIsSet = false;
    m_BigInteger = false;
    m_BigIntegerIsSet = false;
    m_binary = false;
    m_binaryIsSet = false;
    m_boolean = false;
    m_booleanIsSet = false;
    m_ContainerNode = false;
    m_ContainerNodeIsSet = false;
    m_double = false;
    m_doubleIsSet = false;
    m_Empty = false;
    m_EmptyIsSet = false;
    m_float = false;
    m_floatIsSet = false;
    m_FloatingPointNumber = false;
    m_FloatingPointNumberIsSet = false;
    m_int = false;
    m_intIsSet = false;
    m_IntegralNumber = false;
    m_IntegralNumberIsSet = false;
    m_long = false;
    m_longIsSet = false;
    m_MissingNode = false;
    m_MissingNodeIsSet = false;
    m_NodeType = utility::conversions::to_string_t("");
    m_NodeTypeIsSet = false;
    m_Null = false;
    m_NullIsSet = false;
    m_number = false;
    m_numberIsSet = false;
    m_object = false;
    m_objectIsSet = false;
    m_Pojo = false;
    m_PojoIsSet = false;
    m_short = false;
    m_shortIsSet = false;
    m_Textual = false;
    m_TextualIsSet = false;
    m_ValueNode = false;
    m_ValueNodeIsSet = false;
}

JsonNode::~JsonNode()
{
}

void JsonNode::validate()
{
    // TODO: implement validation
}

web::json::value JsonNode::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_arrayIsSet)
    {
        val[utility::conversions::to_string_t("array")] = ModelBase::toJson(m_array);
    }
    if(m_BigDecimalIsSet)
    {
        val[utility::conversions::to_string_t("bigDecimal")] = ModelBase::toJson(m_BigDecimal);
    }
    if(m_BigIntegerIsSet)
    {
        val[utility::conversions::to_string_t("bigInteger")] = ModelBase::toJson(m_BigInteger);
    }
    if(m_binaryIsSet)
    {
        val[utility::conversions::to_string_t("binary")] = ModelBase::toJson(m_binary);
    }
    if(m_booleanIsSet)
    {
        val[utility::conversions::to_string_t("boolean")] = ModelBase::toJson(m_boolean);
    }
    if(m_ContainerNodeIsSet)
    {
        val[utility::conversions::to_string_t("containerNode")] = ModelBase::toJson(m_ContainerNode);
    }
    if(m_doubleIsSet)
    {
        val[utility::conversions::to_string_t("double")] = ModelBase::toJson(m_double);
    }
    if(m_EmptyIsSet)
    {
        val[utility::conversions::to_string_t("empty")] = ModelBase::toJson(m_Empty);
    }
    if(m_floatIsSet)
    {
        val[utility::conversions::to_string_t("float")] = ModelBase::toJson(m_float);
    }
    if(m_FloatingPointNumberIsSet)
    {
        val[utility::conversions::to_string_t("floatingPointNumber")] = ModelBase::toJson(m_FloatingPointNumber);
    }
    if(m_intIsSet)
    {
        val[utility::conversions::to_string_t("int")] = ModelBase::toJson(m_int);
    }
    if(m_IntegralNumberIsSet)
    {
        val[utility::conversions::to_string_t("integralNumber")] = ModelBase::toJson(m_IntegralNumber);
    }
    if(m_longIsSet)
    {
        val[utility::conversions::to_string_t("long")] = ModelBase::toJson(m_long);
    }
    if(m_MissingNodeIsSet)
    {
        val[utility::conversions::to_string_t("missingNode")] = ModelBase::toJson(m_MissingNode);
    }
    if(m_NodeTypeIsSet)
    {
        val[utility::conversions::to_string_t("nodeType")] = ModelBase::toJson(m_NodeType);
    }
    if(m_NullIsSet)
    {
        val[utility::conversions::to_string_t("null")] = ModelBase::toJson(m_Null);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t("number")] = ModelBase::toJson(m_number);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_PojoIsSet)
    {
        val[utility::conversions::to_string_t("pojo")] = ModelBase::toJson(m_Pojo);
    }
    if(m_shortIsSet)
    {
        val[utility::conversions::to_string_t("short")] = ModelBase::toJson(m_short);
    }
    if(m_TextualIsSet)
    {
        val[utility::conversions::to_string_t("textual")] = ModelBase::toJson(m_Textual);
    }
    if(m_ValueNodeIsSet)
    {
        val[utility::conversions::to_string_t("valueNode")] = ModelBase::toJson(m_ValueNode);
    }

    return val;
}

bool JsonNode::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("array")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("array"));
        if(!fieldValue.is_null())
        {
            bool refVal_array;
            ok &= ModelBase::fromJson(fieldValue, refVal_array);
            setArray(refVal_array);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bigDecimal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bigDecimal"));
        if(!fieldValue.is_null())
        {
            bool refVal_bigDecimal;
            ok &= ModelBase::fromJson(fieldValue, refVal_bigDecimal);
            setBigDecimal(refVal_bigDecimal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bigInteger")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bigInteger"));
        if(!fieldValue.is_null())
        {
            bool refVal_bigInteger;
            ok &= ModelBase::fromJson(fieldValue, refVal_bigInteger);
            setBigInteger(refVal_bigInteger);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("binary")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("binary"));
        if(!fieldValue.is_null())
        {
            bool refVal_binary;
            ok &= ModelBase::fromJson(fieldValue, refVal_binary);
            setBinary(refVal_binary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("boolean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("boolean"));
        if(!fieldValue.is_null())
        {
            bool refVal_boolean;
            ok &= ModelBase::fromJson(fieldValue, refVal_boolean);
            setBoolean(refVal_boolean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("containerNode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("containerNode"));
        if(!fieldValue.is_null())
        {
            bool refVal_containerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_containerNode);
            setContainerNode(refVal_containerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("double")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("double"));
        if(!fieldValue.is_null())
        {
            bool refVal_double;
            ok &= ModelBase::fromJson(fieldValue, refVal_double);
            setDouble(refVal_double);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("empty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("empty"));
        if(!fieldValue.is_null())
        {
            bool refVal_empty;
            ok &= ModelBase::fromJson(fieldValue, refVal_empty);
            setEmpty(refVal_empty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("float")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("float"));
        if(!fieldValue.is_null())
        {
            bool refVal_float;
            ok &= ModelBase::fromJson(fieldValue, refVal_float);
            setFloat(refVal_float);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("floatingPointNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("floatingPointNumber"));
        if(!fieldValue.is_null())
        {
            bool refVal_floatingPointNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_floatingPointNumber);
            setFloatingPointNumber(refVal_floatingPointNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("int")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("int"));
        if(!fieldValue.is_null())
        {
            bool refVal_int;
            ok &= ModelBase::fromJson(fieldValue, refVal_int);
            setInt(refVal_int);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("integralNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("integralNumber"));
        if(!fieldValue.is_null())
        {
            bool refVal_integralNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_integralNumber);
            setIntegralNumber(refVal_integralNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("long")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("long"));
        if(!fieldValue.is_null())
        {
            bool refVal_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_long);
            setLong(refVal_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("missingNode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("missingNode"));
        if(!fieldValue.is_null())
        {
            bool refVal_missingNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_missingNode);
            setMissingNode(refVal_missingNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeType);
            setNodeType(refVal_nodeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("null")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("null"));
        if(!fieldValue.is_null())
        {
            bool refVal_null;
            ok &= ModelBase::fromJson(fieldValue, refVal_null);
            setNull(refVal_null);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("number"));
        if(!fieldValue.is_null())
        {
            bool refVal_number;
            ok &= ModelBase::fromJson(fieldValue, refVal_number);
            setNumber(refVal_number);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            bool refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pojo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pojo"));
        if(!fieldValue.is_null())
        {
            bool refVal_pojo;
            ok &= ModelBase::fromJson(fieldValue, refVal_pojo);
            setPojo(refVal_pojo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("short")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("short"));
        if(!fieldValue.is_null())
        {
            bool refVal_short;
            ok &= ModelBase::fromJson(fieldValue, refVal_short);
            setShort(refVal_short);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("textual")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("textual"));
        if(!fieldValue.is_null())
        {
            bool refVal_textual;
            ok &= ModelBase::fromJson(fieldValue, refVal_textual);
            setTextual(refVal_textual);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valueNode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valueNode"));
        if(!fieldValue.is_null())
        {
            bool refVal_valueNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_valueNode);
            setValueNode(refVal_valueNode);
        }
    }
    return ok;
}

void JsonNode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_arrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("array"), m_array));
    }
    if(m_BigDecimalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bigDecimal"), m_BigDecimal));
    }
    if(m_BigIntegerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bigInteger"), m_BigInteger));
    }
    if(m_binaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("binary"), m_binary));
    }
    if(m_booleanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("boolean"), m_boolean));
    }
    if(m_ContainerNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("containerNode"), m_ContainerNode));
    }
    if(m_doubleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("double"), m_double));
    }
    if(m_EmptyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("empty"), m_Empty));
    }
    if(m_floatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("float"), m_float));
    }
    if(m_FloatingPointNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("floatingPointNumber"), m_FloatingPointNumber));
    }
    if(m_intIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("int"), m_int));
    }
    if(m_IntegralNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("integralNumber"), m_IntegralNumber));
    }
    if(m_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("long"), m_long));
    }
    if(m_MissingNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("missingNode"), m_MissingNode));
    }
    if(m_NodeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeType"), m_NodeType));
    }
    if(m_NullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("null"), m_Null));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("number"), m_number));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_PojoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pojo"), m_Pojo));
    }
    if(m_shortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("short"), m_short));
    }
    if(m_TextualIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("textual"), m_Textual));
    }
    if(m_ValueNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valueNode"), m_ValueNode));
    }
}

bool JsonNode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("array")))
    {
        bool refVal_array;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("array")), refVal_array );
        setArray(refVal_array);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bigDecimal")))
    {
        bool refVal_bigDecimal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bigDecimal")), refVal_bigDecimal );
        setBigDecimal(refVal_bigDecimal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bigInteger")))
    {
        bool refVal_bigInteger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bigInteger")), refVal_bigInteger );
        setBigInteger(refVal_bigInteger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("binary")))
    {
        bool refVal_binary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("binary")), refVal_binary );
        setBinary(refVal_binary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("boolean")))
    {
        bool refVal_boolean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("boolean")), refVal_boolean );
        setBoolean(refVal_boolean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("containerNode")))
    {
        bool refVal_containerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("containerNode")), refVal_containerNode );
        setContainerNode(refVal_containerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("double")))
    {
        bool refVal_double;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("double")), refVal_double );
        setDouble(refVal_double);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("empty")))
    {
        bool refVal_empty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("empty")), refVal_empty );
        setEmpty(refVal_empty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("float")))
    {
        bool refVal_float;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("float")), refVal_float );
        setFloat(refVal_float);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("floatingPointNumber")))
    {
        bool refVal_floatingPointNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("floatingPointNumber")), refVal_floatingPointNumber );
        setFloatingPointNumber(refVal_floatingPointNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("int")))
    {
        bool refVal_int;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("int")), refVal_int );
        setInt(refVal_int);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("integralNumber")))
    {
        bool refVal_integralNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("integralNumber")), refVal_integralNumber );
        setIntegralNumber(refVal_integralNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("long")))
    {
        bool refVal_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("long")), refVal_long );
        setLong(refVal_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("missingNode")))
    {
        bool refVal_missingNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("missingNode")), refVal_missingNode );
        setMissingNode(refVal_missingNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeType")))
    {
        utility::string_t refVal_nodeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeType")), refVal_nodeType );
        setNodeType(refVal_nodeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("null")))
    {
        bool refVal_null;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("null")), refVal_null );
        setNull(refVal_null);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("number")))
    {
        bool refVal_number;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("number")), refVal_number );
        setNumber(refVal_number);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        bool refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pojo")))
    {
        bool refVal_pojo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pojo")), refVal_pojo );
        setPojo(refVal_pojo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("short")))
    {
        bool refVal_short;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("short")), refVal_short );
        setShort(refVal_short);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("textual")))
    {
        bool refVal_textual;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("textual")), refVal_textual );
        setTextual(refVal_textual);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valueNode")))
    {
        bool refVal_valueNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valueNode")), refVal_valueNode );
        setValueNode(refVal_valueNode);
    }
    return ok;
}

bool JsonNode::isArray() const
{
    return m_array;
}

void JsonNode::setArray(bool value)
{
    m_array = value;
    m_arrayIsSet = true;
}

bool JsonNode::arrayIsSet() const
{
    return m_arrayIsSet;
}

void JsonNode::unsetarray()
{
    m_arrayIsSet = false;
}
bool JsonNode::isBigDecimal() const
{
    return m_BigDecimal;
}

void JsonNode::setBigDecimal(bool value)
{
    m_BigDecimal = value;
    m_BigDecimalIsSet = true;
}

bool JsonNode::bigDecimalIsSet() const
{
    return m_BigDecimalIsSet;
}

void JsonNode::unsetBigDecimal()
{
    m_BigDecimalIsSet = false;
}
bool JsonNode::isBigInteger() const
{
    return m_BigInteger;
}

void JsonNode::setBigInteger(bool value)
{
    m_BigInteger = value;
    m_BigIntegerIsSet = true;
}

bool JsonNode::bigIntegerIsSet() const
{
    return m_BigIntegerIsSet;
}

void JsonNode::unsetBigInteger()
{
    m_BigIntegerIsSet = false;
}
bool JsonNode::isBinary() const
{
    return m_binary;
}

void JsonNode::setBinary(bool value)
{
    m_binary = value;
    m_binaryIsSet = true;
}

bool JsonNode::binaryIsSet() const
{
    return m_binaryIsSet;
}

void JsonNode::unsetbinary()
{
    m_binaryIsSet = false;
}
bool JsonNode::isBoolean() const
{
    return m_boolean;
}

void JsonNode::setBoolean(bool value)
{
    m_boolean = value;
    m_booleanIsSet = true;
}

bool JsonNode::booleanIsSet() const
{
    return m_booleanIsSet;
}

void JsonNode::unsetboolean()
{
    m_booleanIsSet = false;
}
bool JsonNode::isContainerNode() const
{
    return m_ContainerNode;
}

void JsonNode::setContainerNode(bool value)
{
    m_ContainerNode = value;
    m_ContainerNodeIsSet = true;
}

bool JsonNode::containerNodeIsSet() const
{
    return m_ContainerNodeIsSet;
}

void JsonNode::unsetContainerNode()
{
    m_ContainerNodeIsSet = false;
}
bool JsonNode::isDouble() const
{
    return m_double;
}

void JsonNode::setDouble(bool value)
{
    m_double = value;
    m_doubleIsSet = true;
}

bool JsonNode::r_doubleIsSet() const
{
    return m_doubleIsSet;
}

void JsonNode::unsetdouble()
{
    m_doubleIsSet = false;
}
bool JsonNode::isEmpty() const
{
    return m_Empty;
}

void JsonNode::setEmpty(bool value)
{
    m_Empty = value;
    m_EmptyIsSet = true;
}

bool JsonNode::emptyIsSet() const
{
    return m_EmptyIsSet;
}

void JsonNode::unsetEmpty()
{
    m_EmptyIsSet = false;
}
bool JsonNode::isFloat() const
{
    return m_float;
}

void JsonNode::setFloat(bool value)
{
    m_float = value;
    m_floatIsSet = true;
}

bool JsonNode::r_floatIsSet() const
{
    return m_floatIsSet;
}

void JsonNode::unsetfloat()
{
    m_floatIsSet = false;
}
bool JsonNode::isFloatingPointNumber() const
{
    return m_FloatingPointNumber;
}

void JsonNode::setFloatingPointNumber(bool value)
{
    m_FloatingPointNumber = value;
    m_FloatingPointNumberIsSet = true;
}

bool JsonNode::floatingPointNumberIsSet() const
{
    return m_FloatingPointNumberIsSet;
}

void JsonNode::unsetFloatingPointNumber()
{
    m_FloatingPointNumberIsSet = false;
}
bool JsonNode::isInt() const
{
    return m_int;
}

void JsonNode::setInt(bool value)
{
    m_int = value;
    m_intIsSet = true;
}

bool JsonNode::r_intIsSet() const
{
    return m_intIsSet;
}

void JsonNode::unsetint()
{
    m_intIsSet = false;
}
bool JsonNode::isIntegralNumber() const
{
    return m_IntegralNumber;
}

void JsonNode::setIntegralNumber(bool value)
{
    m_IntegralNumber = value;
    m_IntegralNumberIsSet = true;
}

bool JsonNode::integralNumberIsSet() const
{
    return m_IntegralNumberIsSet;
}

void JsonNode::unsetIntegralNumber()
{
    m_IntegralNumberIsSet = false;
}
bool JsonNode::isLong() const
{
    return m_long;
}

void JsonNode::setLong(bool value)
{
    m_long = value;
    m_longIsSet = true;
}

bool JsonNode::r_longIsSet() const
{
    return m_longIsSet;
}

void JsonNode::unsetlong()
{
    m_longIsSet = false;
}
bool JsonNode::isMissingNode() const
{
    return m_MissingNode;
}

void JsonNode::setMissingNode(bool value)
{
    m_MissingNode = value;
    m_MissingNodeIsSet = true;
}

bool JsonNode::missingNodeIsSet() const
{
    return m_MissingNodeIsSet;
}

void JsonNode::unsetMissingNode()
{
    m_MissingNodeIsSet = false;
}
utility::string_t JsonNode::getNodeType() const
{
    return m_NodeType;
}

void JsonNode::setNodeType(const utility::string_t& value)
{
    m_NodeType = value;
    m_NodeTypeIsSet = true;
}

bool JsonNode::nodeTypeIsSet() const
{
    return m_NodeTypeIsSet;
}

void JsonNode::unsetNodeType()
{
    m_NodeTypeIsSet = false;
}
bool JsonNode::isNull() const
{
    return m_Null;
}

void JsonNode::setNull(bool value)
{
    m_Null = value;
    m_NullIsSet = true;
}

bool JsonNode::nullIsSet() const
{
    return m_NullIsSet;
}

void JsonNode::unsetNull()
{
    m_NullIsSet = false;
}
bool JsonNode::isNumber() const
{
    return m_number;
}

void JsonNode::setNumber(bool value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool JsonNode::numberIsSet() const
{
    return m_numberIsSet;
}

void JsonNode::unsetnumber()
{
    m_numberIsSet = false;
}
bool JsonNode::isObject() const
{
    return m_object;
}

void JsonNode::setObject(bool value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool JsonNode::objectIsSet() const
{
    return m_objectIsSet;
}

void JsonNode::unsetobject()
{
    m_objectIsSet = false;
}
bool JsonNode::isPojo() const
{
    return m_Pojo;
}

void JsonNode::setPojo(bool value)
{
    m_Pojo = value;
    m_PojoIsSet = true;
}

bool JsonNode::pojoIsSet() const
{
    return m_PojoIsSet;
}

void JsonNode::unsetPojo()
{
    m_PojoIsSet = false;
}
bool JsonNode::isShort() const
{
    return m_short;
}

void JsonNode::setShort(bool value)
{
    m_short = value;
    m_shortIsSet = true;
}

bool JsonNode::r_shortIsSet() const
{
    return m_shortIsSet;
}

void JsonNode::unsetshort()
{
    m_shortIsSet = false;
}
bool JsonNode::isTextual() const
{
    return m_Textual;
}

void JsonNode::setTextual(bool value)
{
    m_Textual = value;
    m_TextualIsSet = true;
}

bool JsonNode::textualIsSet() const
{
    return m_TextualIsSet;
}

void JsonNode::unsetTextual()
{
    m_TextualIsSet = false;
}
bool JsonNode::isValueNode() const
{
    return m_ValueNode;
}

void JsonNode::setValueNode(bool value)
{
    m_ValueNode = value;
    m_ValueNodeIsSet = true;
}

bool JsonNode::valueNodeIsSet() const
{
    return m_ValueNodeIsSet;
}

void JsonNode::unsetValueNode()
{
    m_ValueNodeIsSet = false;
}
}
}
}
}


