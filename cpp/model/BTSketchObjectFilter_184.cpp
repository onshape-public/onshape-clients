/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTSketchObjectFilter_184.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTSketchObjectFilter_184::BTSketchObjectFilter_184()
{
    m_ObjectType = utility::conversions::to_string_t("");
    m_ObjectTypeIsSet = false;
    m_IsSketchObject = false;
    m_IsSketchObjectIsSet = false;
}

BTSketchObjectFilter_184::~BTSketchObjectFilter_184()
{
}

void BTSketchObjectFilter_184::validate()
{
    // TODO: implement validation
}

web::json::value BTSketchObjectFilter_184::toJson() const
{
    web::json::value val = this->BTQueryFilter_183::toJson();
    
    if(m_ObjectTypeIsSet)
    {
        val[utility::conversions::to_string_t("objectType")] = ModelBase::toJson(m_ObjectType);
    }
    if(m_IsSketchObjectIsSet)
    {
        val[utility::conversions::to_string_t("isSketchObject")] = ModelBase::toJson(m_IsSketchObject);
    }

    return val;
}

bool BTSketchObjectFilter_184::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTQueryFilter_183::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("objectType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_objectType;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectType);
            setObjectType(refVal_objectType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSketchObject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSketchObject"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSketchObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSketchObject);
            setIsSketchObject(refVal_isSketchObject);
        }
    }
    return ok;
}

void BTSketchObjectFilter_184::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ObjectTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectType"), m_ObjectType));
    }
    if(m_IsSketchObjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSketchObject"), m_IsSketchObject));
    }
}

bool BTSketchObjectFilter_184::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectType")))
    {
        utility::string_t refVal_objectType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectType")), refVal_objectType );
        setObjectType(refVal_objectType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSketchObject")))
    {
        bool refVal_isSketchObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSketchObject")), refVal_isSketchObject );
        setIsSketchObject(refVal_isSketchObject);
    }
    return ok;
}

utility::string_t BTSketchObjectFilter_184::getObjectType() const
{
    return m_ObjectType;
}

void BTSketchObjectFilter_184::setObjectType(const utility::string_t& value)
{
    m_ObjectType = value;
    m_ObjectTypeIsSet = true;
}

bool BTSketchObjectFilter_184::objectTypeIsSet() const
{
    return m_ObjectTypeIsSet;
}

void BTSketchObjectFilter_184::unsetObjectType()
{
    m_ObjectTypeIsSet = false;
}
bool BTSketchObjectFilter_184::isIsSketchObject() const
{
    return m_IsSketchObject;
}

void BTSketchObjectFilter_184::setIsSketchObject(bool value)
{
    m_IsSketchObject = value;
    m_IsSketchObjectIsSet = true;
}

bool BTSketchObjectFilter_184::isSketchObjectIsSet() const
{
    return m_IsSketchObjectIsSet;
}

void BTSketchObjectFilter_184::unsetIsSketchObject()
{
    m_IsSketchObjectIsSet = false;
}
}
}
}
}


