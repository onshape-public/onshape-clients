/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * JsonNode.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_JsonNode_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_JsonNode_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  JsonNode
    : public ModelBase
{
public:
    JsonNode();
    virtual ~JsonNode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// JsonNode members

    /// <summary>
    /// 
    /// </summary>
    bool isArray() const;
    bool arrayIsSet() const;
    void unsetarray();

    void setArray(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isBigDecimal() const;
    bool bigDecimalIsSet() const;
    void unsetBigDecimal();

    void setBigDecimal(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isBigInteger() const;
    bool bigIntegerIsSet() const;
    void unsetBigInteger();

    void setBigInteger(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isBinary() const;
    bool binaryIsSet() const;
    void unsetbinary();

    void setBinary(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isBoolean() const;
    bool booleanIsSet() const;
    void unsetboolean();

    void setBoolean(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isContainerNode() const;
    bool containerNodeIsSet() const;
    void unsetContainerNode();

    void setContainerNode(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isDouble() const;
    bool r_doubleIsSet() const;
    void unsetdouble();

    void setDouble(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isEmpty() const;
    bool emptyIsSet() const;
    void unsetEmpty();

    void setEmpty(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isFloat() const;
    bool r_floatIsSet() const;
    void unsetfloat();

    void setFloat(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isFloatingPointNumber() const;
    bool floatingPointNumberIsSet() const;
    void unsetFloatingPointNumber();

    void setFloatingPointNumber(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isInt() const;
    bool r_intIsSet() const;
    void unsetint();

    void setInt(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIntegralNumber() const;
    bool integralNumberIsSet() const;
    void unsetIntegralNumber();

    void setIntegralNumber(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isLong() const;
    bool r_longIsSet() const;
    void unsetlong();

    void setLong(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isMissingNode() const;
    bool missingNodeIsSet() const;
    void unsetMissingNode();

    void setMissingNode(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeType() const;
    bool nodeTypeIsSet() const;
    void unsetNodeType();

    void setNodeType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNull() const;
    bool nullIsSet() const;
    void unsetNull();

    void setNull(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isNumber() const;
    bool numberIsSet() const;
    void unsetnumber();

    void setNumber(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isPojo() const;
    bool pojoIsSet() const;
    void unsetPojo();

    void setPojo(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isShort() const;
    bool r_shortIsSet() const;
    void unsetshort();

    void setShort(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isTextual() const;
    bool textualIsSet() const;
    void unsetTextual();

    void setTextual(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isValueNode() const;
    bool valueNodeIsSet() const;
    void unsetValueNode();

    void setValueNode(bool value);


protected:
    bool m_array;
    bool m_arrayIsSet;
    bool m_BigDecimal;
    bool m_BigDecimalIsSet;
    bool m_BigInteger;
    bool m_BigIntegerIsSet;
    bool m_binary;
    bool m_binaryIsSet;
    bool m_boolean;
    bool m_booleanIsSet;
    bool m_ContainerNode;
    bool m_ContainerNodeIsSet;
    bool m_double;
    bool m_doubleIsSet;
    bool m_Empty;
    bool m_EmptyIsSet;
    bool m_float;
    bool m_floatIsSet;
    bool m_FloatingPointNumber;
    bool m_FloatingPointNumberIsSet;
    bool m_int;
    bool m_intIsSet;
    bool m_IntegralNumber;
    bool m_IntegralNumberIsSet;
    bool m_long;
    bool m_longIsSet;
    bool m_MissingNode;
    bool m_MissingNodeIsSet;
    utility::string_t m_NodeType;
    bool m_NodeTypeIsSet;
    bool m_Null;
    bool m_NullIsSet;
    bool m_number;
    bool m_numberIsSet;
    bool m_object;
    bool m_objectIsSet;
    bool m_Pojo;
    bool m_PojoIsSet;
    bool m_short;
    bool m_shortIsSet;
    bool m_Textual;
    bool m_TextualIsSet;
    bool m_ValueNode;
    bool m_ValueNodeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_JsonNode_H_ */
