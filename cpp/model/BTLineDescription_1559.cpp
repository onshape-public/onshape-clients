/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTLineDescription_1559.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTLineDescription_1559::BTLineDescription_1559()
{
    m_DirectionIsSet = false;
    m_OriginIsSet = false;
}

BTLineDescription_1559::~BTLineDescription_1559()
{
}

void BTLineDescription_1559::validate()
{
    // TODO: implement validation
}

web::json::value BTLineDescription_1559::toJson() const
{
    web::json::value val = this->BTCurveDescription_1583::toJson();
    
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }

    return val;
}

bool BTLineDescription_1559::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTCurveDescription_1583::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direction"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_direction;
            ok &= ModelBase::fromJson(fieldValue, refVal_direction);
            setDirection(refVal_direction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    return ok;
}

void BTLineDescription_1559::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
}

bool BTLineDescription_1559::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        std::shared_ptr<BTVector3d_389> refVal_direction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction")), refVal_direction );
        setDirection(refVal_direction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::shared_ptr<BTVector3d_389> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    return ok;
}

std::shared_ptr<BTVector3d_389> BTLineDescription_1559::getDirection() const
{
    return m_Direction;
}

void BTLineDescription_1559::setDirection(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool BTLineDescription_1559::directionIsSet() const
{
    return m_DirectionIsSet;
}

void BTLineDescription_1559::unsetDirection()
{
    m_DirectionIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTLineDescription_1559::getOrigin() const
{
    return m_Origin;
}

void BTLineDescription_1559::setOrigin(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool BTLineDescription_1559::originIsSet() const
{
    return m_OriginIsSet;
}

void BTLineDescription_1559::unsetOrigin()
{
    m_OriginIsSet = false;
}
}
}
}
}


