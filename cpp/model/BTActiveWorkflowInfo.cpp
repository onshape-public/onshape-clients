/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTActiveWorkflowInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTActiveWorkflowInfo::BTActiveWorkflowInfo()
{
    m_CanCreateReleases = false;
    m_CanCreateReleasesIsSet = false;
    m_CanCurrentUserCreateReleases = false;
    m_CanCurrentUserCreateReleasesIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DrawingCanDuplicatePartNumber = false;
    m_DrawingCanDuplicatePartNumberIsSet = false;
    m_EnabledActiveMultipleWorkflows = false;
    m_EnabledActiveMultipleWorkflowsIsSet = false;
    m_ObsoletionWorkflowIsSet = false;
    m_ObsoletionWorkflowId = utility::conversions::to_string_t("");
    m_ObsoletionWorkflowIdIsSet = false;
    m_PickableWorkflowsIsSet = false;
    m_ReleaseWorkflowIsSet = false;
    m_ReleaseWorkflowId = utility::conversions::to_string_t("");
    m_ReleaseWorkflowIdIsSet = false;
    m_UsingAutoPartNumbering = false;
    m_UsingAutoPartNumberingIsSet = false;
    m_UsingAutoPartNumberingScheme = false;
    m_UsingAutoPartNumberingSchemeIsSet = false;
    m_UsingManagedWorkflow = false;
    m_UsingManagedWorkflowIsSet = false;
}

BTActiveWorkflowInfo::~BTActiveWorkflowInfo()
{
}

void BTActiveWorkflowInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTActiveWorkflowInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CanCreateReleasesIsSet)
    {
        val[utility::conversions::to_string_t("canCreateReleases")] = ModelBase::toJson(m_CanCreateReleases);
    }
    if(m_CanCurrentUserCreateReleasesIsSet)
    {
        val[utility::conversions::to_string_t("canCurrentUserCreateReleases")] = ModelBase::toJson(m_CanCurrentUserCreateReleases);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DrawingCanDuplicatePartNumberIsSet)
    {
        val[utility::conversions::to_string_t("drawingCanDuplicatePartNumber")] = ModelBase::toJson(m_DrawingCanDuplicatePartNumber);
    }
    if(m_EnabledActiveMultipleWorkflowsIsSet)
    {
        val[utility::conversions::to_string_t("enabledActiveMultipleWorkflows")] = ModelBase::toJson(m_EnabledActiveMultipleWorkflows);
    }
    if(m_ObsoletionWorkflowIsSet)
    {
        val[utility::conversions::to_string_t("obsoletionWorkflow")] = ModelBase::toJson(m_ObsoletionWorkflow);
    }
    if(m_ObsoletionWorkflowIdIsSet)
    {
        val[utility::conversions::to_string_t("obsoletionWorkflowId")] = ModelBase::toJson(m_ObsoletionWorkflowId);
    }
    if(m_PickableWorkflowsIsSet)
    {
        val[utility::conversions::to_string_t("pickableWorkflows")] = ModelBase::toJson(m_PickableWorkflows);
    }
    if(m_ReleaseWorkflowIsSet)
    {
        val[utility::conversions::to_string_t("releaseWorkflow")] = ModelBase::toJson(m_ReleaseWorkflow);
    }
    if(m_ReleaseWorkflowIdIsSet)
    {
        val[utility::conversions::to_string_t("releaseWorkflowId")] = ModelBase::toJson(m_ReleaseWorkflowId);
    }
    if(m_UsingAutoPartNumberingIsSet)
    {
        val[utility::conversions::to_string_t("usingAutoPartNumbering")] = ModelBase::toJson(m_UsingAutoPartNumbering);
    }
    if(m_UsingAutoPartNumberingSchemeIsSet)
    {
        val[utility::conversions::to_string_t("usingAutoPartNumberingScheme")] = ModelBase::toJson(m_UsingAutoPartNumberingScheme);
    }
    if(m_UsingManagedWorkflowIsSet)
    {
        val[utility::conversions::to_string_t("usingManagedWorkflow")] = ModelBase::toJson(m_UsingManagedWorkflow);
    }

    return val;
}

bool BTActiveWorkflowInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("canCreateReleases")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canCreateReleases"));
        if(!fieldValue.is_null())
        {
            bool refVal_canCreateReleases;
            ok &= ModelBase::fromJson(fieldValue, refVal_canCreateReleases);
            setCanCreateReleases(refVal_canCreateReleases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canCurrentUserCreateReleases")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canCurrentUserCreateReleases"));
        if(!fieldValue.is_null())
        {
            bool refVal_canCurrentUserCreateReleases;
            ok &= ModelBase::fromJson(fieldValue, refVal_canCurrentUserCreateReleases);
            setCanCurrentUserCreateReleases(refVal_canCurrentUserCreateReleases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drawingCanDuplicatePartNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drawingCanDuplicatePartNumber"));
        if(!fieldValue.is_null())
        {
            bool refVal_drawingCanDuplicatePartNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_drawingCanDuplicatePartNumber);
            setDrawingCanDuplicatePartNumber(refVal_drawingCanDuplicatePartNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabledActiveMultipleWorkflows")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabledActiveMultipleWorkflows"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabledActiveMultipleWorkflows;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabledActiveMultipleWorkflows);
            setEnabledActiveMultipleWorkflows(refVal_enabledActiveMultipleWorkflows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("obsoletionWorkflow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("obsoletionWorkflow"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPublishedWorkflowInfo> refVal_obsoletionWorkflow;
            ok &= ModelBase::fromJson(fieldValue, refVal_obsoletionWorkflow);
            setObsoletionWorkflow(refVal_obsoletionWorkflow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("obsoletionWorkflowId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("obsoletionWorkflowId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_obsoletionWorkflowId;
            ok &= ModelBase::fromJson(fieldValue, refVal_obsoletionWorkflowId);
            setObsoletionWorkflowId(refVal_obsoletionWorkflowId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pickableWorkflows")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pickableWorkflows"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPublishedWorkflowInfo>> refVal_pickableWorkflows;
            ok &= ModelBase::fromJson(fieldValue, refVal_pickableWorkflows);
            setPickableWorkflows(refVal_pickableWorkflows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releaseWorkflow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releaseWorkflow"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPublishedWorkflowInfo> refVal_releaseWorkflow;
            ok &= ModelBase::fromJson(fieldValue, refVal_releaseWorkflow);
            setReleaseWorkflow(refVal_releaseWorkflow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releaseWorkflowId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releaseWorkflowId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_releaseWorkflowId;
            ok &= ModelBase::fromJson(fieldValue, refVal_releaseWorkflowId);
            setReleaseWorkflowId(refVal_releaseWorkflowId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usingAutoPartNumbering")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("usingAutoPartNumbering"));
        if(!fieldValue.is_null())
        {
            bool refVal_usingAutoPartNumbering;
            ok &= ModelBase::fromJson(fieldValue, refVal_usingAutoPartNumbering);
            setUsingAutoPartNumbering(refVal_usingAutoPartNumbering);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usingAutoPartNumberingScheme")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("usingAutoPartNumberingScheme"));
        if(!fieldValue.is_null())
        {
            bool refVal_usingAutoPartNumberingScheme;
            ok &= ModelBase::fromJson(fieldValue, refVal_usingAutoPartNumberingScheme);
            setUsingAutoPartNumberingScheme(refVal_usingAutoPartNumberingScheme);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usingManagedWorkflow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("usingManagedWorkflow"));
        if(!fieldValue.is_null())
        {
            bool refVal_usingManagedWorkflow;
            ok &= ModelBase::fromJson(fieldValue, refVal_usingManagedWorkflow);
            setUsingManagedWorkflow(refVal_usingManagedWorkflow);
        }
    }
    return ok;
}

void BTActiveWorkflowInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CanCreateReleasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canCreateReleases"), m_CanCreateReleases));
    }
    if(m_CanCurrentUserCreateReleasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canCurrentUserCreateReleases"), m_CanCurrentUserCreateReleases));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DrawingCanDuplicatePartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drawingCanDuplicatePartNumber"), m_DrawingCanDuplicatePartNumber));
    }
    if(m_EnabledActiveMultipleWorkflowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabledActiveMultipleWorkflows"), m_EnabledActiveMultipleWorkflows));
    }
    if(m_ObsoletionWorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("obsoletionWorkflow"), m_ObsoletionWorkflow));
    }
    if(m_ObsoletionWorkflowIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("obsoletionWorkflowId"), m_ObsoletionWorkflowId));
    }
    if(m_PickableWorkflowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pickableWorkflows"), m_PickableWorkflows));
    }
    if(m_ReleaseWorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releaseWorkflow"), m_ReleaseWorkflow));
    }
    if(m_ReleaseWorkflowIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releaseWorkflowId"), m_ReleaseWorkflowId));
    }
    if(m_UsingAutoPartNumberingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("usingAutoPartNumbering"), m_UsingAutoPartNumbering));
    }
    if(m_UsingAutoPartNumberingSchemeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("usingAutoPartNumberingScheme"), m_UsingAutoPartNumberingScheme));
    }
    if(m_UsingManagedWorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("usingManagedWorkflow"), m_UsingManagedWorkflow));
    }
}

bool BTActiveWorkflowInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("canCreateReleases")))
    {
        bool refVal_canCreateReleases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canCreateReleases")), refVal_canCreateReleases );
        setCanCreateReleases(refVal_canCreateReleases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canCurrentUserCreateReleases")))
    {
        bool refVal_canCurrentUserCreateReleases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canCurrentUserCreateReleases")), refVal_canCurrentUserCreateReleases );
        setCanCurrentUserCreateReleases(refVal_canCurrentUserCreateReleases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drawingCanDuplicatePartNumber")))
    {
        bool refVal_drawingCanDuplicatePartNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drawingCanDuplicatePartNumber")), refVal_drawingCanDuplicatePartNumber );
        setDrawingCanDuplicatePartNumber(refVal_drawingCanDuplicatePartNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabledActiveMultipleWorkflows")))
    {
        bool refVal_enabledActiveMultipleWorkflows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabledActiveMultipleWorkflows")), refVal_enabledActiveMultipleWorkflows );
        setEnabledActiveMultipleWorkflows(refVal_enabledActiveMultipleWorkflows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("obsoletionWorkflow")))
    {
        std::shared_ptr<BTPublishedWorkflowInfo> refVal_obsoletionWorkflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("obsoletionWorkflow")), refVal_obsoletionWorkflow );
        setObsoletionWorkflow(refVal_obsoletionWorkflow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("obsoletionWorkflowId")))
    {
        utility::string_t refVal_obsoletionWorkflowId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("obsoletionWorkflowId")), refVal_obsoletionWorkflowId );
        setObsoletionWorkflowId(refVal_obsoletionWorkflowId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pickableWorkflows")))
    {
        std::vector<std::shared_ptr<BTPublishedWorkflowInfo>> refVal_pickableWorkflows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pickableWorkflows")), refVal_pickableWorkflows );
        setPickableWorkflows(refVal_pickableWorkflows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releaseWorkflow")))
    {
        std::shared_ptr<BTPublishedWorkflowInfo> refVal_releaseWorkflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releaseWorkflow")), refVal_releaseWorkflow );
        setReleaseWorkflow(refVal_releaseWorkflow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releaseWorkflowId")))
    {
        utility::string_t refVal_releaseWorkflowId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releaseWorkflowId")), refVal_releaseWorkflowId );
        setReleaseWorkflowId(refVal_releaseWorkflowId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usingAutoPartNumbering")))
    {
        bool refVal_usingAutoPartNumbering;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("usingAutoPartNumbering")), refVal_usingAutoPartNumbering );
        setUsingAutoPartNumbering(refVal_usingAutoPartNumbering);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usingAutoPartNumberingScheme")))
    {
        bool refVal_usingAutoPartNumberingScheme;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("usingAutoPartNumberingScheme")), refVal_usingAutoPartNumberingScheme );
        setUsingAutoPartNumberingScheme(refVal_usingAutoPartNumberingScheme);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usingManagedWorkflow")))
    {
        bool refVal_usingManagedWorkflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("usingManagedWorkflow")), refVal_usingManagedWorkflow );
        setUsingManagedWorkflow(refVal_usingManagedWorkflow);
    }
    return ok;
}

bool BTActiveWorkflowInfo::isCanCreateReleases() const
{
    return m_CanCreateReleases;
}

void BTActiveWorkflowInfo::setCanCreateReleases(bool value)
{
    m_CanCreateReleases = value;
    m_CanCreateReleasesIsSet = true;
}

bool BTActiveWorkflowInfo::canCreateReleasesIsSet() const
{
    return m_CanCreateReleasesIsSet;
}

void BTActiveWorkflowInfo::unsetCanCreateReleases()
{
    m_CanCreateReleasesIsSet = false;
}
bool BTActiveWorkflowInfo::isCanCurrentUserCreateReleases() const
{
    return m_CanCurrentUserCreateReleases;
}

void BTActiveWorkflowInfo::setCanCurrentUserCreateReleases(bool value)
{
    m_CanCurrentUserCreateReleases = value;
    m_CanCurrentUserCreateReleasesIsSet = true;
}

bool BTActiveWorkflowInfo::canCurrentUserCreateReleasesIsSet() const
{
    return m_CanCurrentUserCreateReleasesIsSet;
}

void BTActiveWorkflowInfo::unsetCanCurrentUserCreateReleases()
{
    m_CanCurrentUserCreateReleasesIsSet = false;
}
utility::string_t BTActiveWorkflowInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTActiveWorkflowInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTActiveWorkflowInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTActiveWorkflowInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTActiveWorkflowInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTActiveWorkflowInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTActiveWorkflowInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTActiveWorkflowInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
bool BTActiveWorkflowInfo::isDrawingCanDuplicatePartNumber() const
{
    return m_DrawingCanDuplicatePartNumber;
}

void BTActiveWorkflowInfo::setDrawingCanDuplicatePartNumber(bool value)
{
    m_DrawingCanDuplicatePartNumber = value;
    m_DrawingCanDuplicatePartNumberIsSet = true;
}

bool BTActiveWorkflowInfo::drawingCanDuplicatePartNumberIsSet() const
{
    return m_DrawingCanDuplicatePartNumberIsSet;
}

void BTActiveWorkflowInfo::unsetDrawingCanDuplicatePartNumber()
{
    m_DrawingCanDuplicatePartNumberIsSet = false;
}
bool BTActiveWorkflowInfo::isEnabledActiveMultipleWorkflows() const
{
    return m_EnabledActiveMultipleWorkflows;
}

void BTActiveWorkflowInfo::setEnabledActiveMultipleWorkflows(bool value)
{
    m_EnabledActiveMultipleWorkflows = value;
    m_EnabledActiveMultipleWorkflowsIsSet = true;
}

bool BTActiveWorkflowInfo::enabledActiveMultipleWorkflowsIsSet() const
{
    return m_EnabledActiveMultipleWorkflowsIsSet;
}

void BTActiveWorkflowInfo::unsetEnabledActiveMultipleWorkflows()
{
    m_EnabledActiveMultipleWorkflowsIsSet = false;
}
std::shared_ptr<BTPublishedWorkflowInfo> BTActiveWorkflowInfo::getObsoletionWorkflow() const
{
    return m_ObsoletionWorkflow;
}

void BTActiveWorkflowInfo::setObsoletionWorkflow(const std::shared_ptr<BTPublishedWorkflowInfo>& value)
{
    m_ObsoletionWorkflow = value;
    m_ObsoletionWorkflowIsSet = true;
}

bool BTActiveWorkflowInfo::obsoletionWorkflowIsSet() const
{
    return m_ObsoletionWorkflowIsSet;
}

void BTActiveWorkflowInfo::unsetObsoletionWorkflow()
{
    m_ObsoletionWorkflowIsSet = false;
}
utility::string_t BTActiveWorkflowInfo::getObsoletionWorkflowId() const
{
    return m_ObsoletionWorkflowId;
}

void BTActiveWorkflowInfo::setObsoletionWorkflowId(const utility::string_t& value)
{
    m_ObsoletionWorkflowId = value;
    m_ObsoletionWorkflowIdIsSet = true;
}

bool BTActiveWorkflowInfo::obsoletionWorkflowIdIsSet() const
{
    return m_ObsoletionWorkflowIdIsSet;
}

void BTActiveWorkflowInfo::unsetObsoletionWorkflowId()
{
    m_ObsoletionWorkflowIdIsSet = false;
}
std::vector<std::shared_ptr<BTPublishedWorkflowInfo>>& BTActiveWorkflowInfo::getPickableWorkflows()
{
    return m_PickableWorkflows;
}

void BTActiveWorkflowInfo::setPickableWorkflows(const std::vector<std::shared_ptr<BTPublishedWorkflowInfo>>& value)
{
    m_PickableWorkflows = value;
    m_PickableWorkflowsIsSet = true;
}

bool BTActiveWorkflowInfo::pickableWorkflowsIsSet() const
{
    return m_PickableWorkflowsIsSet;
}

void BTActiveWorkflowInfo::unsetPickableWorkflows()
{
    m_PickableWorkflowsIsSet = false;
}
std::shared_ptr<BTPublishedWorkflowInfo> BTActiveWorkflowInfo::getReleaseWorkflow() const
{
    return m_ReleaseWorkflow;
}

void BTActiveWorkflowInfo::setReleaseWorkflow(const std::shared_ptr<BTPublishedWorkflowInfo>& value)
{
    m_ReleaseWorkflow = value;
    m_ReleaseWorkflowIsSet = true;
}

bool BTActiveWorkflowInfo::releaseWorkflowIsSet() const
{
    return m_ReleaseWorkflowIsSet;
}

void BTActiveWorkflowInfo::unsetReleaseWorkflow()
{
    m_ReleaseWorkflowIsSet = false;
}
utility::string_t BTActiveWorkflowInfo::getReleaseWorkflowId() const
{
    return m_ReleaseWorkflowId;
}

void BTActiveWorkflowInfo::setReleaseWorkflowId(const utility::string_t& value)
{
    m_ReleaseWorkflowId = value;
    m_ReleaseWorkflowIdIsSet = true;
}

bool BTActiveWorkflowInfo::releaseWorkflowIdIsSet() const
{
    return m_ReleaseWorkflowIdIsSet;
}

void BTActiveWorkflowInfo::unsetReleaseWorkflowId()
{
    m_ReleaseWorkflowIdIsSet = false;
}
bool BTActiveWorkflowInfo::isUsingAutoPartNumbering() const
{
    return m_UsingAutoPartNumbering;
}

void BTActiveWorkflowInfo::setUsingAutoPartNumbering(bool value)
{
    m_UsingAutoPartNumbering = value;
    m_UsingAutoPartNumberingIsSet = true;
}

bool BTActiveWorkflowInfo::usingAutoPartNumberingIsSet() const
{
    return m_UsingAutoPartNumberingIsSet;
}

void BTActiveWorkflowInfo::unsetUsingAutoPartNumbering()
{
    m_UsingAutoPartNumberingIsSet = false;
}
bool BTActiveWorkflowInfo::isUsingAutoPartNumberingScheme() const
{
    return m_UsingAutoPartNumberingScheme;
}

void BTActiveWorkflowInfo::setUsingAutoPartNumberingScheme(bool value)
{
    m_UsingAutoPartNumberingScheme = value;
    m_UsingAutoPartNumberingSchemeIsSet = true;
}

bool BTActiveWorkflowInfo::usingAutoPartNumberingSchemeIsSet() const
{
    return m_UsingAutoPartNumberingSchemeIsSet;
}

void BTActiveWorkflowInfo::unsetUsingAutoPartNumberingScheme()
{
    m_UsingAutoPartNumberingSchemeIsSet = false;
}
bool BTActiveWorkflowInfo::isUsingManagedWorkflow() const
{
    return m_UsingManagedWorkflow;
}

void BTActiveWorkflowInfo::setUsingManagedWorkflow(bool value)
{
    m_UsingManagedWorkflow = value;
    m_UsingManagedWorkflowIsSet = true;
}

bool BTActiveWorkflowInfo::usingManagedWorkflowIsSet() const
{
    return m_UsingManagedWorkflowIsSet;
}

void BTActiveWorkflowInfo::unsetUsingManagedWorkflow()
{
    m_UsingManagedWorkflowIsSet = false;
}
}
}
}
}


