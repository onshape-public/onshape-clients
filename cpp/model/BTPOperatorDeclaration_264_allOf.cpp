/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPOperatorDeclaration_264_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPOperatorDeclaration_264_allOf::BTPOperatorDeclaration_264_allOf()
{
    m_r_operator = utility::conversions::to_string_t("");
    m_r_operatorIsSet = false;
    m_SpaceBeforeOperatorIsSet = false;
    m_SpaceAfterOperatorIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPOperatorDeclaration_264_allOf::~BTPOperatorDeclaration_264_allOf()
{
}

void BTPOperatorDeclaration_264_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPOperatorDeclaration_264_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_r_operatorIsSet)
    {
        val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m_r_operator);
    }
    if(m_SpaceBeforeOperatorIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeOperator")] = ModelBase::toJson(m_SpaceBeforeOperator);
    }
    if(m_SpaceAfterOperatorIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterOperator")] = ModelBase::toJson(m_SpaceAfterOperator);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPOperatorDeclaration_264_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("operator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("operator"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_operator;
            ok &= ModelBase::fromJson(fieldValue, refVal_operator);
            setROperator(refVal_operator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeOperator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeOperator"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeOperator;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeOperator);
            setSpaceBeforeOperator(refVal_spaceBeforeOperator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterOperator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterOperator"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterOperator;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterOperator);
            setSpaceAfterOperator(refVal_spaceAfterOperator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPOperatorDeclaration_264_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_r_operatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m_r_operator));
    }
    if(m_SpaceBeforeOperatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeOperator"), m_SpaceBeforeOperator));
    }
    if(m_SpaceAfterOperatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterOperator"), m_SpaceAfterOperator));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPOperatorDeclaration_264_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("operator")))
    {
        utility::string_t refVal_operator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator")), refVal_operator );
        setROperator(refVal_operator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeOperator")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeOperator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeOperator")), refVal_spaceBeforeOperator );
        setSpaceBeforeOperator(refVal_spaceBeforeOperator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterOperator")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterOperator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterOperator")), refVal_spaceAfterOperator );
        setSpaceAfterOperator(refVal_spaceAfterOperator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTPOperatorDeclaration_264_allOf::getROperator() const
{
    return m_r_operator;
}

void BTPOperatorDeclaration_264_allOf::setROperator(const utility::string_t& value)
{
    m_r_operator = value;
    m_r_operatorIsSet = true;
}

bool BTPOperatorDeclaration_264_allOf::rOperatorIsSet() const
{
    return m_r_operatorIsSet;
}

void BTPOperatorDeclaration_264_allOf::unsetr_operator()
{
    m_r_operatorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPOperatorDeclaration_264_allOf::getSpaceBeforeOperator() const
{
    return m_SpaceBeforeOperator;
}

void BTPOperatorDeclaration_264_allOf::setSpaceBeforeOperator(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeOperator = value;
    m_SpaceBeforeOperatorIsSet = true;
}

bool BTPOperatorDeclaration_264_allOf::spaceBeforeOperatorIsSet() const
{
    return m_SpaceBeforeOperatorIsSet;
}

void BTPOperatorDeclaration_264_allOf::unsetSpaceBeforeOperator()
{
    m_SpaceBeforeOperatorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPOperatorDeclaration_264_allOf::getSpaceAfterOperator() const
{
    return m_SpaceAfterOperator;
}

void BTPOperatorDeclaration_264_allOf::setSpaceAfterOperator(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterOperator = value;
    m_SpaceAfterOperatorIsSet = true;
}

bool BTPOperatorDeclaration_264_allOf::spaceAfterOperatorIsSet() const
{
    return m_SpaceAfterOperatorIsSet;
}

void BTPOperatorDeclaration_264_allOf::unsetSpaceAfterOperator()
{
    m_SpaceAfterOperatorIsSet = false;
}
utility::string_t BTPOperatorDeclaration_264_allOf::getBtType() const
{
    return m_BtType;
}

void BTPOperatorDeclaration_264_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPOperatorDeclaration_264_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPOperatorDeclaration_264_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


