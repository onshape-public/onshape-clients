/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTIdentityInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTIdentityInfo::BTIdentityInfo()
{
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IdentityType = 0;
    m_IdentityTypeIsSet = false;
    m_TeamIsSet = false;
    m_UserIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTIdentityInfo::~BTIdentityInfo()
{
}

void BTIdentityInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTIdentityInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IdentityTypeIsSet)
    {
        val[utility::conversions::to_string_t("identityType")] = ModelBase::toJson(m_IdentityType);
    }
    if(m_TeamIsSet)
    {
        val[utility::conversions::to_string_t("team")] = ModelBase::toJson(m_Team);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTIdentityInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("identityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("identityType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_identityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_identityType);
            setIdentityType(refVal_identityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("team")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("team"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTTeamSummaryInfo> refVal_team;
            ok &= ModelBase::fromJson(fieldValue, refVal_team);
            setTeam(refVal_team);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTIdentityInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IdentityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("identityType"), m_IdentityType));
    }
    if(m_TeamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("team"), m_Team));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTIdentityInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("identityType")))
    {
        int32_t refVal_identityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("identityType")), refVal_identityType );
        setIdentityType(refVal_identityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("team")))
    {
        std::shared_ptr<BTTeamSummaryInfo> refVal_team;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("team")), refVal_team );
        setTeam(refVal_team);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user")), refVal_user );
        setUser(refVal_user);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTIdentityInfo::getHref() const
{
    return m_Href;
}

void BTIdentityInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTIdentityInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTIdentityInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTIdentityInfo::getId() const
{
    return m_Id;
}

void BTIdentityInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTIdentityInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTIdentityInfo::unsetId()
{
    m_IdIsSet = false;
}
int32_t BTIdentityInfo::getIdentityType() const
{
    return m_IdentityType;
}

void BTIdentityInfo::setIdentityType(int32_t value)
{
    m_IdentityType = value;
    m_IdentityTypeIsSet = true;
}

bool BTIdentityInfo::identityTypeIsSet() const
{
    return m_IdentityTypeIsSet;
}

void BTIdentityInfo::unsetIdentityType()
{
    m_IdentityTypeIsSet = false;
}
std::shared_ptr<BTTeamSummaryInfo> BTIdentityInfo::getTeam() const
{
    return m_Team;
}

void BTIdentityInfo::setTeam(const std::shared_ptr<BTTeamSummaryInfo>& value)
{
    m_Team = value;
    m_TeamIsSet = true;
}

bool BTIdentityInfo::teamIsSet() const
{
    return m_TeamIsSet;
}

void BTIdentityInfo::unsetTeam()
{
    m_TeamIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTIdentityInfo::getUser() const
{
    return m_User;
}

void BTIdentityInfo::setUser(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool BTIdentityInfo::userIsSet() const
{
    return m_UserIsSet;
}

void BTIdentityInfo::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t BTIdentityInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTIdentityInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTIdentityInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTIdentityInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


