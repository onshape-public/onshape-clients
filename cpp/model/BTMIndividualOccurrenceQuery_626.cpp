/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMIndividualOccurrenceQuery_626.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMIndividualOccurrenceQuery_626::BTMIndividualOccurrenceQuery_626()
{
}

BTMIndividualOccurrenceQuery_626::~BTMIndividualOccurrenceQuery_626()
{
}

void BTMIndividualOccurrenceQuery_626::validate()
{
    // TODO: implement validation
}

web::json::value BTMIndividualOccurrenceQuery_626::toJson() const
{
    web::json::value val = this->BTMIndividualQueryWithOccurrenceBase_904::toJson();
    

    return val;
}

bool BTMIndividualOccurrenceQuery_626::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMIndividualQueryWithOccurrenceBase_904::fromJson(val);
    
    return ok;
}

void BTMIndividualOccurrenceQuery_626::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DeterministicIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicIdList"), m_DeterministicIdList));
    }
    if(m_DeterministicIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicIds"), m_DeterministicIds));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_QueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("query"), m_Query));
    }
    if(m_QueryStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queryString"), m_QueryString));
    }
}

bool BTMIndividualOccurrenceQuery_626::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicIdList")))
    {
        std::shared_ptr<BTMIndividualQueryBase_139> refVal_deterministicIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicIdList")), refVal_deterministicIdList );
        setDeterministicIdList(refVal_deterministicIdList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicIds")))
    {
        std::vector<utility::string_t> refVal_deterministicIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicIds")), refVal_deterministicIds );
        setDeterministicIds(refVal_deterministicIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        std::vector<utility::string_t> refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("query")))
    {
        std::shared_ptr<BTMIndividualQueryBase_139> refVal_query;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("query")), refVal_query );
        setQuery(refVal_query);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryString")))
    {
        utility::string_t refVal_queryString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("queryString")), refVal_queryString );
        setQueryString(refVal_queryString);
    }
    return ok;
}

}
}
}
}


