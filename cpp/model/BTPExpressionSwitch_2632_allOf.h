/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPExpressionSwitch_2632_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionSwitch_2632_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionSwitch_2632_allOf_H_


#include "../ModelBase.h"

#include "BTPExpression_9.h"
#include <cpprest/details/basic_types.h>
#include "BTPLiteralMap_256.h"
#include "BTPSpace_10.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPExpressionSwitch_2632_allOf
    : public ModelBase
{
public:
    BTPExpressionSwitch_2632_allOf();
    virtual ~BTPExpressionSwitch_2632_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPExpressionSwitch_2632_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPExpression_9> getSelector() const;
    bool selectorIsSet() const;
    void unsetSelector();

    void setSelector(const std::shared_ptr<BTPExpression_9>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterSwitch() const;
    bool spaceAfterSwitchIsSet() const;
    void unsetSpaceAfterSwitch();

    void setSpaceAfterSwitch(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPLiteralMap_256> getChoices() const;
    bool choicesIsSet() const;
    void unsetChoices();

    void setChoices(const std::shared_ptr<BTPLiteralMap_256>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    std::shared_ptr<BTPExpression_9> m_Selector;
    bool m_SelectorIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterSwitch;
    bool m_SpaceAfterSwitchIsSet;
    std::shared_ptr<BTPLiteralMap_256> m_Choices;
    bool m_ChoicesIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPExpressionSwitch_2632_allOf_H_ */
