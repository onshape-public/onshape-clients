/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMoveElementParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMoveElementParams::BTMoveElementParams()
{
    m_AnchorElementId = utility::conversions::to_string_t("");
    m_AnchorElementIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ElementOriginalToNewMapIsSet = false;
    m_ElementsIsSet = false;
    m_GenerateUnknownMessages = false;
    m_GenerateUnknownMessagesIsSet = false;
    m_ImportDataIsSet = false;
    m_IsCopy = false;
    m_IsCopyIsSet = false;
    m_IsDeepCopy = false;
    m_IsDeepCopyIsSet = false;
    m_IsGroupAnchor = false;
    m_IsGroupAnchorIsSet = false;
    m_IsNewDocument = false;
    m_IsNewDocumentIsSet = false;
    m_IsPublic = false;
    m_IsPublicIsSet = false;
    m_IsSelectivePartOut = false;
    m_IsSelectivePartOutIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NeedNewVersion = false;
    m_NeedNewVersionIsSet = false;
    m_OwnerEmail = utility::conversions::to_string_t("");
    m_OwnerEmailIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = 0;
    m_OwnerTypeIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_SourceDocumentId = utility::conversions::to_string_t("");
    m_SourceDocumentIdIsSet = false;
    m_SourceWorkspaceId = utility::conversions::to_string_t("");
    m_SourceWorkspaceIdIsSet = false;
    m_TagsIsSet = false;
    m_TargetDocumentId = utility::conversions::to_string_t("");
    m_TargetDocumentIdIsSet = false;
    m_TargetWorkspaceId = utility::conversions::to_string_t("");
    m_TargetWorkspaceIdIsSet = false;
    m_VersionName = utility::conversions::to_string_t("");
    m_VersionNameIsSet = false;
}

BTMoveElementParams::~BTMoveElementParams()
{
}

void BTMoveElementParams::validate()
{
    // TODO: implement validation
}

web::json::value BTMoveElementParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AnchorElementIdIsSet)
    {
        val[utility::conversions::to_string_t("anchorElementId")] = ModelBase::toJson(m_AnchorElementId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ElementOriginalToNewMapIsSet)
    {
        val[utility::conversions::to_string_t("elementOriginalToNewMap")] = ModelBase::toJson(m_ElementOriginalToNewMap);
    }
    if(m_ElementsIsSet)
    {
        val[utility::conversions::to_string_t("elements")] = ModelBase::toJson(m_Elements);
    }
    if(m_GenerateUnknownMessagesIsSet)
    {
        val[utility::conversions::to_string_t("generateUnknownMessages")] = ModelBase::toJson(m_GenerateUnknownMessages);
    }
    if(m_ImportDataIsSet)
    {
        val[utility::conversions::to_string_t("importData")] = ModelBase::toJson(m_ImportData);
    }
    if(m_IsCopyIsSet)
    {
        val[utility::conversions::to_string_t("isCopy")] = ModelBase::toJson(m_IsCopy);
    }
    if(m_IsDeepCopyIsSet)
    {
        val[utility::conversions::to_string_t("isDeepCopy")] = ModelBase::toJson(m_IsDeepCopy);
    }
    if(m_IsGroupAnchorIsSet)
    {
        val[utility::conversions::to_string_t("isGroupAnchor")] = ModelBase::toJson(m_IsGroupAnchor);
    }
    if(m_IsNewDocumentIsSet)
    {
        val[utility::conversions::to_string_t("isNewDocument")] = ModelBase::toJson(m_IsNewDocument);
    }
    if(m_IsPublicIsSet)
    {
        val[utility::conversions::to_string_t("isPublic")] = ModelBase::toJson(m_IsPublic);
    }
    if(m_IsSelectivePartOutIsSet)
    {
        val[utility::conversions::to_string_t("isSelectivePartOut")] = ModelBase::toJson(m_IsSelectivePartOut);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NeedNewVersionIsSet)
    {
        val[utility::conversions::to_string_t("needNewVersion")] = ModelBase::toJson(m_NeedNewVersion);
    }
    if(m_OwnerEmailIsSet)
    {
        val[utility::conversions::to_string_t("ownerEmail")] = ModelBase::toJson(m_OwnerEmail);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_SourceDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceDocumentId")] = ModelBase::toJson(m_SourceDocumentId);
    }
    if(m_SourceWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceWorkspaceId")] = ModelBase::toJson(m_SourceWorkspaceId);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }
    if(m_TargetDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("targetDocumentId")] = ModelBase::toJson(m_TargetDocumentId);
    }
    if(m_TargetWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("targetWorkspaceId")] = ModelBase::toJson(m_TargetWorkspaceId);
    }
    if(m_VersionNameIsSet)
    {
        val[utility::conversions::to_string_t("versionName")] = ModelBase::toJson(m_VersionName);
    }

    return val;
}

bool BTMoveElementParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("anchorElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("anchorElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_anchorElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_anchorElementId);
            setAnchorElementId(refVal_anchorElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementOriginalToNewMap")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementOriginalToNewMap"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_elementOriginalToNewMap;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementOriginalToNewMap);
            setElementOriginalToNewMap(refVal_elementOriginalToNewMap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elements")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elements"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_elements;
            ok &= ModelBase::fromJson(fieldValue, refVal_elements);
            setElements(refVal_elements);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("generateUnknownMessages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("generateUnknownMessages"));
        if(!fieldValue.is_null())
        {
            bool refVal_generateUnknownMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_generateUnknownMessages);
            setGenerateUnknownMessages(refVal_generateUnknownMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importData"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_importData;
            ok &= ModelBase::fromJson(fieldValue, refVal_importData);
            setImportData(refVal_importData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isCopy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isCopy"));
        if(!fieldValue.is_null())
        {
            bool refVal_isCopy;
            ok &= ModelBase::fromJson(fieldValue, refVal_isCopy);
            setIsCopy(refVal_isCopy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isDeepCopy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isDeepCopy"));
        if(!fieldValue.is_null())
        {
            bool refVal_isDeepCopy;
            ok &= ModelBase::fromJson(fieldValue, refVal_isDeepCopy);
            setIsDeepCopy(refVal_isDeepCopy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isGroupAnchor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isGroupAnchor"));
        if(!fieldValue.is_null())
        {
            bool refVal_isGroupAnchor;
            ok &= ModelBase::fromJson(fieldValue, refVal_isGroupAnchor);
            setIsGroupAnchor(refVal_isGroupAnchor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isNewDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isNewDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_isNewDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_isNewDocument);
            setIsNewDocument(refVal_isNewDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPublic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPublic"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPublic;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPublic);
            setIsPublic(refVal_isPublic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSelectivePartOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSelectivePartOut"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSelectivePartOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSelectivePartOut);
            setIsSelectivePartOut(refVal_isSelectivePartOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("needNewVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("needNewVersion"));
        if(!fieldValue.is_null())
        {
            bool refVal_needNewVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_needNewVersion);
            setNeedNewVersion(refVal_needNewVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerEmail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerEmail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerEmail);
            setOwnerEmail(refVal_ownerEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceDocumentId);
            setSourceDocumentId(refVal_sourceDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceWorkspaceId);
            setSourceWorkspaceId(refVal_sourceWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetDocumentId);
            setTargetDocumentId(refVal_targetDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetWorkspaceId);
            setTargetWorkspaceId(refVal_targetWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionName);
            setVersionName(refVal_versionName);
        }
    }
    return ok;
}

void BTMoveElementParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AnchorElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anchorElementId"), m_AnchorElementId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ElementOriginalToNewMapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementOriginalToNewMap"), m_ElementOriginalToNewMap));
    }
    if(m_ElementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elements"), m_Elements));
    }
    if(m_GenerateUnknownMessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("generateUnknownMessages"), m_GenerateUnknownMessages));
    }
    if(m_ImportDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importData"), m_ImportData));
    }
    if(m_IsCopyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isCopy"), m_IsCopy));
    }
    if(m_IsDeepCopyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isDeepCopy"), m_IsDeepCopy));
    }
    if(m_IsGroupAnchorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isGroupAnchor"), m_IsGroupAnchor));
    }
    if(m_IsNewDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isNewDocument"), m_IsNewDocument));
    }
    if(m_IsPublicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPublic"), m_IsPublic));
    }
    if(m_IsSelectivePartOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSelectivePartOut"), m_IsSelectivePartOut));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NeedNewVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("needNewVersion"), m_NeedNewVersion));
    }
    if(m_OwnerEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerEmail"), m_OwnerEmail));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_SourceDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceDocumentId"), m_SourceDocumentId));
    }
    if(m_SourceWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceWorkspaceId"), m_SourceWorkspaceId));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_TargetDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetDocumentId"), m_TargetDocumentId));
    }
    if(m_TargetWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetWorkspaceId"), m_TargetWorkspaceId));
    }
    if(m_VersionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionName"), m_VersionName));
    }
}

bool BTMoveElementParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("anchorElementId")))
    {
        utility::string_t refVal_anchorElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anchorElementId")), refVal_anchorElementId );
        setAnchorElementId(refVal_anchorElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementOriginalToNewMap")))
    {
        std::map<utility::string_t, utility::string_t> refVal_elementOriginalToNewMap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementOriginalToNewMap")), refVal_elementOriginalToNewMap );
        setElementOriginalToNewMap(refVal_elementOriginalToNewMap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elements")))
    {
        std::vector<utility::string_t> refVal_elements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elements")), refVal_elements );
        setElements(refVal_elements);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("generateUnknownMessages")))
    {
        bool refVal_generateUnknownMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("generateUnknownMessages")), refVal_generateUnknownMessages );
        setGenerateUnknownMessages(refVal_generateUnknownMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importData")))
    {
        std::vector<utility::string_t> refVal_importData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importData")), refVal_importData );
        setImportData(refVal_importData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isCopy")))
    {
        bool refVal_isCopy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isCopy")), refVal_isCopy );
        setIsCopy(refVal_isCopy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isDeepCopy")))
    {
        bool refVal_isDeepCopy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isDeepCopy")), refVal_isDeepCopy );
        setIsDeepCopy(refVal_isDeepCopy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isGroupAnchor")))
    {
        bool refVal_isGroupAnchor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isGroupAnchor")), refVal_isGroupAnchor );
        setIsGroupAnchor(refVal_isGroupAnchor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isNewDocument")))
    {
        bool refVal_isNewDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isNewDocument")), refVal_isNewDocument );
        setIsNewDocument(refVal_isNewDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPublic")))
    {
        bool refVal_isPublic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPublic")), refVal_isPublic );
        setIsPublic(refVal_isPublic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSelectivePartOut")))
    {
        bool refVal_isSelectivePartOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSelectivePartOut")), refVal_isSelectivePartOut );
        setIsSelectivePartOut(refVal_isSelectivePartOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("needNewVersion")))
    {
        bool refVal_needNewVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("needNewVersion")), refVal_needNewVersion );
        setNeedNewVersion(refVal_needNewVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerEmail")))
    {
        utility::string_t refVal_ownerEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerEmail")), refVal_ownerEmail );
        setOwnerEmail(refVal_ownerEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        int32_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceDocumentId")))
    {
        utility::string_t refVal_sourceDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceDocumentId")), refVal_sourceDocumentId );
        setSourceDocumentId(refVal_sourceDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceWorkspaceId")))
    {
        utility::string_t refVal_sourceWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceWorkspaceId")), refVal_sourceWorkspaceId );
        setSourceWorkspaceId(refVal_sourceWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetDocumentId")))
    {
        utility::string_t refVal_targetDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetDocumentId")), refVal_targetDocumentId );
        setTargetDocumentId(refVal_targetDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetWorkspaceId")))
    {
        utility::string_t refVal_targetWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetWorkspaceId")), refVal_targetWorkspaceId );
        setTargetWorkspaceId(refVal_targetWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionName")))
    {
        utility::string_t refVal_versionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionName")), refVal_versionName );
        setVersionName(refVal_versionName);
    }
    return ok;
}

utility::string_t BTMoveElementParams::getAnchorElementId() const
{
    return m_AnchorElementId;
}

void BTMoveElementParams::setAnchorElementId(const utility::string_t& value)
{
    m_AnchorElementId = value;
    m_AnchorElementIdIsSet = true;
}

bool BTMoveElementParams::anchorElementIdIsSet() const
{
    return m_AnchorElementIdIsSet;
}

void BTMoveElementParams::unsetAnchorElementId()
{
    m_AnchorElementIdIsSet = false;
}
utility::string_t BTMoveElementParams::getDescription() const
{
    return m_Description;
}

void BTMoveElementParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTMoveElementParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTMoveElementParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::map<utility::string_t, utility::string_t>& BTMoveElementParams::getElementOriginalToNewMap()
{
    return m_ElementOriginalToNewMap;
}

void BTMoveElementParams::setElementOriginalToNewMap(const std::map<utility::string_t, utility::string_t>& value)
{
    m_ElementOriginalToNewMap = value;
    m_ElementOriginalToNewMapIsSet = true;
}

bool BTMoveElementParams::elementOriginalToNewMapIsSet() const
{
    return m_ElementOriginalToNewMapIsSet;
}

void BTMoveElementParams::unsetElementOriginalToNewMap()
{
    m_ElementOriginalToNewMapIsSet = false;
}
std::vector<utility::string_t>& BTMoveElementParams::getElements()
{
    return m_Elements;
}

void BTMoveElementParams::setElements(const std::vector<utility::string_t>& value)
{
    m_Elements = value;
    m_ElementsIsSet = true;
}

bool BTMoveElementParams::elementsIsSet() const
{
    return m_ElementsIsSet;
}

void BTMoveElementParams::unsetElements()
{
    m_ElementsIsSet = false;
}
bool BTMoveElementParams::isGenerateUnknownMessages() const
{
    return m_GenerateUnknownMessages;
}

void BTMoveElementParams::setGenerateUnknownMessages(bool value)
{
    m_GenerateUnknownMessages = value;
    m_GenerateUnknownMessagesIsSet = true;
}

bool BTMoveElementParams::generateUnknownMessagesIsSet() const
{
    return m_GenerateUnknownMessagesIsSet;
}

void BTMoveElementParams::unsetGenerateUnknownMessages()
{
    m_GenerateUnknownMessagesIsSet = false;
}
std::vector<utility::string_t>& BTMoveElementParams::getImportData()
{
    return m_ImportData;
}

void BTMoveElementParams::setImportData(const std::vector<utility::string_t>& value)
{
    m_ImportData = value;
    m_ImportDataIsSet = true;
}

bool BTMoveElementParams::importDataIsSet() const
{
    return m_ImportDataIsSet;
}

void BTMoveElementParams::unsetImportData()
{
    m_ImportDataIsSet = false;
}
bool BTMoveElementParams::isIsCopy() const
{
    return m_IsCopy;
}

void BTMoveElementParams::setIsCopy(bool value)
{
    m_IsCopy = value;
    m_IsCopyIsSet = true;
}

bool BTMoveElementParams::isCopyIsSet() const
{
    return m_IsCopyIsSet;
}

void BTMoveElementParams::unsetIsCopy()
{
    m_IsCopyIsSet = false;
}
bool BTMoveElementParams::isIsDeepCopy() const
{
    return m_IsDeepCopy;
}

void BTMoveElementParams::setIsDeepCopy(bool value)
{
    m_IsDeepCopy = value;
    m_IsDeepCopyIsSet = true;
}

bool BTMoveElementParams::isDeepCopyIsSet() const
{
    return m_IsDeepCopyIsSet;
}

void BTMoveElementParams::unsetIsDeepCopy()
{
    m_IsDeepCopyIsSet = false;
}
bool BTMoveElementParams::isIsGroupAnchor() const
{
    return m_IsGroupAnchor;
}

void BTMoveElementParams::setIsGroupAnchor(bool value)
{
    m_IsGroupAnchor = value;
    m_IsGroupAnchorIsSet = true;
}

bool BTMoveElementParams::isGroupAnchorIsSet() const
{
    return m_IsGroupAnchorIsSet;
}

void BTMoveElementParams::unsetIsGroupAnchor()
{
    m_IsGroupAnchorIsSet = false;
}
bool BTMoveElementParams::isIsNewDocument() const
{
    return m_IsNewDocument;
}

void BTMoveElementParams::setIsNewDocument(bool value)
{
    m_IsNewDocument = value;
    m_IsNewDocumentIsSet = true;
}

bool BTMoveElementParams::isNewDocumentIsSet() const
{
    return m_IsNewDocumentIsSet;
}

void BTMoveElementParams::unsetIsNewDocument()
{
    m_IsNewDocumentIsSet = false;
}
bool BTMoveElementParams::isIsPublic() const
{
    return m_IsPublic;
}

void BTMoveElementParams::setIsPublic(bool value)
{
    m_IsPublic = value;
    m_IsPublicIsSet = true;
}

bool BTMoveElementParams::isPublicIsSet() const
{
    return m_IsPublicIsSet;
}

void BTMoveElementParams::unsetIsPublic()
{
    m_IsPublicIsSet = false;
}
bool BTMoveElementParams::isIsSelectivePartOut() const
{
    return m_IsSelectivePartOut;
}

void BTMoveElementParams::setIsSelectivePartOut(bool value)
{
    m_IsSelectivePartOut = value;
    m_IsSelectivePartOutIsSet = true;
}

bool BTMoveElementParams::isSelectivePartOutIsSet() const
{
    return m_IsSelectivePartOutIsSet;
}

void BTMoveElementParams::unsetIsSelectivePartOut()
{
    m_IsSelectivePartOutIsSet = false;
}
utility::string_t BTMoveElementParams::getName() const
{
    return m_Name;
}

void BTMoveElementParams::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTMoveElementParams::nameIsSet() const
{
    return m_NameIsSet;
}

void BTMoveElementParams::unsetName()
{
    m_NameIsSet = false;
}
bool BTMoveElementParams::isNeedNewVersion() const
{
    return m_NeedNewVersion;
}

void BTMoveElementParams::setNeedNewVersion(bool value)
{
    m_NeedNewVersion = value;
    m_NeedNewVersionIsSet = true;
}

bool BTMoveElementParams::needNewVersionIsSet() const
{
    return m_NeedNewVersionIsSet;
}

void BTMoveElementParams::unsetNeedNewVersion()
{
    m_NeedNewVersionIsSet = false;
}
utility::string_t BTMoveElementParams::getOwnerEmail() const
{
    return m_OwnerEmail;
}

void BTMoveElementParams::setOwnerEmail(const utility::string_t& value)
{
    m_OwnerEmail = value;
    m_OwnerEmailIsSet = true;
}

bool BTMoveElementParams::ownerEmailIsSet() const
{
    return m_OwnerEmailIsSet;
}

void BTMoveElementParams::unsetOwnerEmail()
{
    m_OwnerEmailIsSet = false;
}
utility::string_t BTMoveElementParams::getOwnerId() const
{
    return m_OwnerId;
}

void BTMoveElementParams::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTMoveElementParams::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTMoveElementParams::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
int32_t BTMoveElementParams::getOwnerType() const
{
    return m_OwnerType;
}

void BTMoveElementParams::setOwnerType(int32_t value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTMoveElementParams::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTMoveElementParams::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
utility::string_t BTMoveElementParams::getParentId() const
{
    return m_ParentId;
}

void BTMoveElementParams::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTMoveElementParams::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTMoveElementParams::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTMoveElementParams::getProjectId() const
{
    return m_ProjectId;
}

void BTMoveElementParams::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTMoveElementParams::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTMoveElementParams::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
utility::string_t BTMoveElementParams::getSourceDocumentId() const
{
    return m_SourceDocumentId;
}

void BTMoveElementParams::setSourceDocumentId(const utility::string_t& value)
{
    m_SourceDocumentId = value;
    m_SourceDocumentIdIsSet = true;
}

bool BTMoveElementParams::sourceDocumentIdIsSet() const
{
    return m_SourceDocumentIdIsSet;
}

void BTMoveElementParams::unsetSourceDocumentId()
{
    m_SourceDocumentIdIsSet = false;
}
utility::string_t BTMoveElementParams::getSourceWorkspaceId() const
{
    return m_SourceWorkspaceId;
}

void BTMoveElementParams::setSourceWorkspaceId(const utility::string_t& value)
{
    m_SourceWorkspaceId = value;
    m_SourceWorkspaceIdIsSet = true;
}

bool BTMoveElementParams::sourceWorkspaceIdIsSet() const
{
    return m_SourceWorkspaceIdIsSet;
}

void BTMoveElementParams::unsetSourceWorkspaceId()
{
    m_SourceWorkspaceIdIsSet = false;
}
std::vector<utility::string_t>& BTMoveElementParams::getTags()
{
    return m_Tags;
}

void BTMoveElementParams::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool BTMoveElementParams::tagsIsSet() const
{
    return m_TagsIsSet;
}

void BTMoveElementParams::unsetTags()
{
    m_TagsIsSet = false;
}
utility::string_t BTMoveElementParams::getTargetDocumentId() const
{
    return m_TargetDocumentId;
}

void BTMoveElementParams::setTargetDocumentId(const utility::string_t& value)
{
    m_TargetDocumentId = value;
    m_TargetDocumentIdIsSet = true;
}

bool BTMoveElementParams::targetDocumentIdIsSet() const
{
    return m_TargetDocumentIdIsSet;
}

void BTMoveElementParams::unsetTargetDocumentId()
{
    m_TargetDocumentIdIsSet = false;
}
utility::string_t BTMoveElementParams::getTargetWorkspaceId() const
{
    return m_TargetWorkspaceId;
}

void BTMoveElementParams::setTargetWorkspaceId(const utility::string_t& value)
{
    m_TargetWorkspaceId = value;
    m_TargetWorkspaceIdIsSet = true;
}

bool BTMoveElementParams::targetWorkspaceIdIsSet() const
{
    return m_TargetWorkspaceIdIsSet;
}

void BTMoveElementParams::unsetTargetWorkspaceId()
{
    m_TargetWorkspaceIdIsSet = false;
}
utility::string_t BTMoveElementParams::getVersionName() const
{
    return m_VersionName;
}

void BTMoveElementParams::setVersionName(const utility::string_t& value)
{
    m_VersionName = value;
    m_VersionNameIsSet = true;
}

bool BTMoveElementParams::versionNameIsSet() const
{
    return m_VersionNameIsSet;
}

void BTMoveElementParams::unsetVersionName()
{
    m_VersionNameIsSet = false;
}
}
}
}
}


