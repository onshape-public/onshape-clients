/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTVersionInfoBase_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTVersionInfoBase_allOf::BTVersionInfoBase_allOf()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ModifiedAt = utility::datetime();
    m_ModifiedAtIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_LastModifierIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_CreatorIsSet = false;
    m_ThumbnailIsSet = false;
    m_Microversion = utility::conversions::to_string_t("");
    m_MicroversionIsSet = false;
    m_ParentsIsSet = false;
    m_OverrideDate = utility::datetime();
    m_OverrideDateIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Parent = utility::conversions::to_string_t("");
    m_ParentIsSet = false;
}

BTVersionInfoBase_allOf::~BTVersionInfoBase_allOf()
{
}

void BTVersionInfoBase_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTVersionInfoBase_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ModifiedAtIsSet)
    {
        val[utility::conversions::to_string_t("modifiedAt")] = ModelBase::toJson(m_ModifiedAt);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_LastModifierIsSet)
    {
        val[utility::conversions::to_string_t("lastModifier")] = ModelBase::toJson(m_LastModifier);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_CreatorIsSet)
    {
        val[utility::conversions::to_string_t("creator")] = ModelBase::toJson(m_Creator);
    }
    if(m_ThumbnailIsSet)
    {
        val[utility::conversions::to_string_t("thumbnail")] = ModelBase::toJson(m_Thumbnail);
    }
    if(m_MicroversionIsSet)
    {
        val[utility::conversions::to_string_t("microversion")] = ModelBase::toJson(m_Microversion);
    }
    if(m_ParentsIsSet)
    {
        val[utility::conversions::to_string_t("parents")] = ModelBase::toJson(m_Parents);
    }
    if(m_OverrideDateIsSet)
    {
        val[utility::conversions::to_string_t("overrideDate")] = ModelBase::toJson(m_OverrideDate);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t("parent")] = ModelBase::toJson(m_Parent);
    }

    return val;
}

bool BTVersionInfoBase_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_modifiedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedAt);
            setModifiedAt(refVal_modifiedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastModifier")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastModifier"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_lastModifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastModifier);
            setLastModifier(refVal_lastModifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("creator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creator"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_creator;
            ok &= ModelBase::fromJson(fieldValue, refVal_creator);
            setCreator(refVal_creator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnail);
            setThumbnail(refVal_thumbnail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversion);
            setMicroversion(refVal_microversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parents"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVersionInfo>> refVal_parents;
            ok &= ModelBase::fromJson(fieldValue, refVal_parents);
            setParents(refVal_parents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("overrideDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("overrideDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_overrideDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_overrideDate);
            setOverrideDate(refVal_overrideDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parent;
            ok &= ModelBase::fromJson(fieldValue, refVal_parent);
            setParent(refVal_parent);
        }
    }
    return ok;
}

void BTVersionInfoBase_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_LastModifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastModifier"), m_LastModifier));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_CreatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creator"), m_Creator));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnail"), m_Thumbnail));
    }
    if(m_MicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversion"), m_Microversion));
    }
    if(m_ParentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parents"), m_Parents));
    }
    if(m_OverrideDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("overrideDate"), m_OverrideDate));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parent"), m_Parent));
    }
}

bool BTVersionInfoBase_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastModifier")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_lastModifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastModifier")), refVal_lastModifier );
        setLastModifier(refVal_lastModifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creator")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_creator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creator")), refVal_creator );
        setCreator(refVal_creator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnail")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnail")), refVal_thumbnail );
        setThumbnail(refVal_thumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversion")))
    {
        utility::string_t refVal_microversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversion")), refVal_microversion );
        setMicroversion(refVal_microversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parents")))
    {
        std::vector<std::shared_ptr<BTVersionInfo>> refVal_parents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parents")), refVal_parents );
        setParents(refVal_parents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("overrideDate")))
    {
        utility::datetime refVal_overrideDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("overrideDate")), refVal_overrideDate );
        setOverrideDate(refVal_overrideDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parent")))
    {
        utility::string_t refVal_parent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parent")), refVal_parent );
        setParent(refVal_parent);
    }
    return ok;
}

utility::string_t BTVersionInfoBase_allOf::getDescription() const
{
    return m_Description;
}

void BTVersionInfoBase_allOf::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTVersionInfoBase_allOf::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTVersionInfoBase_allOf::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::datetime BTVersionInfoBase_allOf::getModifiedAt() const
{
    return m_ModifiedAt;
}

void BTVersionInfoBase_allOf::setModifiedAt(const utility::datetime& value)
{
    m_ModifiedAt = value;
    m_ModifiedAtIsSet = true;
}

bool BTVersionInfoBase_allOf::modifiedAtIsSet() const
{
    return m_ModifiedAtIsSet;
}

void BTVersionInfoBase_allOf::unsetModifiedAt()
{
    m_ModifiedAtIsSet = false;
}
utility::datetime BTVersionInfoBase_allOf::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTVersionInfoBase_allOf::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTVersionInfoBase_allOf::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTVersionInfoBase_allOf::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTVersionInfoBase_allOf::getLastModifier() const
{
    return m_LastModifier;
}

void BTVersionInfoBase_allOf::setLastModifier(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_LastModifier = value;
    m_LastModifierIsSet = true;
}

bool BTVersionInfoBase_allOf::lastModifierIsSet() const
{
    return m_LastModifierIsSet;
}

void BTVersionInfoBase_allOf::unsetLastModifier()
{
    m_LastModifierIsSet = false;
}
utility::string_t BTVersionInfoBase_allOf::getDocumentId() const
{
    return m_DocumentId;
}

void BTVersionInfoBase_allOf::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTVersionInfoBase_allOf::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTVersionInfoBase_allOf::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTVersionInfoBase_allOf::getCreator() const
{
    return m_Creator;
}

void BTVersionInfoBase_allOf::setCreator(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_Creator = value;
    m_CreatorIsSet = true;
}

bool BTVersionInfoBase_allOf::creatorIsSet() const
{
    return m_CreatorIsSet;
}

void BTVersionInfoBase_allOf::unsetCreator()
{
    m_CreatorIsSet = false;
}
std::shared_ptr<BTThumbnailInfo> BTVersionInfoBase_allOf::getThumbnail() const
{
    return m_Thumbnail;
}

void BTVersionInfoBase_allOf::setThumbnail(const std::shared_ptr<BTThumbnailInfo>& value)
{
    m_Thumbnail = value;
    m_ThumbnailIsSet = true;
}

bool BTVersionInfoBase_allOf::thumbnailIsSet() const
{
    return m_ThumbnailIsSet;
}

void BTVersionInfoBase_allOf::unsetThumbnail()
{
    m_ThumbnailIsSet = false;
}
utility::string_t BTVersionInfoBase_allOf::getMicroversion() const
{
    return m_Microversion;
}

void BTVersionInfoBase_allOf::setMicroversion(const utility::string_t& value)
{
    m_Microversion = value;
    m_MicroversionIsSet = true;
}

bool BTVersionInfoBase_allOf::microversionIsSet() const
{
    return m_MicroversionIsSet;
}

void BTVersionInfoBase_allOf::unsetMicroversion()
{
    m_MicroversionIsSet = false;
}
std::vector<std::shared_ptr<BTVersionInfo>>& BTVersionInfoBase_allOf::getParents()
{
    return m_Parents;
}

void BTVersionInfoBase_allOf::setParents(const std::vector<std::shared_ptr<BTVersionInfo>>& value)
{
    m_Parents = value;
    m_ParentsIsSet = true;
}

bool BTVersionInfoBase_allOf::parentsIsSet() const
{
    return m_ParentsIsSet;
}

void BTVersionInfoBase_allOf::unsetParents()
{
    m_ParentsIsSet = false;
}
utility::datetime BTVersionInfoBase_allOf::getOverrideDate() const
{
    return m_OverrideDate;
}

void BTVersionInfoBase_allOf::setOverrideDate(const utility::datetime& value)
{
    m_OverrideDate = value;
    m_OverrideDateIsSet = true;
}

bool BTVersionInfoBase_allOf::overrideDateIsSet() const
{
    return m_OverrideDateIsSet;
}

void BTVersionInfoBase_allOf::unsetOverrideDate()
{
    m_OverrideDateIsSet = false;
}
utility::string_t BTVersionInfoBase_allOf::getType() const
{
    return m_Type;
}

void BTVersionInfoBase_allOf::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTVersionInfoBase_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTVersionInfoBase_allOf::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BTVersionInfoBase_allOf::getParent() const
{
    return m_Parent;
}

void BTVersionInfoBase_allOf::setParent(const utility::string_t& value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}

bool BTVersionInfoBase_allOf::parentIsSet() const
{
    return m_ParentIsSet;
}

void BTVersionInfoBase_allOf::unsetParent()
{
    m_ParentIsSet = false;
}
}
}
}
}


