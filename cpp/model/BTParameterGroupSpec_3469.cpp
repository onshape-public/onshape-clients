/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterGroupSpec_3469.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterGroupSpec_3469::BTParameterGroupSpec_3469()
{
    m_AdditionalLocalizedStrings = 0;
    m_AdditionalLocalizedStringsIsSet = false;
    m_CollapsedByDefault = false;
    m_CollapsedByDefaultIsSet = false;
    m_DrivingParameterId = utility::conversions::to_string_t("");
    m_DrivingParameterIdIsSet = false;
    m_GroupId = utility::conversions::to_string_t("");
    m_GroupIdIsSet = false;
    m_GroupName = utility::conversions::to_string_t("");
    m_GroupNameIsSet = false;
    m_GroupOrParameterIdsIsSet = false;
    m_LocalizableName = utility::conversions::to_string_t("");
    m_LocalizableNameIsSet = false;
    m_LocalizedName = utility::conversions::to_string_t("");
    m_LocalizedNameIsSet = false;
    m_StringsToLocalizeIsSet = false;
}

BTParameterGroupSpec_3469::~BTParameterGroupSpec_3469()
{
}

void BTParameterGroupSpec_3469::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterGroupSpec_3469::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdditionalLocalizedStringsIsSet)
    {
        val[utility::conversions::to_string_t("additionalLocalizedStrings")] = ModelBase::toJson(m_AdditionalLocalizedStrings);
    }
    if(m_CollapsedByDefaultIsSet)
    {
        val[utility::conversions::to_string_t("collapsedByDefault")] = ModelBase::toJson(m_CollapsedByDefault);
    }
    if(m_DrivingParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("drivingParameterId")] = ModelBase::toJson(m_DrivingParameterId);
    }
    if(m_GroupIdIsSet)
    {
        val[utility::conversions::to_string_t("groupId")] = ModelBase::toJson(m_GroupId);
    }
    if(m_GroupNameIsSet)
    {
        val[utility::conversions::to_string_t("groupName")] = ModelBase::toJson(m_GroupName);
    }
    if(m_GroupOrParameterIdsIsSet)
    {
        val[utility::conversions::to_string_t("groupOrParameterIds")] = ModelBase::toJson(m_GroupOrParameterIds);
    }
    if(m_LocalizableNameIsSet)
    {
        val[utility::conversions::to_string_t("localizableName")] = ModelBase::toJson(m_LocalizableName);
    }
    if(m_LocalizedNameIsSet)
    {
        val[utility::conversions::to_string_t("localizedName")] = ModelBase::toJson(m_LocalizedName);
    }
    if(m_StringsToLocalizeIsSet)
    {
        val[utility::conversions::to_string_t("stringsToLocalize")] = ModelBase::toJson(m_StringsToLocalize);
    }

    return val;
}

bool BTParameterGroupSpec_3469::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalLocalizedStrings"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_additionalLocalizedStrings;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalLocalizedStrings);
            setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collapsedByDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collapsedByDefault"));
        if(!fieldValue.is_null())
        {
            bool refVal_collapsedByDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_collapsedByDefault);
            setCollapsedByDefault(refVal_collapsedByDefault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drivingParameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drivingParameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_drivingParameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_drivingParameterId);
            setDrivingParameterId(refVal_drivingParameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_groupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupId);
            setGroupId(refVal_groupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_groupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupName);
            setGroupName(refVal_groupName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupOrParameterIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupOrParameterIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_groupOrParameterIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupOrParameterIds);
            setGroupOrParameterIds(refVal_groupOrParameterIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizableName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizableName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizableName);
            setLocalizableName(refVal_localizableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizedName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizedName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizedName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizedName);
            setLocalizedName(refVal_localizedName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringsToLocalize")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stringsToLocalize"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_stringsToLocalize;
            ok &= ModelBase::fromJson(fieldValue, refVal_stringsToLocalize);
            setStringsToLocalize(refVal_stringsToLocalize);
        }
    }
    return ok;
}

void BTParameterGroupSpec_3469::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_CollapsedByDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collapsedByDefault"), m_CollapsedByDefault));
    }
    if(m_DrivingParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drivingParameterId"), m_DrivingParameterId));
    }
    if(m_GroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupId"), m_GroupId));
    }
    if(m_GroupNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupName"), m_GroupName));
    }
    if(m_GroupOrParameterIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupOrParameterIds"), m_GroupOrParameterIds));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
}

bool BTParameterGroupSpec_3469::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collapsedByDefault")))
    {
        bool refVal_collapsedByDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collapsedByDefault")), refVal_collapsedByDefault );
        setCollapsedByDefault(refVal_collapsedByDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drivingParameterId")))
    {
        utility::string_t refVal_drivingParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drivingParameterId")), refVal_drivingParameterId );
        setDrivingParameterId(refVal_drivingParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupId")))
    {
        utility::string_t refVal_groupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupId")), refVal_groupId );
        setGroupId(refVal_groupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupName")))
    {
        utility::string_t refVal_groupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupName")), refVal_groupName );
        setGroupName(refVal_groupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupOrParameterIds")))
    {
        std::vector<utility::string_t> refVal_groupOrParameterIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupOrParameterIds")), refVal_groupOrParameterIds );
        setGroupOrParameterIds(refVal_groupOrParameterIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    return ok;
}

int32_t BTParameterGroupSpec_3469::getAdditionalLocalizedStrings() const
{
    return m_AdditionalLocalizedStrings;
}

void BTParameterGroupSpec_3469::setAdditionalLocalizedStrings(int32_t value)
{
    m_AdditionalLocalizedStrings = value;
    m_AdditionalLocalizedStringsIsSet = true;
}

bool BTParameterGroupSpec_3469::additionalLocalizedStringsIsSet() const
{
    return m_AdditionalLocalizedStringsIsSet;
}

void BTParameterGroupSpec_3469::unsetAdditionalLocalizedStrings()
{
    m_AdditionalLocalizedStringsIsSet = false;
}
bool BTParameterGroupSpec_3469::isCollapsedByDefault() const
{
    return m_CollapsedByDefault;
}

void BTParameterGroupSpec_3469::setCollapsedByDefault(bool value)
{
    m_CollapsedByDefault = value;
    m_CollapsedByDefaultIsSet = true;
}

bool BTParameterGroupSpec_3469::collapsedByDefaultIsSet() const
{
    return m_CollapsedByDefaultIsSet;
}

void BTParameterGroupSpec_3469::unsetCollapsedByDefault()
{
    m_CollapsedByDefaultIsSet = false;
}
utility::string_t BTParameterGroupSpec_3469::getDrivingParameterId() const
{
    return m_DrivingParameterId;
}

void BTParameterGroupSpec_3469::setDrivingParameterId(const utility::string_t& value)
{
    m_DrivingParameterId = value;
    m_DrivingParameterIdIsSet = true;
}

bool BTParameterGroupSpec_3469::drivingParameterIdIsSet() const
{
    return m_DrivingParameterIdIsSet;
}

void BTParameterGroupSpec_3469::unsetDrivingParameterId()
{
    m_DrivingParameterIdIsSet = false;
}
utility::string_t BTParameterGroupSpec_3469::getGroupId() const
{
    return m_GroupId;
}

void BTParameterGroupSpec_3469::setGroupId(const utility::string_t& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}

bool BTParameterGroupSpec_3469::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}

void BTParameterGroupSpec_3469::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
utility::string_t BTParameterGroupSpec_3469::getGroupName() const
{
    return m_GroupName;
}

void BTParameterGroupSpec_3469::setGroupName(const utility::string_t& value)
{
    m_GroupName = value;
    m_GroupNameIsSet = true;
}

bool BTParameterGroupSpec_3469::groupNameIsSet() const
{
    return m_GroupNameIsSet;
}

void BTParameterGroupSpec_3469::unsetGroupName()
{
    m_GroupNameIsSet = false;
}
std::vector<utility::string_t>& BTParameterGroupSpec_3469::getGroupOrParameterIds()
{
    return m_GroupOrParameterIds;
}

void BTParameterGroupSpec_3469::setGroupOrParameterIds(const std::vector<utility::string_t>& value)
{
    m_GroupOrParameterIds = value;
    m_GroupOrParameterIdsIsSet = true;
}

bool BTParameterGroupSpec_3469::groupOrParameterIdsIsSet() const
{
    return m_GroupOrParameterIdsIsSet;
}

void BTParameterGroupSpec_3469::unsetGroupOrParameterIds()
{
    m_GroupOrParameterIdsIsSet = false;
}
utility::string_t BTParameterGroupSpec_3469::getLocalizableName() const
{
    return m_LocalizableName;
}

void BTParameterGroupSpec_3469::setLocalizableName(const utility::string_t& value)
{
    m_LocalizableName = value;
    m_LocalizableNameIsSet = true;
}

bool BTParameterGroupSpec_3469::localizableNameIsSet() const
{
    return m_LocalizableNameIsSet;
}

void BTParameterGroupSpec_3469::unsetLocalizableName()
{
    m_LocalizableNameIsSet = false;
}
utility::string_t BTParameterGroupSpec_3469::getLocalizedName() const
{
    return m_LocalizedName;
}

void BTParameterGroupSpec_3469::setLocalizedName(const utility::string_t& value)
{
    m_LocalizedName = value;
    m_LocalizedNameIsSet = true;
}

bool BTParameterGroupSpec_3469::localizedNameIsSet() const
{
    return m_LocalizedNameIsSet;
}

void BTParameterGroupSpec_3469::unsetLocalizedName()
{
    m_LocalizedNameIsSet = false;
}
std::vector<utility::string_t>& BTParameterGroupSpec_3469::getStringsToLocalize()
{
    return m_StringsToLocalize;
}

void BTParameterGroupSpec_3469::setStringsToLocalize(const std::vector<utility::string_t>& value)
{
    m_StringsToLocalize = value;
    m_StringsToLocalizeIsSet = true;
}

bool BTParameterGroupSpec_3469::stringsToLocalizeIsSet() const
{
    return m_StringsToLocalizeIsSet;
}

void BTParameterGroupSpec_3469::unsetStringsToLocalize()
{
    m_StringsToLocalizeIsSet = false;
}
}
}
}
}


