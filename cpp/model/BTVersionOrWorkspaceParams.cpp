/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTVersionOrWorkspaceParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTVersionOrWorkspaceParams::BTVersionOrWorkspaceParams()
{
    m_ClientInteractionMode = utility::conversions::to_string_t("");
    m_ClientInteractionModeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_FromHistory = false;
    m_FromHistoryIsSet = false;
    m_IsRelease = false;
    m_IsReleaseIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Purpose = 0;
    m_PurposeIsSet = false;
    m_ReadOnly = false;
    m_ReadOnlyIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTVersionOrWorkspaceParams::~BTVersionOrWorkspaceParams()
{
}

void BTVersionOrWorkspaceParams::validate()
{
    // TODO: implement validation
}

web::json::value BTVersionOrWorkspaceParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClientInteractionModeIsSet)
    {
        val[utility::conversions::to_string_t("clientInteractionMode")] = ModelBase::toJson(m_ClientInteractionMode);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_FromHistoryIsSet)
    {
        val[utility::conversions::to_string_t("fromHistory")] = ModelBase::toJson(m_FromHistory);
    }
    if(m_IsReleaseIsSet)
    {
        val[utility::conversions::to_string_t("isRelease")] = ModelBase::toJson(m_IsRelease);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t("purpose")] = ModelBase::toJson(m_Purpose);
    }
    if(m_ReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("readOnly")] = ModelBase::toJson(m_ReadOnly);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTVersionOrWorkspaceParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("clientInteractionMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clientInteractionMode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clientInteractionMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_clientInteractionMode);
            setClientInteractionMode(refVal_clientInteractionMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromHistory")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromHistory"));
        if(!fieldValue.is_null())
        {
            bool refVal_fromHistory;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromHistory);
            setFromHistory(refVal_fromHistory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isRelease")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isRelease"));
        if(!fieldValue.is_null())
        {
            bool refVal_isRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_isRelease);
            setIsRelease(refVal_isRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("purpose")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("purpose"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_purpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_purpose);
            setPurpose(refVal_purpose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("readOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_readOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_readOnly);
            setReadOnly(refVal_readOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTVersionOrWorkspaceParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ClientInteractionModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientInteractionMode"), m_ClientInteractionMode));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_FromHistoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromHistory"), m_FromHistory));
    }
    if(m_IsReleaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isRelease"), m_IsRelease));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("purpose"), m_Purpose));
    }
    if(m_ReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readOnly"), m_ReadOnly));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTVersionOrWorkspaceParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("clientInteractionMode")))
    {
        utility::string_t refVal_clientInteractionMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientInteractionMode")), refVal_clientInteractionMode );
        setClientInteractionMode(refVal_clientInteractionMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromHistory")))
    {
        bool refVal_fromHistory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromHistory")), refVal_fromHistory );
        setFromHistory(refVal_fromHistory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isRelease")))
    {
        bool refVal_isRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isRelease")), refVal_isRelease );
        setIsRelease(refVal_isRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("purpose")))
    {
        int32_t refVal_purpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("purpose")), refVal_purpose );
        setPurpose(refVal_purpose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readOnly")))
    {
        bool refVal_readOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readOnly")), refVal_readOnly );
        setReadOnly(refVal_readOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

utility::string_t BTVersionOrWorkspaceParams::getClientInteractionMode() const
{
    return m_ClientInteractionMode;
}

void BTVersionOrWorkspaceParams::setClientInteractionMode(const utility::string_t& value)
{
    m_ClientInteractionMode = value;
    m_ClientInteractionModeIsSet = true;
}

bool BTVersionOrWorkspaceParams::clientInteractionModeIsSet() const
{
    return m_ClientInteractionModeIsSet;
}

void BTVersionOrWorkspaceParams::unsetClientInteractionMode()
{
    m_ClientInteractionModeIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getDescription() const
{
    return m_Description;
}

void BTVersionOrWorkspaceParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTVersionOrWorkspaceParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTVersionOrWorkspaceParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getDocumentId() const
{
    return m_DocumentId;
}

void BTVersionOrWorkspaceParams::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTVersionOrWorkspaceParams::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTVersionOrWorkspaceParams::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
bool BTVersionOrWorkspaceParams::isFromHistory() const
{
    return m_FromHistory;
}

void BTVersionOrWorkspaceParams::setFromHistory(bool value)
{
    m_FromHistory = value;
    m_FromHistoryIsSet = true;
}

bool BTVersionOrWorkspaceParams::fromHistoryIsSet() const
{
    return m_FromHistoryIsSet;
}

void BTVersionOrWorkspaceParams::unsetFromHistory()
{
    m_FromHistoryIsSet = false;
}
bool BTVersionOrWorkspaceParams::isIsRelease() const
{
    return m_IsRelease;
}

void BTVersionOrWorkspaceParams::setIsRelease(bool value)
{
    m_IsRelease = value;
    m_IsReleaseIsSet = true;
}

bool BTVersionOrWorkspaceParams::isReleaseIsSet() const
{
    return m_IsReleaseIsSet;
}

void BTVersionOrWorkspaceParams::unsetIsRelease()
{
    m_IsReleaseIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTVersionOrWorkspaceParams::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTVersionOrWorkspaceParams::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTVersionOrWorkspaceParams::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getName() const
{
    return m_Name;
}

void BTVersionOrWorkspaceParams::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTVersionOrWorkspaceParams::nameIsSet() const
{
    return m_NameIsSet;
}

void BTVersionOrWorkspaceParams::unsetName()
{
    m_NameIsSet = false;
}
int32_t BTVersionOrWorkspaceParams::getPurpose() const
{
    return m_Purpose;
}

void BTVersionOrWorkspaceParams::setPurpose(int32_t value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool BTVersionOrWorkspaceParams::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void BTVersionOrWorkspaceParams::unsetPurpose()
{
    m_PurposeIsSet = false;
}
bool BTVersionOrWorkspaceParams::isReadOnly() const
{
    return m_ReadOnly;
}

void BTVersionOrWorkspaceParams::setReadOnly(bool value)
{
    m_ReadOnly = value;
    m_ReadOnlyIsSet = true;
}

bool BTVersionOrWorkspaceParams::readOnlyIsSet() const
{
    return m_ReadOnlyIsSet;
}

void BTVersionOrWorkspaceParams::unsetReadOnly()
{
    m_ReadOnlyIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getVersionId() const
{
    return m_VersionId;
}

void BTVersionOrWorkspaceParams::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTVersionOrWorkspaceParams::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTVersionOrWorkspaceParams::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTVersionOrWorkspaceParams::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTVersionOrWorkspaceParams::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTVersionOrWorkspaceParams::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTVersionOrWorkspaceParams::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


