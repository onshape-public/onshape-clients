/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementConstantDeclaration_273_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementConstantDeclaration_273_allOf::BTPStatementConstantDeclaration_273_allOf()
{
    m_StandardType = utility::conversions::to_string_t("");
    m_StandardTypeIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_ValueIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPStatementConstantDeclaration_273_allOf::~BTPStatementConstantDeclaration_273_allOf()
{
}

void BTPStatementConstantDeclaration_273_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementConstantDeclaration_273_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StandardTypeIsSet)
    {
        val[utility::conversions::to_string_t("standardType")] = ModelBase::toJson(m_StandardType);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t("typeName")] = ModelBase::toJson(m_r_typeName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPStatementConstantDeclaration_273_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("standardType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardType;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardType);
            setStandardType(refVal_standardType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPTypeName_290> refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPStatementConstantDeclaration_273_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StandardTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardType"), m_StandardType));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeName"), m_r_typeName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPStatementConstantDeclaration_273_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("standardType")))
    {
        utility::string_t refVal_standardType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardType")), refVal_standardType );
        setStandardType(refVal_standardType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeName")))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeName")), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        std::shared_ptr<BTPTypeName_290> refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        std::shared_ptr<BTPExpression_9> refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTPStatementConstantDeclaration_273_allOf::getStandardType() const
{
    return m_StandardType;
}

void BTPStatementConstantDeclaration_273_allOf::setStandardType(const utility::string_t& value)
{
    m_StandardType = value;
    m_StandardTypeIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::standardTypeIsSet() const
{
    return m_StandardTypeIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetStandardType()
{
    m_StandardTypeIsSet = false;
}
utility::string_t BTPStatementConstantDeclaration_273_allOf::getRTypeName() const
{
    return m_r_typeName;
}

void BTPStatementConstantDeclaration_273_allOf::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPStatementConstantDeclaration_273_allOf::getName() const
{
    return m_Name;
}

void BTPStatementConstantDeclaration_273_allOf::setName(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<BTPTypeName_290> BTPStatementConstantDeclaration_273_allOf::getType() const
{
    return m_Type;
}

void BTPStatementConstantDeclaration_273_allOf::setType(const std::shared_ptr<BTPTypeName_290>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<BTPExpression_9> BTPStatementConstantDeclaration_273_allOf::getValue() const
{
    return m_Value;
}

void BTPStatementConstantDeclaration_273_allOf::setValue(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::valueIsSet() const
{
    return m_ValueIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t BTPStatementConstantDeclaration_273_allOf::getBtType() const
{
    return m_BtType;
}

void BTPStatementConstantDeclaration_273_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPStatementConstantDeclaration_273_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPStatementConstantDeclaration_273_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


