/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExternalReference_1936.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExternalReference_1936::BTExternalReference_1936()
{
    m_DocumentVersionId = utility::conversions::to_string_t("");
    m_DocumentVersionIdIsSet = false;
}

BTExternalReference_1936::~BTExternalReference_1936()
{
}

void BTExternalReference_1936::validate()
{
    // TODO: implement validation
}

web::json::value BTExternalReference_1936::toJson() const
{
    web::json::value val = this->BTElementReference_725::toJson();
    
    if(m_DocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("documentVersionId")] = ModelBase::toJson(m_DocumentVersionId);
    }

    return val;
}

bool BTExternalReference_1936::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTElementReference_725::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("documentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentVersionId);
            setDocumentVersionId(refVal_documentVersionId);
        }
    }
    return ok;
}

void BTExternalReference_1936::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConfiguredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configured"), m_Configured));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ExternalDocumentWithVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersion"), m_ExternalDocumentWithVersion));
    }
    if(m_ExternalDocumentWithVersionAndElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersionAndElementId"), m_ExternalDocumentWithVersionAndElementId));
    }
    if(m_ExternalReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalReference"), m_ExternalReference));
    }
    if(m_FullElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullElementId"), m_FullElementId));
    }
    if(m_MicroversionIdAndConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionIdAndConfiguration"), m_MicroversionIdAndConfiguration));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_DocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentVersionId"), m_DocumentVersionId));
    }
}

bool BTExternalReference_1936::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configured")))
    {
        bool refVal_configured;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configured")), refVal_configured );
        setConfigured(refVal_configured);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersion")))
    {
        std::shared_ptr<BTDocumentWithVersionId> refVal_externalDocumentWithVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersion")), refVal_externalDocumentWithVersion );
        setExternalDocumentWithVersion(refVal_externalDocumentWithVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")))
    {
        std::shared_ptr<BTDocumentWithVersionAndElementId> refVal_externalDocumentWithVersionAndElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")), refVal_externalDocumentWithVersionAndElementId );
        setExternalDocumentWithVersionAndElementId(refVal_externalDocumentWithVersionAndElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalReference")))
    {
        bool refVal_externalReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalReference")), refVal_externalReference );
        setExternalReference(refVal_externalReference);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullElementId")))
    {
        std::shared_ptr<BTFullElementId_756> refVal_fullElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullElementId")), refVal_fullElementId );
        setFullElementId(refVal_fullElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionIdAndConfiguration")))
    {
        std::shared_ptr<BTMicroversionIdAndConfiguration_2338> refVal_microversionIdAndConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionIdAndConfiguration")), refVal_microversionIdAndConfiguration );
        setMicroversionIdAndConfiguration(refVal_microversionIdAndConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentVersionId")))
    {
        utility::string_t refVal_documentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentVersionId")), refVal_documentVersionId );
        setDocumentVersionId(refVal_documentVersionId);
    }
    return ok;
}

utility::string_t BTExternalReference_1936::getDocumentVersionId() const
{
    return m_DocumentVersionId;
}

void BTExternalReference_1936::setDocumentVersionId(const utility::string_t& value)
{
    m_DocumentVersionId = value;
    m_DocumentVersionIdIsSet = true;
}

bool BTExternalReference_1936::documentVersionIdIsSet() const
{
    return m_DocumentVersionIdIsSet;
}

void BTExternalReference_1936::unsetDocumentVersionId()
{
    m_DocumentVersionIdIsSet = false;
}
}
}
}
}


