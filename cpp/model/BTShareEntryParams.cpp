/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTShareEntryParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTShareEntryParams::BTShareEntryParams()
{
    m_ApplicationId = utility::conversions::to_string_t("");
    m_ApplicationIdIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_EntryType = 0;
    m_EntryTypeIsSet = false;
    m_TeamId = utility::conversions::to_string_t("");
    m_TeamIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
}

BTShareEntryParams::~BTShareEntryParams()
{
}

void BTShareEntryParams::validate()
{
    // TODO: implement validation
}

web::json::value BTShareEntryParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApplicationIdIsSet)
    {
        val[utility::conversions::to_string_t("applicationId")] = ModelBase::toJson(m_ApplicationId);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_EntryTypeIsSet)
    {
        val[utility::conversions::to_string_t("entryType")] = ModelBase::toJson(m_EntryType);
    }
    if(m_TeamIdIsSet)
    {
        val[utility::conversions::to_string_t("teamId")] = ModelBase::toJson(m_TeamId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }

    return val;
}

bool BTShareEntryParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("applicationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("applicationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_applicationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_applicationId);
            setApplicationId(refVal_applicationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entryType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entryType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_entryType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entryType);
            setEntryType(refVal_entryType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("teamId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("teamId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_teamId;
            ok &= ModelBase::fromJson(fieldValue, refVal_teamId);
            setTeamId(refVal_teamId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    return ok;
}

void BTShareEntryParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ApplicationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("applicationId"), m_ApplicationId));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_EntryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryType"), m_EntryType));
    }
    if(m_TeamIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("teamId"), m_TeamId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
}

bool BTShareEntryParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("applicationId")))
    {
        utility::string_t refVal_applicationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("applicationId")), refVal_applicationId );
        setApplicationId(refVal_applicationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryType")))
    {
        int32_t refVal_entryType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryType")), refVal_entryType );
        setEntryType(refVal_entryType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("teamId")))
    {
        utility::string_t refVal_teamId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("teamId")), refVal_teamId );
        setTeamId(refVal_teamId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    return ok;
}

utility::string_t BTShareEntryParams::getApplicationId() const
{
    return m_ApplicationId;
}

void BTShareEntryParams::setApplicationId(const utility::string_t& value)
{
    m_ApplicationId = value;
    m_ApplicationIdIsSet = true;
}

bool BTShareEntryParams::applicationIdIsSet() const
{
    return m_ApplicationIdIsSet;
}

void BTShareEntryParams::unsetApplicationId()
{
    m_ApplicationIdIsSet = false;
}
utility::string_t BTShareEntryParams::getCompanyId() const
{
    return m_CompanyId;
}

void BTShareEntryParams::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTShareEntryParams::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTShareEntryParams::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTShareEntryParams::getEmail() const
{
    return m_Email;
}

void BTShareEntryParams::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool BTShareEntryParams::emailIsSet() const
{
    return m_EmailIsSet;
}

void BTShareEntryParams::unsetEmail()
{
    m_EmailIsSet = false;
}
int32_t BTShareEntryParams::getEntryType() const
{
    return m_EntryType;
}

void BTShareEntryParams::setEntryType(int32_t value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}

bool BTShareEntryParams::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}

void BTShareEntryParams::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}
utility::string_t BTShareEntryParams::getTeamId() const
{
    return m_TeamId;
}

void BTShareEntryParams::setTeamId(const utility::string_t& value)
{
    m_TeamId = value;
    m_TeamIdIsSet = true;
}

bool BTShareEntryParams::teamIdIsSet() const
{
    return m_TeamIdIsSet;
}

void BTShareEntryParams::unsetTeamId()
{
    m_TeamIdIsSet = false;
}
utility::string_t BTShareEntryParams::getUserId() const
{
    return m_UserId;
}

void BTShareEntryParams::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool BTShareEntryParams::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void BTShareEntryParams::unsetUserId()
{
    m_UserIdIsSet = false;
}
}
}
}
}


