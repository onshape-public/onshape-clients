/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecEnum_171_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecEnum_171_allOf::BTParameterSpecEnum_171_allOf()
{
    m_EnumName = utility::conversions::to_string_t("");
    m_EnumNameIsSet = false;
    m_OptionNamesIsSet = false;
    m_OptionsIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTParameterSpecEnum_171_allOf::~BTParameterSpecEnum_171_allOf()
{
}

void BTParameterSpecEnum_171_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecEnum_171_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnumNameIsSet)
    {
        val[utility::conversions::to_string_t("enumName")] = ModelBase::toJson(m_EnumName);
    }
    if(m_OptionNamesIsSet)
    {
        val[utility::conversions::to_string_t("optionNames")] = ModelBase::toJson(m_OptionNames);
    }
    if(m_OptionsIsSet)
    {
        val[utility::conversions::to_string_t("options")] = ModelBase::toJson(m_Options);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTParameterSpecEnum_171_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("enumName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enumName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_enumName;
            ok &= ModelBase::fromJson(fieldValue, refVal_enumName);
            setEnumName(refVal_enumName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optionNames")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("optionNames"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_optionNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_optionNames);
            setOptionNames(refVal_optionNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("options")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("options"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_options;
            ok &= ModelBase::fromJson(fieldValue, refVal_options);
            setOptions(refVal_options);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTParameterSpecEnum_171_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EnumNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enumName"), m_EnumName));
    }
    if(m_OptionNamesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionNames"), m_OptionNames));
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("options"), m_Options));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTParameterSpecEnum_171_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enumName")))
    {
        utility::string_t refVal_enumName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enumName")), refVal_enumName );
        setEnumName(refVal_enumName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionNames")))
    {
        std::vector<utility::string_t> refVal_optionNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionNames")), refVal_optionNames );
        setOptionNames(refVal_optionNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("options")))
    {
        std::vector<utility::string_t> refVal_options;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("options")), refVal_options );
        setOptions(refVal_options);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTParameterSpecEnum_171_allOf::getEnumName() const
{
    return m_EnumName;
}

void BTParameterSpecEnum_171_allOf::setEnumName(const utility::string_t& value)
{
    m_EnumName = value;
    m_EnumNameIsSet = true;
}

bool BTParameterSpecEnum_171_allOf::enumNameIsSet() const
{
    return m_EnumNameIsSet;
}

void BTParameterSpecEnum_171_allOf::unsetEnumName()
{
    m_EnumNameIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecEnum_171_allOf::getOptionNames()
{
    return m_OptionNames;
}

void BTParameterSpecEnum_171_allOf::setOptionNames(const std::vector<utility::string_t>& value)
{
    m_OptionNames = value;
    m_OptionNamesIsSet = true;
}

bool BTParameterSpecEnum_171_allOf::optionNamesIsSet() const
{
    return m_OptionNamesIsSet;
}

void BTParameterSpecEnum_171_allOf::unsetOptionNames()
{
    m_OptionNamesIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecEnum_171_allOf::getOptions()
{
    return m_Options;
}

void BTParameterSpecEnum_171_allOf::setOptions(const std::vector<utility::string_t>& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}

bool BTParameterSpecEnum_171_allOf::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void BTParameterSpecEnum_171_allOf::unsetOptions()
{
    m_OptionsIsSet = false;
}
utility::string_t BTParameterSpecEnum_171_allOf::getRNamespace() const
{
    return m_r_namespace;
}

void BTParameterSpecEnum_171_allOf::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTParameterSpecEnum_171_allOf::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTParameterSpecEnum_171_allOf::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTParameterSpecEnum_171_allOf::getBtType() const
{
    return m_BtType;
}

void BTParameterSpecEnum_171_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpecEnum_171_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpecEnum_171_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


