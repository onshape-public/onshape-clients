/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCommentAttachmentInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCommentAttachmentInfo::BTCommentAttachmentInfo()
{
    m_FileName = utility::conversions::to_string_t("");
    m_FileNameIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_MimeType = utility::conversions::to_string_t("");
    m_MimeTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ThumbnailFor = utility::conversions::to_string_t("");
    m_ThumbnailForIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTCommentAttachmentInfo::~BTCommentAttachmentInfo()
{
}

void BTCommentAttachmentInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCommentAttachmentInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FileNameIsSet)
    {
        val[utility::conversions::to_string_t("fileName")] = ModelBase::toJson(m_FileName);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MimeTypeIsSet)
    {
        val[utility::conversions::to_string_t("mimeType")] = ModelBase::toJson(m_MimeType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ThumbnailForIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailFor")] = ModelBase::toJson(m_ThumbnailFor);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTCommentAttachmentInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("fileName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileName);
            setFileName(refVal_fileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mimeType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mimeType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_mimeType);
            setMimeType(refVal_mimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailFor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailFor"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_thumbnailFor;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailFor);
            setThumbnailFor(refVal_thumbnailFor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTCommentAttachmentInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileName"), m_FileName));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mimeType"), m_MimeType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ThumbnailForIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailFor"), m_ThumbnailFor));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTCommentAttachmentInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fileName")))
    {
        utility::string_t refVal_fileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileName")), refVal_fileName );
        setFileName(refVal_fileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mimeType")))
    {
        utility::string_t refVal_mimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mimeType")), refVal_mimeType );
        setMimeType(refVal_mimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailFor")))
    {
        utility::string_t refVal_thumbnailFor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailFor")), refVal_thumbnailFor );
        setThumbnailFor(refVal_thumbnailFor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTCommentAttachmentInfo::getFileName() const
{
    return m_FileName;
}

void BTCommentAttachmentInfo::setFileName(const utility::string_t& value)
{
    m_FileName = value;
    m_FileNameIsSet = true;
}

bool BTCommentAttachmentInfo::fileNameIsSet() const
{
    return m_FileNameIsSet;
}

void BTCommentAttachmentInfo::unsetFileName()
{
    m_FileNameIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getHref() const
{
    return m_Href;
}

void BTCommentAttachmentInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTCommentAttachmentInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTCommentAttachmentInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getId() const
{
    return m_Id;
}

void BTCommentAttachmentInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTCommentAttachmentInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTCommentAttachmentInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getMimeType() const
{
    return m_MimeType;
}

void BTCommentAttachmentInfo::setMimeType(const utility::string_t& value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}

bool BTCommentAttachmentInfo::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void BTCommentAttachmentInfo::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getName() const
{
    return m_Name;
}

void BTCommentAttachmentInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTCommentAttachmentInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTCommentAttachmentInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getThumbnailFor() const
{
    return m_ThumbnailFor;
}

void BTCommentAttachmentInfo::setThumbnailFor(const utility::string_t& value)
{
    m_ThumbnailFor = value;
    m_ThumbnailForIsSet = true;
}

bool BTCommentAttachmentInfo::thumbnailForIsSet() const
{
    return m_ThumbnailForIsSet;
}

void BTCommentAttachmentInfo::unsetThumbnailFor()
{
    m_ThumbnailForIsSet = false;
}
utility::string_t BTCommentAttachmentInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTCommentAttachmentInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTCommentAttachmentInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTCommentAttachmentInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


