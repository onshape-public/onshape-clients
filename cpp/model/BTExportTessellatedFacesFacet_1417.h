/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTExportTessellatedFacesFacet_1417.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesFacet_1417_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesFacet_1417_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTVector2d_1812.h"
#include <vector>
#include "BTVector3d_389.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTExportTessellatedFacesFacet_1417
    : public ModelBase
{
public:
    BTExportTessellatedFacesFacet_1417();
    virtual ~BTExportTessellatedFacesFacet_1417();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTExportTessellatedFacesFacet_1417 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getIndices();
    bool indicesIsSet() const;
    void unsetIndices();

    void setIndices(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTVector3d_389> getNormal() const;
    bool normalIsSet() const;
    void unsetNormal();

    void setNormal(const std::shared_ptr<BTVector3d_389>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVector3d_389>>& getNormals();
    bool normalsIsSet() const;
    void unsetNormals();

    void setNormals(const std::vector<std::shared_ptr<BTVector3d_389>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVector2d_1812>>& getTextureCoordinates();
    bool textureCoordinatesIsSet() const;
    void unsetTextureCoordinates();

    void setTextureCoordinates(const std::vector<std::shared_ptr<BTVector2d_1812>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVector3d_389>>& getVertices();
    bool verticesIsSet() const;
    void unsetVertices();

    void setVertices(const std::vector<std::shared_ptr<BTVector3d_389>>& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    std::vector<int32_t> m_Indices;
    bool m_IndicesIsSet;
    std::shared_ptr<BTVector3d_389> m_Normal;
    bool m_NormalIsSet;
    std::vector<std::shared_ptr<BTVector3d_389>> m_Normals;
    bool m_NormalsIsSet;
    std::vector<std::shared_ptr<BTVector2d_1812>> m_TextureCoordinates;
    bool m_TextureCoordinatesIsSet;
    std::vector<std::shared_ptr<BTVector3d_389>> m_Vertices;
    bool m_VerticesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTExportTessellatedFacesFacet_1417_H_ */
