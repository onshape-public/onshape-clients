/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTWorkflowSnapshotInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowSnapshotInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowSnapshotInfo_H_


#include "../ModelBase.h"

#include "BTWorkflowActionInfo.h"
#include "BTWorkflowStateInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTWorkflowSnapshotInfo
    : public ModelBase
{
public:
    BTWorkflowSnapshotInfo();
    virtual ~BTWorkflowSnapshotInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTWorkflowSnapshotInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTWorkflowActionInfo>>& getActions();
    bool actionsIsSet() const;
    void unsetActions();

    void setActions(const std::vector<std::shared_ptr<BTWorkflowActionInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getApproverIds();
    bool approverIdsIsSet() const;
    void unsetApproverIds();

    void setApproverIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDiscarded() const;
    bool isDiscardedIsSet() const;
    void unsetIsDiscarded();

    void setIsDiscarded(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFrozen() const;
    bool isFrozenIsSet() const;
    void unsetIsFrozen();

    void setIsFrozen(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSetup() const;
    bool isSetupIsSet() const;
    void unsetIsSetup();

    void setIsSetup(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMetadataState() const;
    bool metadataStateIsSet() const;
    void unsetMetadataState();

    void setMetadataState(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getNotifierIds();
    bool notifierIdsIsSet() const;
    void unsetNotifierIds();

    void setNotifierIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWorkflowStateInfo> getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const std::shared_ptr<BTWorkflowStateInfo>& value);


protected:
    std::vector<std::shared_ptr<BTWorkflowActionInfo>> m_Actions;
    bool m_ActionsIsSet;
    std::vector<utility::string_t> m_ApproverIds;
    bool m_ApproverIdsIsSet;
    bool m_IsDiscarded;
    bool m_IsDiscardedIsSet;
    bool m_IsFrozen;
    bool m_IsFrozenIsSet;
    bool m_IsSetup;
    bool m_IsSetupIsSet;
    utility::string_t m_MetadataState;
    bool m_MetadataStateIsSet;
    std::vector<utility::string_t> m_NotifierIds;
    bool m_NotifierIdsIsSet;
    std::shared_ptr<BTWorkflowStateInfo> m_State;
    bool m_StateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowSnapshotInfo_H_ */
