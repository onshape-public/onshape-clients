/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTorusDescription_1834.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTorusDescription_1834::BTTorusDescription_1834()
{
    m_AxisIsSet = false;
    m_MajorRadius = 0.0;
    m_MajorRadiusIsSet = false;
    m_MinorRadius = 0.0;
    m_MinorRadiusIsSet = false;
    m_OriginIsSet = false;
}

BTTorusDescription_1834::~BTTorusDescription_1834()
{
}

void BTTorusDescription_1834::validate()
{
    // TODO: implement validation
}

web::json::value BTTorusDescription_1834::toJson() const
{
    web::json::value val = this->BTSurfaceDescription_1564::toJson();
    
    if(m_AxisIsSet)
    {
        val[utility::conversions::to_string_t("axis")] = ModelBase::toJson(m_Axis);
    }
    if(m_MajorRadiusIsSet)
    {
        val[utility::conversions::to_string_t("majorRadius")] = ModelBase::toJson(m_MajorRadius);
    }
    if(m_MinorRadiusIsSet)
    {
        val[utility::conversions::to_string_t("minorRadius")] = ModelBase::toJson(m_MinorRadius);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }

    return val;
}

bool BTTorusDescription_1834::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTSurfaceDescription_1564::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("axis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("axis"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_axis;
            ok &= ModelBase::fromJson(fieldValue, refVal_axis);
            setAxis(refVal_axis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("majorRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("majorRadius"));
        if(!fieldValue.is_null())
        {
            double refVal_majorRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_majorRadius);
            setMajorRadius(refVal_majorRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minorRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minorRadius"));
        if(!fieldValue.is_null())
        {
            double refVal_minorRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_minorRadius);
            setMinorRadius(refVal_minorRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    return ok;
}

void BTTorusDescription_1834::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_AxisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("axis"), m_Axis));
    }
    if(m_MajorRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("majorRadius"), m_MajorRadius));
    }
    if(m_MinorRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minorRadius"), m_MinorRadius));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
}

bool BTTorusDescription_1834::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("axis")))
    {
        std::shared_ptr<BTVector3d_389> refVal_axis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("axis")), refVal_axis );
        setAxis(refVal_axis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("majorRadius")))
    {
        double refVal_majorRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("majorRadius")), refVal_majorRadius );
        setMajorRadius(refVal_majorRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minorRadius")))
    {
        double refVal_minorRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minorRadius")), refVal_minorRadius );
        setMinorRadius(refVal_minorRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::shared_ptr<BTVector3d_389> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    return ok;
}

std::shared_ptr<BTVector3d_389> BTTorusDescription_1834::getAxis() const
{
    return m_Axis;
}

void BTTorusDescription_1834::setAxis(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Axis = value;
    m_AxisIsSet = true;
}

bool BTTorusDescription_1834::axisIsSet() const
{
    return m_AxisIsSet;
}

void BTTorusDescription_1834::unsetAxis()
{
    m_AxisIsSet = false;
}
double BTTorusDescription_1834::getMajorRadius() const
{
    return m_MajorRadius;
}

void BTTorusDescription_1834::setMajorRadius(double value)
{
    m_MajorRadius = value;
    m_MajorRadiusIsSet = true;
}

bool BTTorusDescription_1834::majorRadiusIsSet() const
{
    return m_MajorRadiusIsSet;
}

void BTTorusDescription_1834::unsetMajorRadius()
{
    m_MajorRadiusIsSet = false;
}
double BTTorusDescription_1834::getMinorRadius() const
{
    return m_MinorRadius;
}

void BTTorusDescription_1834::setMinorRadius(double value)
{
    m_MinorRadius = value;
    m_MinorRadiusIsSet = true;
}

bool BTTorusDescription_1834::minorRadiusIsSet() const
{
    return m_MinorRadiusIsSet;
}

void BTTorusDescription_1834::unsetMinorRadius()
{
    m_MinorRadiusIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTTorusDescription_1834::getOrigin() const
{
    return m_Origin;
}

void BTTorusDescription_1834::setOrigin(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool BTTorusDescription_1834::originIsSet() const
{
    return m_OriginIsSet;
}

void BTTorusDescription_1834::unsetOrigin()
{
    m_OriginIsSet = false;
}
}
}
}
}


