/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTRootDiffInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTRootDiffInfo::BTRootDiffInfo()
{
    m_ChangesIsSet = false;
    m_CollectionChangesIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_GeometryChangeMessagesIsSet = false;
    m_SourceConfiguration = utility::conversions::to_string_t("");
    m_SourceConfigurationIsSet = false;
    m_SourceId = utility::conversions::to_string_t("");
    m_SourceIdIsSet = false;
    m_SourceMicroversionId = utility::conversions::to_string_t("");
    m_SourceMicroversionIdIsSet = false;
    m_SourceValue = utility::conversions::to_string_t("");
    m_SourceValueIsSet = false;
    m_SourceVersionId = utility::conversions::to_string_t("");
    m_SourceVersionIdIsSet = false;
    m_SourceWorkspaceId = utility::conversions::to_string_t("");
    m_SourceWorkspaceIdIsSet = false;
    m_TargetConfiguration = utility::conversions::to_string_t("");
    m_TargetConfigurationIsSet = false;
    m_TargetId = utility::conversions::to_string_t("");
    m_TargetIdIsSet = false;
    m_TargetMicroversionId = utility::conversions::to_string_t("");
    m_TargetMicroversionIdIsSet = false;
    m_TargetValue = utility::conversions::to_string_t("");
    m_TargetValueIsSet = false;
    m_TargetVersionId = utility::conversions::to_string_t("");
    m_TargetVersionIdIsSet = false;
    m_TargetWorkspaceId = utility::conversions::to_string_t("");
    m_TargetWorkspaceIdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

BTRootDiffInfo::~BTRootDiffInfo()
{
}

void BTRootDiffInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTRootDiffInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangesIsSet)
    {
        val[utility::conversions::to_string_t("changes")] = ModelBase::toJson(m_Changes);
    }
    if(m_CollectionChangesIsSet)
    {
        val[utility::conversions::to_string_t("collectionChanges")] = ModelBase::toJson(m_CollectionChanges);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t("entityType")] = ModelBase::toJson(m_EntityType);
    }
    if(m_GeometryChangeMessagesIsSet)
    {
        val[utility::conversions::to_string_t("geometryChangeMessages")] = ModelBase::toJson(m_GeometryChangeMessages);
    }
    if(m_SourceConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("sourceConfiguration")] = ModelBase::toJson(m_SourceConfiguration);
    }
    if(m_SourceIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceId")] = ModelBase::toJson(m_SourceId);
    }
    if(m_SourceMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceMicroversionId")] = ModelBase::toJson(m_SourceMicroversionId);
    }
    if(m_SourceValueIsSet)
    {
        val[utility::conversions::to_string_t("sourceValue")] = ModelBase::toJson(m_SourceValue);
    }
    if(m_SourceVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceVersionId")] = ModelBase::toJson(m_SourceVersionId);
    }
    if(m_SourceWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceWorkspaceId")] = ModelBase::toJson(m_SourceWorkspaceId);
    }
    if(m_TargetConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("targetConfiguration")] = ModelBase::toJson(m_TargetConfiguration);
    }
    if(m_TargetIdIsSet)
    {
        val[utility::conversions::to_string_t("targetId")] = ModelBase::toJson(m_TargetId);
    }
    if(m_TargetMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetMicroversionId")] = ModelBase::toJson(m_TargetMicroversionId);
    }
    if(m_TargetValueIsSet)
    {
        val[utility::conversions::to_string_t("targetValue")] = ModelBase::toJson(m_TargetValue);
    }
    if(m_TargetVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("targetVersionId")] = ModelBase::toJson(m_TargetVersionId);
    }
    if(m_TargetWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("targetWorkspaceId")] = ModelBase::toJson(m_TargetWorkspaceId);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool BTRootDiffInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changes"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTDiffInfo>> refVal_changes;
            ok &= ModelBase::fromJson(fieldValue, refVal_changes);
            setChanges(refVal_changes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionChanges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionChanges"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>> refVal_collectionChanges;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionChanges);
            setCollectionChanges(refVal_collectionChanges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityType);
            setEntityType(refVal_entityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geometryChangeMessages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("geometryChangeMessages"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_geometryChangeMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_geometryChangeMessages);
            setGeometryChangeMessages(refVal_geometryChangeMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceConfiguration);
            setSourceConfiguration(refVal_sourceConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceId);
            setSourceId(refVal_sourceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceMicroversionId);
            setSourceMicroversionId(refVal_sourceMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceValue);
            setSourceValue(refVal_sourceValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceVersionId);
            setSourceVersionId(refVal_sourceVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceWorkspaceId);
            setSourceWorkspaceId(refVal_sourceWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetConfiguration);
            setTargetConfiguration(refVal_targetConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetId);
            setTargetId(refVal_targetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetMicroversionId);
            setTargetMicroversionId(refVal_targetMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetValue);
            setTargetValue(refVal_targetValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetVersionId);
            setTargetVersionId(refVal_targetVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetWorkspaceId);
            setTargetWorkspaceId(refVal_targetWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void BTRootDiffInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changes"), m_Changes));
    }
    if(m_CollectionChangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionChanges"), m_CollectionChanges));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityType"), m_EntityType));
    }
    if(m_GeometryChangeMessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geometryChangeMessages"), m_GeometryChangeMessages));
    }
    if(m_SourceConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceConfiguration"), m_SourceConfiguration));
    }
    if(m_SourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceId"), m_SourceId));
    }
    if(m_SourceMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversionId"), m_SourceMicroversionId));
    }
    if(m_SourceValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceValue"), m_SourceValue));
    }
    if(m_SourceVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceVersionId"), m_SourceVersionId));
    }
    if(m_SourceWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceWorkspaceId"), m_SourceWorkspaceId));
    }
    if(m_TargetConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetConfiguration"), m_TargetConfiguration));
    }
    if(m_TargetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetId"), m_TargetId));
    }
    if(m_TargetMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetMicroversionId"), m_TargetMicroversionId));
    }
    if(m_TargetValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetValue"), m_TargetValue));
    }
    if(m_TargetVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetVersionId"), m_TargetVersionId));
    }
    if(m_TargetWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetWorkspaceId"), m_TargetWorkspaceId));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool BTRootDiffInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changes")))
    {
        std::map<utility::string_t, std::shared_ptr<BTDiffInfo>> refVal_changes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changes")), refVal_changes );
        setChanges(refVal_changes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionChanges")))
    {
        std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>> refVal_collectionChanges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionChanges")), refVal_collectionChanges );
        setCollectionChanges(refVal_collectionChanges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityType")))
    {
        utility::string_t refVal_entityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityType")), refVal_entityType );
        setEntityType(refVal_entityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geometryChangeMessages")))
    {
        std::vector<utility::string_t> refVal_geometryChangeMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geometryChangeMessages")), refVal_geometryChangeMessages );
        setGeometryChangeMessages(refVal_geometryChangeMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceConfiguration")))
    {
        utility::string_t refVal_sourceConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceConfiguration")), refVal_sourceConfiguration );
        setSourceConfiguration(refVal_sourceConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceId")))
    {
        utility::string_t refVal_sourceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceId")), refVal_sourceId );
        setSourceId(refVal_sourceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversionId")))
    {
        utility::string_t refVal_sourceMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversionId")), refVal_sourceMicroversionId );
        setSourceMicroversionId(refVal_sourceMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceValue")))
    {
        utility::string_t refVal_sourceValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceValue")), refVal_sourceValue );
        setSourceValue(refVal_sourceValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceVersionId")))
    {
        utility::string_t refVal_sourceVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceVersionId")), refVal_sourceVersionId );
        setSourceVersionId(refVal_sourceVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceWorkspaceId")))
    {
        utility::string_t refVal_sourceWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceWorkspaceId")), refVal_sourceWorkspaceId );
        setSourceWorkspaceId(refVal_sourceWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetConfiguration")))
    {
        utility::string_t refVal_targetConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetConfiguration")), refVal_targetConfiguration );
        setTargetConfiguration(refVal_targetConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetId")))
    {
        utility::string_t refVal_targetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetId")), refVal_targetId );
        setTargetId(refVal_targetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetMicroversionId")))
    {
        utility::string_t refVal_targetMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetMicroversionId")), refVal_targetMicroversionId );
        setTargetMicroversionId(refVal_targetMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetValue")))
    {
        utility::string_t refVal_targetValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetValue")), refVal_targetValue );
        setTargetValue(refVal_targetValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetVersionId")))
    {
        utility::string_t refVal_targetVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetVersionId")), refVal_targetVersionId );
        setTargetVersionId(refVal_targetVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetWorkspaceId")))
    {
        utility::string_t refVal_targetWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetWorkspaceId")), refVal_targetWorkspaceId );
        setTargetWorkspaceId(refVal_targetWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<BTDiffInfo>>& BTRootDiffInfo::getChanges()
{
    return m_Changes;
}

void BTRootDiffInfo::setChanges(const std::map<utility::string_t, std::shared_ptr<BTDiffInfo>>& value)
{
    m_Changes = value;
    m_ChangesIsSet = true;
}

bool BTRootDiffInfo::changesIsSet() const
{
    return m_ChangesIsSet;
}

void BTRootDiffInfo::unsetChanges()
{
    m_ChangesIsSet = false;
}
std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& BTRootDiffInfo::getCollectionChanges()
{
    return m_CollectionChanges;
}

void BTRootDiffInfo::setCollectionChanges(const std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& value)
{
    m_CollectionChanges = value;
    m_CollectionChangesIsSet = true;
}

bool BTRootDiffInfo::collectionChangesIsSet() const
{
    return m_CollectionChangesIsSet;
}

void BTRootDiffInfo::unsetCollectionChanges()
{
    m_CollectionChangesIsSet = false;
}
utility::string_t BTRootDiffInfo::getEntityType() const
{
    return m_EntityType;
}

void BTRootDiffInfo::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool BTRootDiffInfo::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void BTRootDiffInfo::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
std::vector<utility::string_t>& BTRootDiffInfo::getGeometryChangeMessages()
{
    return m_GeometryChangeMessages;
}

void BTRootDiffInfo::setGeometryChangeMessages(const std::vector<utility::string_t>& value)
{
    m_GeometryChangeMessages = value;
    m_GeometryChangeMessagesIsSet = true;
}

bool BTRootDiffInfo::geometryChangeMessagesIsSet() const
{
    return m_GeometryChangeMessagesIsSet;
}

void BTRootDiffInfo::unsetGeometryChangeMessages()
{
    m_GeometryChangeMessagesIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceConfiguration() const
{
    return m_SourceConfiguration;
}

void BTRootDiffInfo::setSourceConfiguration(const utility::string_t& value)
{
    m_SourceConfiguration = value;
    m_SourceConfigurationIsSet = true;
}

bool BTRootDiffInfo::sourceConfigurationIsSet() const
{
    return m_SourceConfigurationIsSet;
}

void BTRootDiffInfo::unsetSourceConfiguration()
{
    m_SourceConfigurationIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceId() const
{
    return m_SourceId;
}

void BTRootDiffInfo::setSourceId(const utility::string_t& value)
{
    m_SourceId = value;
    m_SourceIdIsSet = true;
}

bool BTRootDiffInfo::sourceIdIsSet() const
{
    return m_SourceIdIsSet;
}

void BTRootDiffInfo::unsetSourceId()
{
    m_SourceIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceMicroversionId() const
{
    return m_SourceMicroversionId;
}

void BTRootDiffInfo::setSourceMicroversionId(const utility::string_t& value)
{
    m_SourceMicroversionId = value;
    m_SourceMicroversionIdIsSet = true;
}

bool BTRootDiffInfo::sourceMicroversionIdIsSet() const
{
    return m_SourceMicroversionIdIsSet;
}

void BTRootDiffInfo::unsetSourceMicroversionId()
{
    m_SourceMicroversionIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceValue() const
{
    return m_SourceValue;
}

void BTRootDiffInfo::setSourceValue(const utility::string_t& value)
{
    m_SourceValue = value;
    m_SourceValueIsSet = true;
}

bool BTRootDiffInfo::sourceValueIsSet() const
{
    return m_SourceValueIsSet;
}

void BTRootDiffInfo::unsetSourceValue()
{
    m_SourceValueIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceVersionId() const
{
    return m_SourceVersionId;
}

void BTRootDiffInfo::setSourceVersionId(const utility::string_t& value)
{
    m_SourceVersionId = value;
    m_SourceVersionIdIsSet = true;
}

bool BTRootDiffInfo::sourceVersionIdIsSet() const
{
    return m_SourceVersionIdIsSet;
}

void BTRootDiffInfo::unsetSourceVersionId()
{
    m_SourceVersionIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getSourceWorkspaceId() const
{
    return m_SourceWorkspaceId;
}

void BTRootDiffInfo::setSourceWorkspaceId(const utility::string_t& value)
{
    m_SourceWorkspaceId = value;
    m_SourceWorkspaceIdIsSet = true;
}

bool BTRootDiffInfo::sourceWorkspaceIdIsSet() const
{
    return m_SourceWorkspaceIdIsSet;
}

void BTRootDiffInfo::unsetSourceWorkspaceId()
{
    m_SourceWorkspaceIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetConfiguration() const
{
    return m_TargetConfiguration;
}

void BTRootDiffInfo::setTargetConfiguration(const utility::string_t& value)
{
    m_TargetConfiguration = value;
    m_TargetConfigurationIsSet = true;
}

bool BTRootDiffInfo::targetConfigurationIsSet() const
{
    return m_TargetConfigurationIsSet;
}

void BTRootDiffInfo::unsetTargetConfiguration()
{
    m_TargetConfigurationIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetId() const
{
    return m_TargetId;
}

void BTRootDiffInfo::setTargetId(const utility::string_t& value)
{
    m_TargetId = value;
    m_TargetIdIsSet = true;
}

bool BTRootDiffInfo::targetIdIsSet() const
{
    return m_TargetIdIsSet;
}

void BTRootDiffInfo::unsetTargetId()
{
    m_TargetIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetMicroversionId() const
{
    return m_TargetMicroversionId;
}

void BTRootDiffInfo::setTargetMicroversionId(const utility::string_t& value)
{
    m_TargetMicroversionId = value;
    m_TargetMicroversionIdIsSet = true;
}

bool BTRootDiffInfo::targetMicroversionIdIsSet() const
{
    return m_TargetMicroversionIdIsSet;
}

void BTRootDiffInfo::unsetTargetMicroversionId()
{
    m_TargetMicroversionIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetValue() const
{
    return m_TargetValue;
}

void BTRootDiffInfo::setTargetValue(const utility::string_t& value)
{
    m_TargetValue = value;
    m_TargetValueIsSet = true;
}

bool BTRootDiffInfo::targetValueIsSet() const
{
    return m_TargetValueIsSet;
}

void BTRootDiffInfo::unsetTargetValue()
{
    m_TargetValueIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetVersionId() const
{
    return m_TargetVersionId;
}

void BTRootDiffInfo::setTargetVersionId(const utility::string_t& value)
{
    m_TargetVersionId = value;
    m_TargetVersionIdIsSet = true;
}

bool BTRootDiffInfo::targetVersionIdIsSet() const
{
    return m_TargetVersionIdIsSet;
}

void BTRootDiffInfo::unsetTargetVersionId()
{
    m_TargetVersionIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getTargetWorkspaceId() const
{
    return m_TargetWorkspaceId;
}

void BTRootDiffInfo::setTargetWorkspaceId(const utility::string_t& value)
{
    m_TargetWorkspaceId = value;
    m_TargetWorkspaceIdIsSet = true;
}

bool BTRootDiffInfo::targetWorkspaceIdIsSet() const
{
    return m_TargetWorkspaceIdIsSet;
}

void BTRootDiffInfo::unsetTargetWorkspaceId()
{
    m_TargetWorkspaceIdIsSet = false;
}
utility::string_t BTRootDiffInfo::getType() const
{
    return m_Type;
}

void BTRootDiffInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTRootDiffInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTRootDiffInfo::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


