/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPTopLevelEnumDeclaration_284.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelEnumDeclaration_284_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelEnumDeclaration_284_H_


#include <cpprest/details/basic_types.h>
#include "BTPTopLevelTypeDeclaration_287.h"
#include "BTPIdentifier_8.h"
#include "BTPLiteralNumber_258.h"
#include "BTPSpace_10.h"
#include "BTPTopLevelEnumDeclaration_284_allOf.h"
#include <vector>
#include "BTPAnnotation_231.h"
#include "BTPArgumentDeclaration_232.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPTopLevelEnumDeclaration_284
    : public BTPTopLevelTypeDeclaration_287
{
public:
    BTPTopLevelEnumDeclaration_284();
    virtual ~BTPTopLevelEnumDeclaration_284();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPTopLevelEnumDeclaration_284 members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPAnnotation_231>>& getAnnotations();
    bool annotationsIsSet() const;
    void unsetAnnotations();

    void setAnnotations(const std::vector<std::shared_ptr<BTPAnnotation_231>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceInEmptyList() const;
    bool spaceInEmptyListIsSet() const;
    void unsetSpaceInEmptyList();

    void setSpaceInEmptyList(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrailingComma() const;
    bool trailingCommaIsSet() const;
    void unsetTrailingComma();

    void setTrailingComma(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPIdentifier_8>>& getValues();
    bool valuesIsSet() const;
    void unsetValues();

    void setValues(const std::vector<std::shared_ptr<BTPIdentifier_8>>& value);


protected:
    std::vector<std::shared_ptr<BTPAnnotation_231>> m_Annotations;
    bool m_AnnotationsIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceInEmptyList;
    bool m_SpaceInEmptyListIsSet;
    bool m_TrailingComma;
    bool m_TrailingCommaIsSet;
    std::vector<std::shared_ptr<BTPIdentifier_8>> m_Values;
    bool m_ValuesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPTopLevelEnumDeclaration_284_H_ */
