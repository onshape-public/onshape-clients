/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTForeignDataResponse_1070.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTForeignDataResponse_1070_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTForeignDataResponse_1070_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTForeignDataResponse_1070
    : public ModelBase
{
public:
    BTForeignDataResponse_1070();
    virtual ~BTForeignDataResponse_1070();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTForeignDataResponse_1070 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBucketName() const;
    bool bucketNameIsSet() const;
    void unsetBucketName();

    void setBucketName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBucketPath() const;
    bool bucketPathIsSet() const;
    void unsetBucketPath();

    void setBucketPath(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCacheChunkList();
    bool cacheChunkListIsSet() const;
    void unsetCacheChunkList();

    void setCacheChunkList(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataId() const;
    bool dataIdIsSet() const;
    void unsetDataId();

    void setDataId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFormat() const;
    bool formatIsSet() const;
    void unsetFormat();

    void setFormat(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();

    void setSize(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isUseLocalStorage() const;
    bool useLocalStorageIsSet() const;
    void unsetUseLocalStorage();

    void setUseLocalStorage(bool value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    utility::string_t m_BucketName;
    bool m_BucketNameIsSet;
    utility::string_t m_BucketPath;
    bool m_BucketPathIsSet;
    std::vector<utility::string_t> m_CacheChunkList;
    bool m_CacheChunkListIsSet;
    utility::string_t m_DataId;
    bool m_DataIdIsSet;
    utility::string_t m_Format;
    bool m_FormatIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    int32_t m_Size;
    bool m_SizeIsSet;
    bool m_UseLocalStorage;
    bool m_UseLocalStorageIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTForeignDataResponse_1070_H_ */
