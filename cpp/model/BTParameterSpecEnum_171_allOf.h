/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTParameterSpecEnum_171_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTParameterSpecEnum_171_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTParameterSpecEnum_171_allOf_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTParameterSpecEnum_171_allOf
    : public ModelBase
{
public:
    BTParameterSpecEnum_171_allOf();
    virtual ~BTParameterSpecEnum_171_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTParameterSpecEnum_171_allOf members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEnumName() const;
    bool enumNameIsSet() const;
    void unsetEnumName();

    void setEnumName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getOptionNames();
    bool optionNamesIsSet() const;
    void unsetOptionNames();

    void setOptionNames(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getOptions();
    bool optionsIsSet() const;
    void unsetOptions();

    void setOptions(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    utility::string_t m_EnumName;
    bool m_EnumNameIsSet;
    std::vector<utility::string_t> m_OptionNames;
    bool m_OptionNamesIsSet;
    std::vector<utility::string_t> m_Options;
    bool m_OptionsIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTParameterSpecEnum_171_allOf_H_ */
