/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterConfigured_2222_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterConfigured_2222_allOf::BTMParameterConfigured_2222_allOf()
{
    m_ValuesFieldIndex = 0;
    m_ValuesFieldIndexIsSet = false;
    m_ConfigurationParameterIdFieldIndex = 0;
    m_ConfigurationParameterIdFieldIndexIsSet = false;
    m_ConfigurationParameterId = utility::conversions::to_string_t("");
    m_ConfigurationParameterIdIsSet = false;
    m_ValuesIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMParameterConfigured_2222_allOf::~BTMParameterConfigured_2222_allOf()
{
}

void BTMParameterConfigured_2222_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterConfigured_2222_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ValuesFieldIndexIsSet)
    {
        val[utility::conversions::to_string_t("valuesFieldIndex")] = ModelBase::toJson(m_ValuesFieldIndex);
    }
    if(m_ConfigurationParameterIdFieldIndexIsSet)
    {
        val[utility::conversions::to_string_t("configurationParameterIdFieldIndex")] = ModelBase::toJson(m_ConfigurationParameterIdFieldIndex);
    }
    if(m_ConfigurationParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("configurationParameterId")] = ModelBase::toJson(m_ConfigurationParameterId);
    }
    if(m_ValuesIsSet)
    {
        val[utility::conversions::to_string_t("values")] = ModelBase::toJson(m_Values);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMParameterConfigured_2222_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("valuesFieldIndex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valuesFieldIndex"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_valuesFieldIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_valuesFieldIndex);
            setValuesFieldIndex(refVal_valuesFieldIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationParameterIdFieldIndex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationParameterIdFieldIndex"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_configurationParameterIdFieldIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationParameterIdFieldIndex);
            setConfigurationParameterIdFieldIndex(refVal_configurationParameterIdFieldIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationParameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationParameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationParameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationParameterId);
            setConfigurationParameterId(refVal_configurationParameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("values")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("values"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMConfiguredValue_1341>> refVal_values;
            ok &= ModelBase::fromJson(fieldValue, refVal_values);
            setValues(refVal_values);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMParameterConfigured_2222_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ValuesFieldIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valuesFieldIndex"), m_ValuesFieldIndex));
    }
    if(m_ConfigurationParameterIdFieldIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationParameterIdFieldIndex"), m_ConfigurationParameterIdFieldIndex));
    }
    if(m_ConfigurationParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationParameterId"), m_ConfigurationParameterId));
    }
    if(m_ValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("values"), m_Values));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMParameterConfigured_2222_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("valuesFieldIndex")))
    {
        int32_t refVal_valuesFieldIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valuesFieldIndex")), refVal_valuesFieldIndex );
        setValuesFieldIndex(refVal_valuesFieldIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationParameterIdFieldIndex")))
    {
        int32_t refVal_configurationParameterIdFieldIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationParameterIdFieldIndex")), refVal_configurationParameterIdFieldIndex );
        setConfigurationParameterIdFieldIndex(refVal_configurationParameterIdFieldIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationParameterId")))
    {
        utility::string_t refVal_configurationParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationParameterId")), refVal_configurationParameterId );
        setConfigurationParameterId(refVal_configurationParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("values")))
    {
        std::vector<std::shared_ptr<BTMConfiguredValue_1341>> refVal_values;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("values")), refVal_values );
        setValues(refVal_values);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

int32_t BTMParameterConfigured_2222_allOf::getValuesFieldIndex() const
{
    return m_ValuesFieldIndex;
}

void BTMParameterConfigured_2222_allOf::setValuesFieldIndex(int32_t value)
{
    m_ValuesFieldIndex = value;
    m_ValuesFieldIndexIsSet = true;
}

bool BTMParameterConfigured_2222_allOf::valuesFieldIndexIsSet() const
{
    return m_ValuesFieldIndexIsSet;
}

void BTMParameterConfigured_2222_allOf::unsetValuesFieldIndex()
{
    m_ValuesFieldIndexIsSet = false;
}
int32_t BTMParameterConfigured_2222_allOf::getConfigurationParameterIdFieldIndex() const
{
    return m_ConfigurationParameterIdFieldIndex;
}

void BTMParameterConfigured_2222_allOf::setConfigurationParameterIdFieldIndex(int32_t value)
{
    m_ConfigurationParameterIdFieldIndex = value;
    m_ConfigurationParameterIdFieldIndexIsSet = true;
}

bool BTMParameterConfigured_2222_allOf::configurationParameterIdFieldIndexIsSet() const
{
    return m_ConfigurationParameterIdFieldIndexIsSet;
}

void BTMParameterConfigured_2222_allOf::unsetConfigurationParameterIdFieldIndex()
{
    m_ConfigurationParameterIdFieldIndexIsSet = false;
}
utility::string_t BTMParameterConfigured_2222_allOf::getConfigurationParameterId() const
{
    return m_ConfigurationParameterId;
}

void BTMParameterConfigured_2222_allOf::setConfigurationParameterId(const utility::string_t& value)
{
    m_ConfigurationParameterId = value;
    m_ConfigurationParameterIdIsSet = true;
}

bool BTMParameterConfigured_2222_allOf::configurationParameterIdIsSet() const
{
    return m_ConfigurationParameterIdIsSet;
}

void BTMParameterConfigured_2222_allOf::unsetConfigurationParameterId()
{
    m_ConfigurationParameterIdIsSet = false;
}
std::vector<std::shared_ptr<BTMConfiguredValue_1341>>& BTMParameterConfigured_2222_allOf::getValues()
{
    return m_Values;
}

void BTMParameterConfigured_2222_allOf::setValues(const std::vector<std::shared_ptr<BTMConfiguredValue_1341>>& value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}

bool BTMParameterConfigured_2222_allOf::valuesIsSet() const
{
    return m_ValuesIsSet;
}

void BTMParameterConfigured_2222_allOf::unsetValues()
{
    m_ValuesIsSet = false;
}
utility::string_t BTMParameterConfigured_2222_allOf::getBtType() const
{
    return m_BtType;
}

void BTMParameterConfigured_2222_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMParameterConfigured_2222_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMParameterConfigured_2222_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


