/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTGraphicsAppearance_1152.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTGraphicsAppearance_1152::BTGraphicsAppearance_1152()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ColorIsSet = false;
    m_NonTrivial = false;
    m_NonTrivialIsSet = false;
    m_Opacity = 0;
    m_OpacityIsSet = false;
    m_Reset = false;
    m_ResetIsSet = false;
    m_RgbaColorIsSet = false;
    m_UsableAppearance = false;
    m_UsableAppearanceIsSet = false;
}

BTGraphicsAppearance_1152::~BTGraphicsAppearance_1152()
{
}

void BTGraphicsAppearance_1152::validate()
{
    // TODO: implement validation
}

web::json::value BTGraphicsAppearance_1152::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_NonTrivialIsSet)
    {
        val[utility::conversions::to_string_t("nonTrivial")] = ModelBase::toJson(m_NonTrivial);
    }
    if(m_OpacityIsSet)
    {
        val[utility::conversions::to_string_t("opacity")] = ModelBase::toJson(m_Opacity);
    }
    if(m_ResetIsSet)
    {
        val[utility::conversions::to_string_t("reset")] = ModelBase::toJson(m_Reset);
    }
    if(m_RgbaColorIsSet)
    {
        val[utility::conversions::to_string_t("rgbaColor")] = ModelBase::toJson(m_RgbaColor);
    }
    if(m_UsableAppearanceIsSet)
    {
        val[utility::conversions::to_string_t("usableAppearance")] = ModelBase::toJson(m_UsableAppearance);
    }

    return val;
}

bool BTGraphicsAppearance_1152::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nonTrivial")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nonTrivial"));
        if(!fieldValue.is_null())
        {
            bool refVal_nonTrivial;
            ok &= ModelBase::fromJson(fieldValue, refVal_nonTrivial);
            setNonTrivial(refVal_nonTrivial);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("opacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("opacity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_opacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_opacity);
            setOpacity(refVal_opacity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reset"));
        if(!fieldValue.is_null())
        {
            bool refVal_reset;
            ok &= ModelBase::fromJson(fieldValue, refVal_reset);
            setReset(refVal_reset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rgbaColor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rgbaColor"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_rgbaColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_rgbaColor);
            setRgbaColor(refVal_rgbaColor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("usableAppearance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("usableAppearance"));
        if(!fieldValue.is_null())
        {
            bool refVal_usableAppearance;
            ok &= ModelBase::fromJson(fieldValue, refVal_usableAppearance);
            setUsableAppearance(refVal_usableAppearance);
        }
    }
    return ok;
}

void BTGraphicsAppearance_1152::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_NonTrivialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nonTrivial"), m_NonTrivial));
    }
    if(m_OpacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("opacity"), m_Opacity));
    }
    if(m_ResetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reset"), m_Reset));
    }
    if(m_RgbaColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rgbaColor"), m_RgbaColor));
    }
    if(m_UsableAppearanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("usableAppearance"), m_UsableAppearance));
    }
}

bool BTGraphicsAppearance_1152::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        std::vector<utility::string_t> refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nonTrivial")))
    {
        bool refVal_nonTrivial;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nonTrivial")), refVal_nonTrivial );
        setNonTrivial(refVal_nonTrivial);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("opacity")))
    {
        int32_t refVal_opacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("opacity")), refVal_opacity );
        setOpacity(refVal_opacity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reset")))
    {
        bool refVal_reset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reset")), refVal_reset );
        setReset(refVal_reset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rgbaColor")))
    {
        std::vector<utility::string_t> refVal_rgbaColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rgbaColor")), refVal_rgbaColor );
        setRgbaColor(refVal_rgbaColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("usableAppearance")))
    {
        bool refVal_usableAppearance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("usableAppearance")), refVal_usableAppearance );
        setUsableAppearance(refVal_usableAppearance);
    }
    return ok;
}

utility::string_t BTGraphicsAppearance_1152::getBtType() const
{
    return m_BtType;
}

void BTGraphicsAppearance_1152::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTGraphicsAppearance_1152::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTGraphicsAppearance_1152::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::vector<utility::string_t>& BTGraphicsAppearance_1152::getColor()
{
    return m_Color;
}

void BTGraphicsAppearance_1152::setColor(const std::vector<utility::string_t>& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool BTGraphicsAppearance_1152::colorIsSet() const
{
    return m_ColorIsSet;
}

void BTGraphicsAppearance_1152::unsetColor()
{
    m_ColorIsSet = false;
}
bool BTGraphicsAppearance_1152::isNonTrivial() const
{
    return m_NonTrivial;
}

void BTGraphicsAppearance_1152::setNonTrivial(bool value)
{
    m_NonTrivial = value;
    m_NonTrivialIsSet = true;
}

bool BTGraphicsAppearance_1152::nonTrivialIsSet() const
{
    return m_NonTrivialIsSet;
}

void BTGraphicsAppearance_1152::unsetNonTrivial()
{
    m_NonTrivialIsSet = false;
}
int32_t BTGraphicsAppearance_1152::getOpacity() const
{
    return m_Opacity;
}

void BTGraphicsAppearance_1152::setOpacity(int32_t value)
{
    m_Opacity = value;
    m_OpacityIsSet = true;
}

bool BTGraphicsAppearance_1152::opacityIsSet() const
{
    return m_OpacityIsSet;
}

void BTGraphicsAppearance_1152::unsetOpacity()
{
    m_OpacityIsSet = false;
}
bool BTGraphicsAppearance_1152::isReset() const
{
    return m_Reset;
}

void BTGraphicsAppearance_1152::setReset(bool value)
{
    m_Reset = value;
    m_ResetIsSet = true;
}

bool BTGraphicsAppearance_1152::resetIsSet() const
{
    return m_ResetIsSet;
}

void BTGraphicsAppearance_1152::unsetReset()
{
    m_ResetIsSet = false;
}
std::vector<utility::string_t>& BTGraphicsAppearance_1152::getRgbaColor()
{
    return m_RgbaColor;
}

void BTGraphicsAppearance_1152::setRgbaColor(const std::vector<utility::string_t>& value)
{
    m_RgbaColor = value;
    m_RgbaColorIsSet = true;
}

bool BTGraphicsAppearance_1152::rgbaColorIsSet() const
{
    return m_RgbaColorIsSet;
}

void BTGraphicsAppearance_1152::unsetRgbaColor()
{
    m_RgbaColorIsSet = false;
}
bool BTGraphicsAppearance_1152::isUsableAppearance() const
{
    return m_UsableAppearance;
}

void BTGraphicsAppearance_1152::setUsableAppearance(bool value)
{
    m_UsableAppearance = value;
    m_UsableAppearanceIsSet = true;
}

bool BTGraphicsAppearance_1152::usableAppearanceIsSet() const
{
    return m_UsableAppearanceIsSet;
}

void BTGraphicsAppearance_1152::unsetUsableAppearance()
{
    m_UsableAppearanceIsSet = false;
}
}
}
}
}


