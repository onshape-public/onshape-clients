/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPModuleId_235_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModuleId_235_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModuleId_235_allOf_H_


#include "../ModelBase.h"

#include "BTDocumentWithVersionId.h"
#include "BTPLiteralString_259.h"
#include <cpprest/details/basic_types.h>
#include "BTDocumentWithVersionAndElementId.h"
#include "BTPSpace_10.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPModuleId_235_allOf
    : public ModelBase
{
public:
    BTPModuleId_235_allOf();
    virtual ~BTPModuleId_235_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPModuleId_235_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDocumentWithVersionAndElementId> getExternalDocumentWithVersionAndElementId() const;
    bool externalDocumentWithVersionAndElementIdIsSet() const;
    void unsetExternalDocumentWithVersionAndElementId();

    void setExternalDocumentWithVersionAndElementId(const std::shared_ptr<BTDocumentWithVersionAndElementId>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isElementImport() const;
    bool elementImportIsSet() const;
    void unsetElementImport();

    void setElementImport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportedElementId() const;
    bool importedElementIdIsSet() const;
    void unsetImportedElementId();

    void setImportedElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionAndMicroversion() const;
    bool versionAndMicroversionIsSet() const;
    void unsetVersionAndMicroversion();

    void setVersionAndMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExternalImport() const;
    bool externalImportIsSet() const;
    void unsetExternalImport();

    void setExternalImport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportedDocumentId() const;
    bool importedDocumentIdIsSet() const;
    void unsetImportedDocumentId();

    void setImportedDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isLegacy() const;
    bool legacyIsSet() const;
    void unsetLegacy();

    void setLegacy(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isPathPotentiallyValid() const;
    bool pathPotentiallyValidIsSet() const;
    void unsetPathPotentiallyValid();

    void setPathPotentiallyValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isVersionPotentiallyValid() const;
    bool versionPotentiallyValidIsSet() const;
    void unsetVersionPotentiallyValid();

    void setVersionPotentiallyValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isValidLegacyVersion() const;
    bool validLegacyVersionIsSet() const;
    void unsetValidLegacyVersion();

    void setValidLegacyVersion(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPathVersion() const;
    bool pathVersionIsSet() const;
    void unsetPathVersion();

    void setPathVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportedVersionId() const;
    bool importedVersionIdIsSet() const;
    void unsetImportedVersionId();

    void setImportedVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isPotentiallyValid() const;
    bool potentiallyValidIsSet() const;
    void unsetPotentiallyValid();

    void setPotentiallyValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isStandardLibraryCommon() const;
    bool standardLibraryCommonIsSet() const;
    void unsetStandardLibraryCommon();

    void setStandardLibraryCommon(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDocumentWithVersionId> getExternalDocumentWithVersion() const;
    bool externalDocumentWithVersionIsSet() const;
    void unsetExternalDocumentWithVersion();

    void setExternalDocumentWithVersion(const std::shared_ptr<BTDocumentWithVersionId>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDbimportString() const;
    bool dbimportStringIsSet() const;
    void unsetDbimportString();

    void setDbimportString(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isStandardLibrary() const;
    bool standardLibraryIsSet() const;
    void unsetStandardLibrary();

    void setStandardLibrary(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMicroversion() const;
    bool microversionIsSet() const;
    void unsetMicroversion();

    void setMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforePath() const;
    bool spaceBeforePathIsSet() const;
    void unsetSpaceBeforePath();

    void setSpaceBeforePath(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterPath() const;
    bool spaceAfterPathIsSet() const;
    void unsetSpaceAfterPath();

    void setSpaceAfterPath(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeVersion() const;
    bool spaceBeforeVersionIsSet() const;
    void unsetSpaceBeforeVersion();

    void setSpaceBeforeVersion(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterVersion() const;
    bool spaceAfterVersionIsSet() const;
    void unsetSpaceAfterVersion();

    void setSpaceAfterVersion(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPLiteralString_259> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<BTPLiteralString_259>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPLiteralString_259> getPath() const;
    bool pathIsSet() const;
    void unsetPath();

    void setPath(const std::shared_ptr<BTPLiteralString_259>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    std::shared_ptr<BTDocumentWithVersionAndElementId> m_ExternalDocumentWithVersionAndElementId;
    bool m_ExternalDocumentWithVersionAndElementIdIsSet;
    bool m_ElementImport;
    bool m_ElementImportIsSet;
    utility::string_t m_ImportedElementId;
    bool m_ImportedElementIdIsSet;
    utility::string_t m_VersionAndMicroversion;
    bool m_VersionAndMicroversionIsSet;
    bool m_ExternalImport;
    bool m_ExternalImportIsSet;
    utility::string_t m_ImportedDocumentId;
    bool m_ImportedDocumentIdIsSet;
    bool m_Legacy;
    bool m_LegacyIsSet;
    bool m_PathPotentiallyValid;
    bool m_PathPotentiallyValidIsSet;
    bool m_VersionPotentiallyValid;
    bool m_VersionPotentiallyValidIsSet;
    bool m_ValidLegacyVersion;
    bool m_ValidLegacyVersionIsSet;
    utility::string_t m_PathVersion;
    bool m_PathVersionIsSet;
    utility::string_t m_ImportedVersionId;
    bool m_ImportedVersionIdIsSet;
    bool m_PotentiallyValid;
    bool m_PotentiallyValidIsSet;
    bool m_StandardLibraryCommon;
    bool m_StandardLibraryCommonIsSet;
    std::shared_ptr<BTDocumentWithVersionId> m_ExternalDocumentWithVersion;
    bool m_ExternalDocumentWithVersionIsSet;
    utility::string_t m_DbimportString;
    bool m_DbimportStringIsSet;
    bool m_StandardLibrary;
    bool m_StandardLibraryIsSet;
    utility::string_t m_Microversion;
    bool m_MicroversionIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforePath;
    bool m_SpaceBeforePathIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterPath;
    bool m_SpaceAfterPathIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeVersion;
    bool m_SpaceBeforeVersionIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterVersion;
    bool m_SpaceAfterVersionIsSet;
    std::shared_ptr<BTPLiteralString_259> m_Version;
    bool m_VersionIsSet;
    std::shared_ptr<BTPLiteralString_259> m_Path;
    bool m_PathIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModuleId_235_allOf_H_ */
