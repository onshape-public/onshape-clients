/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchCurve_4_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchCurve_4_allOf::BTMSketchCurve_4_allOf()
{
    m_CenterId = utility::conversions::to_string_t("");
    m_CenterIdIsSet = false;
    m_InternalIdsIsSet = false;
    m_GeometryIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMSketchCurve_4_allOf::~BTMSketchCurve_4_allOf()
{
}

void BTMSketchCurve_4_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchCurve_4_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CenterIdIsSet)
    {
        val[utility::conversions::to_string_t("centerId")] = ModelBase::toJson(m_CenterId);
    }
    if(m_InternalIdsIsSet)
    {
        val[utility::conversions::to_string_t("internalIds")] = ModelBase::toJson(m_InternalIds);
    }
    if(m_GeometryIsSet)
    {
        val[utility::conversions::to_string_t("geometry")] = ModelBase::toJson(m_Geometry);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMSketchCurve_4_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("centerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("centerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_centerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_centerId);
            setCenterId(refVal_centerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_internalIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalIds);
            setInternalIds(refVal_internalIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geometry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("geometry"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCurveGeometry_114> refVal_geometry;
            ok &= ModelBase::fromJson(fieldValue, refVal_geometry);
            setGeometry(refVal_geometry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMSketchCurve_4_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CenterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("centerId"), m_CenterId));
    }
    if(m_InternalIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalIds"), m_InternalIds));
    }
    if(m_GeometryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geometry"), m_Geometry));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMSketchCurve_4_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("centerId")))
    {
        utility::string_t refVal_centerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("centerId")), refVal_centerId );
        setCenterId(refVal_centerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalIds")))
    {
        std::vector<utility::string_t> refVal_internalIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalIds")), refVal_internalIds );
        setInternalIds(refVal_internalIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geometry")))
    {
        std::shared_ptr<BTCurveGeometry_114> refVal_geometry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geometry")), refVal_geometry );
        setGeometry(refVal_geometry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTMSketchCurve_4_allOf::getCenterId() const
{
    return m_CenterId;
}

void BTMSketchCurve_4_allOf::setCenterId(const utility::string_t& value)
{
    m_CenterId = value;
    m_CenterIdIsSet = true;
}

bool BTMSketchCurve_4_allOf::centerIdIsSet() const
{
    return m_CenterIdIsSet;
}

void BTMSketchCurve_4_allOf::unsetCenterId()
{
    m_CenterIdIsSet = false;
}
std::vector<utility::string_t>& BTMSketchCurve_4_allOf::getInternalIds()
{
    return m_InternalIds;
}

void BTMSketchCurve_4_allOf::setInternalIds(const std::vector<utility::string_t>& value)
{
    m_InternalIds = value;
    m_InternalIdsIsSet = true;
}

bool BTMSketchCurve_4_allOf::internalIdsIsSet() const
{
    return m_InternalIdsIsSet;
}

void BTMSketchCurve_4_allOf::unsetInternalIds()
{
    m_InternalIdsIsSet = false;
}
std::shared_ptr<BTCurveGeometry_114> BTMSketchCurve_4_allOf::getGeometry() const
{
    return m_Geometry;
}

void BTMSketchCurve_4_allOf::setGeometry(const std::shared_ptr<BTCurveGeometry_114>& value)
{
    m_Geometry = value;
    m_GeometryIsSet = true;
}

bool BTMSketchCurve_4_allOf::geometryIsSet() const
{
    return m_GeometryIsSet;
}

void BTMSketchCurve_4_allOf::unsetGeometry()
{
    m_GeometryIsSet = false;
}
utility::string_t BTMSketchCurve_4_allOf::getBtType() const
{
    return m_BtType;
}

void BTMSketchCurve_4_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchCurve_4_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchCurve_4_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


