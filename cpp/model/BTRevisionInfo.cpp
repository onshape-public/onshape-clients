/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTRevisionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTRevisionInfo::BTRevisionInfo()
{
    m_ApproversIsSet = false;
    m_AutoObsoletionReleaseId = utility::conversions::to_string_t("");
    m_AutoObsoletionReleaseIdIsSet = false;
    m_AutoObsoletionReleaseName = utility::conversions::to_string_t("");
    m_AutoObsoletionReleaseNameIsSet = false;
    m_CanCurrentUserObsolete = false;
    m_CanCurrentUserObsoleteIsSet = false;
    m_CanExport = false;
    m_CanExportIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentName = utility::conversions::to_string_t("");
    m_DocumentNameIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementType = 0;
    m_ElementTypeIsSet = false;
    m_ErrorMessage = utility::conversions::to_string_t("");
    m_ErrorMessageIsSet = false;
    m_FileName = utility::conversions::to_string_t("");
    m_FileNameIsSet = false;
    m_FlatPartInsertableId = utility::conversions::to_string_t("");
    m_FlatPartInsertableIdIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InsertableId = utility::conversions::to_string_t("");
    m_InsertableIdIsSet = false;
    m_IsObsolete = false;
    m_IsObsoleteIsSet = false;
    m_IsTranslatable = false;
    m_IsTranslatableIsSet = false;
    m_MimeType = utility::conversions::to_string_t("");
    m_MimeTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NextRevisionId = utility::conversions::to_string_t("");
    m_NextRevisionIdIsSet = false;
    m_ObsoletionPackageId = utility::conversions::to_string_t("");
    m_ObsoletionPackageIdIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_PreviousRevisionId = utility::conversions::to_string_t("");
    m_PreviousRevisionIdIsSet = false;
    m_ReleaseCreatedDate = utility::datetime();
    m_ReleaseCreatedDateIsSet = false;
    m_ReleaseId = utility::conversions::to_string_t("");
    m_ReleaseIdIsSet = false;
    m_ReleaseName = utility::conversions::to_string_t("");
    m_ReleaseNameIsSet = false;
    m_ReleasedByIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_RevisionRuleId = utility::conversions::to_string_t("");
    m_RevisionRuleIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_VersionName = utility::conversions::to_string_t("");
    m_VersionNameIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTRevisionInfo::~BTRevisionInfo()
{
}

void BTRevisionInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTRevisionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApproversIsSet)
    {
        val[utility::conversions::to_string_t("approvers")] = ModelBase::toJson(m_Approvers);
    }
    if(m_AutoObsoletionReleaseIdIsSet)
    {
        val[utility::conversions::to_string_t("autoObsoletionReleaseId")] = ModelBase::toJson(m_AutoObsoletionReleaseId);
    }
    if(m_AutoObsoletionReleaseNameIsSet)
    {
        val[utility::conversions::to_string_t("autoObsoletionReleaseName")] = ModelBase::toJson(m_AutoObsoletionReleaseName);
    }
    if(m_CanCurrentUserObsoleteIsSet)
    {
        val[utility::conversions::to_string_t("canCurrentUserObsolete")] = ModelBase::toJson(m_CanCurrentUserObsolete);
    }
    if(m_CanExportIsSet)
    {
        val[utility::conversions::to_string_t("canExport")] = ModelBase::toJson(m_CanExport);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentNameIsSet)
    {
        val[utility::conversions::to_string_t("documentName")] = ModelBase::toJson(m_DocumentName);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementTypeIsSet)
    {
        val[utility::conversions::to_string_t("elementType")] = ModelBase::toJson(m_ElementType);
    }
    if(m_ErrorMessageIsSet)
    {
        val[utility::conversions::to_string_t("errorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }
    if(m_FileNameIsSet)
    {
        val[utility::conversions::to_string_t("fileName")] = ModelBase::toJson(m_FileName);
    }
    if(m_FlatPartInsertableIdIsSet)
    {
        val[utility::conversions::to_string_t("flatPartInsertableId")] = ModelBase::toJson(m_FlatPartInsertableId);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InsertableIdIsSet)
    {
        val[utility::conversions::to_string_t("insertableId")] = ModelBase::toJson(m_InsertableId);
    }
    if(m_IsObsoleteIsSet)
    {
        val[utility::conversions::to_string_t("isObsolete")] = ModelBase::toJson(m_IsObsolete);
    }
    if(m_IsTranslatableIsSet)
    {
        val[utility::conversions::to_string_t("isTranslatable")] = ModelBase::toJson(m_IsTranslatable);
    }
    if(m_MimeTypeIsSet)
    {
        val[utility::conversions::to_string_t("mimeType")] = ModelBase::toJson(m_MimeType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NextRevisionIdIsSet)
    {
        val[utility::conversions::to_string_t("nextRevisionId")] = ModelBase::toJson(m_NextRevisionId);
    }
    if(m_ObsoletionPackageIdIsSet)
    {
        val[utility::conversions::to_string_t("obsoletionPackageId")] = ModelBase::toJson(m_ObsoletionPackageId);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_PreviousRevisionIdIsSet)
    {
        val[utility::conversions::to_string_t("previousRevisionId")] = ModelBase::toJson(m_PreviousRevisionId);
    }
    if(m_ReleaseCreatedDateIsSet)
    {
        val[utility::conversions::to_string_t("releaseCreatedDate")] = ModelBase::toJson(m_ReleaseCreatedDate);
    }
    if(m_ReleaseIdIsSet)
    {
        val[utility::conversions::to_string_t("releaseId")] = ModelBase::toJson(m_ReleaseId);
    }
    if(m_ReleaseNameIsSet)
    {
        val[utility::conversions::to_string_t("releaseName")] = ModelBase::toJson(m_ReleaseName);
    }
    if(m_ReleasedByIsSet)
    {
        val[utility::conversions::to_string_t("releasedBy")] = ModelBase::toJson(m_ReleasedBy);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_RevisionRuleIdIsSet)
    {
        val[utility::conversions::to_string_t("revisionRuleId")] = ModelBase::toJson(m_RevisionRuleId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_VersionNameIsSet)
    {
        val[utility::conversions::to_string_t("versionName")] = ModelBase::toJson(m_VersionName);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTRevisionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("approvers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("approvers"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTRevisionApproverInfo>> refVal_approvers;
            ok &= ModelBase::fromJson(fieldValue, refVal_approvers);
            setApprovers(refVal_approvers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("autoObsoletionReleaseId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("autoObsoletionReleaseId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_autoObsoletionReleaseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_autoObsoletionReleaseId);
            setAutoObsoletionReleaseId(refVal_autoObsoletionReleaseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("autoObsoletionReleaseName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("autoObsoletionReleaseName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_autoObsoletionReleaseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_autoObsoletionReleaseName);
            setAutoObsoletionReleaseName(refVal_autoObsoletionReleaseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canCurrentUserObsolete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canCurrentUserObsolete"));
        if(!fieldValue.is_null())
        {
            bool refVal_canCurrentUserObsolete;
            ok &= ModelBase::fromJson(fieldValue, refVal_canCurrentUserObsolete);
            setCanCurrentUserObsolete(refVal_canCurrentUserObsolete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canExport"));
        if(!fieldValue.is_null())
        {
            bool refVal_canExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_canExport);
            setCanExport(refVal_canExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentName);
            setDocumentName(refVal_documentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_elementType;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementType);
            setElementType(refVal_elementType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorMessage);
            setErrorMessage(refVal_errorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileName);
            setFileName(refVal_fileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flatPartInsertableId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("flatPartInsertableId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_flatPartInsertableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_flatPartInsertableId);
            setFlatPartInsertableId(refVal_flatPartInsertableId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("insertableId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("insertableId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_insertableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_insertableId);
            setInsertableId(refVal_insertableId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isObsolete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isObsolete"));
        if(!fieldValue.is_null())
        {
            bool refVal_isObsolete;
            ok &= ModelBase::fromJson(fieldValue, refVal_isObsolete);
            setIsObsolete(refVal_isObsolete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isTranslatable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isTranslatable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isTranslatable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isTranslatable);
            setIsTranslatable(refVal_isTranslatable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mimeType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mimeType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_mimeType);
            setMimeType(refVal_mimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nextRevisionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nextRevisionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nextRevisionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nextRevisionId);
            setNextRevisionId(refVal_nextRevisionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("obsoletionPackageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("obsoletionPackageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_obsoletionPackageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_obsoletionPackageId);
            setObsoletionPackageId(refVal_obsoletionPackageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("previousRevisionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("previousRevisionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_previousRevisionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_previousRevisionId);
            setPreviousRevisionId(refVal_previousRevisionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releaseCreatedDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releaseCreatedDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_releaseCreatedDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_releaseCreatedDate);
            setReleaseCreatedDate(refVal_releaseCreatedDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releaseId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releaseId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_releaseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_releaseId);
            setReleaseId(refVal_releaseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releaseName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releaseName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_releaseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_releaseName);
            setReleaseName(refVal_releaseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("releasedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("releasedBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserSummaryInfo> refVal_releasedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_releasedBy);
            setReleasedBy(refVal_releasedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revisionRuleId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revisionRuleId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revisionRuleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_revisionRuleId);
            setRevisionRuleId(refVal_revisionRuleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionName);
            setVersionName(refVal_versionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTRevisionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ApproversIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("approvers"), m_Approvers));
    }
    if(m_AutoObsoletionReleaseIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("autoObsoletionReleaseId"), m_AutoObsoletionReleaseId));
    }
    if(m_AutoObsoletionReleaseNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("autoObsoletionReleaseName"), m_AutoObsoletionReleaseName));
    }
    if(m_CanCurrentUserObsoleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canCurrentUserObsolete"), m_CanCurrentUserObsolete));
    }
    if(m_CanExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canExport"), m_CanExport));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentName"), m_DocumentName));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementType"), m_ElementType));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_FileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileName"), m_FileName));
    }
    if(m_FlatPartInsertableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("flatPartInsertableId"), m_FlatPartInsertableId));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_InsertableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("insertableId"), m_InsertableId));
    }
    if(m_IsObsoleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isObsolete"), m_IsObsolete));
    }
    if(m_IsTranslatableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isTranslatable"), m_IsTranslatable));
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mimeType"), m_MimeType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NextRevisionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nextRevisionId"), m_NextRevisionId));
    }
    if(m_ObsoletionPackageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("obsoletionPackageId"), m_ObsoletionPackageId));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_PreviousRevisionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("previousRevisionId"), m_PreviousRevisionId));
    }
    if(m_ReleaseCreatedDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releaseCreatedDate"), m_ReleaseCreatedDate));
    }
    if(m_ReleaseIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releaseId"), m_ReleaseId));
    }
    if(m_ReleaseNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releaseName"), m_ReleaseName));
    }
    if(m_ReleasedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("releasedBy"), m_ReleasedBy));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_RevisionRuleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revisionRuleId"), m_RevisionRuleId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_VersionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionName"), m_VersionName));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTRevisionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("approvers")))
    {
        std::vector<std::shared_ptr<BTRevisionApproverInfo>> refVal_approvers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("approvers")), refVal_approvers );
        setApprovers(refVal_approvers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("autoObsoletionReleaseId")))
    {
        utility::string_t refVal_autoObsoletionReleaseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("autoObsoletionReleaseId")), refVal_autoObsoletionReleaseId );
        setAutoObsoletionReleaseId(refVal_autoObsoletionReleaseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("autoObsoletionReleaseName")))
    {
        utility::string_t refVal_autoObsoletionReleaseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("autoObsoletionReleaseName")), refVal_autoObsoletionReleaseName );
        setAutoObsoletionReleaseName(refVal_autoObsoletionReleaseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canCurrentUserObsolete")))
    {
        bool refVal_canCurrentUserObsolete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canCurrentUserObsolete")), refVal_canCurrentUserObsolete );
        setCanCurrentUserObsolete(refVal_canCurrentUserObsolete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canExport")))
    {
        bool refVal_canExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canExport")), refVal_canExport );
        setCanExport(refVal_canExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentName")))
    {
        utility::string_t refVal_documentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentName")), refVal_documentName );
        setDocumentName(refVal_documentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementType")))
    {
        int32_t refVal_elementType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementType")), refVal_elementType );
        setElementType(refVal_elementType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileName")))
    {
        utility::string_t refVal_fileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileName")), refVal_fileName );
        setFileName(refVal_fileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flatPartInsertableId")))
    {
        utility::string_t refVal_flatPartInsertableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("flatPartInsertableId")), refVal_flatPartInsertableId );
        setFlatPartInsertableId(refVal_flatPartInsertableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("insertableId")))
    {
        utility::string_t refVal_insertableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("insertableId")), refVal_insertableId );
        setInsertableId(refVal_insertableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isObsolete")))
    {
        bool refVal_isObsolete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isObsolete")), refVal_isObsolete );
        setIsObsolete(refVal_isObsolete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isTranslatable")))
    {
        bool refVal_isTranslatable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isTranslatable")), refVal_isTranslatable );
        setIsTranslatable(refVal_isTranslatable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mimeType")))
    {
        utility::string_t refVal_mimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mimeType")), refVal_mimeType );
        setMimeType(refVal_mimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nextRevisionId")))
    {
        utility::string_t refVal_nextRevisionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nextRevisionId")), refVal_nextRevisionId );
        setNextRevisionId(refVal_nextRevisionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("obsoletionPackageId")))
    {
        utility::string_t refVal_obsoletionPackageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("obsoletionPackageId")), refVal_obsoletionPackageId );
        setObsoletionPackageId(refVal_obsoletionPackageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("previousRevisionId")))
    {
        utility::string_t refVal_previousRevisionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("previousRevisionId")), refVal_previousRevisionId );
        setPreviousRevisionId(refVal_previousRevisionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releaseCreatedDate")))
    {
        utility::datetime refVal_releaseCreatedDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releaseCreatedDate")), refVal_releaseCreatedDate );
        setReleaseCreatedDate(refVal_releaseCreatedDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releaseId")))
    {
        utility::string_t refVal_releaseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releaseId")), refVal_releaseId );
        setReleaseId(refVal_releaseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releaseName")))
    {
        utility::string_t refVal_releaseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releaseName")), refVal_releaseName );
        setReleaseName(refVal_releaseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("releasedBy")))
    {
        std::shared_ptr<BTUserSummaryInfo> refVal_releasedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("releasedBy")), refVal_releasedBy );
        setReleasedBy(refVal_releasedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revisionRuleId")))
    {
        utility::string_t refVal_revisionRuleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revisionRuleId")), refVal_revisionRuleId );
        setRevisionRuleId(refVal_revisionRuleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionName")))
    {
        utility::string_t refVal_versionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionName")), refVal_versionName );
        setVersionName(refVal_versionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

std::vector<std::shared_ptr<BTRevisionApproverInfo>>& BTRevisionInfo::getApprovers()
{
    return m_Approvers;
}

void BTRevisionInfo::setApprovers(const std::vector<std::shared_ptr<BTRevisionApproverInfo>>& value)
{
    m_Approvers = value;
    m_ApproversIsSet = true;
}

bool BTRevisionInfo::approversIsSet() const
{
    return m_ApproversIsSet;
}

void BTRevisionInfo::unsetApprovers()
{
    m_ApproversIsSet = false;
}
utility::string_t BTRevisionInfo::getAutoObsoletionReleaseId() const
{
    return m_AutoObsoletionReleaseId;
}

void BTRevisionInfo::setAutoObsoletionReleaseId(const utility::string_t& value)
{
    m_AutoObsoletionReleaseId = value;
    m_AutoObsoletionReleaseIdIsSet = true;
}

bool BTRevisionInfo::autoObsoletionReleaseIdIsSet() const
{
    return m_AutoObsoletionReleaseIdIsSet;
}

void BTRevisionInfo::unsetAutoObsoletionReleaseId()
{
    m_AutoObsoletionReleaseIdIsSet = false;
}
utility::string_t BTRevisionInfo::getAutoObsoletionReleaseName() const
{
    return m_AutoObsoletionReleaseName;
}

void BTRevisionInfo::setAutoObsoletionReleaseName(const utility::string_t& value)
{
    m_AutoObsoletionReleaseName = value;
    m_AutoObsoletionReleaseNameIsSet = true;
}

bool BTRevisionInfo::autoObsoletionReleaseNameIsSet() const
{
    return m_AutoObsoletionReleaseNameIsSet;
}

void BTRevisionInfo::unsetAutoObsoletionReleaseName()
{
    m_AutoObsoletionReleaseNameIsSet = false;
}
bool BTRevisionInfo::isCanCurrentUserObsolete() const
{
    return m_CanCurrentUserObsolete;
}

void BTRevisionInfo::setCanCurrentUserObsolete(bool value)
{
    m_CanCurrentUserObsolete = value;
    m_CanCurrentUserObsoleteIsSet = true;
}

bool BTRevisionInfo::canCurrentUserObsoleteIsSet() const
{
    return m_CanCurrentUserObsoleteIsSet;
}

void BTRevisionInfo::unsetCanCurrentUserObsolete()
{
    m_CanCurrentUserObsoleteIsSet = false;
}
bool BTRevisionInfo::isCanExport() const
{
    return m_CanExport;
}

void BTRevisionInfo::setCanExport(bool value)
{
    m_CanExport = value;
    m_CanExportIsSet = true;
}

bool BTRevisionInfo::canExportIsSet() const
{
    return m_CanExportIsSet;
}

void BTRevisionInfo::unsetCanExport()
{
    m_CanExportIsSet = false;
}
utility::string_t BTRevisionInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTRevisionInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTRevisionInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTRevisionInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTRevisionInfo::getConfiguration() const
{
    return m_Configuration;
}

void BTRevisionInfo::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTRevisionInfo::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTRevisionInfo::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
utility::string_t BTRevisionInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTRevisionInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTRevisionInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTRevisionInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTRevisionInfo::getDocumentName() const
{
    return m_DocumentName;
}

void BTRevisionInfo::setDocumentName(const utility::string_t& value)
{
    m_DocumentName = value;
    m_DocumentNameIsSet = true;
}

bool BTRevisionInfo::documentNameIsSet() const
{
    return m_DocumentNameIsSet;
}

void BTRevisionInfo::unsetDocumentName()
{
    m_DocumentNameIsSet = false;
}
utility::string_t BTRevisionInfo::getElementId() const
{
    return m_ElementId;
}

void BTRevisionInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTRevisionInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTRevisionInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
int32_t BTRevisionInfo::getElementType() const
{
    return m_ElementType;
}

void BTRevisionInfo::setElementType(int32_t value)
{
    m_ElementType = value;
    m_ElementTypeIsSet = true;
}

bool BTRevisionInfo::elementTypeIsSet() const
{
    return m_ElementTypeIsSet;
}

void BTRevisionInfo::unsetElementType()
{
    m_ElementTypeIsSet = false;
}
utility::string_t BTRevisionInfo::getErrorMessage() const
{
    return m_ErrorMessage;
}

void BTRevisionInfo::setErrorMessage(const utility::string_t& value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}

bool BTRevisionInfo::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void BTRevisionInfo::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}
utility::string_t BTRevisionInfo::getFileName() const
{
    return m_FileName;
}

void BTRevisionInfo::setFileName(const utility::string_t& value)
{
    m_FileName = value;
    m_FileNameIsSet = true;
}

bool BTRevisionInfo::fileNameIsSet() const
{
    return m_FileNameIsSet;
}

void BTRevisionInfo::unsetFileName()
{
    m_FileNameIsSet = false;
}
utility::string_t BTRevisionInfo::getFlatPartInsertableId() const
{
    return m_FlatPartInsertableId;
}

void BTRevisionInfo::setFlatPartInsertableId(const utility::string_t& value)
{
    m_FlatPartInsertableId = value;
    m_FlatPartInsertableIdIsSet = true;
}

bool BTRevisionInfo::flatPartInsertableIdIsSet() const
{
    return m_FlatPartInsertableIdIsSet;
}

void BTRevisionInfo::unsetFlatPartInsertableId()
{
    m_FlatPartInsertableIdIsSet = false;
}
utility::string_t BTRevisionInfo::getHref() const
{
    return m_Href;
}

void BTRevisionInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTRevisionInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTRevisionInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTRevisionInfo::getId() const
{
    return m_Id;
}

void BTRevisionInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTRevisionInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTRevisionInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTRevisionInfo::getInsertableId() const
{
    return m_InsertableId;
}

void BTRevisionInfo::setInsertableId(const utility::string_t& value)
{
    m_InsertableId = value;
    m_InsertableIdIsSet = true;
}

bool BTRevisionInfo::insertableIdIsSet() const
{
    return m_InsertableIdIsSet;
}

void BTRevisionInfo::unsetInsertableId()
{
    m_InsertableIdIsSet = false;
}
bool BTRevisionInfo::isIsObsolete() const
{
    return m_IsObsolete;
}

void BTRevisionInfo::setIsObsolete(bool value)
{
    m_IsObsolete = value;
    m_IsObsoleteIsSet = true;
}

bool BTRevisionInfo::isObsoleteIsSet() const
{
    return m_IsObsoleteIsSet;
}

void BTRevisionInfo::unsetIsObsolete()
{
    m_IsObsoleteIsSet = false;
}
bool BTRevisionInfo::isIsTranslatable() const
{
    return m_IsTranslatable;
}

void BTRevisionInfo::setIsTranslatable(bool value)
{
    m_IsTranslatable = value;
    m_IsTranslatableIsSet = true;
}

bool BTRevisionInfo::isTranslatableIsSet() const
{
    return m_IsTranslatableIsSet;
}

void BTRevisionInfo::unsetIsTranslatable()
{
    m_IsTranslatableIsSet = false;
}
utility::string_t BTRevisionInfo::getMimeType() const
{
    return m_MimeType;
}

void BTRevisionInfo::setMimeType(const utility::string_t& value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}

bool BTRevisionInfo::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void BTRevisionInfo::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}
utility::string_t BTRevisionInfo::getName() const
{
    return m_Name;
}

void BTRevisionInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTRevisionInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTRevisionInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTRevisionInfo::getNextRevisionId() const
{
    return m_NextRevisionId;
}

void BTRevisionInfo::setNextRevisionId(const utility::string_t& value)
{
    m_NextRevisionId = value;
    m_NextRevisionIdIsSet = true;
}

bool BTRevisionInfo::nextRevisionIdIsSet() const
{
    return m_NextRevisionIdIsSet;
}

void BTRevisionInfo::unsetNextRevisionId()
{
    m_NextRevisionIdIsSet = false;
}
utility::string_t BTRevisionInfo::getObsoletionPackageId() const
{
    return m_ObsoletionPackageId;
}

void BTRevisionInfo::setObsoletionPackageId(const utility::string_t& value)
{
    m_ObsoletionPackageId = value;
    m_ObsoletionPackageIdIsSet = true;
}

bool BTRevisionInfo::obsoletionPackageIdIsSet() const
{
    return m_ObsoletionPackageIdIsSet;
}

void BTRevisionInfo::unsetObsoletionPackageId()
{
    m_ObsoletionPackageIdIsSet = false;
}
utility::string_t BTRevisionInfo::getPartId() const
{
    return m_PartId;
}

void BTRevisionInfo::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTRevisionInfo::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTRevisionInfo::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTRevisionInfo::getPartNumber() const
{
    return m_PartNumber;
}

void BTRevisionInfo::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTRevisionInfo::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTRevisionInfo::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTRevisionInfo::getPreviousRevisionId() const
{
    return m_PreviousRevisionId;
}

void BTRevisionInfo::setPreviousRevisionId(const utility::string_t& value)
{
    m_PreviousRevisionId = value;
    m_PreviousRevisionIdIsSet = true;
}

bool BTRevisionInfo::previousRevisionIdIsSet() const
{
    return m_PreviousRevisionIdIsSet;
}

void BTRevisionInfo::unsetPreviousRevisionId()
{
    m_PreviousRevisionIdIsSet = false;
}
utility::datetime BTRevisionInfo::getReleaseCreatedDate() const
{
    return m_ReleaseCreatedDate;
}

void BTRevisionInfo::setReleaseCreatedDate(const utility::datetime& value)
{
    m_ReleaseCreatedDate = value;
    m_ReleaseCreatedDateIsSet = true;
}

bool BTRevisionInfo::releaseCreatedDateIsSet() const
{
    return m_ReleaseCreatedDateIsSet;
}

void BTRevisionInfo::unsetReleaseCreatedDate()
{
    m_ReleaseCreatedDateIsSet = false;
}
utility::string_t BTRevisionInfo::getReleaseId() const
{
    return m_ReleaseId;
}

void BTRevisionInfo::setReleaseId(const utility::string_t& value)
{
    m_ReleaseId = value;
    m_ReleaseIdIsSet = true;
}

bool BTRevisionInfo::releaseIdIsSet() const
{
    return m_ReleaseIdIsSet;
}

void BTRevisionInfo::unsetReleaseId()
{
    m_ReleaseIdIsSet = false;
}
utility::string_t BTRevisionInfo::getReleaseName() const
{
    return m_ReleaseName;
}

void BTRevisionInfo::setReleaseName(const utility::string_t& value)
{
    m_ReleaseName = value;
    m_ReleaseNameIsSet = true;
}

bool BTRevisionInfo::releaseNameIsSet() const
{
    return m_ReleaseNameIsSet;
}

void BTRevisionInfo::unsetReleaseName()
{
    m_ReleaseNameIsSet = false;
}
std::shared_ptr<BTUserSummaryInfo> BTRevisionInfo::getReleasedBy() const
{
    return m_ReleasedBy;
}

void BTRevisionInfo::setReleasedBy(const std::shared_ptr<BTUserSummaryInfo>& value)
{
    m_ReleasedBy = value;
    m_ReleasedByIsSet = true;
}

bool BTRevisionInfo::releasedByIsSet() const
{
    return m_ReleasedByIsSet;
}

void BTRevisionInfo::unsetReleasedBy()
{
    m_ReleasedByIsSet = false;
}
utility::string_t BTRevisionInfo::getRevision() const
{
    return m_Revision;
}

void BTRevisionInfo::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTRevisionInfo::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTRevisionInfo::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTRevisionInfo::getRevisionRuleId() const
{
    return m_RevisionRuleId;
}

void BTRevisionInfo::setRevisionRuleId(const utility::string_t& value)
{
    m_RevisionRuleId = value;
    m_RevisionRuleIdIsSet = true;
}

bool BTRevisionInfo::revisionRuleIdIsSet() const
{
    return m_RevisionRuleIdIsSet;
}

void BTRevisionInfo::unsetRevisionRuleId()
{
    m_RevisionRuleIdIsSet = false;
}
utility::string_t BTRevisionInfo::getVersionId() const
{
    return m_VersionId;
}

void BTRevisionInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTRevisionInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTRevisionInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTRevisionInfo::getVersionName() const
{
    return m_VersionName;
}

void BTRevisionInfo::setVersionName(const utility::string_t& value)
{
    m_VersionName = value;
    m_VersionNameIsSet = true;
}

bool BTRevisionInfo::versionNameIsSet() const
{
    return m_VersionNameIsSet;
}

void BTRevisionInfo::unsetVersionName()
{
    m_VersionNameIsSet = false;
}
utility::string_t BTRevisionInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTRevisionInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTRevisionInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTRevisionInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


