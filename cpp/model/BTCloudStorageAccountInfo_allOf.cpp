/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCloudStorageAccountInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCloudStorageAccountInfo_allOf::BTCloudStorageAccountInfo_allOf()
{
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_ImportFolderIsSet = false;
    m_ExportFolderIsSet = false;
    m_CloudStorageProvider = 0;
    m_CloudStorageProviderIsSet = false;
    m_CloudStorageAccountId = utility::conversions::to_string_t("");
    m_CloudStorageAccountIdIsSet = false;
}

BTCloudStorageAccountInfo_allOf::~BTCloudStorageAccountInfo_allOf()
{
}

void BTCloudStorageAccountInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTCloudStorageAccountInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ImportFolderIsSet)
    {
        val[utility::conversions::to_string_t("importFolder")] = ModelBase::toJson(m_ImportFolder);
    }
    if(m_ExportFolderIsSet)
    {
        val[utility::conversions::to_string_t("exportFolder")] = ModelBase::toJson(m_ExportFolder);
    }
    if(m_CloudStorageProviderIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageProvider")] = ModelBase::toJson(m_CloudStorageProvider);
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageAccountId")] = ModelBase::toJson(m_CloudStorageAccountId);
    }

    return val;
}

bool BTCloudStorageAccountInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importFolder")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importFolder"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCloudStorageObjectInfo> refVal_importFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_importFolder);
            setImportFolder(refVal_importFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportFolder")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportFolder"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCloudStorageObjectInfo> refVal_exportFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportFolder);
            setExportFolder(refVal_exportFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageProvider"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_cloudStorageProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageProvider);
            setCloudStorageProvider(refVal_cloudStorageProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageAccountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageAccountId);
            setCloudStorageAccountId(refVal_cloudStorageAccountId);
        }
    }
    return ok;
}

void BTCloudStorageAccountInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_ImportFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importFolder"), m_ImportFolder));
    }
    if(m_ExportFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportFolder"), m_ExportFolder));
    }
    if(m_CloudStorageProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageProvider"), m_CloudStorageProvider));
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageAccountId"), m_CloudStorageAccountId));
    }
}

bool BTCloudStorageAccountInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importFolder")))
    {
        std::shared_ptr<BTCloudStorageObjectInfo> refVal_importFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importFolder")), refVal_importFolder );
        setImportFolder(refVal_importFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportFolder")))
    {
        std::shared_ptr<BTCloudStorageObjectInfo> refVal_exportFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportFolder")), refVal_exportFolder );
        setExportFolder(refVal_exportFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        int32_t refVal_cloudStorageProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageProvider")), refVal_cloudStorageProvider );
        setCloudStorageProvider(refVal_cloudStorageProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        utility::string_t refVal_cloudStorageAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageAccountId")), refVal_cloudStorageAccountId );
        setCloudStorageAccountId(refVal_cloudStorageAccountId);
    }
    return ok;
}

bool BTCloudStorageAccountInfo_allOf::isEnabled() const
{
    return m_Enabled;
}

void BTCloudStorageAccountInfo_allOf::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool BTCloudStorageAccountInfo_allOf::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void BTCloudStorageAccountInfo_allOf::unsetEnabled()
{
    m_EnabledIsSet = false;
}
std::shared_ptr<BTCloudStorageObjectInfo> BTCloudStorageAccountInfo_allOf::getImportFolder() const
{
    return m_ImportFolder;
}

void BTCloudStorageAccountInfo_allOf::setImportFolder(const std::shared_ptr<BTCloudStorageObjectInfo>& value)
{
    m_ImportFolder = value;
    m_ImportFolderIsSet = true;
}

bool BTCloudStorageAccountInfo_allOf::importFolderIsSet() const
{
    return m_ImportFolderIsSet;
}

void BTCloudStorageAccountInfo_allOf::unsetImportFolder()
{
    m_ImportFolderIsSet = false;
}
std::shared_ptr<BTCloudStorageObjectInfo> BTCloudStorageAccountInfo_allOf::getExportFolder() const
{
    return m_ExportFolder;
}

void BTCloudStorageAccountInfo_allOf::setExportFolder(const std::shared_ptr<BTCloudStorageObjectInfo>& value)
{
    m_ExportFolder = value;
    m_ExportFolderIsSet = true;
}

bool BTCloudStorageAccountInfo_allOf::exportFolderIsSet() const
{
    return m_ExportFolderIsSet;
}

void BTCloudStorageAccountInfo_allOf::unsetExportFolder()
{
    m_ExportFolderIsSet = false;
}
int32_t BTCloudStorageAccountInfo_allOf::getCloudStorageProvider() const
{
    return m_CloudStorageProvider;
}

void BTCloudStorageAccountInfo_allOf::setCloudStorageProvider(int32_t value)
{
    m_CloudStorageProvider = value;
    m_CloudStorageProviderIsSet = true;
}

bool BTCloudStorageAccountInfo_allOf::cloudStorageProviderIsSet() const
{
    return m_CloudStorageProviderIsSet;
}

void BTCloudStorageAccountInfo_allOf::unsetCloudStorageProvider()
{
    m_CloudStorageProviderIsSet = false;
}
utility::string_t BTCloudStorageAccountInfo_allOf::getCloudStorageAccountId() const
{
    return m_CloudStorageAccountId;
}

void BTCloudStorageAccountInfo_allOf::setCloudStorageAccountId(const utility::string_t& value)
{
    m_CloudStorageAccountId = value;
    m_CloudStorageAccountIdIsSet = true;
}

bool BTCloudStorageAccountInfo_allOf::cloudStorageAccountIdIsSet() const
{
    return m_CloudStorageAccountIdIsSet;
}

void BTCloudStorageAccountInfo_allOf::unsetCloudStorageAccountId()
{
    m_CloudStorageAccountIdIsSet = false;
}
}
}
}
}


