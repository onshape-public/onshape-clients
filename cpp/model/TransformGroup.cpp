/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TransformGroup.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TransformGroup::TransformGroup()
{
    m_InstancesIsSet = false;
    m_TransformIsSet = false;
}

TransformGroup::~TransformGroup()
{
}

void TransformGroup::validate()
{
    // TODO: implement validation
}

web::json::value TransformGroup::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InstancesIsSet)
    {
        val[utility::conversions::to_string_t("instances")] = ModelBase::toJson(m_Instances);
    }
    if(m_TransformIsSet)
    {
        val[utility::conversions::to_string_t("transform")] = ModelBase::toJson(m_Transform);
    }

    return val;
}

bool TransformGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("instances")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instances"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAssemblyInstanceDefinitionParams>> refVal_instances;
            ok &= ModelBase::fromJson(fieldValue, refVal_instances);
            setInstances(refVal_instances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transform")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transform"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_transform;
            ok &= ModelBase::fromJson(fieldValue, refVal_transform);
            setTransform(refVal_transform);
        }
    }
    return ok;
}

void TransformGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_InstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instances"), m_Instances));
    }
    if(m_TransformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transform"), m_Transform));
    }
}

bool TransformGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("instances")))
    {
        std::vector<std::shared_ptr<BTAssemblyInstanceDefinitionParams>> refVal_instances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instances")), refVal_instances );
        setInstances(refVal_instances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transform")))
    {
        std::vector<double> refVal_transform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transform")), refVal_transform );
        setTransform(refVal_transform);
    }
    return ok;
}

std::vector<std::shared_ptr<BTAssemblyInstanceDefinitionParams>>& TransformGroup::getInstances()
{
    return m_Instances;
}

void TransformGroup::setInstances(const std::vector<std::shared_ptr<BTAssemblyInstanceDefinitionParams>>& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}

bool TransformGroup::instancesIsSet() const
{
    return m_InstancesIsSet;
}

void TransformGroup::unsetInstances()
{
    m_InstancesIsSet = false;
}
std::vector<double>& TransformGroup::getTransform()
{
    return m_Transform;
}

void TransformGroup::setTransform(std::vector<double> value)
{
    m_Transform = value;
    m_TransformIsSet = true;
}

bool TransformGroup::transformIsSet() const
{
    return m_TransformIsSet;
}

void TransformGroup::unsetTransform()
{
    m_TransformIsSet = false;
}
}
}
}
}


