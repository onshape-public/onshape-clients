/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTWorkflowPropertyInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowPropertyInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowPropertyInfo_H_


#include "../ModelBase.h"

#include "BTMetadataPropertyUiHintsInfo.h"
#include "BTMetadataEnumValueInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTMetadataPropertyValidatorInfo.h"
#include "Object.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTWorkflowPropertyInfo
    : public ModelBase
{
public:
    BTWorkflowPropertyInfo();
    virtual ~BTWorkflowPropertyInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTWorkflowPropertyInfo members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getDefaultValue() const;
    bool defaultValueIsSet() const;
    void unsetDefaultValue();

    void setDefaultValue(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDirty() const;
    bool dirtyIsSet() const;
    void unsetDirty();

    void setDirty(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditable() const;
    bool editableIsSet() const;
    void unsetEditable();

    void setEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditableInUi() const;
    bool editableInUiIsSet() const;
    void unsetEditableInUi();

    void setEditableInUi(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMetadataEnumValueInfo>>& getEnumValues();
    bool enumValuesIsSet() const;
    void unsetEnumValues();

    void setEnumValues(const std::vector<std::shared_ptr<BTMetadataEnumValueInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getInitialValue() const;
    bool initialValueIsSet() const;
    void unsetInitialValue();

    void setInitialValue(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsApproverProperty() const;
    bool isApproverPropertyIsSet() const;
    void unsetIsApproverProperty();

    void setIsApproverProperty(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsNotifierProperty() const;
    bool isNotifierPropertyIsSet() const;
    void unsetIsNotifierProperty();

    void setIsNotifierProperty(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPropertyId() const;
    bool propertyIdIsSet() const;
    void unsetPropertyId();

    void setPropertyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPropertySource() const;
    bool propertySourceIsSet() const;
    void unsetPropertySource();

    void setPropertySource(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isRequired() const;
    bool requiredIsSet() const;
    void unsetRequired();

    void setRequired(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSchemaId() const;
    bool schemaIdIsSet() const;
    void unsetSchemaId();

    void setSchemaId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMetadataPropertyUiHintsInfo> getUiHints() const;
    bool uiHintsIsSet() const;
    void unsetUiHints();

    void setUiHints(const std::shared_ptr<BTMetadataPropertyUiHintsInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMetadataPropertyValidatorInfo> getValidator() const;
    bool validatorIsSet() const;
    void unsetValidator();

    void setValidator(const std::shared_ptr<BTMetadataPropertyValidatorInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getValueType() const;
    bool valueTypeIsSet() const;
    void unsetValueType();

    void setValueType(const utility::string_t& value);


protected:
    std::shared_ptr<Object> m_DefaultValue;
    bool m_DefaultValueIsSet;
    bool m_Dirty;
    bool m_DirtyIsSet;
    bool m_Editable;
    bool m_EditableIsSet;
    bool m_EditableInUi;
    bool m_EditableInUiIsSet;
    std::vector<std::shared_ptr<BTMetadataEnumValueInfo>> m_EnumValues;
    bool m_EnumValuesIsSet;
    std::shared_ptr<Object> m_InitialValue;
    bool m_InitialValueIsSet;
    bool m_IsApproverProperty;
    bool m_IsApproverPropertyIsSet;
    bool m_IsNotifierProperty;
    bool m_IsNotifierPropertyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_PropertyId;
    bool m_PropertyIdIsSet;
    int32_t m_PropertySource;
    bool m_PropertySourceIsSet;
    bool m_Required;
    bool m_RequiredIsSet;
    utility::string_t m_SchemaId;
    bool m_SchemaIdIsSet;
    std::shared_ptr<BTMetadataPropertyUiHintsInfo> m_UiHints;
    bool m_UiHintsIsSet;
    std::shared_ptr<BTMetadataPropertyValidatorInfo> m_Validator;
    bool m_ValidatorIsSet;
    std::shared_ptr<Object> m_Value;
    bool m_ValueIsSet;
    utility::string_t m_ValueType;
    bool m_ValueTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowPropertyInfo_H_ */
