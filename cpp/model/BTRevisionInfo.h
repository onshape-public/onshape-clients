/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTRevisionInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTRevisionInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTRevisionInfo_H_


#include "../ModelBase.h"

#include "BTUserSummaryInfo.h"
#include "BTRevisionApproverInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTRevisionInfo
    : public ModelBase
{
public:
    BTRevisionInfo();
    virtual ~BTRevisionInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTRevisionInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTRevisionApproverInfo>>& getApprovers();
    bool approversIsSet() const;
    void unsetApprovers();

    void setApprovers(const std::vector<std::shared_ptr<BTRevisionApproverInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAutoObsoletionReleaseId() const;
    bool autoObsoletionReleaseIdIsSet() const;
    void unsetAutoObsoletionReleaseId();

    void setAutoObsoletionReleaseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAutoObsoletionReleaseName() const;
    bool autoObsoletionReleaseNameIsSet() const;
    void unsetAutoObsoletionReleaseName();

    void setAutoObsoletionReleaseName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanCurrentUserObsolete() const;
    bool canCurrentUserObsoleteIsSet() const;
    void unsetCanCurrentUserObsolete();

    void setCanCurrentUserObsolete(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanExport() const;
    bool canExportIsSet() const;
    void unsetCanExport();

    void setCanExport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfiguration() const;
    bool configurationIsSet() const;
    void unsetConfiguration();

    void setConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentName() const;
    bool documentNameIsSet() const;
    void unsetDocumentName();

    void setDocumentName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getElementType() const;
    bool elementTypeIsSet() const;
    void unsetElementType();

    void setElementType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorMessage() const;
    bool errorMessageIsSet() const;
    void unsetErrorMessage();

    void setErrorMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFileName() const;
    bool fileNameIsSet() const;
    void unsetFileName();

    void setFileName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFlatPartInsertableId() const;
    bool flatPartInsertableIdIsSet() const;
    void unsetFlatPartInsertableId();

    void setFlatPartInsertableId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInsertableId() const;
    bool insertableIdIsSet() const;
    void unsetInsertableId();

    void setInsertableId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsObsolete() const;
    bool isObsoleteIsSet() const;
    void unsetIsObsolete();

    void setIsObsolete(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTranslatable() const;
    bool isTranslatableIsSet() const;
    void unsetIsTranslatable();

    void setIsTranslatable(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMimeType() const;
    bool mimeTypeIsSet() const;
    void unsetMimeType();

    void setMimeType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNextRevisionId() const;
    bool nextRevisionIdIsSet() const;
    void unsetNextRevisionId();

    void setNextRevisionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObsoletionPackageId() const;
    bool obsoletionPackageIdIsSet() const;
    void unsetObsoletionPackageId();

    void setObsoletionPackageId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPartNumber();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPreviousRevisionId() const;
    bool previousRevisionIdIsSet() const;
    void unsetPreviousRevisionId();

    void setPreviousRevisionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getReleaseCreatedDate() const;
    bool releaseCreatedDateIsSet() const;
    void unsetReleaseCreatedDate();

    void setReleaseCreatedDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReleaseId() const;
    bool releaseIdIsSet() const;
    void unsetReleaseId();

    void setReleaseId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReleaseName() const;
    bool releaseNameIsSet() const;
    void unsetReleaseName();

    void setReleaseName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserSummaryInfo> getReleasedBy() const;
    bool releasedByIsSet() const;
    void unsetReleasedBy();

    void setReleasedBy(const std::shared_ptr<BTUserSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevisionRuleId() const;
    bool revisionRuleIdIsSet() const;
    void unsetRevisionRuleId();

    void setRevisionRuleId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionName() const;
    bool versionNameIsSet() const;
    void unsetVersionName();

    void setVersionName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    std::vector<std::shared_ptr<BTRevisionApproverInfo>> m_Approvers;
    bool m_ApproversIsSet;
    utility::string_t m_AutoObsoletionReleaseId;
    bool m_AutoObsoletionReleaseIdIsSet;
    utility::string_t m_AutoObsoletionReleaseName;
    bool m_AutoObsoletionReleaseNameIsSet;
    bool m_CanCurrentUserObsolete;
    bool m_CanCurrentUserObsoleteIsSet;
    bool m_CanExport;
    bool m_CanExportIsSet;
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_Configuration;
    bool m_ConfigurationIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_DocumentName;
    bool m_DocumentNameIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    int32_t m_ElementType;
    bool m_ElementTypeIsSet;
    utility::string_t m_ErrorMessage;
    bool m_ErrorMessageIsSet;
    utility::string_t m_FileName;
    bool m_FileNameIsSet;
    utility::string_t m_FlatPartInsertableId;
    bool m_FlatPartInsertableIdIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_InsertableId;
    bool m_InsertableIdIsSet;
    bool m_IsObsolete;
    bool m_IsObsoleteIsSet;
    bool m_IsTranslatable;
    bool m_IsTranslatableIsSet;
    utility::string_t m_MimeType;
    bool m_MimeTypeIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_NextRevisionId;
    bool m_NextRevisionIdIsSet;
    utility::string_t m_ObsoletionPackageId;
    bool m_ObsoletionPackageIdIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    utility::string_t m_PartNumber;
    bool m_PartNumberIsSet;
    utility::string_t m_PreviousRevisionId;
    bool m_PreviousRevisionIdIsSet;
    utility::datetime m_ReleaseCreatedDate;
    bool m_ReleaseCreatedDateIsSet;
    utility::string_t m_ReleaseId;
    bool m_ReleaseIdIsSet;
    utility::string_t m_ReleaseName;
    bool m_ReleaseNameIsSet;
    std::shared_ptr<BTUserSummaryInfo> m_ReleasedBy;
    bool m_ReleasedByIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
    utility::string_t m_RevisionRuleId;
    bool m_RevisionRuleIdIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    utility::string_t m_VersionName;
    bool m_VersionNameIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTRevisionInfo_H_ */
