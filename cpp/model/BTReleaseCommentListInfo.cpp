/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTReleaseCommentListInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTReleaseCommentListInfo::BTReleaseCommentListInfo()
{
    m_CommentsIsSet = false;
    m_RpId = utility::conversions::to_string_t("");
    m_RpIdIsSet = false;
    m_RpName = utility::conversions::to_string_t("");
    m_RpNameIsSet = false;
}

BTReleaseCommentListInfo::~BTReleaseCommentListInfo()
{
}

void BTReleaseCommentListInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTReleaseCommentListInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CommentsIsSet)
    {
        val[utility::conversions::to_string_t("comments")] = ModelBase::toJson(m_Comments);
    }
    if(m_RpIdIsSet)
    {
        val[utility::conversions::to_string_t("rpId")] = ModelBase::toJson(m_RpId);
    }
    if(m_RpNameIsSet)
    {
        val[utility::conversions::to_string_t("rpName")] = ModelBase::toJson(m_RpName);
    }

    return val;
}

bool BTReleaseCommentListInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("comments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("comments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTCommentInfo>> refVal_comments;
            ok &= ModelBase::fromJson(fieldValue, refVal_comments);
            setComments(refVal_comments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rpId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rpId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rpId;
            ok &= ModelBase::fromJson(fieldValue, refVal_rpId);
            setRpId(refVal_rpId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rpName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rpName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rpName;
            ok &= ModelBase::fromJson(fieldValue, refVal_rpName);
            setRpName(refVal_rpName);
        }
    }
    return ok;
}

void BTReleaseCommentListInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("comments"), m_Comments));
    }
    if(m_RpIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rpId"), m_RpId));
    }
    if(m_RpNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rpName"), m_RpName));
    }
}

bool BTReleaseCommentListInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("comments")))
    {
        std::vector<std::shared_ptr<BTCommentInfo>> refVal_comments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("comments")), refVal_comments );
        setComments(refVal_comments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rpId")))
    {
        utility::string_t refVal_rpId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rpId")), refVal_rpId );
        setRpId(refVal_rpId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rpName")))
    {
        utility::string_t refVal_rpName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rpName")), refVal_rpName );
        setRpName(refVal_rpName);
    }
    return ok;
}

std::vector<std::shared_ptr<BTCommentInfo>>& BTReleaseCommentListInfo::getComments()
{
    return m_Comments;
}

void BTReleaseCommentListInfo::setComments(const std::vector<std::shared_ptr<BTCommentInfo>>& value)
{
    m_Comments = value;
    m_CommentsIsSet = true;
}

bool BTReleaseCommentListInfo::commentsIsSet() const
{
    return m_CommentsIsSet;
}

void BTReleaseCommentListInfo::unsetComments()
{
    m_CommentsIsSet = false;
}
utility::string_t BTReleaseCommentListInfo::getRpId() const
{
    return m_RpId;
}

void BTReleaseCommentListInfo::setRpId(const utility::string_t& value)
{
    m_RpId = value;
    m_RpIdIsSet = true;
}

bool BTReleaseCommentListInfo::rpIdIsSet() const
{
    return m_RpIdIsSet;
}

void BTReleaseCommentListInfo::unsetRpId()
{
    m_RpIdIsSet = false;
}
utility::string_t BTReleaseCommentListInfo::getRpName() const
{
    return m_RpName;
}

void BTReleaseCommentListInfo::setRpName(const utility::string_t& value)
{
    m_RpName = value;
    m_RpNameIsSet = true;
}

bool BTReleaseCommentListInfo::rpNameIsSet() const
{
    return m_RpNameIsSet;
}

void BTReleaseCommentListInfo::unsetRpName()
{
    m_RpNameIsSet = false;
}
}
}
}
}


