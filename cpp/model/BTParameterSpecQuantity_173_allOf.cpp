/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecQuantity_173_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecQuantity_173_allOf::BTParameterSpecQuantity_173_allOf()
{
    m_QuantityType = utility::conversions::to_string_t("");
    m_QuantityTypeIsSet = false;
    m_RangesIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTParameterSpecQuantity_173_allOf::~BTParameterSpecQuantity_173_allOf()
{
}

void BTParameterSpecQuantity_173_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecQuantity_173_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_QuantityTypeIsSet)
    {
        val[utility::conversions::to_string_t("quantityType")] = ModelBase::toJson(m_QuantityType);
    }
    if(m_RangesIsSet)
    {
        val[utility::conversions::to_string_t("ranges")] = ModelBase::toJson(m_Ranges);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTParameterSpecQuantity_173_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("quantityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quantityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_quantityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_quantityType);
            setQuantityType(refVal_quantityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ranges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ranges"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTQuantityRange_181>> refVal_ranges;
            ok &= ModelBase::fromJson(fieldValue, refVal_ranges);
            setRanges(refVal_ranges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTParameterSpecQuantity_173_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_QuantityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantityType"), m_QuantityType));
    }
    if(m_RangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ranges"), m_Ranges));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTParameterSpecQuantity_173_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("quantityType")))
    {
        utility::string_t refVal_quantityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantityType")), refVal_quantityType );
        setQuantityType(refVal_quantityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ranges")))
    {
        std::vector<std::shared_ptr<BTQuantityRange_181>> refVal_ranges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ranges")), refVal_ranges );
        setRanges(refVal_ranges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTParameterSpecQuantity_173_allOf::getQuantityType() const
{
    return m_QuantityType;
}

void BTParameterSpecQuantity_173_allOf::setQuantityType(const utility::string_t& value)
{
    m_QuantityType = value;
    m_QuantityTypeIsSet = true;
}

bool BTParameterSpecQuantity_173_allOf::quantityTypeIsSet() const
{
    return m_QuantityTypeIsSet;
}

void BTParameterSpecQuantity_173_allOf::unsetQuantityType()
{
    m_QuantityTypeIsSet = false;
}
std::vector<std::shared_ptr<BTQuantityRange_181>>& BTParameterSpecQuantity_173_allOf::getRanges()
{
    return m_Ranges;
}

void BTParameterSpecQuantity_173_allOf::setRanges(const std::vector<std::shared_ptr<BTQuantityRange_181>>& value)
{
    m_Ranges = value;
    m_RangesIsSet = true;
}

bool BTParameterSpecQuantity_173_allOf::rangesIsSet() const
{
    return m_RangesIsSet;
}

void BTParameterSpecQuantity_173_allOf::unsetRanges()
{
    m_RangesIsSet = false;
}
utility::string_t BTParameterSpecQuantity_173_allOf::getBtType() const
{
    return m_BtType;
}

void BTParameterSpecQuantity_173_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpecQuantity_173_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpecQuantity_173_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


