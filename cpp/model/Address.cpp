/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Address.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Address::Address()
{
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Line1 = utility::conversions::to_string_t("");
    m_Line1IsSet = false;
    m_Line2 = utility::conversions::to_string_t("");
    m_Line2IsSet = false;
    m_PostalCode = utility::conversions::to_string_t("");
    m_PostalCodeIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
}

Address::~Address()
{
}

void Address::validate()
{
    // TODO: implement validation
}

web::json::value Address::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_Line1IsSet)
    {
        val[utility::conversions::to_string_t("line1")] = ModelBase::toJson(m_Line1);
    }
    if(m_Line2IsSet)
    {
        val[utility::conversions::to_string_t("line2")] = ModelBase::toJson(m_Line2);
    }
    if(m_PostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("postalCode")] = ModelBase::toJson(m_PostalCode);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }

    return val;
}

bool Address::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city;
            ok &= ModelBase::fromJson(fieldValue, refVal_city);
            setCity(refVal_city);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("line1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("line1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_line1;
            ok &= ModelBase::fromJson(fieldValue, refVal_line1);
            setLine1(refVal_line1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("line2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("line2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_line2;
            ok &= ModelBase::fromJson(fieldValue, refVal_line2);
            setLine2(refVal_line2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postalCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("postalCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_postalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_postalCode);
            setPostalCode(refVal_postalCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    return ok;
}

void Address::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    }
    if(m_Line1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line1"), m_Line1));
    }
    if(m_Line2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line2"), m_Line2));
    }
    if(m_PostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postalCode"), m_PostalCode));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
}

bool Address::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        utility::string_t refVal_city;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("city")), refVal_city );
        setCity(refVal_city);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("country")), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("line1")))
    {
        utility::string_t refVal_line1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("line1")), refVal_line1 );
        setLine1(refVal_line1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("line2")))
    {
        utility::string_t refVal_line2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("line2")), refVal_line2 );
        setLine2(refVal_line2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postalCode")))
    {
        utility::string_t refVal_postalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("postalCode")), refVal_postalCode );
        setPostalCode(refVal_postalCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        utility::string_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    return ok;
}

utility::string_t Address::getCity() const
{
    return m_City;
}

void Address::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool Address::cityIsSet() const
{
    return m_CityIsSet;
}

void Address::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t Address::getCountry() const
{
    return m_Country;
}

void Address::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool Address::countryIsSet() const
{
    return m_CountryIsSet;
}

void Address::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t Address::getLine1() const
{
    return m_Line1;
}

void Address::setLine1(const utility::string_t& value)
{
    m_Line1 = value;
    m_Line1IsSet = true;
}

bool Address::line1IsSet() const
{
    return m_Line1IsSet;
}

void Address::unsetLine1()
{
    m_Line1IsSet = false;
}
utility::string_t Address::getLine2() const
{
    return m_Line2;
}

void Address::setLine2(const utility::string_t& value)
{
    m_Line2 = value;
    m_Line2IsSet = true;
}

bool Address::line2IsSet() const
{
    return m_Line2IsSet;
}

void Address::unsetLine2()
{
    m_Line2IsSet = false;
}
utility::string_t Address::getPostalCode() const
{
    return m_PostalCode;
}

void Address::setPostalCode(const utility::string_t& value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}

bool Address::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}

void Address::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}
utility::string_t Address::getState() const
{
    return m_State;
}

void Address::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Address::stateIsSet() const
{
    return m_StateIsSet;
}

void Address::unsetState()
{
    m_StateIsSet = false;
}
}
}
}
}


