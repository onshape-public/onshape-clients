/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportTessellatedFacesResponse_898.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportTessellatedFacesResponse_898::BTExportTessellatedFacesResponse_898()
{
    m_BodiesIsSet = false;
    m_ErrorEnum = utility::conversions::to_string_t("");
    m_ErrorEnumIsSet = false;
    m_FacetPointsIsSet = false;
}

BTExportTessellatedFacesResponse_898::~BTExportTessellatedFacesResponse_898()
{
}

void BTExportTessellatedFacesResponse_898::validate()
{
    // TODO: implement validation
}

web::json::value BTExportTessellatedFacesResponse_898::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodiesIsSet)
    {
        val[utility::conversions::to_string_t("bodies")] = ModelBase::toJson(m_Bodies);
    }
    if(m_ErrorEnumIsSet)
    {
        val[utility::conversions::to_string_t("errorEnum")] = ModelBase::toJson(m_ErrorEnum);
    }
    if(m_FacetPointsIsSet)
    {
        val[utility::conversions::to_string_t("facetPoints")] = ModelBase::toJson(m_FacetPoints);
    }

    return val;
}

bool BTExportTessellatedFacesResponse_898::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bodies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodies"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportTessellatedBody_3398>> refVal_bodies;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodies);
            setBodies(refVal_bodies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorEnum")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorEnum"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorEnum;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorEnum);
            setErrorEnum(refVal_errorEnum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("facetPoints")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("facetPoints"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTVector3d_389>> refVal_facetPoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_facetPoints);
            setFacetPoints(refVal_facetPoints);
        }
    }
    return ok;
}

void BTExportTessellatedFacesResponse_898::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BodiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodies"), m_Bodies));
    }
    if(m_ErrorEnumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorEnum"), m_ErrorEnum));
    }
    if(m_FacetPointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("facetPoints"), m_FacetPoints));
    }
}

bool BTExportTessellatedFacesResponse_898::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bodies")))
    {
        std::vector<std::shared_ptr<BTExportTessellatedBody_3398>> refVal_bodies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodies")), refVal_bodies );
        setBodies(refVal_bodies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorEnum")))
    {
        utility::string_t refVal_errorEnum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorEnum")), refVal_errorEnum );
        setErrorEnum(refVal_errorEnum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("facetPoints")))
    {
        std::vector<std::shared_ptr<BTVector3d_389>> refVal_facetPoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("facetPoints")), refVal_facetPoints );
        setFacetPoints(refVal_facetPoints);
    }
    return ok;
}

std::vector<std::shared_ptr<BTExportTessellatedBody_3398>>& BTExportTessellatedFacesResponse_898::getBodies()
{
    return m_Bodies;
}

void BTExportTessellatedFacesResponse_898::setBodies(const std::vector<std::shared_ptr<BTExportTessellatedBody_3398>>& value)
{
    m_Bodies = value;
    m_BodiesIsSet = true;
}

bool BTExportTessellatedFacesResponse_898::bodiesIsSet() const
{
    return m_BodiesIsSet;
}

void BTExportTessellatedFacesResponse_898::unsetBodies()
{
    m_BodiesIsSet = false;
}
utility::string_t BTExportTessellatedFacesResponse_898::getErrorEnum() const
{
    return m_ErrorEnum;
}

void BTExportTessellatedFacesResponse_898::setErrorEnum(const utility::string_t& value)
{
    m_ErrorEnum = value;
    m_ErrorEnumIsSet = true;
}

bool BTExportTessellatedFacesResponse_898::errorEnumIsSet() const
{
    return m_ErrorEnumIsSet;
}

void BTExportTessellatedFacesResponse_898::unsetErrorEnum()
{
    m_ErrorEnumIsSet = false;
}
std::vector<std::shared_ptr<BTVector3d_389>>& BTExportTessellatedFacesResponse_898::getFacetPoints()
{
    return m_FacetPoints;
}

void BTExportTessellatedFacesResponse_898::setFacetPoints(const std::vector<std::shared_ptr<BTVector3d_389>>& value)
{
    m_FacetPoints = value;
    m_FacetPointsIsSet = true;
}

bool BTExportTessellatedFacesResponse_898::facetPointsIsSet() const
{
    return m_FacetPointsIsSet;
}

void BTExportTessellatedFacesResponse_898::unsetFacetPoints()
{
    m_FacetPointsIsSet = false;
}
}
}
}
}


