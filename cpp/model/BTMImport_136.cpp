/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMImport_136.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMImport_136::BTMImport_136()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ElementImport = false;
    m_ElementImportIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_ImportedExternalDocumentId = utility::conversions::to_string_t("");
    m_ImportedExternalDocumentIdIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_Path = utility::conversions::to_string_t("");
    m_PathIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
}

BTMImport_136::~BTMImport_136()
{
}

void BTMImport_136::validate()
{
    // TODO: implement validation
}

web::json::value BTMImport_136::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ElementImportIsSet)
    {
        val[utility::conversions::to_string_t("elementImport")] = ModelBase::toJson(m_ElementImport);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_ImportedExternalDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("importedExternalDocumentId")] = ModelBase::toJson(m_ImportedExternalDocumentId);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }

    return val;
}

bool BTMImport_136::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementImport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementImport"));
        if(!fieldValue.is_null())
        {
            bool refVal_elementImport;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementImport);
            setElementImport(refVal_elementImport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importedExternalDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importedExternalDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importedExternalDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_importedExternalDocumentId);
            setImportedExternalDocumentId(refVal_importedExternalDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("path"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_path;
            ok &= ModelBase::fromJson(fieldValue, refVal_path);
            setPath(refVal_path);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    return ok;
}

void BTMImport_136::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ElementImportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementImport"), m_ElementImport));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_ImportedExternalDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importedExternalDocumentId"), m_ImportedExternalDocumentId));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
}

bool BTMImport_136::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementImport")))
    {
        bool refVal_elementImport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementImport")), refVal_elementImport );
        setElementImport(refVal_elementImport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importedExternalDocumentId")))
    {
        utility::string_t refVal_importedExternalDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importedExternalDocumentId")), refVal_importedExternalDocumentId );
        setImportedExternalDocumentId(refVal_importedExternalDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        utility::string_t refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    return ok;
}

utility::string_t BTMImport_136::getBtType() const
{
    return m_BtType;
}

void BTMImport_136::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMImport_136::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMImport_136::unsetBtType()
{
    m_BtTypeIsSet = false;
}
bool BTMImport_136::isElementImport() const
{
    return m_ElementImport;
}

void BTMImport_136::setElementImport(bool value)
{
    m_ElementImport = value;
    m_ElementImportIsSet = true;
}

bool BTMImport_136::elementImportIsSet() const
{
    return m_ElementImportIsSet;
}

void BTMImport_136::unsetElementImport()
{
    m_ElementImportIsSet = false;
}
utility::string_t BTMImport_136::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMImport_136::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMImport_136::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMImport_136::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMImport_136::getImportedExternalDocumentId() const
{
    return m_ImportedExternalDocumentId;
}

void BTMImport_136::setImportedExternalDocumentId(const utility::string_t& value)
{
    m_ImportedExternalDocumentId = value;
    m_ImportedExternalDocumentIdIsSet = true;
}

bool BTMImport_136::importedExternalDocumentIdIsSet() const
{
    return m_ImportedExternalDocumentIdIsSet;
}

void BTMImport_136::unsetImportedExternalDocumentId()
{
    m_ImportedExternalDocumentIdIsSet = false;
}
utility::string_t BTMImport_136::getRNamespace() const
{
    return m_r_namespace;
}

void BTMImport_136::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMImport_136::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMImport_136::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTMImport_136::getNodeId() const
{
    return m_NodeId;
}

void BTMImport_136::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMImport_136::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMImport_136::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTMImport_136::getPath() const
{
    return m_Path;
}

void BTMImport_136::setPath(const utility::string_t& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool BTMImport_136::pathIsSet() const
{
    return m_PathIsSet;
}

void BTMImport_136::unsetPath()
{
    m_PathIsSet = false;
}
utility::string_t BTMImport_136::getVersion() const
{
    return m_Version;
}

void BTMImport_136::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTMImport_136::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTMImport_136::unsetVersion()
{
    m_VersionIsSet = false;
}
}
}
}
}


