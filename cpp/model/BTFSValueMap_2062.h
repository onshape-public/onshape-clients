/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTFSValueMap_2062.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTFSValueMap_2062_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTFSValueMap_2062_H_


#include "../ModelBase.h"

#include "BTFSValueMapEntry_2077.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <map>
#include <vector>
#include "BTFSValue_1888.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTFSValueMap_2062
    : public ModelBase
{
public:
    BTFSValueMap_2062();
    virtual ~BTFSValueMap_2062();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTFSValueMap_2062 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfigurationValueString() const;
    bool configurationValueStringIsSet() const;
    void unsetConfigurationValueString();

    void setConfigurationValueString(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& getFsvaluesKeyedByStrings();
    bool fsvaluesKeyedByStringsIsSet() const;
    void unsetFsvaluesKeyedByStrings();

    void setFsvaluesKeyedByStrings(const std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandardTypeName() const;
    bool standardTypeNameIsSet() const;
    void unsetStandardTypeName();

    void setStandardTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTypeTag() const;
    bool typeTagIsSet() const;
    void unsetTypeTag();

    void setTypeTag(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTFSValueMapEntry_2077>>& getValue();
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const std::vector<std::shared_ptr<BTFSValueMapEntry_2077>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Object>>& getValueObject();
    bool valueObjectIsSet() const;
    void unsetValueObject();

    void setValueObject(const std::map<utility::string_t, std::shared_ptr<Object>>& value);


protected:
    utility::string_t m_ConfigurationValueString;
    bool m_ConfigurationValueStringIsSet;
    std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> m_FsvaluesKeyedByStrings;
    bool m_FsvaluesKeyedByStringsIsSet;
    utility::string_t m_StandardTypeName;
    bool m_StandardTypeNameIsSet;
    utility::string_t m_TypeTag;
    bool m_TypeTagIsSet;
    std::vector<std::shared_ptr<BTFSValueMapEntry_2077>> m_Value;
    bool m_ValueIsSet;
    std::map<utility::string_t, std::shared_ptr<Object>> m_ValueObject;
    bool m_ValueObjectIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTFSValueMap_2062_H_ */
