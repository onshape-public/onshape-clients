/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPStatementLoopFor3_278.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopFor3_278_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopFor3_278_H_


#include "BTPExpression_9.h"
#include "BTPStatementLoop_277.h"
#include <cpprest/details/basic_types.h>
#include "BTPSpace_10.h"
#include "BTPStatementLoopFor3_278_allOf.h"
#include "BTPAnnotation_231.h"
#include "BTPStatement_269.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPStatementLoopFor3_278
    : public BTPStatementLoop_277
{
public:
    BTPStatementLoopFor3_278();
    virtual ~BTPStatementLoopFor3_278();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPStatementLoopFor3_278 members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPExpression_9> getCondition() const;
    bool conditionIsSet() const;
    void unsetCondition();

    void setCondition(const std::shared_ptr<BTPExpression_9>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPStatement_269> getInitialization() const;
    bool initializationIsSet() const;
    void unsetInitialization();

    void setInitialization(const std::shared_ptr<BTPStatement_269>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterInitialization() const;
    bool spaceAfterInitializationIsSet() const;
    void unsetSpaceAfterInitialization();

    void setSpaceAfterInitialization(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeCondition() const;
    bool spaceBeforeConditionIsSet() const;
    void unsetSpaceBeforeCondition();

    void setSpaceBeforeCondition(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeIncrement() const;
    bool spaceBeforeIncrementIsSet() const;
    void unsetSpaceBeforeIncrement();

    void setSpaceBeforeIncrement(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPStatement_269> getIncrement() const;
    bool incrementIsSet() const;
    void unsetIncrement();

    void setIncrement(const std::shared_ptr<BTPStatement_269>& value);


protected:
    std::shared_ptr<BTPExpression_9> m_Condition;
    bool m_ConditionIsSet;
    std::shared_ptr<BTPStatement_269> m_Initialization;
    bool m_InitializationIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterInitialization;
    bool m_SpaceAfterInitializationIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeCondition;
    bool m_SpaceBeforeConditionIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeIncrement;
    bool m_SpaceBeforeIncrementIsSet;
    std::shared_ptr<BTPStatement_269> m_Increment;
    bool m_IncrementIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPStatementLoopFor3_278_H_ */
