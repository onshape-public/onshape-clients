/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementParams::BTAppElementParams()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_FormatId = utility::conversions::to_string_t("");
    m_FormatIdIsSet = false;
    m_LocationIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_SubelementsIsSet = false;
}

BTAppElementParams::~BTAppElementParams()
{
}

void BTAppElementParams::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_FormatIdIsSet)
    {
        val[utility::conversions::to_string_t("formatId")] = ModelBase::toJson(m_FormatId);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_SubelementsIsSet)
    {
        val[utility::conversions::to_string_t("subelements")] = ModelBase::toJson(m_Subelements);
    }

    return val;
}

bool BTAppElementParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("formatId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("formatId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_formatId;
            ok &= ModelBase::fromJson(fieldValue, refVal_formatId);
            setFormatId(refVal_formatId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("location"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTElementLocationParams> refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subelements")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subelements"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAppElementChangeParams>> refVal_subelements;
            ok &= ModelBase::fromJson(fieldValue, refVal_subelements);
            setSubelements(refVal_subelements);
        }
    }
    return ok;
}

void BTAppElementParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_FormatIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("formatId"), m_FormatId));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_SubelementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subelements"), m_Subelements));
    }
}

bool BTAppElementParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("formatId")))
    {
        utility::string_t refVal_formatId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("formatId")), refVal_formatId );
        setFormatId(refVal_formatId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        std::shared_ptr<BTElementLocationParams> refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("location")), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subelements")))
    {
        std::vector<std::shared_ptr<BTAppElementChangeParams>> refVal_subelements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subelements")), refVal_subelements );
        setSubelements(refVal_subelements);
    }
    return ok;
}

utility::string_t BTAppElementParams::getDescription() const
{
    return m_Description;
}

void BTAppElementParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTAppElementParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTAppElementParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTAppElementParams::getFormatId() const
{
    return m_FormatId;
}

void BTAppElementParams::setFormatId(const utility::string_t& value)
{
    m_FormatId = value;
    m_FormatIdIsSet = true;
}

bool BTAppElementParams::formatIdIsSet() const
{
    return m_FormatIdIsSet;
}

void BTAppElementParams::unsetFormatId()
{
    m_FormatIdIsSet = false;
}
std::shared_ptr<BTElementLocationParams> BTAppElementParams::getLocation() const
{
    return m_Location;
}

void BTAppElementParams::setLocation(const std::shared_ptr<BTElementLocationParams>& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool BTAppElementParams::locationIsSet() const
{
    return m_LocationIsSet;
}

void BTAppElementParams::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t BTAppElementParams::getName() const
{
    return m_Name;
}

void BTAppElementParams::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTAppElementParams::nameIsSet() const
{
    return m_NameIsSet;
}

void BTAppElementParams::unsetName()
{
    m_NameIsSet = false;
}
std::vector<std::shared_ptr<BTAppElementChangeParams>>& BTAppElementParams::getSubelements()
{
    return m_Subelements;
}

void BTAppElementParams::setSubelements(const std::vector<std::shared_ptr<BTAppElementChangeParams>>& value)
{
    m_Subelements = value;
    m_SubelementsIsSet = true;
}

bool BTAppElementParams::subelementsIsSet() const
{
    return m_SubelementsIsSet;
}

void BTAppElementParams::unsetSubelements()
{
    m_SubelementsIsSet = false;
}
}
}
}
}


