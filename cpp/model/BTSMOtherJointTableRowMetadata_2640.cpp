/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTSMOtherJointTableRowMetadata_2640.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTSMOtherJointTableRowMetadata_2640::BTSMOtherJointTableRowMetadata_2640()
{
}

BTSMOtherJointTableRowMetadata_2640::~BTSMOtherJointTableRowMetadata_2640()
{
}

void BTSMOtherJointTableRowMetadata_2640::validate()
{
    // TODO: implement validation
}

web::json::value BTSMOtherJointTableRowMetadata_2640::toJson() const
{
    web::json::value val = this->BTBaseSMJointTableRowMetadata_2232::toJson();
    

    return val;
}

bool BTSMOtherJointTableRowMetadata_2640::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTBaseSMJointTableRowMetadata_2232::fromJson(val);
    
    return ok;
}

void BTSMOtherJointTableRowMetadata_2640::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_CrossHighlightDataIfAnyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossHighlightDataIfAny"), m_CrossHighlightDataIfAny));
    }
    if(m_CrossHighlightDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossHighlightData"), m_CrossHighlightData));
    }
}

bool BTSMOtherJointTableRowMetadata_2640::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossHighlightDataIfAny")))
    {
        std::shared_ptr<BTTableCrossHighlightData_1753> refVal_crossHighlightDataIfAny;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossHighlightDataIfAny")), refVal_crossHighlightDataIfAny );
        setCrossHighlightDataIfAny(refVal_crossHighlightDataIfAny);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossHighlightData")))
    {
        std::shared_ptr<BTTableCrossHighlightData_1753> refVal_crossHighlightData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossHighlightData")), refVal_crossHighlightData );
        setCrossHighlightData(refVal_crossHighlightData);
    }
    return ok;
}

}
}
}
}


