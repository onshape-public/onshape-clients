/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentSearchParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentSearchParams::BTDocumentSearchParams()
{
    m_DocumentFilter = 0;
    m_DocumentFilterIsSet = false;
    m_FoundIn = utility::conversions::to_string_t("");
    m_FoundInIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_Offset = 0;
    m_OffsetIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_RawQuery = utility::conversions::to_string_t("");
    m_RawQueryIsSet = false;
    m_SortColumn = utility::conversions::to_string_t("");
    m_SortColumnIsSet = false;
    m_SortOrder = utility::conversions::to_string_t("");
    m_SortOrderIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_When = utility::conversions::to_string_t("");
    m_WhenIsSet = false;
}

BTDocumentSearchParams::~BTDocumentSearchParams()
{
}

void BTDocumentSearchParams::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentSearchParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentFilterIsSet)
    {
        val[utility::conversions::to_string_t("documentFilter")] = ModelBase::toJson(m_DocumentFilter);
    }
    if(m_FoundInIsSet)
    {
        val[utility::conversions::to_string_t("foundIn")] = ModelBase::toJson(m_FoundIn);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t("limit")] = ModelBase::toJson(m_Limit);
    }
    if(m_OffsetIsSet)
    {
        val[utility::conversions::to_string_t("offset")] = ModelBase::toJson(m_Offset);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_RawQueryIsSet)
    {
        val[utility::conversions::to_string_t("rawQuery")] = ModelBase::toJson(m_RawQuery);
    }
    if(m_SortColumnIsSet)
    {
        val[utility::conversions::to_string_t("sortColumn")] = ModelBase::toJson(m_SortColumn);
    }
    if(m_SortOrderIsSet)
    {
        val[utility::conversions::to_string_t("sortOrder")] = ModelBase::toJson(m_SortOrder);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_WhenIsSet)
    {
        val[utility::conversions::to_string_t("when")] = ModelBase::toJson(m_When);
    }

    return val;
}

bool BTDocumentSearchParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentFilter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentFilter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_documentFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentFilter);
            setDocumentFilter(refVal_documentFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foundIn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foundIn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_foundIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_foundIn);
            setFoundIn(refVal_foundIn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("limit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("limit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_limit;
            ok &= ModelBase::fromJson(fieldValue, refVal_limit);
            setLimit(refVal_limit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offset"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_offset;
            ok &= ModelBase::fromJson(fieldValue, refVal_offset);
            setOffset(refVal_offset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rawQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rawQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rawQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_rawQuery);
            setRawQuery(refVal_rawQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sortColumn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sortColumn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sortColumn;
            ok &= ModelBase::fromJson(fieldValue, refVal_sortColumn);
            setSortColumn(refVal_sortColumn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sortOrder")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sortOrder"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sortOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_sortOrder);
            setSortOrder(refVal_sortOrder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("when")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("when"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_when;
            ok &= ModelBase::fromJson(fieldValue, refVal_when);
            setWhen(refVal_when);
        }
    }
    return ok;
}

void BTDocumentSearchParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentFilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentFilter"), m_DocumentFilter));
    }
    if(m_FoundInIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foundIn"), m_FoundIn));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("limit"), m_Limit));
    }
    if(m_OffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offset"), m_Offset));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_RawQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawQuery"), m_RawQuery));
    }
    if(m_SortColumnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sortColumn"), m_SortColumn));
    }
    if(m_SortOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sortOrder"), m_SortOrder));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_WhenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("when"), m_When));
    }
}

bool BTDocumentSearchParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentFilter")))
    {
        int32_t refVal_documentFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentFilter")), refVal_documentFilter );
        setDocumentFilter(refVal_documentFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foundIn")))
    {
        utility::string_t refVal_foundIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foundIn")), refVal_foundIn );
        setFoundIn(refVal_foundIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("limit")))
    {
        int32_t refVal_limit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("limit")), refVal_limit );
        setLimit(refVal_limit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offset")))
    {
        int32_t refVal_offset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offset")), refVal_offset );
        setOffset(refVal_offset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rawQuery")))
    {
        utility::string_t refVal_rawQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawQuery")), refVal_rawQuery );
        setRawQuery(refVal_rawQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sortColumn")))
    {
        utility::string_t refVal_sortColumn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sortColumn")), refVal_sortColumn );
        setSortColumn(refVal_sortColumn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sortOrder")))
    {
        utility::string_t refVal_sortOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sortOrder")), refVal_sortOrder );
        setSortOrder(refVal_sortOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("when")))
    {
        utility::string_t refVal_when;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("when")), refVal_when );
        setWhen(refVal_when);
    }
    return ok;
}

int32_t BTDocumentSearchParams::getDocumentFilter() const
{
    return m_DocumentFilter;
}

void BTDocumentSearchParams::setDocumentFilter(int32_t value)
{
    m_DocumentFilter = value;
    m_DocumentFilterIsSet = true;
}

bool BTDocumentSearchParams::documentFilterIsSet() const
{
    return m_DocumentFilterIsSet;
}

void BTDocumentSearchParams::unsetDocumentFilter()
{
    m_DocumentFilterIsSet = false;
}
utility::string_t BTDocumentSearchParams::getFoundIn() const
{
    return m_FoundIn;
}

void BTDocumentSearchParams::setFoundIn(const utility::string_t& value)
{
    m_FoundIn = value;
    m_FoundInIsSet = true;
}

bool BTDocumentSearchParams::foundInIsSet() const
{
    return m_FoundInIsSet;
}

void BTDocumentSearchParams::unsetFoundIn()
{
    m_FoundInIsSet = false;
}
int32_t BTDocumentSearchParams::getLimit() const
{
    return m_Limit;
}

void BTDocumentSearchParams::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool BTDocumentSearchParams::limitIsSet() const
{
    return m_LimitIsSet;
}

void BTDocumentSearchParams::unsetLimit()
{
    m_LimitIsSet = false;
}
int32_t BTDocumentSearchParams::getOffset() const
{
    return m_Offset;
}

void BTDocumentSearchParams::setOffset(int32_t value)
{
    m_Offset = value;
    m_OffsetIsSet = true;
}

bool BTDocumentSearchParams::offsetIsSet() const
{
    return m_OffsetIsSet;
}

void BTDocumentSearchParams::unsetOffset()
{
    m_OffsetIsSet = false;
}
utility::string_t BTDocumentSearchParams::getOwnerId() const
{
    return m_OwnerId;
}

void BTDocumentSearchParams::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTDocumentSearchParams::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTDocumentSearchParams::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
utility::string_t BTDocumentSearchParams::getParentId() const
{
    return m_ParentId;
}

void BTDocumentSearchParams::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTDocumentSearchParams::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTDocumentSearchParams::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTDocumentSearchParams::getRawQuery() const
{
    return m_RawQuery;
}

void BTDocumentSearchParams::setRawQuery(const utility::string_t& value)
{
    m_RawQuery = value;
    m_RawQueryIsSet = true;
}

bool BTDocumentSearchParams::rawQueryIsSet() const
{
    return m_RawQueryIsSet;
}

void BTDocumentSearchParams::unsetRawQuery()
{
    m_RawQueryIsSet = false;
}
utility::string_t BTDocumentSearchParams::getSortColumn() const
{
    return m_SortColumn;
}

void BTDocumentSearchParams::setSortColumn(const utility::string_t& value)
{
    m_SortColumn = value;
    m_SortColumnIsSet = true;
}

bool BTDocumentSearchParams::sortColumnIsSet() const
{
    return m_SortColumnIsSet;
}

void BTDocumentSearchParams::unsetSortColumn()
{
    m_SortColumnIsSet = false;
}
utility::string_t BTDocumentSearchParams::getSortOrder() const
{
    return m_SortOrder;
}

void BTDocumentSearchParams::setSortOrder(const utility::string_t& value)
{
    m_SortOrder = value;
    m_SortOrderIsSet = true;
}

bool BTDocumentSearchParams::sortOrderIsSet() const
{
    return m_SortOrderIsSet;
}

void BTDocumentSearchParams::unsetSortOrder()
{
    m_SortOrderIsSet = false;
}
utility::string_t BTDocumentSearchParams::getType() const
{
    return m_Type;
}

void BTDocumentSearchParams::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTDocumentSearchParams::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTDocumentSearchParams::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BTDocumentSearchParams::getWhen() const
{
    return m_When;
}

void BTDocumentSearchParams::setWhen(const utility::string_t& value)
{
    m_When = value;
    m_WhenIsSet = true;
}

bool BTDocumentSearchParams::whenIsSet() const
{
    return m_WhenIsSet;
}

void BTDocumentSearchParams::unsetWhen()
{
    m_WhenIsSet = false;
}
}
}
}
}


