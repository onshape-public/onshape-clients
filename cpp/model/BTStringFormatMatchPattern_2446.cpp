/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTStringFormatMatchPattern_2446.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTStringFormatMatchPattern_2446::BTStringFormatMatchPattern_2446()
{
    m_RegExpToMatch = utility::conversions::to_string_t("");
    m_RegExpToMatchIsSet = false;
}

BTStringFormatMatchPattern_2446::~BTStringFormatMatchPattern_2446()
{
}

void BTStringFormatMatchPattern_2446::validate()
{
    // TODO: implement validation
}

web::json::value BTStringFormatMatchPattern_2446::toJson() const
{
    web::json::value val = this->BTStringFormatCondition_683::toJson();
    
    if(m_RegExpToMatchIsSet)
    {
        val[utility::conversions::to_string_t("regExpToMatch")] = ModelBase::toJson(m_RegExpToMatch);
    }

    return val;
}

bool BTStringFormatMatchPattern_2446::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTStringFormatCondition_683::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("regExpToMatch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("regExpToMatch"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_regExpToMatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_regExpToMatch);
            setRegExpToMatch(refVal_regExpToMatch);
        }
    }
    return ok;
}

void BTStringFormatMatchPattern_2446::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_ShouldResetValueWhenConfirmedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shouldResetValueWhenConfirmed"), m_ShouldResetValueWhenConfirmed));
    }
    if(m_RegExpToMatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("regExpToMatch"), m_RegExpToMatch));
    }
}

bool BTStringFormatMatchPattern_2446::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")))
    {
        bool refVal_shouldResetValueWhenConfirmed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")), refVal_shouldResetValueWhenConfirmed );
        setShouldResetValueWhenConfirmed(refVal_shouldResetValueWhenConfirmed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("regExpToMatch")))
    {
        utility::string_t refVal_regExpToMatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("regExpToMatch")), refVal_regExpToMatch );
        setRegExpToMatch(refVal_regExpToMatch);
    }
    return ok;
}

utility::string_t BTStringFormatMatchPattern_2446::getRegExpToMatch() const
{
    return m_RegExpToMatch;
}

void BTStringFormatMatchPattern_2446::setRegExpToMatch(const utility::string_t& value)
{
    m_RegExpToMatch = value;
    m_RegExpToMatchIsSet = true;
}

bool BTStringFormatMatchPattern_2446::regExpToMatchIsSet() const
{
    return m_RegExpToMatchIsSet;
}

void BTStringFormatMatchPattern_2446::unsetRegExpToMatch()
{
    m_RegExpToMatchIsSet = false;
}
}
}
}
}


