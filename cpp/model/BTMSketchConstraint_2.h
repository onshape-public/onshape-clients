/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMSketchConstraint_2.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchConstraint_2_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchConstraint_2_H_


#include "../ModelBase.h"

#include "BTMParameter_1.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMSketchConstraint_2
    : public ModelBase
{
public:
    BTMSketchConstraint_2();
    virtual ~BTMSketchConstraint_2();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMSketchConstraint_2 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConstraintType() const;
    bool constraintTypeIsSet() const;
    void unsetConstraintType();

    void setConstraintType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDrivenDimension() const;
    bool drivenDimensionIsSet() const;
    void unsetDrivenDimension();

    void setDrivenDimension(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityId() const;
    bool entityIdIsSet() const;
    void unsetEntityId();

    void setEntityId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityIdAndReplaceInDependentFields() const;
    bool entityIdAndReplaceInDependentFieldsIsSet() const;
    void unsetEntityIdAndReplaceInDependentFields();

    void setEntityIdAndReplaceInDependentFields(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasOffsetData1() const;
    bool hasOffsetData1IsSet() const;
    void unsetHasOffsetData1();

    void setHasOffsetData1(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasOffsetData2() const;
    bool hasOffsetData2IsSet() const;
    void unsetHasOffsetData2();

    void setHasOffsetData2(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasPierceParameter() const;
    bool hasPierceParameterIsSet() const;
    void unsetHasPierceParameter();

    void setHasPierceParameter(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getHelpParameters();
    bool helpParametersIsSet() const;
    void unsetHelpParameters();

    void setHelpParameters(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportMicroversion() const;
    bool importMicroversionIsSet() const;
    void unsetImportMicroversion();

    void setImportMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getOffsetDistance1() const;
    bool offsetDistance1IsSet() const;
    void unsetOffsetDistance1();

    void setOffsetDistance1(double value);

    /// <summary>
    /// 
    /// </summary>
    double getOffsetDistance2() const;
    bool offsetDistance2IsSet() const;
    void unsetOffsetDistance2();

    void setOffsetDistance2(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isOffsetOrientation1() const;
    bool offsetOrientation1IsSet() const;
    void unsetOffsetOrientation1();

    void setOffsetOrientation1(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isOffsetOrientation2() const;
    bool offsetOrientation2IsSet() const;
    void unsetOffsetOrientation2();

    void setOffsetOrientation2(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMParameter_1>>& getParameters();
    bool parametersIsSet() const;
    void unsetParameters();

    void setParameters(const std::vector<std::shared_ptr<BTMParameter_1>>& value);

    /// <summary>
    /// 
    /// </summary>
    double getPierceParameter() const;
    bool pierceParameterIsSet() const;
    void unsetPierceParameter();

    void setPierceParameter(double value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    utility::string_t m_ConstraintType;
    bool m_ConstraintTypeIsSet;
    bool m_DrivenDimension;
    bool m_DrivenDimensionIsSet;
    utility::string_t m_EntityId;
    bool m_EntityIdIsSet;
    utility::string_t m_EntityIdAndReplaceInDependentFields;
    bool m_EntityIdAndReplaceInDependentFieldsIsSet;
    bool m_HasOffsetData1;
    bool m_HasOffsetData1IsSet;
    bool m_HasOffsetData2;
    bool m_HasOffsetData2IsSet;
    bool m_HasPierceParameter;
    bool m_HasPierceParameterIsSet;
    std::vector<double> m_HelpParameters;
    bool m_HelpParametersIsSet;
    utility::string_t m_ImportMicroversion;
    bool m_ImportMicroversionIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    double m_OffsetDistance1;
    bool m_OffsetDistance1IsSet;
    double m_OffsetDistance2;
    bool m_OffsetDistance2IsSet;
    bool m_OffsetOrientation1;
    bool m_OffsetOrientation1IsSet;
    bool m_OffsetOrientation2;
    bool m_OffsetOrientation2IsSet;
    std::vector<std::shared_ptr<BTMParameter_1>> m_Parameters;
    bool m_ParametersIsSet;
    double m_PierceParameter;
    bool m_PierceParameterIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMSketchConstraint_2_H_ */
