/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTElementLocationParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTElementLocationParams::BTElementLocationParams()
{
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_GroupId = utility::conversions::to_string_t("");
    m_GroupIdIsSet = false;
    m_Position = 0;
    m_PositionIsSet = false;
}

BTElementLocationParams::~BTElementLocationParams()
{
}

void BTElementLocationParams::validate()
{
    // TODO: implement validation
}

web::json::value BTElementLocationParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_GroupIdIsSet)
    {
        val[utility::conversions::to_string_t("groupId")] = ModelBase::toJson(m_GroupId);
    }
    if(m_PositionIsSet)
    {
        val[utility::conversions::to_string_t("position")] = ModelBase::toJson(m_Position);
    }

    return val;
}

bool BTElementLocationParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_groupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupId);
            setGroupId(refVal_groupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("position")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("position"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_position;
            ok &= ModelBase::fromJson(fieldValue, refVal_position);
            setPosition(refVal_position);
        }
    }
    return ok;
}

void BTElementLocationParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_GroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupId"), m_GroupId));
    }
    if(m_PositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("position"), m_Position));
    }
}

bool BTElementLocationParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupId")))
    {
        utility::string_t refVal_groupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupId")), refVal_groupId );
        setGroupId(refVal_groupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("position")))
    {
        int32_t refVal_position;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("position")), refVal_position );
        setPosition(refVal_position);
    }
    return ok;
}

utility::string_t BTElementLocationParams::getElementId() const
{
    return m_ElementId;
}

void BTElementLocationParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTElementLocationParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTElementLocationParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTElementLocationParams::getGroupId() const
{
    return m_GroupId;
}

void BTElementLocationParams::setGroupId(const utility::string_t& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}

bool BTElementLocationParams::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}

void BTElementLocationParams::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
int32_t BTElementLocationParams::getPosition() const
{
    return m_Position;
}

void BTElementLocationParams::setPosition(int32_t value)
{
    m_Position = value;
    m_PositionIsSet = true;
}

bool BTElementLocationParams::positionIsSet() const
{
    return m_PositionIsSet;
}

void BTElementLocationParams::unsetPosition()
{
    m_PositionIsSet = false;
}
}
}
}
}


