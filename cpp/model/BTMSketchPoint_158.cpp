/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchPoint_158.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchPoint_158::BTMSketchPoint_158()
{
    m_y = 0.0;
    m_yIsSet = false;
    m_x = 0.0;
    m_xIsSet = false;
    m_IsUserPoint = false;
    m_IsUserPointIsSet = false;
}

BTMSketchPoint_158::~BTMSketchPoint_158()
{
}

void BTMSketchPoint_158::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchPoint_158::toJson() const
{
    web::json::value val = this->BTMSketchGeomEntity_5::toJson();
    
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t("y")] = ModelBase::toJson(m_y);
    }
    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t("x")] = ModelBase::toJson(m_x);
    }
    if(m_IsUserPointIsSet)
    {
        val[utility::conversions::to_string_t("isUserPoint")] = ModelBase::toJson(m_IsUserPoint);
    }

    return val;
}

bool BTMSketchPoint_158::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMSketchGeomEntity_5::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("y")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("y"));
        if(!fieldValue.is_null())
        {
            double refVal_y;
            ok &= ModelBase::fromJson(fieldValue, refVal_y);
            setY(refVal_y);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("x")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("x"));
        if(!fieldValue.is_null())
        {
            double refVal_x;
            ok &= ModelBase::fromJson(fieldValue, refVal_x);
            setX(refVal_x);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isUserPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUserPoint"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUserPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUserPoint);
            setIsUserPoint(refVal_isUserPoint);
        }
    }
    return ok;
}

void BTMSketchPoint_158::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ControlBoxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("controlBoxIds"), m_ControlBoxIds));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"), m_EntityIdAndReplaceInDependentFields));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_IsConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConstruction"), m_IsConstruction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("y"), m_y));
    }
    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("x"), m_x));
    }
    if(m_IsUserPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUserPoint"), m_IsUserPoint));
    }
}

bool BTMSketchPoint_158::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("controlBoxIds")))
    {
        std::vector<utility::string_t> refVal_controlBoxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("controlBoxIds")), refVal_controlBoxIds );
        setControlBoxIds(refVal_controlBoxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityId")))
    {
        utility::string_t refVal_entityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId")), refVal_entityId );
        setEntityId(refVal_entityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        utility::string_t refVal_entityIdAndReplaceInDependentFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")), refVal_entityIdAndReplaceInDependentFields );
        setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConstruction")))
    {
        bool refVal_isConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConstruction")), refVal_isConstruction );
        setIsConstruction(refVal_isConstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("y")))
    {
        double refVal_y;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("y")), refVal_y );
        setY(refVal_y);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("x")))
    {
        double refVal_x;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("x")), refVal_x );
        setX(refVal_x);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUserPoint")))
    {
        bool refVal_isUserPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUserPoint")), refVal_isUserPoint );
        setIsUserPoint(refVal_isUserPoint);
    }
    return ok;
}

double BTMSketchPoint_158::getY() const
{
    return m_y;
}

void BTMSketchPoint_158::setY(double value)
{
    m_y = value;
    m_yIsSet = true;
}

bool BTMSketchPoint_158::YIsSet() const
{
    return m_yIsSet;
}

void BTMSketchPoint_158::unsety()
{
    m_yIsSet = false;
}
double BTMSketchPoint_158::getX() const
{
    return m_x;
}

void BTMSketchPoint_158::setX(double value)
{
    m_x = value;
    m_xIsSet = true;
}

bool BTMSketchPoint_158::XIsSet() const
{
    return m_xIsSet;
}

void BTMSketchPoint_158::unsetx()
{
    m_xIsSet = false;
}
bool BTMSketchPoint_158::isIsUserPoint() const
{
    return m_IsUserPoint;
}

void BTMSketchPoint_158::setIsUserPoint(bool value)
{
    m_IsUserPoint = value;
    m_IsUserPointIsSet = true;
}

bool BTMSketchPoint_158::isUserPointIsSet() const
{
    return m_IsUserPointIsSet;
}

void BTMSketchPoint_158::unsetIsUserPoint()
{
    m_IsUserPointIsSet = false;
}
}
}
}
}


