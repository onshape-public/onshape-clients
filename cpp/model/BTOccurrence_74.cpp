/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTOccurrence_74.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTOccurrence_74::BTOccurrence_74()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_FullPathAsString = utility::conversions::to_string_t("");
    m_FullPathAsStringIsSet = false;
    m_HeadInstanceId = utility::conversions::to_string_t("");
    m_HeadInstanceIdIsSet = false;
    m_OccurrenceWithoutHeadIsSet = false;
    m_OccurrenceWithoutTailIsSet = false;
    m_ParentIsSet = false;
    m_PathIsSet = false;
    m_PatternDescendant = false;
    m_PatternDescendantIsSet = false;
    m_RootOccurrence = false;
    m_RootOccurrenceIsSet = false;
    m_TailInstanceId = utility::conversions::to_string_t("");
    m_TailInstanceIdIsSet = false;
}

BTOccurrence_74::~BTOccurrence_74()
{
}

void BTOccurrence_74::validate()
{
    // TODO: implement validation
}

web::json::value BTOccurrence_74::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_FullPathAsStringIsSet)
    {
        val[utility::conversions::to_string_t("fullPathAsString")] = ModelBase::toJson(m_FullPathAsString);
    }
    if(m_HeadInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("headInstanceId")] = ModelBase::toJson(m_HeadInstanceId);
    }
    if(m_OccurrenceWithoutHeadIsSet)
    {
        val[utility::conversions::to_string_t("occurrenceWithoutHead")] = ModelBase::toJson(m_OccurrenceWithoutHead);
    }
    if(m_OccurrenceWithoutTailIsSet)
    {
        val[utility::conversions::to_string_t("occurrenceWithoutTail")] = ModelBase::toJson(m_OccurrenceWithoutTail);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t("parent")] = ModelBase::toJson(m_Parent);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_PatternDescendantIsSet)
    {
        val[utility::conversions::to_string_t("patternDescendant")] = ModelBase::toJson(m_PatternDescendant);
    }
    if(m_RootOccurrenceIsSet)
    {
        val[utility::conversions::to_string_t("rootOccurrence")] = ModelBase::toJson(m_RootOccurrence);
    }
    if(m_TailInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("tailInstanceId")] = ModelBase::toJson(m_TailInstanceId);
    }

    return val;
}

bool BTOccurrence_74::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullPathAsString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fullPathAsString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fullPathAsString;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullPathAsString);
            setFullPathAsString(refVal_fullPathAsString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("headInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("headInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_headInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_headInstanceId);
            setHeadInstanceId(refVal_headInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occurrenceWithoutHead")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("occurrenceWithoutHead"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOccurrence_74> refVal_occurrenceWithoutHead;
            ok &= ModelBase::fromJson(fieldValue, refVal_occurrenceWithoutHead);
            setOccurrenceWithoutHead(refVal_occurrenceWithoutHead);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occurrenceWithoutTail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("occurrenceWithoutTail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOccurrence_74> refVal_occurrenceWithoutTail;
            ok &= ModelBase::fromJson(fieldValue, refVal_occurrenceWithoutTail);
            setOccurrenceWithoutTail(refVal_occurrenceWithoutTail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parent"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOccurrence_74> refVal_parent;
            ok &= ModelBase::fromJson(fieldValue, refVal_parent);
            setParent(refVal_parent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("path"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_path;
            ok &= ModelBase::fromJson(fieldValue, refVal_path);
            setPath(refVal_path);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("patternDescendant")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("patternDescendant"));
        if(!fieldValue.is_null())
        {
            bool refVal_patternDescendant;
            ok &= ModelBase::fromJson(fieldValue, refVal_patternDescendant);
            setPatternDescendant(refVal_patternDescendant);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rootOccurrence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rootOccurrence"));
        if(!fieldValue.is_null())
        {
            bool refVal_rootOccurrence;
            ok &= ModelBase::fromJson(fieldValue, refVal_rootOccurrence);
            setRootOccurrence(refVal_rootOccurrence);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tailInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tailInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tailInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_tailInstanceId);
            setTailInstanceId(refVal_tailInstanceId);
        }
    }
    return ok;
}

void BTOccurrence_74::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_FullPathAsStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullPathAsString"), m_FullPathAsString));
    }
    if(m_HeadInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("headInstanceId"), m_HeadInstanceId));
    }
    if(m_OccurrenceWithoutHeadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occurrenceWithoutHead"), m_OccurrenceWithoutHead));
    }
    if(m_OccurrenceWithoutTailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occurrenceWithoutTail"), m_OccurrenceWithoutTail));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parent"), m_Parent));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_PatternDescendantIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("patternDescendant"), m_PatternDescendant));
    }
    if(m_RootOccurrenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rootOccurrence"), m_RootOccurrence));
    }
    if(m_TailInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tailInstanceId"), m_TailInstanceId));
    }
}

bool BTOccurrence_74::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullPathAsString")))
    {
        utility::string_t refVal_fullPathAsString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullPathAsString")), refVal_fullPathAsString );
        setFullPathAsString(refVal_fullPathAsString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("headInstanceId")))
    {
        utility::string_t refVal_headInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("headInstanceId")), refVal_headInstanceId );
        setHeadInstanceId(refVal_headInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occurrenceWithoutHead")))
    {
        std::shared_ptr<BTOccurrence_74> refVal_occurrenceWithoutHead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("occurrenceWithoutHead")), refVal_occurrenceWithoutHead );
        setOccurrenceWithoutHead(refVal_occurrenceWithoutHead);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occurrenceWithoutTail")))
    {
        std::shared_ptr<BTOccurrence_74> refVal_occurrenceWithoutTail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("occurrenceWithoutTail")), refVal_occurrenceWithoutTail );
        setOccurrenceWithoutTail(refVal_occurrenceWithoutTail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parent")))
    {
        std::shared_ptr<BTOccurrence_74> refVal_parent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parent")), refVal_parent );
        setParent(refVal_parent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        std::vector<utility::string_t> refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("patternDescendant")))
    {
        bool refVal_patternDescendant;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("patternDescendant")), refVal_patternDescendant );
        setPatternDescendant(refVal_patternDescendant);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rootOccurrence")))
    {
        bool refVal_rootOccurrence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rootOccurrence")), refVal_rootOccurrence );
        setRootOccurrence(refVal_rootOccurrence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tailInstanceId")))
    {
        utility::string_t refVal_tailInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tailInstanceId")), refVal_tailInstanceId );
        setTailInstanceId(refVal_tailInstanceId);
    }
    return ok;
}

utility::string_t BTOccurrence_74::getBtType() const
{
    return m_BtType;
}

void BTOccurrence_74::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTOccurrence_74::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTOccurrence_74::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTOccurrence_74::getFullPathAsString() const
{
    return m_FullPathAsString;
}

void BTOccurrence_74::setFullPathAsString(const utility::string_t& value)
{
    m_FullPathAsString = value;
    m_FullPathAsStringIsSet = true;
}

bool BTOccurrence_74::fullPathAsStringIsSet() const
{
    return m_FullPathAsStringIsSet;
}

void BTOccurrence_74::unsetFullPathAsString()
{
    m_FullPathAsStringIsSet = false;
}
utility::string_t BTOccurrence_74::getHeadInstanceId() const
{
    return m_HeadInstanceId;
}

void BTOccurrence_74::setHeadInstanceId(const utility::string_t& value)
{
    m_HeadInstanceId = value;
    m_HeadInstanceIdIsSet = true;
}

bool BTOccurrence_74::headInstanceIdIsSet() const
{
    return m_HeadInstanceIdIsSet;
}

void BTOccurrence_74::unsetHeadInstanceId()
{
    m_HeadInstanceIdIsSet = false;
}
std::shared_ptr<BTOccurrence_74> BTOccurrence_74::getOccurrenceWithoutHead() const
{
    return m_OccurrenceWithoutHead;
}

void BTOccurrence_74::setOccurrenceWithoutHead(const std::shared_ptr<BTOccurrence_74>& value)
{
    m_OccurrenceWithoutHead = value;
    m_OccurrenceWithoutHeadIsSet = true;
}

bool BTOccurrence_74::occurrenceWithoutHeadIsSet() const
{
    return m_OccurrenceWithoutHeadIsSet;
}

void BTOccurrence_74::unsetOccurrenceWithoutHead()
{
    m_OccurrenceWithoutHeadIsSet = false;
}
std::shared_ptr<BTOccurrence_74> BTOccurrence_74::getOccurrenceWithoutTail() const
{
    return m_OccurrenceWithoutTail;
}

void BTOccurrence_74::setOccurrenceWithoutTail(const std::shared_ptr<BTOccurrence_74>& value)
{
    m_OccurrenceWithoutTail = value;
    m_OccurrenceWithoutTailIsSet = true;
}

bool BTOccurrence_74::occurrenceWithoutTailIsSet() const
{
    return m_OccurrenceWithoutTailIsSet;
}

void BTOccurrence_74::unsetOccurrenceWithoutTail()
{
    m_OccurrenceWithoutTailIsSet = false;
}
std::shared_ptr<BTOccurrence_74> BTOccurrence_74::getParent() const
{
    return m_Parent;
}

void BTOccurrence_74::setParent(const std::shared_ptr<BTOccurrence_74>& value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}

bool BTOccurrence_74::parentIsSet() const
{
    return m_ParentIsSet;
}

void BTOccurrence_74::unsetParent()
{
    m_ParentIsSet = false;
}
std::vector<utility::string_t>& BTOccurrence_74::getPath()
{
    return m_Path;
}

void BTOccurrence_74::setPath(const std::vector<utility::string_t>& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool BTOccurrence_74::pathIsSet() const
{
    return m_PathIsSet;
}

void BTOccurrence_74::unsetPath()
{
    m_PathIsSet = false;
}
bool BTOccurrence_74::isPatternDescendant() const
{
    return m_PatternDescendant;
}

void BTOccurrence_74::setPatternDescendant(bool value)
{
    m_PatternDescendant = value;
    m_PatternDescendantIsSet = true;
}

bool BTOccurrence_74::patternDescendantIsSet() const
{
    return m_PatternDescendantIsSet;
}

void BTOccurrence_74::unsetPatternDescendant()
{
    m_PatternDescendantIsSet = false;
}
bool BTOccurrence_74::isRootOccurrence() const
{
    return m_RootOccurrence;
}

void BTOccurrence_74::setRootOccurrence(bool value)
{
    m_RootOccurrence = value;
    m_RootOccurrenceIsSet = true;
}

bool BTOccurrence_74::rootOccurrenceIsSet() const
{
    return m_RootOccurrenceIsSet;
}

void BTOccurrence_74::unsetRootOccurrence()
{
    m_RootOccurrenceIsSet = false;
}
utility::string_t BTOccurrence_74::getTailInstanceId() const
{
    return m_TailInstanceId;
}

void BTOccurrence_74::setTailInstanceId(const utility::string_t& value)
{
    m_TailInstanceId = value;
    m_TailInstanceIdIsSet = true;
}

bool BTOccurrence_74::tailInstanceIdIsSet() const
{
    return m_TailInstanceIdIsSet;
}

void BTOccurrence_74::unsetTailInstanceId()
{
    m_TailInstanceIdIsSet = false;
}
}
}
}
}


