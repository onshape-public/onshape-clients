/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecNullableQuantity_715.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecNullableQuantity_715::BTParameterSpecNullableQuantity_715()
{
    m_QuantityType = utility::conversions::to_string_t("");
    m_QuantityTypeIsSet = false;
    m_RangesIsSet = false;
}

BTParameterSpecNullableQuantity_715::~BTParameterSpecNullableQuantity_715()
{
}

void BTParameterSpecNullableQuantity_715::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecNullableQuantity_715::toJson() const
{
    web::json::value val = this->BTParameterSpec_6::toJson();
    
    if(m_QuantityTypeIsSet)
    {
        val[utility::conversions::to_string_t("quantityType")] = ModelBase::toJson(m_QuantityType);
    }
    if(m_RangesIsSet)
    {
        val[utility::conversions::to_string_t("ranges")] = ModelBase::toJson(m_Ranges);
    }

    return val;
}

bool BTParameterSpecNullableQuantity_715::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTParameterSpec_6::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("quantityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quantityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_quantityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_quantityType);
            setQuantityType(refVal_quantityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ranges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ranges"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTNullableQuantityRange_1340>> refVal_ranges;
            ok &= ModelBase::fromJson(fieldValue, refVal_ranges);
            setRanges(refVal_ranges);
        }
    }
    return ok;
}

void BTParameterSpecNullableQuantity_715::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnName"), m_ColumnName));
    }
    if(m_DefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultValue"), m_DefaultValue));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_UiHintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHint"), m_UiHint));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
    if(m_VisibilityConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visibilityCondition"), m_VisibilityCondition));
    }
    if(m_QuantityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantityType"), m_QuantityType));
    }
    if(m_RangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ranges"), m_Ranges));
    }
}

bool BTParameterSpecNullableQuantity_715::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnName")))
    {
        utility::string_t refVal_columnName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnName")), refVal_columnName );
        setColumnName(refVal_columnName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultValue")))
    {
        std::shared_ptr<BTMParameter_1> refVal_defaultValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultValue")), refVal_defaultValue );
        setDefaultValue(refVal_defaultValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHint")))
    {
        utility::string_t refVal_uiHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHint")), refVal_uiHint );
        setUiHint(refVal_uiHint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visibilityCondition")))
    {
        std::shared_ptr<BTParameterVisibilityCondition_177> refVal_visibilityCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visibilityCondition")), refVal_visibilityCondition );
        setVisibilityCondition(refVal_visibilityCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quantityType")))
    {
        utility::string_t refVal_quantityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantityType")), refVal_quantityType );
        setQuantityType(refVal_quantityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ranges")))
    {
        std::vector<std::shared_ptr<BTNullableQuantityRange_1340>> refVal_ranges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ranges")), refVal_ranges );
        setRanges(refVal_ranges);
    }
    return ok;
}

utility::string_t BTParameterSpecNullableQuantity_715::getQuantityType() const
{
    return m_QuantityType;
}

void BTParameterSpecNullableQuantity_715::setQuantityType(const utility::string_t& value)
{
    m_QuantityType = value;
    m_QuantityTypeIsSet = true;
}

bool BTParameterSpecNullableQuantity_715::quantityTypeIsSet() const
{
    return m_QuantityTypeIsSet;
}

void BTParameterSpecNullableQuantity_715::unsetQuantityType()
{
    m_QuantityTypeIsSet = false;
}
std::vector<std::shared_ptr<BTNullableQuantityRange_1340>>& BTParameterSpecNullableQuantity_715::getRanges()
{
    return m_Ranges;
}

void BTParameterSpecNullableQuantity_715::setRanges(const std::vector<std::shared_ptr<BTNullableQuantityRange_1340>>& value)
{
    m_Ranges = value;
    m_RangesIsSet = true;
}

bool BTParameterSpecNullableQuantity_715::rangesIsSet() const
{
    return m_RangesIsSet;
}

void BTParameterSpecNullableQuantity_715::unsetRanges()
{
    m_RangesIsSet = false;
}
}
}
}
}


