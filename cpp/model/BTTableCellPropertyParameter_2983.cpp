/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTableCellPropertyParameter_2983.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTableCellPropertyParameter_2983::BTTableCellPropertyParameter_2983()
{
    m_IsUnchanged = false;
    m_IsUnchangedIsSet = false;
}

BTTableCellPropertyParameter_2983::~BTTableCellPropertyParameter_2983()
{
}

void BTTableCellPropertyParameter_2983::validate()
{
    // TODO: implement validation
}

web::json::value BTTableCellPropertyParameter_2983::toJson() const
{
    web::json::value val = this->BTTableCellParameter_2399::toJson();
    
    if(m_IsUnchangedIsSet)
    {
        val[utility::conversions::to_string_t("isUnchanged")] = ModelBase::toJson(m_IsUnchanged);
    }

    return val;
}

bool BTTableCellPropertyParameter_2983::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTTableCellParameter_2399::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("isUnchanged")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUnchanged"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUnchanged;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUnchanged);
            setIsUnchanged(refVal_isUnchanged);
        }
    }
    return ok;
}

void BTTableCellPropertyParameter_2983::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IsEverVisibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEverVisible"), m_IsEverVisible));
    }
    if(m_IsReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isReadOnly"), m_IsReadOnly));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("error"), m_Error));
    }
    if(m_OverrideSpecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("overrideSpec"), m_OverrideSpec));
    }
    if(m_ParameterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameter"), m_Parameter));
    }
    if(m_IsUnchangedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUnchanged"), m_IsUnchanged));
    }
}

bool BTTableCellPropertyParameter_2983::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEverVisible")))
    {
        bool refVal_isEverVisible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEverVisible")), refVal_isEverVisible );
        setIsEverVisible(refVal_isEverVisible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isReadOnly")))
    {
        bool refVal_isReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isReadOnly")), refVal_isReadOnly );
        setIsReadOnly(refVal_isReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("error")))
    {
        utility::string_t refVal_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("error")), refVal_error );
        setError(refVal_error);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("overrideSpec")))
    {
        std::shared_ptr<BTParameterSpec_6> refVal_overrideSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("overrideSpec")), refVal_overrideSpec );
        setOverrideSpec(refVal_overrideSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameter")))
    {
        std::shared_ptr<BTMParameter_1> refVal_parameter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameter")), refVal_parameter );
        setParameter(refVal_parameter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUnchanged")))
    {
        bool refVal_isUnchanged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUnchanged")), refVal_isUnchanged );
        setIsUnchanged(refVal_isUnchanged);
    }
    return ok;
}

bool BTTableCellPropertyParameter_2983::isIsUnchanged() const
{
    return m_IsUnchanged;
}

void BTTableCellPropertyParameter_2983::setIsUnchanged(bool value)
{
    m_IsUnchanged = value;
    m_IsUnchangedIsSet = true;
}

bool BTTableCellPropertyParameter_2983::isUnchangedIsSet() const
{
    return m_IsUnchangedIsSet;
}

void BTTableCellPropertyParameter_2983::unsetIsUnchanged()
{
    m_IsUnchangedIsSet = false;
}
}
}
}
}


