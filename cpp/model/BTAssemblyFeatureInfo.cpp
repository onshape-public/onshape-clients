/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyFeatureInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyFeatureInfo::BTAssemblyFeatureInfo()
{
    m_FeatureDataIsSet = false;
    m_FeatureType = utility::conversions::to_string_t("");
    m_FeatureTypeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Suppressed = false;
    m_SuppressedIsSet = false;
}

BTAssemblyFeatureInfo::~BTAssemblyFeatureInfo()
{
}

void BTAssemblyFeatureInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyFeatureInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeatureDataIsSet)
    {
        val[utility::conversions::to_string_t("featureData")] = ModelBase::toJson(m_FeatureData);
    }
    if(m_FeatureTypeIsSet)
    {
        val[utility::conversions::to_string_t("featureType")] = ModelBase::toJson(m_FeatureType);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_SuppressedIsSet)
    {
        val[utility::conversions::to_string_t("suppressed")] = ModelBase::toJson(m_Suppressed);
    }

    return val;
}

bool BTAssemblyFeatureInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("featureData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTAssemblyFeatureDataInfo> refVal_featureData;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureData);
            setFeatureData(refVal_featureData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureType);
            setFeatureType(refVal_featureType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suppressed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suppressed"));
        if(!fieldValue.is_null())
        {
            bool refVal_suppressed;
            ok &= ModelBase::fromJson(fieldValue, refVal_suppressed);
            setSuppressed(refVal_suppressed);
        }
    }
    return ok;
}

void BTAssemblyFeatureInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FeatureDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureData"), m_FeatureData));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_SuppressedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suppressed"), m_Suppressed));
    }
}

bool BTAssemblyFeatureInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("featureData")))
    {
        std::shared_ptr<BTAssemblyFeatureDataInfo> refVal_featureData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureData")), refVal_featureData );
        setFeatureData(refVal_featureData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suppressed")))
    {
        bool refVal_suppressed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suppressed")), refVal_suppressed );
        setSuppressed(refVal_suppressed);
    }
    return ok;
}

std::shared_ptr<BTAssemblyFeatureDataInfo> BTAssemblyFeatureInfo::getFeatureData() const
{
    return m_FeatureData;
}

void BTAssemblyFeatureInfo::setFeatureData(const std::shared_ptr<BTAssemblyFeatureDataInfo>& value)
{
    m_FeatureData = value;
    m_FeatureDataIsSet = true;
}

bool BTAssemblyFeatureInfo::featureDataIsSet() const
{
    return m_FeatureDataIsSet;
}

void BTAssemblyFeatureInfo::unsetFeatureData()
{
    m_FeatureDataIsSet = false;
}
utility::string_t BTAssemblyFeatureInfo::getFeatureType() const
{
    return m_FeatureType;
}

void BTAssemblyFeatureInfo::setFeatureType(const utility::string_t& value)
{
    m_FeatureType = value;
    m_FeatureTypeIsSet = true;
}

bool BTAssemblyFeatureInfo::featureTypeIsSet() const
{
    return m_FeatureTypeIsSet;
}

void BTAssemblyFeatureInfo::unsetFeatureType()
{
    m_FeatureTypeIsSet = false;
}
utility::string_t BTAssemblyFeatureInfo::getId() const
{
    return m_Id;
}

void BTAssemblyFeatureInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTAssemblyFeatureInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTAssemblyFeatureInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTAssemblyFeatureInfo::isSuppressed() const
{
    return m_Suppressed;
}

void BTAssemblyFeatureInfo::setSuppressed(bool value)
{
    m_Suppressed = value;
    m_SuppressedIsSet = true;
}

bool BTAssemblyFeatureInfo::suppressedIsSet() const
{
    return m_SuppressedIsSet;
}

void BTAssemblyFeatureInfo::unsetSuppressed()
{
    m_SuppressedIsSet = false;
}
}
}
}
}


