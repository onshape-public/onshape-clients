/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUnitsDisplayPrecision.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUnitsDisplayPrecision::BTUnitsDisplayPrecision()
{
    m_Centimeter = 0;
    m_CentimeterIsSet = false;
    m_Degree = 0;
    m_DegreeIsSet = false;
    m_Foot = 0;
    m_FootIsSet = false;
    m_Gram = 0;
    m_GramIsSet = false;
    m_Inch = 0;
    m_InchIsSet = false;
    m_Kilogram = 0;
    m_KilogramIsSet = false;
    m_Meter = 0;
    m_MeterIsSet = false;
    m_Millimeter = 0;
    m_MillimeterIsSet = false;
    m_Ounce = 0;
    m_OunceIsSet = false;
    m_Pound = 0;
    m_PoundIsSet = false;
    m_Radian = 0;
    m_RadianIsSet = false;
    m_Yard = 0;
    m_YardIsSet = false;
}

BTUnitsDisplayPrecision::~BTUnitsDisplayPrecision()
{
}

void BTUnitsDisplayPrecision::validate()
{
    // TODO: implement validation
}

web::json::value BTUnitsDisplayPrecision::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CentimeterIsSet)
    {
        val[utility::conversions::to_string_t("centimeter")] = ModelBase::toJson(m_Centimeter);
    }
    if(m_DegreeIsSet)
    {
        val[utility::conversions::to_string_t("degree")] = ModelBase::toJson(m_Degree);
    }
    if(m_FootIsSet)
    {
        val[utility::conversions::to_string_t("foot")] = ModelBase::toJson(m_Foot);
    }
    if(m_GramIsSet)
    {
        val[utility::conversions::to_string_t("gram")] = ModelBase::toJson(m_Gram);
    }
    if(m_InchIsSet)
    {
        val[utility::conversions::to_string_t("inch")] = ModelBase::toJson(m_Inch);
    }
    if(m_KilogramIsSet)
    {
        val[utility::conversions::to_string_t("kilogram")] = ModelBase::toJson(m_Kilogram);
    }
    if(m_MeterIsSet)
    {
        val[utility::conversions::to_string_t("meter")] = ModelBase::toJson(m_Meter);
    }
    if(m_MillimeterIsSet)
    {
        val[utility::conversions::to_string_t("millimeter")] = ModelBase::toJson(m_Millimeter);
    }
    if(m_OunceIsSet)
    {
        val[utility::conversions::to_string_t("ounce")] = ModelBase::toJson(m_Ounce);
    }
    if(m_PoundIsSet)
    {
        val[utility::conversions::to_string_t("pound")] = ModelBase::toJson(m_Pound);
    }
    if(m_RadianIsSet)
    {
        val[utility::conversions::to_string_t("radian")] = ModelBase::toJson(m_Radian);
    }
    if(m_YardIsSet)
    {
        val[utility::conversions::to_string_t("yard")] = ModelBase::toJson(m_Yard);
    }

    return val;
}

bool BTUnitsDisplayPrecision::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("centimeter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("centimeter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_centimeter;
            ok &= ModelBase::fromJson(fieldValue, refVal_centimeter);
            setCentimeter(refVal_centimeter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("degree")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("degree"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_degree;
            ok &= ModelBase::fromJson(fieldValue, refVal_degree);
            setDegree(refVal_degree);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foot")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foot"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_foot;
            ok &= ModelBase::fromJson(fieldValue, refVal_foot);
            setFoot(refVal_foot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gram")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gram"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_gram;
            ok &= ModelBase::fromJson(fieldValue, refVal_gram);
            setGram(refVal_gram);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inch"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_inch;
            ok &= ModelBase::fromJson(fieldValue, refVal_inch);
            setInch(refVal_inch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("kilogram")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("kilogram"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_kilogram;
            ok &= ModelBase::fromJson(fieldValue, refVal_kilogram);
            setKilogram(refVal_kilogram);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("meter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_meter;
            ok &= ModelBase::fromJson(fieldValue, refVal_meter);
            setMeter(refVal_meter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("millimeter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("millimeter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_millimeter;
            ok &= ModelBase::fromJson(fieldValue, refVal_millimeter);
            setMillimeter(refVal_millimeter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ounce")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ounce"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ounce;
            ok &= ModelBase::fromJson(fieldValue, refVal_ounce);
            setOunce(refVal_ounce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pound")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pound"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pound;
            ok &= ModelBase::fromJson(fieldValue, refVal_pound);
            setPound(refVal_pound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("radian")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("radian"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_radian;
            ok &= ModelBase::fromJson(fieldValue, refVal_radian);
            setRadian(refVal_radian);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("yard")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("yard"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_yard;
            ok &= ModelBase::fromJson(fieldValue, refVal_yard);
            setYard(refVal_yard);
        }
    }
    return ok;
}

void BTUnitsDisplayPrecision::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CentimeterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("centimeter"), m_Centimeter));
    }
    if(m_DegreeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("degree"), m_Degree));
    }
    if(m_FootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foot"), m_Foot));
    }
    if(m_GramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gram"), m_Gram));
    }
    if(m_InchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inch"), m_Inch));
    }
    if(m_KilogramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("kilogram"), m_Kilogram));
    }
    if(m_MeterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("meter"), m_Meter));
    }
    if(m_MillimeterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("millimeter"), m_Millimeter));
    }
    if(m_OunceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ounce"), m_Ounce));
    }
    if(m_PoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pound"), m_Pound));
    }
    if(m_RadianIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("radian"), m_Radian));
    }
    if(m_YardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("yard"), m_Yard));
    }
}

bool BTUnitsDisplayPrecision::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("centimeter")))
    {
        int32_t refVal_centimeter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("centimeter")), refVal_centimeter );
        setCentimeter(refVal_centimeter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("degree")))
    {
        int32_t refVal_degree;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("degree")), refVal_degree );
        setDegree(refVal_degree);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foot")))
    {
        int32_t refVal_foot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foot")), refVal_foot );
        setFoot(refVal_foot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gram")))
    {
        int32_t refVal_gram;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gram")), refVal_gram );
        setGram(refVal_gram);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inch")))
    {
        int32_t refVal_inch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inch")), refVal_inch );
        setInch(refVal_inch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("kilogram")))
    {
        int32_t refVal_kilogram;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("kilogram")), refVal_kilogram );
        setKilogram(refVal_kilogram);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meter")))
    {
        int32_t refVal_meter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("meter")), refVal_meter );
        setMeter(refVal_meter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("millimeter")))
    {
        int32_t refVal_millimeter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("millimeter")), refVal_millimeter );
        setMillimeter(refVal_millimeter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ounce")))
    {
        int32_t refVal_ounce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ounce")), refVal_ounce );
        setOunce(refVal_ounce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pound")))
    {
        int32_t refVal_pound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pound")), refVal_pound );
        setPound(refVal_pound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("radian")))
    {
        int32_t refVal_radian;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("radian")), refVal_radian );
        setRadian(refVal_radian);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("yard")))
    {
        int32_t refVal_yard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("yard")), refVal_yard );
        setYard(refVal_yard);
    }
    return ok;
}

int32_t BTUnitsDisplayPrecision::getCentimeter() const
{
    return m_Centimeter;
}

void BTUnitsDisplayPrecision::setCentimeter(int32_t value)
{
    m_Centimeter = value;
    m_CentimeterIsSet = true;
}

bool BTUnitsDisplayPrecision::centimeterIsSet() const
{
    return m_CentimeterIsSet;
}

void BTUnitsDisplayPrecision::unsetCentimeter()
{
    m_CentimeterIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getDegree() const
{
    return m_Degree;
}

void BTUnitsDisplayPrecision::setDegree(int32_t value)
{
    m_Degree = value;
    m_DegreeIsSet = true;
}

bool BTUnitsDisplayPrecision::degreeIsSet() const
{
    return m_DegreeIsSet;
}

void BTUnitsDisplayPrecision::unsetDegree()
{
    m_DegreeIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getFoot() const
{
    return m_Foot;
}

void BTUnitsDisplayPrecision::setFoot(int32_t value)
{
    m_Foot = value;
    m_FootIsSet = true;
}

bool BTUnitsDisplayPrecision::footIsSet() const
{
    return m_FootIsSet;
}

void BTUnitsDisplayPrecision::unsetFoot()
{
    m_FootIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getGram() const
{
    return m_Gram;
}

void BTUnitsDisplayPrecision::setGram(int32_t value)
{
    m_Gram = value;
    m_GramIsSet = true;
}

bool BTUnitsDisplayPrecision::gramIsSet() const
{
    return m_GramIsSet;
}

void BTUnitsDisplayPrecision::unsetGram()
{
    m_GramIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getInch() const
{
    return m_Inch;
}

void BTUnitsDisplayPrecision::setInch(int32_t value)
{
    m_Inch = value;
    m_InchIsSet = true;
}

bool BTUnitsDisplayPrecision::inchIsSet() const
{
    return m_InchIsSet;
}

void BTUnitsDisplayPrecision::unsetInch()
{
    m_InchIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getKilogram() const
{
    return m_Kilogram;
}

void BTUnitsDisplayPrecision::setKilogram(int32_t value)
{
    m_Kilogram = value;
    m_KilogramIsSet = true;
}

bool BTUnitsDisplayPrecision::kilogramIsSet() const
{
    return m_KilogramIsSet;
}

void BTUnitsDisplayPrecision::unsetKilogram()
{
    m_KilogramIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getMeter() const
{
    return m_Meter;
}

void BTUnitsDisplayPrecision::setMeter(int32_t value)
{
    m_Meter = value;
    m_MeterIsSet = true;
}

bool BTUnitsDisplayPrecision::meterIsSet() const
{
    return m_MeterIsSet;
}

void BTUnitsDisplayPrecision::unsetMeter()
{
    m_MeterIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getMillimeter() const
{
    return m_Millimeter;
}

void BTUnitsDisplayPrecision::setMillimeter(int32_t value)
{
    m_Millimeter = value;
    m_MillimeterIsSet = true;
}

bool BTUnitsDisplayPrecision::millimeterIsSet() const
{
    return m_MillimeterIsSet;
}

void BTUnitsDisplayPrecision::unsetMillimeter()
{
    m_MillimeterIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getOunce() const
{
    return m_Ounce;
}

void BTUnitsDisplayPrecision::setOunce(int32_t value)
{
    m_Ounce = value;
    m_OunceIsSet = true;
}

bool BTUnitsDisplayPrecision::ounceIsSet() const
{
    return m_OunceIsSet;
}

void BTUnitsDisplayPrecision::unsetOunce()
{
    m_OunceIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getPound() const
{
    return m_Pound;
}

void BTUnitsDisplayPrecision::setPound(int32_t value)
{
    m_Pound = value;
    m_PoundIsSet = true;
}

bool BTUnitsDisplayPrecision::poundIsSet() const
{
    return m_PoundIsSet;
}

void BTUnitsDisplayPrecision::unsetPound()
{
    m_PoundIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getRadian() const
{
    return m_Radian;
}

void BTUnitsDisplayPrecision::setRadian(int32_t value)
{
    m_Radian = value;
    m_RadianIsSet = true;
}

bool BTUnitsDisplayPrecision::radianIsSet() const
{
    return m_RadianIsSet;
}

void BTUnitsDisplayPrecision::unsetRadian()
{
    m_RadianIsSet = false;
}
int32_t BTUnitsDisplayPrecision::getYard() const
{
    return m_Yard;
}

void BTUnitsDisplayPrecision::setYard(int32_t value)
{
    m_Yard = value;
    m_YardIsSet = true;
}

bool BTUnitsDisplayPrecision::yardIsSet() const
{
    return m_YardIsSet;
}

void BTUnitsDisplayPrecision::unsetYard()
{
    m_YardIsSet = false;
}
}
}
}
}


