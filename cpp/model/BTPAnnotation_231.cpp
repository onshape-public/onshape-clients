/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPAnnotation_231.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPAnnotation_231::BTPAnnotation_231()
{
    m_Atomic = false;
    m_AtomicIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_DocumentationType = utility::conversions::to_string_t("");
    m_DocumentationTypeIsSet = false;
    m_EndSourceLocation = 0;
    m_EndSourceLocationIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ShortDescriptor = utility::conversions::to_string_t("");
    m_ShortDescriptorIsSet = false;
    m_SpaceAfterIsSet = false;
    m_SpaceBeforeIsSet = false;
    m_SpaceDefault = false;
    m_SpaceDefaultIsSet = false;
    m_StartSourceLocation = 0;
    m_StartSourceLocationIsSet = false;
    m_ValueIsSet = false;
}

BTPAnnotation_231::~BTPAnnotation_231()
{
}

void BTPAnnotation_231::validate()
{
    // TODO: implement validation
}

web::json::value BTPAnnotation_231::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AtomicIsSet)
    {
        val[utility::conversions::to_string_t("atomic")] = ModelBase::toJson(m_Atomic);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_DocumentationTypeIsSet)
    {
        val[utility::conversions::to_string_t("documentationType")] = ModelBase::toJson(m_DocumentationType);
    }
    if(m_EndSourceLocationIsSet)
    {
        val[utility::conversions::to_string_t("endSourceLocation")] = ModelBase::toJson(m_EndSourceLocation);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ShortDescriptorIsSet)
    {
        val[utility::conversions::to_string_t("shortDescriptor")] = ModelBase::toJson(m_ShortDescriptor);
    }
    if(m_SpaceAfterIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfter")] = ModelBase::toJson(m_SpaceAfter);
    }
    if(m_SpaceBeforeIsSet)
    {
        val[utility::conversions::to_string_t("spaceBefore")] = ModelBase::toJson(m_SpaceBefore);
    }
    if(m_SpaceDefaultIsSet)
    {
        val[utility::conversions::to_string_t("spaceDefault")] = ModelBase::toJson(m_SpaceDefault);
    }
    if(m_StartSourceLocationIsSet)
    {
        val[utility::conversions::to_string_t("startSourceLocation")] = ModelBase::toJson(m_StartSourceLocation);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool BTPAnnotation_231::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("atomic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("atomic"));
        if(!fieldValue.is_null())
        {
            bool refVal_atomic;
            ok &= ModelBase::fromJson(fieldValue, refVal_atomic);
            setAtomic(refVal_atomic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentationType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentationType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentationType);
            setDocumentationType(refVal_documentationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endSourceLocation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endSourceLocation"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_endSourceLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_endSourceLocation);
            setEndSourceLocation(refVal_endSourceLocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("shortDescriptor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("shortDescriptor"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_shortDescriptor;
            ok &= ModelBase::fromJson(fieldValue, refVal_shortDescriptor);
            setShortDescriptor(refVal_shortDescriptor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfter"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfter);
            setSpaceAfter(refVal_spaceAfter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBefore")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBefore"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBefore);
            setSpaceBefore(refVal_spaceBefore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceDefault"));
        if(!fieldValue.is_null())
        {
            bool refVal_spaceDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceDefault);
            setSpaceDefault(refVal_spaceDefault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startSourceLocation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startSourceLocation"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_startSourceLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_startSourceLocation);
            setStartSourceLocation(refVal_startSourceLocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralMap_256> refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void BTPAnnotation_231::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool BTPAnnotation_231::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        std::shared_ptr<BTPLiteralMap_256> refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

bool BTPAnnotation_231::isAtomic() const
{
    return m_Atomic;
}

void BTPAnnotation_231::setAtomic(bool value)
{
    m_Atomic = value;
    m_AtomicIsSet = true;
}

bool BTPAnnotation_231::atomicIsSet() const
{
    return m_AtomicIsSet;
}

void BTPAnnotation_231::unsetAtomic()
{
    m_AtomicIsSet = false;
}
utility::string_t BTPAnnotation_231::getBtType() const
{
    return m_BtType;
}

void BTPAnnotation_231::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPAnnotation_231::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPAnnotation_231::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTPAnnotation_231::getDocumentationType() const
{
    return m_DocumentationType;
}

void BTPAnnotation_231::setDocumentationType(const utility::string_t& value)
{
    m_DocumentationType = value;
    m_DocumentationTypeIsSet = true;
}

bool BTPAnnotation_231::documentationTypeIsSet() const
{
    return m_DocumentationTypeIsSet;
}

void BTPAnnotation_231::unsetDocumentationType()
{
    m_DocumentationTypeIsSet = false;
}
int32_t BTPAnnotation_231::getEndSourceLocation() const
{
    return m_EndSourceLocation;
}

void BTPAnnotation_231::setEndSourceLocation(int32_t value)
{
    m_EndSourceLocation = value;
    m_EndSourceLocationIsSet = true;
}

bool BTPAnnotation_231::endSourceLocationIsSet() const
{
    return m_EndSourceLocationIsSet;
}

void BTPAnnotation_231::unsetEndSourceLocation()
{
    m_EndSourceLocationIsSet = false;
}
utility::string_t BTPAnnotation_231::getNodeId() const
{
    return m_NodeId;
}

void BTPAnnotation_231::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTPAnnotation_231::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTPAnnotation_231::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTPAnnotation_231::getShortDescriptor() const
{
    return m_ShortDescriptor;
}

void BTPAnnotation_231::setShortDescriptor(const utility::string_t& value)
{
    m_ShortDescriptor = value;
    m_ShortDescriptorIsSet = true;
}

bool BTPAnnotation_231::shortDescriptorIsSet() const
{
    return m_ShortDescriptorIsSet;
}

void BTPAnnotation_231::unsetShortDescriptor()
{
    m_ShortDescriptorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPAnnotation_231::getSpaceAfter() const
{
    return m_SpaceAfter;
}

void BTPAnnotation_231::setSpaceAfter(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfter = value;
    m_SpaceAfterIsSet = true;
}

bool BTPAnnotation_231::spaceAfterIsSet() const
{
    return m_SpaceAfterIsSet;
}

void BTPAnnotation_231::unsetSpaceAfter()
{
    m_SpaceAfterIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPAnnotation_231::getSpaceBefore() const
{
    return m_SpaceBefore;
}

void BTPAnnotation_231::setSpaceBefore(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBefore = value;
    m_SpaceBeforeIsSet = true;
}

bool BTPAnnotation_231::spaceBeforeIsSet() const
{
    return m_SpaceBeforeIsSet;
}

void BTPAnnotation_231::unsetSpaceBefore()
{
    m_SpaceBeforeIsSet = false;
}
bool BTPAnnotation_231::isSpaceDefault() const
{
    return m_SpaceDefault;
}

void BTPAnnotation_231::setSpaceDefault(bool value)
{
    m_SpaceDefault = value;
    m_SpaceDefaultIsSet = true;
}

bool BTPAnnotation_231::spaceDefaultIsSet() const
{
    return m_SpaceDefaultIsSet;
}

void BTPAnnotation_231::unsetSpaceDefault()
{
    m_SpaceDefaultIsSet = false;
}
int32_t BTPAnnotation_231::getStartSourceLocation() const
{
    return m_StartSourceLocation;
}

void BTPAnnotation_231::setStartSourceLocation(int32_t value)
{
    m_StartSourceLocation = value;
    m_StartSourceLocationIsSet = true;
}

bool BTPAnnotation_231::startSourceLocationIsSet() const
{
    return m_StartSourceLocationIsSet;
}

void BTPAnnotation_231::unsetStartSourceLocation()
{
    m_StartSourceLocationIsSet = false;
}
std::shared_ptr<BTPLiteralMap_256> BTPAnnotation_231::getValue() const
{
    return m_Value;
}

void BTPAnnotation_231::setValue(const std::shared_ptr<BTPLiteralMap_256>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BTPAnnotation_231::valueIsSet() const
{
    return m_ValueIsSet;
}

void BTPAnnotation_231::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


