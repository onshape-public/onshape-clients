/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTSubstituteApproverInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTSubstituteApproverInfo::BTSubstituteApproverInfo()
{
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_IdentityIsSet = false;
}

BTSubstituteApproverInfo::~BTSubstituteApproverInfo()
{
}

void BTSubstituteApproverInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTSubstituteApproverInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_IdentityIsSet)
    {
        val[utility::conversions::to_string_t("identity")] = ModelBase::toJson(m_Identity);
    }

    return val;
}

bool BTSubstituteApproverInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("identity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("identity"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTIdentityInfo> refVal_identity;
            ok &= ModelBase::fromJson(fieldValue, refVal_identity);
            setIdentity(refVal_identity);
        }
    }
    return ok;
}

void BTSubstituteApproverInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_IdentityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("identity"), m_Identity));
    }
}

bool BTSubstituteApproverInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("identity")))
    {
        std::shared_ptr<BTIdentityInfo> refVal_identity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("identity")), refVal_identity );
        setIdentity(refVal_identity);
    }
    return ok;
}

utility::string_t BTSubstituteApproverInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTSubstituteApproverInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTSubstituteApproverInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTSubstituteApproverInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
bool BTSubstituteApproverInfo::isEnabled() const
{
    return m_Enabled;
}

void BTSubstituteApproverInfo::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool BTSubstituteApproverInfo::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void BTSubstituteApproverInfo::unsetEnabled()
{
    m_EnabledIsSet = false;
}
std::shared_ptr<BTIdentityInfo> BTSubstituteApproverInfo::getIdentity() const
{
    return m_Identity;
}

void BTSubstituteApproverInfo::setIdentity(const std::shared_ptr<BTIdentityInfo>& value)
{
    m_Identity = value;
    m_IdentityIsSet = true;
}

bool BTSubstituteApproverInfo::identityIsSet() const
{
    return m_IdentityIsSet;
}

void BTSubstituteApproverInfo::unsetIdentity()
{
    m_IdentityIsSet = false;
}
}
}
}
}


