/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUpdateReleasePackageParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUpdateReleasePackageParams::BTUpdateReleasePackageParams()
{
    m_Empty = false;
    m_EmptyIsSet = false;
    m_ItemIdsIsSet = false;
    m_ItemsIsSet = false;
    m_PropertiesIsSet = false;
}

BTUpdateReleasePackageParams::~BTUpdateReleasePackageParams()
{
}

void BTUpdateReleasePackageParams::validate()
{
    // TODO: implement validation
}

web::json::value BTUpdateReleasePackageParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmptyIsSet)
    {
        val[utility::conversions::to_string_t("empty")] = ModelBase::toJson(m_Empty);
    }
    if(m_ItemIdsIsSet)
    {
        val[utility::conversions::to_string_t("itemIds")] = ModelBase::toJson(m_ItemIds);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t("items")] = ModelBase::toJson(m_Items);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }

    return val;
}

bool BTUpdateReleasePackageParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("empty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("empty"));
        if(!fieldValue.is_null())
        {
            bool refVal_empty;
            ok &= ModelBase::fromJson(fieldValue, refVal_empty);
            setEmpty(refVal_empty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("itemIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_itemIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemIds);
            setItemIds(refVal_itemIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("items")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("items"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTReleasePackageItemParams>> refVal_items;
            ok &= ModelBase::fromJson(fieldValue, refVal_items);
            setItems(refVal_items);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPropertyValueParam>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    return ok;
}

void BTUpdateReleasePackageParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EmptyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("empty"), m_Empty));
    }
    if(m_ItemIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemIds"), m_ItemIds));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("items"), m_Items));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
}

bool BTUpdateReleasePackageParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("empty")))
    {
        bool refVal_empty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("empty")), refVal_empty );
        setEmpty(refVal_empty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("itemIds")))
    {
        std::vector<utility::string_t> refVal_itemIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemIds")), refVal_itemIds );
        setItemIds(refVal_itemIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("items")))
    {
        std::vector<std::shared_ptr<BTReleasePackageItemParams>> refVal_items;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("items")), refVal_items );
        setItems(refVal_items);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<BTPropertyValueParam>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    return ok;
}

bool BTUpdateReleasePackageParams::isEmpty() const
{
    return m_Empty;
}

void BTUpdateReleasePackageParams::setEmpty(bool value)
{
    m_Empty = value;
    m_EmptyIsSet = true;
}

bool BTUpdateReleasePackageParams::emptyIsSet() const
{
    return m_EmptyIsSet;
}

void BTUpdateReleasePackageParams::unsetEmpty()
{
    m_EmptyIsSet = false;
}
std::vector<utility::string_t>& BTUpdateReleasePackageParams::getItemIds()
{
    return m_ItemIds;
}

void BTUpdateReleasePackageParams::setItemIds(const std::vector<utility::string_t>& value)
{
    m_ItemIds = value;
    m_ItemIdsIsSet = true;
}

bool BTUpdateReleasePackageParams::itemIdsIsSet() const
{
    return m_ItemIdsIsSet;
}

void BTUpdateReleasePackageParams::unsetItemIds()
{
    m_ItemIdsIsSet = false;
}
std::vector<std::shared_ptr<BTReleasePackageItemParams>>& BTUpdateReleasePackageParams::getItems()
{
    return m_Items;
}

void BTUpdateReleasePackageParams::setItems(const std::vector<std::shared_ptr<BTReleasePackageItemParams>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool BTUpdateReleasePackageParams::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void BTUpdateReleasePackageParams::unsetItems()
{
    m_ItemsIsSet = false;
}
std::vector<std::shared_ptr<BTPropertyValueParam>>& BTUpdateReleasePackageParams::getProperties()
{
    return m_Properties;
}

void BTUpdateReleasePackageParams::setProperties(const std::vector<std::shared_ptr<BTPropertyValueParam>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool BTUpdateReleasePackageParams::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void BTUpdateReleasePackageParams::unsetProperties()
{
    m_PropertiesIsSet = false;
}
}
}
}
}


