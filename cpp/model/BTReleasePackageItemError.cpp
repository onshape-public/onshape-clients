/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTReleasePackageItemError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTReleasePackageItemError::BTReleasePackageItemError()
{
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Severity = 0;
    m_SeverityIsSet = false;
}

BTReleasePackageItemError::~BTReleasePackageItemError()
{
}

void BTReleasePackageItemError::validate()
{
    // TODO: implement validation
}

web::json::value BTReleasePackageItemError::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t("severity")] = ModelBase::toJson(m_Severity);
    }

    return val;
}

bool BTReleasePackageItemError::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("severity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("severity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_severity;
            ok &= ModelBase::fromJson(fieldValue, refVal_severity);
            setSeverity(refVal_severity);
        }
    }
    return ok;
}

void BTReleasePackageItemError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("severity"), m_Severity));
    }
}

bool BTReleasePackageItemError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("severity")))
    {
        int32_t refVal_severity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("severity")), refVal_severity );
        setSeverity(refVal_severity);
    }
    return ok;
}

utility::string_t BTReleasePackageItemError::getMessage() const
{
    return m_Message;
}

void BTReleasePackageItemError::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool BTReleasePackageItemError::messageIsSet() const
{
    return m_MessageIsSet;
}

void BTReleasePackageItemError::unsetMessage()
{
    m_MessageIsSet = false;
}
int32_t BTReleasePackageItemError::getSeverity() const
{
    return m_Severity;
}

void BTReleasePackageItemError::setSeverity(int32_t value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool BTReleasePackageItemError::severityIsSet() const
{
    return m_SeverityIsSet;
}

void BTReleasePackageItemError::unsetSeverity()
{
    m_SeverityIsSet = false;
}
}
}
}
}


