/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementTry_1523_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementTry_1523_allOf::BTPStatementTry_1523_allOf()
{
    m_StandardType = utility::conversions::to_string_t("");
    m_StandardTypeIsSet = false;
    m_NameIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_BodyIsSet = false;
    m_Silent = false;
    m_SilentIsSet = false;
    m_CatchVariableIsSet = false;
    m_SpaceBeforeSilentIsSet = false;
    m_CatchBlockIsSet = false;
    m_SpaceAfterCatchIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPStatementTry_1523_allOf::~BTPStatementTry_1523_allOf()
{
}

void BTPStatementTry_1523_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementTry_1523_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StandardTypeIsSet)
    {
        val[utility::conversions::to_string_t("standardType")] = ModelBase::toJson(m_StandardType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t("typeName")] = ModelBase::toJson(m_r_typeName);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_SilentIsSet)
    {
        val[utility::conversions::to_string_t("silent")] = ModelBase::toJson(m_Silent);
    }
    if(m_CatchVariableIsSet)
    {
        val[utility::conversions::to_string_t("catchVariable")] = ModelBase::toJson(m_CatchVariable);
    }
    if(m_SpaceBeforeSilentIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeSilent")] = ModelBase::toJson(m_SpaceBeforeSilent);
    }
    if(m_CatchBlockIsSet)
    {
        val[utility::conversions::to_string_t("catchBlock")] = ModelBase::toJson(m_CatchBlock);
    }
    if(m_SpaceAfterCatchIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterCatch")] = ModelBase::toJson(m_SpaceAfterCatch);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPStatementTry_1523_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("standardType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardType;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardType);
            setStandardType(refVal_standardType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatementBlock_271> refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("silent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("silent"));
        if(!fieldValue.is_null())
        {
            bool refVal_silent;
            ok &= ModelBase::fromJson(fieldValue, refVal_silent);
            setSilent(refVal_silent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("catchVariable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("catchVariable"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_catchVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_catchVariable);
            setCatchVariable(refVal_catchVariable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeSilent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeSilent"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeSilent;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeSilent);
            setSpaceBeforeSilent(refVal_spaceBeforeSilent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("catchBlock")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("catchBlock"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatementBlock_271> refVal_catchBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_catchBlock);
            setCatchBlock(refVal_catchBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterCatch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterCatch"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterCatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterCatch);
            setSpaceAfterCatch(refVal_spaceAfterCatch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPStatementTry_1523_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StandardTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardType"), m_StandardType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeName"), m_r_typeName));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_SilentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("silent"), m_Silent));
    }
    if(m_CatchVariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("catchVariable"), m_CatchVariable));
    }
    if(m_SpaceBeforeSilentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeSilent"), m_SpaceBeforeSilent));
    }
    if(m_CatchBlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("catchBlock"), m_CatchBlock));
    }
    if(m_SpaceAfterCatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterCatch"), m_SpaceAfterCatch));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPStatementTry_1523_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("standardType")))
    {
        utility::string_t refVal_standardType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardType")), refVal_standardType );
        setStandardType(refVal_standardType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeName")))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeName")), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        std::shared_ptr<BTPStatementBlock_271> refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("silent")))
    {
        bool refVal_silent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("silent")), refVal_silent );
        setSilent(refVal_silent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("catchVariable")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_catchVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("catchVariable")), refVal_catchVariable );
        setCatchVariable(refVal_catchVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeSilent")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeSilent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeSilent")), refVal_spaceBeforeSilent );
        setSpaceBeforeSilent(refVal_spaceBeforeSilent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("catchBlock")))
    {
        std::shared_ptr<BTPStatementBlock_271> refVal_catchBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("catchBlock")), refVal_catchBlock );
        setCatchBlock(refVal_catchBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterCatch")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterCatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterCatch")), refVal_spaceAfterCatch );
        setSpaceAfterCatch(refVal_spaceAfterCatch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTPStatementTry_1523_allOf::getStandardType() const
{
    return m_StandardType;
}

void BTPStatementTry_1523_allOf::setStandardType(const utility::string_t& value)
{
    m_StandardType = value;
    m_StandardTypeIsSet = true;
}

bool BTPStatementTry_1523_allOf::standardTypeIsSet() const
{
    return m_StandardTypeIsSet;
}

void BTPStatementTry_1523_allOf::unsetStandardType()
{
    m_StandardTypeIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPStatementTry_1523_allOf::getName() const
{
    return m_Name;
}

void BTPStatementTry_1523_allOf::setName(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPStatementTry_1523_allOf::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPStatementTry_1523_allOf::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTPStatementTry_1523_allOf::getRTypeName() const
{
    return m_r_typeName;
}

void BTPStatementTry_1523_allOf::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool BTPStatementTry_1523_allOf::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void BTPStatementTry_1523_allOf::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
std::shared_ptr<BTPStatementBlock_271> BTPStatementTry_1523_allOf::getBody() const
{
    return m_Body;
}

void BTPStatementTry_1523_allOf::setBody(const std::shared_ptr<BTPStatementBlock_271>& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool BTPStatementTry_1523_allOf::bodyIsSet() const
{
    return m_BodyIsSet;
}

void BTPStatementTry_1523_allOf::unsetBody()
{
    m_BodyIsSet = false;
}
bool BTPStatementTry_1523_allOf::isSilent() const
{
    return m_Silent;
}

void BTPStatementTry_1523_allOf::setSilent(bool value)
{
    m_Silent = value;
    m_SilentIsSet = true;
}

bool BTPStatementTry_1523_allOf::silentIsSet() const
{
    return m_SilentIsSet;
}

void BTPStatementTry_1523_allOf::unsetSilent()
{
    m_SilentIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPStatementTry_1523_allOf::getCatchVariable() const
{
    return m_CatchVariable;
}

void BTPStatementTry_1523_allOf::setCatchVariable(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_CatchVariable = value;
    m_CatchVariableIsSet = true;
}

bool BTPStatementTry_1523_allOf::catchVariableIsSet() const
{
    return m_CatchVariableIsSet;
}

void BTPStatementTry_1523_allOf::unsetCatchVariable()
{
    m_CatchVariableIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementTry_1523_allOf::getSpaceBeforeSilent() const
{
    return m_SpaceBeforeSilent;
}

void BTPStatementTry_1523_allOf::setSpaceBeforeSilent(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeSilent = value;
    m_SpaceBeforeSilentIsSet = true;
}

bool BTPStatementTry_1523_allOf::spaceBeforeSilentIsSet() const
{
    return m_SpaceBeforeSilentIsSet;
}

void BTPStatementTry_1523_allOf::unsetSpaceBeforeSilent()
{
    m_SpaceBeforeSilentIsSet = false;
}
std::shared_ptr<BTPStatementBlock_271> BTPStatementTry_1523_allOf::getCatchBlock() const
{
    return m_CatchBlock;
}

void BTPStatementTry_1523_allOf::setCatchBlock(const std::shared_ptr<BTPStatementBlock_271>& value)
{
    m_CatchBlock = value;
    m_CatchBlockIsSet = true;
}

bool BTPStatementTry_1523_allOf::catchBlockIsSet() const
{
    return m_CatchBlockIsSet;
}

void BTPStatementTry_1523_allOf::unsetCatchBlock()
{
    m_CatchBlockIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementTry_1523_allOf::getSpaceAfterCatch() const
{
    return m_SpaceAfterCatch;
}

void BTPStatementTry_1523_allOf::setSpaceAfterCatch(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterCatch = value;
    m_SpaceAfterCatchIsSet = true;
}

bool BTPStatementTry_1523_allOf::spaceAfterCatchIsSet() const
{
    return m_SpaceAfterCatchIsSet;
}

void BTPStatementTry_1523_allOf::unsetSpaceAfterCatch()
{
    m_SpaceAfterCatchIsSet = false;
}
utility::string_t BTPStatementTry_1523_allOf::getBtType() const
{
    return m_BtType;
}

void BTPStatementTry_1523_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPStatementTry_1523_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPStatementTry_1523_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


