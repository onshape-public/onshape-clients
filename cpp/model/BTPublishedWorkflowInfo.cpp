/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPublishedWorkflowInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPublishedWorkflowInfo::BTPublishedWorkflowInfo()
{
    m_ActiveState = 0;
    m_ActiveStateIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ImageSrc = utility::conversions::to_string_t("");
    m_ImageSrcIsSet = false;
    m_IsObsoletion = false;
    m_IsObsoletionIsSet = false;
    m_IsPickable = false;
    m_IsPickableIsSet = false;
    m_Json = utility::conversions::to_string_t("");
    m_JsonIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ObjectType = 0;
    m_ObjectTypeIsSet = false;
    m_OwnerType = 0;
    m_OwnerTypeIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
}

BTPublishedWorkflowInfo::~BTPublishedWorkflowInfo()
{
}

void BTPublishedWorkflowInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTPublishedWorkflowInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActiveStateIsSet)
    {
        val[utility::conversions::to_string_t("activeState")] = ModelBase::toJson(m_ActiveState);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ImageSrcIsSet)
    {
        val[utility::conversions::to_string_t("imageSrc")] = ModelBase::toJson(m_ImageSrc);
    }
    if(m_IsObsoletionIsSet)
    {
        val[utility::conversions::to_string_t("isObsoletion")] = ModelBase::toJson(m_IsObsoletion);
    }
    if(m_IsPickableIsSet)
    {
        val[utility::conversions::to_string_t("isPickable")] = ModelBase::toJson(m_IsPickable);
    }
    if(m_JsonIsSet)
    {
        val[utility::conversions::to_string_t("json")] = ModelBase::toJson(m_Json);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ObjectTypeIsSet)
    {
        val[utility::conversions::to_string_t("objectType")] = ModelBase::toJson(m_ObjectType);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }

    return val;
}

bool BTPublishedWorkflowInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("activeState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("activeState"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_activeState;
            ok &= ModelBase::fromJson(fieldValue, refVal_activeState);
            setActiveState(refVal_activeState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imageSrc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imageSrc"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_imageSrc;
            ok &= ModelBase::fromJson(fieldValue, refVal_imageSrc);
            setImageSrc(refVal_imageSrc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isObsoletion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isObsoletion"));
        if(!fieldValue.is_null())
        {
            bool refVal_isObsoletion;
            ok &= ModelBase::fromJson(fieldValue, refVal_isObsoletion);
            setIsObsoletion(refVal_isObsoletion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPickable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPickable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPickable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPickable);
            setIsPickable(refVal_isPickable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("json")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("json"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_json;
            ok &= ModelBase::fromJson(fieldValue, refVal_json);
            setJson(refVal_json);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objectType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_objectType;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectType);
            setObjectType(refVal_objectType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    return ok;
}

void BTPublishedWorkflowInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ActiveStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("activeState"), m_ActiveState));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ImageSrcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageSrc"), m_ImageSrc));
    }
    if(m_IsObsoletionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isObsoletion"), m_IsObsoletion));
    }
    if(m_IsPickableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPickable"), m_IsPickable));
    }
    if(m_JsonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("json"), m_Json));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ObjectTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectType"), m_ObjectType));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
}

bool BTPublishedWorkflowInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("activeState")))
    {
        int32_t refVal_activeState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("activeState")), refVal_activeState );
        setActiveState(refVal_activeState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageSrc")))
    {
        utility::string_t refVal_imageSrc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageSrc")), refVal_imageSrc );
        setImageSrc(refVal_imageSrc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isObsoletion")))
    {
        bool refVal_isObsoletion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isObsoletion")), refVal_isObsoletion );
        setIsObsoletion(refVal_isObsoletion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPickable")))
    {
        bool refVal_isPickable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPickable")), refVal_isPickable );
        setIsPickable(refVal_isPickable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("json")))
    {
        utility::string_t refVal_json;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("json")), refVal_json );
        setJson(refVal_json);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectType")))
    {
        int32_t refVal_objectType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectType")), refVal_objectType );
        setObjectType(refVal_objectType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        int32_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    return ok;
}

int32_t BTPublishedWorkflowInfo::getActiveState() const
{
    return m_ActiveState;
}

void BTPublishedWorkflowInfo::setActiveState(int32_t value)
{
    m_ActiveState = value;
    m_ActiveStateIsSet = true;
}

bool BTPublishedWorkflowInfo::activeStateIsSet() const
{
    return m_ActiveStateIsSet;
}

void BTPublishedWorkflowInfo::unsetActiveState()
{
    m_ActiveStateIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTPublishedWorkflowInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTPublishedWorkflowInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTPublishedWorkflowInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getDescription() const
{
    return m_Description;
}

void BTPublishedWorkflowInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTPublishedWorkflowInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTPublishedWorkflowInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTPublishedWorkflowInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTPublishedWorkflowInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTPublishedWorkflowInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getElementId() const
{
    return m_ElementId;
}

void BTPublishedWorkflowInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTPublishedWorkflowInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTPublishedWorkflowInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getId() const
{
    return m_Id;
}

void BTPublishedWorkflowInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTPublishedWorkflowInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTPublishedWorkflowInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getImageSrc() const
{
    return m_ImageSrc;
}

void BTPublishedWorkflowInfo::setImageSrc(const utility::string_t& value)
{
    m_ImageSrc = value;
    m_ImageSrcIsSet = true;
}

bool BTPublishedWorkflowInfo::imageSrcIsSet() const
{
    return m_ImageSrcIsSet;
}

void BTPublishedWorkflowInfo::unsetImageSrc()
{
    m_ImageSrcIsSet = false;
}
bool BTPublishedWorkflowInfo::isIsObsoletion() const
{
    return m_IsObsoletion;
}

void BTPublishedWorkflowInfo::setIsObsoletion(bool value)
{
    m_IsObsoletion = value;
    m_IsObsoletionIsSet = true;
}

bool BTPublishedWorkflowInfo::isObsoletionIsSet() const
{
    return m_IsObsoletionIsSet;
}

void BTPublishedWorkflowInfo::unsetIsObsoletion()
{
    m_IsObsoletionIsSet = false;
}
bool BTPublishedWorkflowInfo::isIsPickable() const
{
    return m_IsPickable;
}

void BTPublishedWorkflowInfo::setIsPickable(bool value)
{
    m_IsPickable = value;
    m_IsPickableIsSet = true;
}

bool BTPublishedWorkflowInfo::isPickableIsSet() const
{
    return m_IsPickableIsSet;
}

void BTPublishedWorkflowInfo::unsetIsPickable()
{
    m_IsPickableIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getJson() const
{
    return m_Json;
}

void BTPublishedWorkflowInfo::setJson(const utility::string_t& value)
{
    m_Json = value;
    m_JsonIsSet = true;
}

bool BTPublishedWorkflowInfo::jsonIsSet() const
{
    return m_JsonIsSet;
}

void BTPublishedWorkflowInfo::unsetJson()
{
    m_JsonIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getName() const
{
    return m_Name;
}

void BTPublishedWorkflowInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPublishedWorkflowInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPublishedWorkflowInfo::unsetName()
{
    m_NameIsSet = false;
}
int32_t BTPublishedWorkflowInfo::getObjectType() const
{
    return m_ObjectType;
}

void BTPublishedWorkflowInfo::setObjectType(int32_t value)
{
    m_ObjectType = value;
    m_ObjectTypeIsSet = true;
}

bool BTPublishedWorkflowInfo::objectTypeIsSet() const
{
    return m_ObjectTypeIsSet;
}

void BTPublishedWorkflowInfo::unsetObjectType()
{
    m_ObjectTypeIsSet = false;
}
int32_t BTPublishedWorkflowInfo::getOwnerType() const
{
    return m_OwnerType;
}

void BTPublishedWorkflowInfo::setOwnerType(int32_t value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTPublishedWorkflowInfo::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTPublishedWorkflowInfo::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
utility::string_t BTPublishedWorkflowInfo::getVersionId() const
{
    return m_VersionId;
}

void BTPublishedWorkflowInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTPublishedWorkflowInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTPublishedWorkflowInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
}
}
}
}


