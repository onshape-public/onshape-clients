/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPModuleId_235.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPModuleId_235::BTPModuleId_235()
{
    m_ExternalDocumentWithVersionAndElementIdIsSet = false;
    m_ElementImport = false;
    m_ElementImportIsSet = false;
    m_ImportedElementId = utility::conversions::to_string_t("");
    m_ImportedElementIdIsSet = false;
    m_VersionAndMicroversion = utility::conversions::to_string_t("");
    m_VersionAndMicroversionIsSet = false;
    m_ExternalImport = false;
    m_ExternalImportIsSet = false;
    m_ImportedDocumentId = utility::conversions::to_string_t("");
    m_ImportedDocumentIdIsSet = false;
    m_Legacy = false;
    m_LegacyIsSet = false;
    m_PathPotentiallyValid = false;
    m_PathPotentiallyValidIsSet = false;
    m_VersionPotentiallyValid = false;
    m_VersionPotentiallyValidIsSet = false;
    m_ValidLegacyVersion = false;
    m_ValidLegacyVersionIsSet = false;
    m_PathVersion = utility::conversions::to_string_t("");
    m_PathVersionIsSet = false;
    m_ImportedVersionId = utility::conversions::to_string_t("");
    m_ImportedVersionIdIsSet = false;
    m_PotentiallyValid = false;
    m_PotentiallyValidIsSet = false;
    m_StandardLibraryCommon = false;
    m_StandardLibraryCommonIsSet = false;
    m_ExternalDocumentWithVersionIsSet = false;
    m_DbimportString = utility::conversions::to_string_t("");
    m_DbimportStringIsSet = false;
    m_StandardLibrary = false;
    m_StandardLibraryIsSet = false;
    m_Microversion = utility::conversions::to_string_t("");
    m_MicroversionIsSet = false;
    m_SpaceBeforePathIsSet = false;
    m_SpaceAfterPathIsSet = false;
    m_SpaceBeforeVersionIsSet = false;
    m_SpaceAfterVersionIsSet = false;
    m_VersionIsSet = false;
    m_PathIsSet = false;
}

BTPModuleId_235::~BTPModuleId_235()
{
}

void BTPModuleId_235::validate()
{
    // TODO: implement validation
}

web::json::value BTPModuleId_235::toJson() const
{
    web::json::value val = this->BTPNode_7::toJson();
    
    if(m_ExternalDocumentWithVersionAndElementIdIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")] = ModelBase::toJson(m_ExternalDocumentWithVersionAndElementId);
    }
    if(m_ElementImportIsSet)
    {
        val[utility::conversions::to_string_t("elementImport")] = ModelBase::toJson(m_ElementImport);
    }
    if(m_ImportedElementIdIsSet)
    {
        val[utility::conversions::to_string_t("importedElementId")] = ModelBase::toJson(m_ImportedElementId);
    }
    if(m_VersionAndMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("versionAndMicroversion")] = ModelBase::toJson(m_VersionAndMicroversion);
    }
    if(m_ExternalImportIsSet)
    {
        val[utility::conversions::to_string_t("externalImport")] = ModelBase::toJson(m_ExternalImport);
    }
    if(m_ImportedDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("importedDocumentId")] = ModelBase::toJson(m_ImportedDocumentId);
    }
    if(m_LegacyIsSet)
    {
        val[utility::conversions::to_string_t("legacy")] = ModelBase::toJson(m_Legacy);
    }
    if(m_PathPotentiallyValidIsSet)
    {
        val[utility::conversions::to_string_t("pathPotentiallyValid")] = ModelBase::toJson(m_PathPotentiallyValid);
    }
    if(m_VersionPotentiallyValidIsSet)
    {
        val[utility::conversions::to_string_t("versionPotentiallyValid")] = ModelBase::toJson(m_VersionPotentiallyValid);
    }
    if(m_ValidLegacyVersionIsSet)
    {
        val[utility::conversions::to_string_t("validLegacyVersion")] = ModelBase::toJson(m_ValidLegacyVersion);
    }
    if(m_PathVersionIsSet)
    {
        val[utility::conversions::to_string_t("pathVersion")] = ModelBase::toJson(m_PathVersion);
    }
    if(m_ImportedVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("importedVersionId")] = ModelBase::toJson(m_ImportedVersionId);
    }
    if(m_PotentiallyValidIsSet)
    {
        val[utility::conversions::to_string_t("potentiallyValid")] = ModelBase::toJson(m_PotentiallyValid);
    }
    if(m_StandardLibraryCommonIsSet)
    {
        val[utility::conversions::to_string_t("standardLibraryCommon")] = ModelBase::toJson(m_StandardLibraryCommon);
    }
    if(m_ExternalDocumentWithVersionIsSet)
    {
        val[utility::conversions::to_string_t("externalDocumentWithVersion")] = ModelBase::toJson(m_ExternalDocumentWithVersion);
    }
    if(m_DbimportStringIsSet)
    {
        val[utility::conversions::to_string_t("dbimportString")] = ModelBase::toJson(m_DbimportString);
    }
    if(m_StandardLibraryIsSet)
    {
        val[utility::conversions::to_string_t("standardLibrary")] = ModelBase::toJson(m_StandardLibrary);
    }
    if(m_MicroversionIsSet)
    {
        val[utility::conversions::to_string_t("microversion")] = ModelBase::toJson(m_Microversion);
    }
    if(m_SpaceBeforePathIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforePath")] = ModelBase::toJson(m_SpaceBeforePath);
    }
    if(m_SpaceAfterPathIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterPath")] = ModelBase::toJson(m_SpaceAfterPath);
    }
    if(m_SpaceBeforeVersionIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeVersion")] = ModelBase::toJson(m_SpaceBeforeVersion);
    }
    if(m_SpaceAfterVersionIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterVersion")] = ModelBase::toJson(m_SpaceAfterVersion);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }

    return val;
}

bool BTPModuleId_235::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPNode_7::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentWithVersionAndElementId> refVal_externalDocumentWithVersionAndElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentWithVersionAndElementId);
            setExternalDocumentWithVersionAndElementId(refVal_externalDocumentWithVersionAndElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementImport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementImport"));
        if(!fieldValue.is_null())
        {
            bool refVal_elementImport;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementImport);
            setElementImport(refVal_elementImport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importedElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importedElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importedElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_importedElementId);
            setImportedElementId(refVal_importedElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionAndMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionAndMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionAndMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionAndMicroversion);
            setVersionAndMicroversion(refVal_versionAndMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalImport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalImport"));
        if(!fieldValue.is_null())
        {
            bool refVal_externalImport;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalImport);
            setExternalImport(refVal_externalImport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importedDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importedDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importedDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_importedDocumentId);
            setImportedDocumentId(refVal_importedDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("legacy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("legacy"));
        if(!fieldValue.is_null())
        {
            bool refVal_legacy;
            ok &= ModelBase::fromJson(fieldValue, refVal_legacy);
            setLegacy(refVal_legacy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pathPotentiallyValid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pathPotentiallyValid"));
        if(!fieldValue.is_null())
        {
            bool refVal_pathPotentiallyValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_pathPotentiallyValid);
            setPathPotentiallyValid(refVal_pathPotentiallyValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionPotentiallyValid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionPotentiallyValid"));
        if(!fieldValue.is_null())
        {
            bool refVal_versionPotentiallyValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionPotentiallyValid);
            setVersionPotentiallyValid(refVal_versionPotentiallyValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validLegacyVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validLegacyVersion"));
        if(!fieldValue.is_null())
        {
            bool refVal_validLegacyVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_validLegacyVersion);
            setValidLegacyVersion(refVal_validLegacyVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pathVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pathVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pathVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_pathVersion);
            setPathVersion(refVal_pathVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importedVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importedVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importedVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_importedVersionId);
            setImportedVersionId(refVal_importedVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("potentiallyValid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("potentiallyValid"));
        if(!fieldValue.is_null())
        {
            bool refVal_potentiallyValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_potentiallyValid);
            setPotentiallyValid(refVal_potentiallyValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardLibraryCommon")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardLibraryCommon"));
        if(!fieldValue.is_null())
        {
            bool refVal_standardLibraryCommon;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardLibraryCommon);
            setStandardLibraryCommon(refVal_standardLibraryCommon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalDocumentWithVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("externalDocumentWithVersion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentWithVersionId> refVal_externalDocumentWithVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_externalDocumentWithVersion);
            setExternalDocumentWithVersion(refVal_externalDocumentWithVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dbimportString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dbimportString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dbimportString;
            ok &= ModelBase::fromJson(fieldValue, refVal_dbimportString);
            setDbimportString(refVal_dbimportString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardLibrary")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardLibrary"));
        if(!fieldValue.is_null())
        {
            bool refVal_standardLibrary;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardLibrary);
            setStandardLibrary(refVal_standardLibrary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversion);
            setMicroversion(refVal_microversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforePath")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforePath"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforePath;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforePath);
            setSpaceBeforePath(refVal_spaceBeforePath);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterPath")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterPath"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterPath;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterPath);
            setSpaceAfterPath(refVal_spaceAfterPath);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeVersion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeVersion);
            setSpaceBeforeVersion(refVal_spaceBeforeVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterVersion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterVersion);
            setSpaceAfterVersion(refVal_spaceAfterVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralString_259> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("path"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralString_259> refVal_path;
            ok &= ModelBase::fromJson(fieldValue, refVal_path);
            setPath(refVal_path);
        }
    }
    return ok;
}

void BTPModuleId_235::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_ExternalDocumentWithVersionAndElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersionAndElementId"), m_ExternalDocumentWithVersionAndElementId));
    }
    if(m_ElementImportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementImport"), m_ElementImport));
    }
    if(m_ImportedElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importedElementId"), m_ImportedElementId));
    }
    if(m_VersionAndMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionAndMicroversion"), m_VersionAndMicroversion));
    }
    if(m_ExternalImportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalImport"), m_ExternalImport));
    }
    if(m_ImportedDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importedDocumentId"), m_ImportedDocumentId));
    }
    if(m_LegacyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("legacy"), m_Legacy));
    }
    if(m_PathPotentiallyValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pathPotentiallyValid"), m_PathPotentiallyValid));
    }
    if(m_VersionPotentiallyValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionPotentiallyValid"), m_VersionPotentiallyValid));
    }
    if(m_ValidLegacyVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validLegacyVersion"), m_ValidLegacyVersion));
    }
    if(m_PathVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pathVersion"), m_PathVersion));
    }
    if(m_ImportedVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importedVersionId"), m_ImportedVersionId));
    }
    if(m_PotentiallyValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("potentiallyValid"), m_PotentiallyValid));
    }
    if(m_StandardLibraryCommonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardLibraryCommon"), m_StandardLibraryCommon));
    }
    if(m_ExternalDocumentWithVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("externalDocumentWithVersion"), m_ExternalDocumentWithVersion));
    }
    if(m_DbimportStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dbimportString"), m_DbimportString));
    }
    if(m_StandardLibraryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardLibrary"), m_StandardLibrary));
    }
    if(m_MicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversion"), m_Microversion));
    }
    if(m_SpaceBeforePathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforePath"), m_SpaceBeforePath));
    }
    if(m_SpaceAfterPathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterPath"), m_SpaceAfterPath));
    }
    if(m_SpaceBeforeVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeVersion"), m_SpaceBeforeVersion));
    }
    if(m_SpaceAfterVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterVersion"), m_SpaceAfterVersion));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
}

bool BTPModuleId_235::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")))
    {
        std::shared_ptr<BTDocumentWithVersionAndElementId> refVal_externalDocumentWithVersionAndElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersionAndElementId")), refVal_externalDocumentWithVersionAndElementId );
        setExternalDocumentWithVersionAndElementId(refVal_externalDocumentWithVersionAndElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementImport")))
    {
        bool refVal_elementImport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementImport")), refVal_elementImport );
        setElementImport(refVal_elementImport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importedElementId")))
    {
        utility::string_t refVal_importedElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importedElementId")), refVal_importedElementId );
        setImportedElementId(refVal_importedElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionAndMicroversion")))
    {
        utility::string_t refVal_versionAndMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionAndMicroversion")), refVal_versionAndMicroversion );
        setVersionAndMicroversion(refVal_versionAndMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalImport")))
    {
        bool refVal_externalImport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalImport")), refVal_externalImport );
        setExternalImport(refVal_externalImport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importedDocumentId")))
    {
        utility::string_t refVal_importedDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importedDocumentId")), refVal_importedDocumentId );
        setImportedDocumentId(refVal_importedDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("legacy")))
    {
        bool refVal_legacy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("legacy")), refVal_legacy );
        setLegacy(refVal_legacy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pathPotentiallyValid")))
    {
        bool refVal_pathPotentiallyValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pathPotentiallyValid")), refVal_pathPotentiallyValid );
        setPathPotentiallyValid(refVal_pathPotentiallyValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionPotentiallyValid")))
    {
        bool refVal_versionPotentiallyValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionPotentiallyValid")), refVal_versionPotentiallyValid );
        setVersionPotentiallyValid(refVal_versionPotentiallyValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validLegacyVersion")))
    {
        bool refVal_validLegacyVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validLegacyVersion")), refVal_validLegacyVersion );
        setValidLegacyVersion(refVal_validLegacyVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pathVersion")))
    {
        utility::string_t refVal_pathVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pathVersion")), refVal_pathVersion );
        setPathVersion(refVal_pathVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importedVersionId")))
    {
        utility::string_t refVal_importedVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importedVersionId")), refVal_importedVersionId );
        setImportedVersionId(refVal_importedVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("potentiallyValid")))
    {
        bool refVal_potentiallyValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("potentiallyValid")), refVal_potentiallyValid );
        setPotentiallyValid(refVal_potentiallyValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardLibraryCommon")))
    {
        bool refVal_standardLibraryCommon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardLibraryCommon")), refVal_standardLibraryCommon );
        setStandardLibraryCommon(refVal_standardLibraryCommon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalDocumentWithVersion")))
    {
        std::shared_ptr<BTDocumentWithVersionId> refVal_externalDocumentWithVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("externalDocumentWithVersion")), refVal_externalDocumentWithVersion );
        setExternalDocumentWithVersion(refVal_externalDocumentWithVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dbimportString")))
    {
        utility::string_t refVal_dbimportString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dbimportString")), refVal_dbimportString );
        setDbimportString(refVal_dbimportString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardLibrary")))
    {
        bool refVal_standardLibrary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardLibrary")), refVal_standardLibrary );
        setStandardLibrary(refVal_standardLibrary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversion")))
    {
        utility::string_t refVal_microversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversion")), refVal_microversion );
        setMicroversion(refVal_microversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforePath")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforePath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforePath")), refVal_spaceBeforePath );
        setSpaceBeforePath(refVal_spaceBeforePath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterPath")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterPath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterPath")), refVal_spaceAfterPath );
        setSpaceAfterPath(refVal_spaceAfterPath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeVersion")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeVersion")), refVal_spaceBeforeVersion );
        setSpaceBeforeVersion(refVal_spaceBeforeVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterVersion")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterVersion")), refVal_spaceAfterVersion );
        setSpaceAfterVersion(refVal_spaceAfterVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<BTPLiteralString_259> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        std::shared_ptr<BTPLiteralString_259> refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    return ok;
}

std::shared_ptr<BTDocumentWithVersionAndElementId> BTPModuleId_235::getExternalDocumentWithVersionAndElementId() const
{
    return m_ExternalDocumentWithVersionAndElementId;
}

void BTPModuleId_235::setExternalDocumentWithVersionAndElementId(const std::shared_ptr<BTDocumentWithVersionAndElementId>& value)
{
    m_ExternalDocumentWithVersionAndElementId = value;
    m_ExternalDocumentWithVersionAndElementIdIsSet = true;
}

bool BTPModuleId_235::externalDocumentWithVersionAndElementIdIsSet() const
{
    return m_ExternalDocumentWithVersionAndElementIdIsSet;
}

void BTPModuleId_235::unsetExternalDocumentWithVersionAndElementId()
{
    m_ExternalDocumentWithVersionAndElementIdIsSet = false;
}
bool BTPModuleId_235::isElementImport() const
{
    return m_ElementImport;
}

void BTPModuleId_235::setElementImport(bool value)
{
    m_ElementImport = value;
    m_ElementImportIsSet = true;
}

bool BTPModuleId_235::elementImportIsSet() const
{
    return m_ElementImportIsSet;
}

void BTPModuleId_235::unsetElementImport()
{
    m_ElementImportIsSet = false;
}
utility::string_t BTPModuleId_235::getImportedElementId() const
{
    return m_ImportedElementId;
}

void BTPModuleId_235::setImportedElementId(const utility::string_t& value)
{
    m_ImportedElementId = value;
    m_ImportedElementIdIsSet = true;
}

bool BTPModuleId_235::importedElementIdIsSet() const
{
    return m_ImportedElementIdIsSet;
}

void BTPModuleId_235::unsetImportedElementId()
{
    m_ImportedElementIdIsSet = false;
}
utility::string_t BTPModuleId_235::getVersionAndMicroversion() const
{
    return m_VersionAndMicroversion;
}

void BTPModuleId_235::setVersionAndMicroversion(const utility::string_t& value)
{
    m_VersionAndMicroversion = value;
    m_VersionAndMicroversionIsSet = true;
}

bool BTPModuleId_235::versionAndMicroversionIsSet() const
{
    return m_VersionAndMicroversionIsSet;
}

void BTPModuleId_235::unsetVersionAndMicroversion()
{
    m_VersionAndMicroversionIsSet = false;
}
bool BTPModuleId_235::isExternalImport() const
{
    return m_ExternalImport;
}

void BTPModuleId_235::setExternalImport(bool value)
{
    m_ExternalImport = value;
    m_ExternalImportIsSet = true;
}

bool BTPModuleId_235::externalImportIsSet() const
{
    return m_ExternalImportIsSet;
}

void BTPModuleId_235::unsetExternalImport()
{
    m_ExternalImportIsSet = false;
}
utility::string_t BTPModuleId_235::getImportedDocumentId() const
{
    return m_ImportedDocumentId;
}

void BTPModuleId_235::setImportedDocumentId(const utility::string_t& value)
{
    m_ImportedDocumentId = value;
    m_ImportedDocumentIdIsSet = true;
}

bool BTPModuleId_235::importedDocumentIdIsSet() const
{
    return m_ImportedDocumentIdIsSet;
}

void BTPModuleId_235::unsetImportedDocumentId()
{
    m_ImportedDocumentIdIsSet = false;
}
bool BTPModuleId_235::isLegacy() const
{
    return m_Legacy;
}

void BTPModuleId_235::setLegacy(bool value)
{
    m_Legacy = value;
    m_LegacyIsSet = true;
}

bool BTPModuleId_235::legacyIsSet() const
{
    return m_LegacyIsSet;
}

void BTPModuleId_235::unsetLegacy()
{
    m_LegacyIsSet = false;
}
bool BTPModuleId_235::isPathPotentiallyValid() const
{
    return m_PathPotentiallyValid;
}

void BTPModuleId_235::setPathPotentiallyValid(bool value)
{
    m_PathPotentiallyValid = value;
    m_PathPotentiallyValidIsSet = true;
}

bool BTPModuleId_235::pathPotentiallyValidIsSet() const
{
    return m_PathPotentiallyValidIsSet;
}

void BTPModuleId_235::unsetPathPotentiallyValid()
{
    m_PathPotentiallyValidIsSet = false;
}
bool BTPModuleId_235::isVersionPotentiallyValid() const
{
    return m_VersionPotentiallyValid;
}

void BTPModuleId_235::setVersionPotentiallyValid(bool value)
{
    m_VersionPotentiallyValid = value;
    m_VersionPotentiallyValidIsSet = true;
}

bool BTPModuleId_235::versionPotentiallyValidIsSet() const
{
    return m_VersionPotentiallyValidIsSet;
}

void BTPModuleId_235::unsetVersionPotentiallyValid()
{
    m_VersionPotentiallyValidIsSet = false;
}
bool BTPModuleId_235::isValidLegacyVersion() const
{
    return m_ValidLegacyVersion;
}

void BTPModuleId_235::setValidLegacyVersion(bool value)
{
    m_ValidLegacyVersion = value;
    m_ValidLegacyVersionIsSet = true;
}

bool BTPModuleId_235::validLegacyVersionIsSet() const
{
    return m_ValidLegacyVersionIsSet;
}

void BTPModuleId_235::unsetValidLegacyVersion()
{
    m_ValidLegacyVersionIsSet = false;
}
utility::string_t BTPModuleId_235::getPathVersion() const
{
    return m_PathVersion;
}

void BTPModuleId_235::setPathVersion(const utility::string_t& value)
{
    m_PathVersion = value;
    m_PathVersionIsSet = true;
}

bool BTPModuleId_235::pathVersionIsSet() const
{
    return m_PathVersionIsSet;
}

void BTPModuleId_235::unsetPathVersion()
{
    m_PathVersionIsSet = false;
}
utility::string_t BTPModuleId_235::getImportedVersionId() const
{
    return m_ImportedVersionId;
}

void BTPModuleId_235::setImportedVersionId(const utility::string_t& value)
{
    m_ImportedVersionId = value;
    m_ImportedVersionIdIsSet = true;
}

bool BTPModuleId_235::importedVersionIdIsSet() const
{
    return m_ImportedVersionIdIsSet;
}

void BTPModuleId_235::unsetImportedVersionId()
{
    m_ImportedVersionIdIsSet = false;
}
bool BTPModuleId_235::isPotentiallyValid() const
{
    return m_PotentiallyValid;
}

void BTPModuleId_235::setPotentiallyValid(bool value)
{
    m_PotentiallyValid = value;
    m_PotentiallyValidIsSet = true;
}

bool BTPModuleId_235::potentiallyValidIsSet() const
{
    return m_PotentiallyValidIsSet;
}

void BTPModuleId_235::unsetPotentiallyValid()
{
    m_PotentiallyValidIsSet = false;
}
bool BTPModuleId_235::isStandardLibraryCommon() const
{
    return m_StandardLibraryCommon;
}

void BTPModuleId_235::setStandardLibraryCommon(bool value)
{
    m_StandardLibraryCommon = value;
    m_StandardLibraryCommonIsSet = true;
}

bool BTPModuleId_235::standardLibraryCommonIsSet() const
{
    return m_StandardLibraryCommonIsSet;
}

void BTPModuleId_235::unsetStandardLibraryCommon()
{
    m_StandardLibraryCommonIsSet = false;
}
std::shared_ptr<BTDocumentWithVersionId> BTPModuleId_235::getExternalDocumentWithVersion() const
{
    return m_ExternalDocumentWithVersion;
}

void BTPModuleId_235::setExternalDocumentWithVersion(const std::shared_ptr<BTDocumentWithVersionId>& value)
{
    m_ExternalDocumentWithVersion = value;
    m_ExternalDocumentWithVersionIsSet = true;
}

bool BTPModuleId_235::externalDocumentWithVersionIsSet() const
{
    return m_ExternalDocumentWithVersionIsSet;
}

void BTPModuleId_235::unsetExternalDocumentWithVersion()
{
    m_ExternalDocumentWithVersionIsSet = false;
}
utility::string_t BTPModuleId_235::getDbimportString() const
{
    return m_DbimportString;
}

void BTPModuleId_235::setDbimportString(const utility::string_t& value)
{
    m_DbimportString = value;
    m_DbimportStringIsSet = true;
}

bool BTPModuleId_235::dbimportStringIsSet() const
{
    return m_DbimportStringIsSet;
}

void BTPModuleId_235::unsetDbimportString()
{
    m_DbimportStringIsSet = false;
}
bool BTPModuleId_235::isStandardLibrary() const
{
    return m_StandardLibrary;
}

void BTPModuleId_235::setStandardLibrary(bool value)
{
    m_StandardLibrary = value;
    m_StandardLibraryIsSet = true;
}

bool BTPModuleId_235::standardLibraryIsSet() const
{
    return m_StandardLibraryIsSet;
}

void BTPModuleId_235::unsetStandardLibrary()
{
    m_StandardLibraryIsSet = false;
}
utility::string_t BTPModuleId_235::getMicroversion() const
{
    return m_Microversion;
}

void BTPModuleId_235::setMicroversion(const utility::string_t& value)
{
    m_Microversion = value;
    m_MicroversionIsSet = true;
}

bool BTPModuleId_235::microversionIsSet() const
{
    return m_MicroversionIsSet;
}

void BTPModuleId_235::unsetMicroversion()
{
    m_MicroversionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPModuleId_235::getSpaceBeforePath() const
{
    return m_SpaceBeforePath;
}

void BTPModuleId_235::setSpaceBeforePath(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforePath = value;
    m_SpaceBeforePathIsSet = true;
}

bool BTPModuleId_235::spaceBeforePathIsSet() const
{
    return m_SpaceBeforePathIsSet;
}

void BTPModuleId_235::unsetSpaceBeforePath()
{
    m_SpaceBeforePathIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPModuleId_235::getSpaceAfterPath() const
{
    return m_SpaceAfterPath;
}

void BTPModuleId_235::setSpaceAfterPath(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterPath = value;
    m_SpaceAfterPathIsSet = true;
}

bool BTPModuleId_235::spaceAfterPathIsSet() const
{
    return m_SpaceAfterPathIsSet;
}

void BTPModuleId_235::unsetSpaceAfterPath()
{
    m_SpaceAfterPathIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPModuleId_235::getSpaceBeforeVersion() const
{
    return m_SpaceBeforeVersion;
}

void BTPModuleId_235::setSpaceBeforeVersion(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeVersion = value;
    m_SpaceBeforeVersionIsSet = true;
}

bool BTPModuleId_235::spaceBeforeVersionIsSet() const
{
    return m_SpaceBeforeVersionIsSet;
}

void BTPModuleId_235::unsetSpaceBeforeVersion()
{
    m_SpaceBeforeVersionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPModuleId_235::getSpaceAfterVersion() const
{
    return m_SpaceAfterVersion;
}

void BTPModuleId_235::setSpaceAfterVersion(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterVersion = value;
    m_SpaceAfterVersionIsSet = true;
}

bool BTPModuleId_235::spaceAfterVersionIsSet() const
{
    return m_SpaceAfterVersionIsSet;
}

void BTPModuleId_235::unsetSpaceAfterVersion()
{
    m_SpaceAfterVersionIsSet = false;
}
std::shared_ptr<BTPLiteralString_259> BTPModuleId_235::getVersion() const
{
    return m_Version;
}

void BTPModuleId_235::setVersion(const std::shared_ptr<BTPLiteralString_259>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTPModuleId_235::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTPModuleId_235::unsetVersion()
{
    m_VersionIsSet = false;
}
std::shared_ptr<BTPLiteralString_259> BTPModuleId_235::getPath() const
{
    return m_Path;
}

void BTPModuleId_235::setPath(const std::shared_ptr<BTPLiteralString_259>& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool BTPModuleId_235::pathIsSet() const
{
    return m_PathIsSet;
}

void BTPModuleId_235::unsetPath()
{
    m_PathIsSet = false;
}
}
}
}
}


