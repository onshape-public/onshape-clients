/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelCoedge_1342.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelCoedge_1342::BTExportModelCoedge_1342()
{
    m_EdgeId = utility::conversions::to_string_t("");
    m_EdgeIdIsSet = false;
    m_Orientation = false;
    m_OrientationIsSet = false;
}

BTExportModelCoedge_1342::~BTExportModelCoedge_1342()
{
}

void BTExportModelCoedge_1342::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelCoedge_1342::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EdgeIdIsSet)
    {
        val[utility::conversions::to_string_t("edgeId")] = ModelBase::toJson(m_EdgeId);
    }
    if(m_OrientationIsSet)
    {
        val[utility::conversions::to_string_t("orientation")] = ModelBase::toJson(m_Orientation);
    }

    return val;
}

bool BTExportModelCoedge_1342::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("edgeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("edgeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_edgeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_edgeId);
            setEdgeId(refVal_edgeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orientation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("orientation"));
        if(!fieldValue.is_null())
        {
            bool refVal_orientation;
            ok &= ModelBase::fromJson(fieldValue, refVal_orientation);
            setOrientation(refVal_orientation);
        }
    }
    return ok;
}

void BTExportModelCoedge_1342::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EdgeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("edgeId"), m_EdgeId));
    }
    if(m_OrientationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("orientation"), m_Orientation));
    }
}

bool BTExportModelCoedge_1342::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("edgeId")))
    {
        utility::string_t refVal_edgeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("edgeId")), refVal_edgeId );
        setEdgeId(refVal_edgeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orientation")))
    {
        bool refVal_orientation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("orientation")), refVal_orientation );
        setOrientation(refVal_orientation);
    }
    return ok;
}

utility::string_t BTExportModelCoedge_1342::getEdgeId() const
{
    return m_EdgeId;
}

void BTExportModelCoedge_1342::setEdgeId(const utility::string_t& value)
{
    m_EdgeId = value;
    m_EdgeIdIsSet = true;
}

bool BTExportModelCoedge_1342::edgeIdIsSet() const
{
    return m_EdgeIdIsSet;
}

void BTExportModelCoedge_1342::unsetEdgeId()
{
    m_EdgeIdIsSet = false;
}
bool BTExportModelCoedge_1342::isOrientation() const
{
    return m_Orientation;
}

void BTExportModelCoedge_1342::setOrientation(bool value)
{
    m_Orientation = value;
    m_OrientationIsSet = true;
}

bool BTExportModelCoedge_1342::orientationIsSet() const
{
    return m_OrientationIsSet;
}

void BTExportModelCoedge_1342::unsetOrientation()
{
    m_OrientationIsSet = false;
}
}
}
}
}


