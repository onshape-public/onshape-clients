/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTRbacRoleInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTRbacRoleInfo::BTRbacRoleInfo()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PredefinedRole = 0;
    m_PredefinedRoleIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTRbacRoleInfo::~BTRbacRoleInfo()
{
}

void BTRbacRoleInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTRbacRoleInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t("active")] = ModelBase::toJson(m_Active);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PredefinedRoleIsSet)
    {
        val[utility::conversions::to_string_t("predefinedRole")] = ModelBase::toJson(m_PredefinedRole);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTRbacRoleInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("active"));
        if(!fieldValue.is_null())
        {
            bool refVal_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_active);
            setActive(refVal_active);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predefinedRole")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("predefinedRole"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_predefinedRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_predefinedRole);
            setPredefinedRole(refVal_predefinedRole);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTRbacRoleInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("active"), m_Active));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PredefinedRoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predefinedRole"), m_PredefinedRole));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTRbacRoleInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("active")))
    {
        bool refVal_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("active")), refVal_active );
        setActive(refVal_active);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predefinedRole")))
    {
        int32_t refVal_predefinedRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("predefinedRole")), refVal_predefinedRole );
        setPredefinedRole(refVal_predefinedRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

bool BTRbacRoleInfo::isActive() const
{
    return m_Active;
}

void BTRbacRoleInfo::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool BTRbacRoleInfo::activeIsSet() const
{
    return m_ActiveIsSet;
}

void BTRbacRoleInfo::unsetActive()
{
    m_ActiveIsSet = false;
}
utility::string_t BTRbacRoleInfo::getDescription() const
{
    return m_Description;
}

void BTRbacRoleInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTRbacRoleInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTRbacRoleInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTRbacRoleInfo::getHref() const
{
    return m_Href;
}

void BTRbacRoleInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTRbacRoleInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTRbacRoleInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTRbacRoleInfo::getId() const
{
    return m_Id;
}

void BTRbacRoleInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTRbacRoleInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTRbacRoleInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTRbacRoleInfo::getName() const
{
    return m_Name;
}

void BTRbacRoleInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTRbacRoleInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTRbacRoleInfo::unsetName()
{
    m_NameIsSet = false;
}
int32_t BTRbacRoleInfo::getPredefinedRole() const
{
    return m_PredefinedRole;
}

void BTRbacRoleInfo::setPredefinedRole(int32_t value)
{
    m_PredefinedRole = value;
    m_PredefinedRoleIsSet = true;
}

bool BTRbacRoleInfo::predefinedRoleIsSet() const
{
    return m_PredefinedRoleIsSet;
}

void BTRbacRoleInfo::unsetPredefinedRole()
{
    m_PredefinedRoleIsSet = false;
}
utility::string_t BTRbacRoleInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTRbacRoleInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTRbacRoleInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTRbacRoleInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


