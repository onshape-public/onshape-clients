/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFSValueMap_2062.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFSValueMap_2062::BTFSValueMap_2062()
{
    m_ConfigurationValueString = utility::conversions::to_string_t("");
    m_ConfigurationValueStringIsSet = false;
    m_FsvaluesKeyedByStringsIsSet = false;
    m_StandardTypeName = utility::conversions::to_string_t("");
    m_StandardTypeNameIsSet = false;
    m_TypeTag = utility::conversions::to_string_t("");
    m_TypeTagIsSet = false;
    m_ValueIsSet = false;
    m_ValueObjectIsSet = false;
}

BTFSValueMap_2062::~BTFSValueMap_2062()
{
}

void BTFSValueMap_2062::validate()
{
    // TODO: implement validation
}

web::json::value BTFSValueMap_2062::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConfigurationValueStringIsSet)
    {
        val[utility::conversions::to_string_t("configurationValueString")] = ModelBase::toJson(m_ConfigurationValueString);
    }
    if(m_FsvaluesKeyedByStringsIsSet)
    {
        val[utility::conversions::to_string_t("fsvaluesKeyedByStrings")] = ModelBase::toJson(m_FsvaluesKeyedByStrings);
    }
    if(m_StandardTypeNameIsSet)
    {
        val[utility::conversions::to_string_t("standardTypeName")] = ModelBase::toJson(m_StandardTypeName);
    }
    if(m_TypeTagIsSet)
    {
        val[utility::conversions::to_string_t("typeTag")] = ModelBase::toJson(m_TypeTag);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_ValueObjectIsSet)
    {
        val[utility::conversions::to_string_t("valueObject")] = ModelBase::toJson(m_ValueObject);
    }

    return val;
}

bool BTFSValueMap_2062::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("configurationValueString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationValueString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationValueString;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationValueString);
            setConfigurationValueString(refVal_configurationValueString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fsvaluesKeyedByStrings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fsvaluesKeyedByStrings"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> refVal_fsvaluesKeyedByStrings;
            ok &= ModelBase::fromJson(fieldValue, refVal_fsvaluesKeyedByStrings);
            setFsvaluesKeyedByStrings(refVal_fsvaluesKeyedByStrings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardTypeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardTypeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardTypeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardTypeName);
            setStandardTypeName(refVal_standardTypeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeTag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeTag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeTag);
            setTypeTag(refVal_typeTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTFSValueMapEntry_2077>> refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valueObject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valueObject"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_valueObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_valueObject);
            setValueObject(refVal_valueObject);
        }
    }
    return ok;
}

void BTFSValueMap_2062::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ConfigurationValueStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationValueString"), m_ConfigurationValueString));
    }
    if(m_FsvaluesKeyedByStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fsvaluesKeyedByStrings"), m_FsvaluesKeyedByStrings));
    }
    if(m_StandardTypeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardTypeName"), m_StandardTypeName));
    }
    if(m_TypeTagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeTag"), m_TypeTag));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_ValueObjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valueObject"), m_ValueObject));
    }
}

bool BTFSValueMap_2062::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("configurationValueString")))
    {
        utility::string_t refVal_configurationValueString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationValueString")), refVal_configurationValueString );
        setConfigurationValueString(refVal_configurationValueString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fsvaluesKeyedByStrings")))
    {
        std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> refVal_fsvaluesKeyedByStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fsvaluesKeyedByStrings")), refVal_fsvaluesKeyedByStrings );
        setFsvaluesKeyedByStrings(refVal_fsvaluesKeyedByStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardTypeName")))
    {
        utility::string_t refVal_standardTypeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardTypeName")), refVal_standardTypeName );
        setStandardTypeName(refVal_standardTypeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeTag")))
    {
        utility::string_t refVal_typeTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeTag")), refVal_typeTag );
        setTypeTag(refVal_typeTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        std::vector<std::shared_ptr<BTFSValueMapEntry_2077>> refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valueObject")))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_valueObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valueObject")), refVal_valueObject );
        setValueObject(refVal_valueObject);
    }
    return ok;
}

utility::string_t BTFSValueMap_2062::getConfigurationValueString() const
{
    return m_ConfigurationValueString;
}

void BTFSValueMap_2062::setConfigurationValueString(const utility::string_t& value)
{
    m_ConfigurationValueString = value;
    m_ConfigurationValueStringIsSet = true;
}

bool BTFSValueMap_2062::configurationValueStringIsSet() const
{
    return m_ConfigurationValueStringIsSet;
}

void BTFSValueMap_2062::unsetConfigurationValueString()
{
    m_ConfigurationValueStringIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& BTFSValueMap_2062::getFsvaluesKeyedByStrings()
{
    return m_FsvaluesKeyedByStrings;
}

void BTFSValueMap_2062::setFsvaluesKeyedByStrings(const std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& value)
{
    m_FsvaluesKeyedByStrings = value;
    m_FsvaluesKeyedByStringsIsSet = true;
}

bool BTFSValueMap_2062::fsvaluesKeyedByStringsIsSet() const
{
    return m_FsvaluesKeyedByStringsIsSet;
}

void BTFSValueMap_2062::unsetFsvaluesKeyedByStrings()
{
    m_FsvaluesKeyedByStringsIsSet = false;
}
utility::string_t BTFSValueMap_2062::getStandardTypeName() const
{
    return m_StandardTypeName;
}

void BTFSValueMap_2062::setStandardTypeName(const utility::string_t& value)
{
    m_StandardTypeName = value;
    m_StandardTypeNameIsSet = true;
}

bool BTFSValueMap_2062::standardTypeNameIsSet() const
{
    return m_StandardTypeNameIsSet;
}

void BTFSValueMap_2062::unsetStandardTypeName()
{
    m_StandardTypeNameIsSet = false;
}
utility::string_t BTFSValueMap_2062::getTypeTag() const
{
    return m_TypeTag;
}

void BTFSValueMap_2062::setTypeTag(const utility::string_t& value)
{
    m_TypeTag = value;
    m_TypeTagIsSet = true;
}

bool BTFSValueMap_2062::typeTagIsSet() const
{
    return m_TypeTagIsSet;
}

void BTFSValueMap_2062::unsetTypeTag()
{
    m_TypeTagIsSet = false;
}
std::vector<std::shared_ptr<BTFSValueMapEntry_2077>>& BTFSValueMap_2062::getValue()
{
    return m_Value;
}

void BTFSValueMap_2062::setValue(const std::vector<std::shared_ptr<BTFSValueMapEntry_2077>>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BTFSValueMap_2062::valueIsSet() const
{
    return m_ValueIsSet;
}

void BTFSValueMap_2062::unsetValue()
{
    m_ValueIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& BTFSValueMap_2062::getValueObject()
{
    return m_ValueObject;
}

void BTFSValueMap_2062::setValueObject(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_ValueObject = value;
    m_ValueObjectIsSet = true;
}

bool BTFSValueMap_2062::valueObjectIsSet() const
{
    return m_ValueObjectIsSet;
}

void BTFSValueMap_2062::unsetValueObject()
{
    m_ValueObjectIsSet = false;
}
}
}
}
}


