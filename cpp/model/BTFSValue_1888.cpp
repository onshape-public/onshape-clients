/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFSValue_1888.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFSValue_1888::BTFSValue_1888()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ConfigurationValueString = utility::conversions::to_string_t("");
    m_ConfigurationValueStringIsSet = false;
    m_StandardTypeName = utility::conversions::to_string_t("");
    m_StandardTypeNameIsSet = false;
    m_TypeTag = utility::conversions::to_string_t("");
    m_TypeTagIsSet = false;
    m_ValueObjectIsSet = false;
}

BTFSValue_1888::~BTFSValue_1888()
{
}

void BTFSValue_1888::validate()
{
    // TODO: implement validation
}

web::json::value BTFSValue_1888::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ConfigurationValueStringIsSet)
    {
        val[utility::conversions::to_string_t("configurationValueString")] = ModelBase::toJson(m_ConfigurationValueString);
    }
    if(m_StandardTypeNameIsSet)
    {
        val[utility::conversions::to_string_t("standardTypeName")] = ModelBase::toJson(m_StandardTypeName);
    }
    if(m_TypeTagIsSet)
    {
        val[utility::conversions::to_string_t("typeTag")] = ModelBase::toJson(m_TypeTag);
    }
    if(m_ValueObjectIsSet)
    {
        val[utility::conversions::to_string_t("valueObject")] = ModelBase::toJson(m_ValueObject);
    }

    return val;
}

bool BTFSValue_1888::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationValueString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationValueString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationValueString;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationValueString);
            setConfigurationValueString(refVal_configurationValueString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardTypeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardTypeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardTypeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardTypeName);
            setStandardTypeName(refVal_standardTypeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeTag")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeTag"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeTag);
            setTypeTag(refVal_typeTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valueObject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valueObject"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_valueObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_valueObject);
            setValueObject(refVal_valueObject);
        }
    }
    return ok;
}

void BTFSValue_1888::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConfigurationValueStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationValueString"), m_ConfigurationValueString));
    }
    if(m_StandardTypeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardTypeName"), m_StandardTypeName));
    }
    if(m_TypeTagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeTag"), m_TypeTag));
    }
    if(m_ValueObjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valueObject"), m_ValueObject));
    }
}

bool BTFSValue_1888::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationValueString")))
    {
        utility::string_t refVal_configurationValueString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationValueString")), refVal_configurationValueString );
        setConfigurationValueString(refVal_configurationValueString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardTypeName")))
    {
        utility::string_t refVal_standardTypeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardTypeName")), refVal_standardTypeName );
        setStandardTypeName(refVal_standardTypeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeTag")))
    {
        utility::string_t refVal_typeTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeTag")), refVal_typeTag );
        setTypeTag(refVal_typeTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valueObject")))
    {
        std::shared_ptr<Object> refVal_valueObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valueObject")), refVal_valueObject );
        setValueObject(refVal_valueObject);
    }
    return ok;
}

utility::string_t BTFSValue_1888::getBtType() const
{
    return m_BtType;
}

void BTFSValue_1888::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTFSValue_1888::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTFSValue_1888::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTFSValue_1888::getConfigurationValueString() const
{
    return m_ConfigurationValueString;
}

void BTFSValue_1888::setConfigurationValueString(const utility::string_t& value)
{
    m_ConfigurationValueString = value;
    m_ConfigurationValueStringIsSet = true;
}

bool BTFSValue_1888::configurationValueStringIsSet() const
{
    return m_ConfigurationValueStringIsSet;
}

void BTFSValue_1888::unsetConfigurationValueString()
{
    m_ConfigurationValueStringIsSet = false;
}
utility::string_t BTFSValue_1888::getStandardTypeName() const
{
    return m_StandardTypeName;
}

void BTFSValue_1888::setStandardTypeName(const utility::string_t& value)
{
    m_StandardTypeName = value;
    m_StandardTypeNameIsSet = true;
}

bool BTFSValue_1888::standardTypeNameIsSet() const
{
    return m_StandardTypeNameIsSet;
}

void BTFSValue_1888::unsetStandardTypeName()
{
    m_StandardTypeNameIsSet = false;
}
utility::string_t BTFSValue_1888::getTypeTag() const
{
    return m_TypeTag;
}

void BTFSValue_1888::setTypeTag(const utility::string_t& value)
{
    m_TypeTag = value;
    m_TypeTagIsSet = true;
}

bool BTFSValue_1888::typeTagIsSet() const
{
    return m_TypeTagIsSet;
}

void BTFSValue_1888::unsetTypeTag()
{
    m_TypeTagIsSet = false;
}
std::shared_ptr<Object> BTFSValue_1888::getValueObject() const
{
    return m_ValueObject;
}

void BTFSValue_1888::setValueObject(const std::shared_ptr<Object>& value)
{
    m_ValueObject = value;
    m_ValueObjectIsSet = true;
}

bool BTFSValue_1888::valueObjectIsSet() const
{
    return m_ValueObjectIsSet;
}

void BTFSValue_1888::unsetValueObject()
{
    m_ValueObjectIsSet = false;
}
}
}
}
}


