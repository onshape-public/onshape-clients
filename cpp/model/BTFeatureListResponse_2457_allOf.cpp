/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureListResponse_2457_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureListResponse_2457_allOf::BTFeatureListResponse_2457_allOf()
{
    m_RollbackIndex = 0;
    m_RollbackIndexIsSet = false;
    m_FeaturesIsSet = false;
    m_IsComplete = false;
    m_IsCompleteIsSet = false;
    m_FeatureStatesIsSet = false;
    m_DefaultFeaturesIsSet = false;
    m_ImportsIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTFeatureListResponse_2457_allOf::~BTFeatureListResponse_2457_allOf()
{
}

void BTFeatureListResponse_2457_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureListResponse_2457_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RollbackIndexIsSet)
    {
        val[utility::conversions::to_string_t("rollbackIndex")] = ModelBase::toJson(m_RollbackIndex);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);
    }
    if(m_IsCompleteIsSet)
    {
        val[utility::conversions::to_string_t("isComplete")] = ModelBase::toJson(m_IsComplete);
    }
    if(m_FeatureStatesIsSet)
    {
        val[utility::conversions::to_string_t("featureStates")] = ModelBase::toJson(m_FeatureStates);
    }
    if(m_DefaultFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("defaultFeatures")] = ModelBase::toJson(m_DefaultFeatures);
    }
    if(m_ImportsIsSet)
    {
        val[utility::conversions::to_string_t("imports")] = ModelBase::toJson(m_Imports);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTFeatureListResponse_2457_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("rollbackIndex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rollbackIndex"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_rollbackIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_rollbackIndex);
            setRollbackIndex(refVal_rollbackIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("features")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("features"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMFeature_134>> refVal_features;
            ok &= ModelBase::fromJson(fieldValue, refVal_features);
            setFeatures(refVal_features);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isComplete")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isComplete"));
        if(!fieldValue.is_null())
        {
            bool refVal_isComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_isComplete);
            setIsComplete(refVal_isComplete);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureStates")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureStates"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>> refVal_featureStates;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureStates);
            setFeatureStates(refVal_featureStates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultFeatures"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMFeature_134>> refVal_defaultFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultFeatures);
            setDefaultFeatures(refVal_defaultFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imports"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMImport_136>> refVal_imports;
            ok &= ModelBase::fromJson(fieldValue, refVal_imports);
            setImports(refVal_imports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTFeatureListResponse_2457_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RollbackIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rollbackIndex"), m_RollbackIndex));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("features"), m_Features));
    }
    if(m_IsCompleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isComplete"), m_IsComplete));
    }
    if(m_FeatureStatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureStates"), m_FeatureStates));
    }
    if(m_DefaultFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultFeatures"), m_DefaultFeatures));
    }
    if(m_ImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imports"), m_Imports));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTFeatureListResponse_2457_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("rollbackIndex")))
    {
        int32_t refVal_rollbackIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rollbackIndex")), refVal_rollbackIndex );
        setRollbackIndex(refVal_rollbackIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("features")))
    {
        std::vector<std::shared_ptr<BTMFeature_134>> refVal_features;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("features")), refVal_features );
        setFeatures(refVal_features);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isComplete")))
    {
        bool refVal_isComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isComplete")), refVal_isComplete );
        setIsComplete(refVal_isComplete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureStates")))
    {
        std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>> refVal_featureStates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureStates")), refVal_featureStates );
        setFeatureStates(refVal_featureStates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultFeatures")))
    {
        std::vector<std::shared_ptr<BTMFeature_134>> refVal_defaultFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultFeatures")), refVal_defaultFeatures );
        setDefaultFeatures(refVal_defaultFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imports")))
    {
        std::vector<std::shared_ptr<BTMImport_136>> refVal_imports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imports")), refVal_imports );
        setImports(refVal_imports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

int32_t BTFeatureListResponse_2457_allOf::getRollbackIndex() const
{
    return m_RollbackIndex;
}

void BTFeatureListResponse_2457_allOf::setRollbackIndex(int32_t value)
{
    m_RollbackIndex = value;
    m_RollbackIndexIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::rollbackIndexIsSet() const
{
    return m_RollbackIndexIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetRollbackIndex()
{
    m_RollbackIndexIsSet = false;
}
std::vector<std::shared_ptr<BTMFeature_134>>& BTFeatureListResponse_2457_allOf::getFeatures()
{
    return m_Features;
}

void BTFeatureListResponse_2457_allOf::setFeatures(const std::vector<std::shared_ptr<BTMFeature_134>>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
bool BTFeatureListResponse_2457_allOf::isIsComplete() const
{
    return m_IsComplete;
}

void BTFeatureListResponse_2457_allOf::setIsComplete(bool value)
{
    m_IsComplete = value;
    m_IsCompleteIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::isCompleteIsSet() const
{
    return m_IsCompleteIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetIsComplete()
{
    m_IsCompleteIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>>& BTFeatureListResponse_2457_allOf::getFeatureStates()
{
    return m_FeatureStates;
}

void BTFeatureListResponse_2457_allOf::setFeatureStates(const std::map<utility::string_t, std::shared_ptr<BTFeatureState_1688>>& value)
{
    m_FeatureStates = value;
    m_FeatureStatesIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::featureStatesIsSet() const
{
    return m_FeatureStatesIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetFeatureStates()
{
    m_FeatureStatesIsSet = false;
}
std::vector<std::shared_ptr<BTMFeature_134>>& BTFeatureListResponse_2457_allOf::getDefaultFeatures()
{
    return m_DefaultFeatures;
}

void BTFeatureListResponse_2457_allOf::setDefaultFeatures(const std::vector<std::shared_ptr<BTMFeature_134>>& value)
{
    m_DefaultFeatures = value;
    m_DefaultFeaturesIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::defaultFeaturesIsSet() const
{
    return m_DefaultFeaturesIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetDefaultFeatures()
{
    m_DefaultFeaturesIsSet = false;
}
std::vector<std::shared_ptr<BTMImport_136>>& BTFeatureListResponse_2457_allOf::getImports()
{
    return m_Imports;
}

void BTFeatureListResponse_2457_allOf::setImports(const std::vector<std::shared_ptr<BTMImport_136>>& value)
{
    m_Imports = value;
    m_ImportsIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::importsIsSet() const
{
    return m_ImportsIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetImports()
{
    m_ImportsIsSet = false;
}
utility::string_t BTFeatureListResponse_2457_allOf::getBtType() const
{
    return m_BtType;
}

void BTFeatureListResponse_2457_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTFeatureListResponse_2457_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTFeatureListResponse_2457_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


