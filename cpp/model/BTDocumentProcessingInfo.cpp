/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentProcessingInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentProcessingInfo::BTDocumentProcessingInfo()
{
    m_TranslationId = utility::conversions::to_string_t("");
    m_TranslationIdIsSet = false;
    m_TranslationEventKey = utility::conversions::to_string_t("");
    m_TranslationEventKeyIsSet = false;
}

BTDocumentProcessingInfo::~BTDocumentProcessingInfo()
{
}

void BTDocumentProcessingInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentProcessingInfo::toJson() const
{
    web::json::value val = this->BTDocumentInfo::toJson();
    
    if(m_TranslationIdIsSet)
    {
        val[utility::conversions::to_string_t("translationId")] = ModelBase::toJson(m_TranslationId);
    }
    if(m_TranslationEventKeyIsSet)
    {
        val[utility::conversions::to_string_t("translationEventKey")] = ModelBase::toJson(m_TranslationEventKey);
    }

    return val;
}

bool BTDocumentProcessingInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTDocumentInfo::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("translationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("translationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_translationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_translationId);
            setTranslationId(refVal_translationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translationEventKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("translationEventKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_translationEventKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_translationEventKey);
            setTranslationEventKey(refVal_translationEventKey);
        }
    }
    return ok;
}

void BTDocumentProcessingInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AnonymousAccessAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anonymousAccessAllowed"), m_AnonymousAccessAllowed));
    }
    if(m_AnonymousAllowsExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anonymousAllowsExport"), m_AnonymousAllowsExport));
    }
    if(m_BetaCapabilityIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("betaCapabilityIds"), m_BetaCapabilityIds));
    }
    if(m_CanMoveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canMove"), m_CanMove));
    }
    if(m_CanUnshareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canUnshare"), m_CanUnshare));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_CreatedWithEducationPlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdWithEducationPlan"), m_CreatedWithEducationPlan));
    }
    if(m_DefaultElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultElementId"), m_DefaultElementId));
    }
    if(m_DefaultWorkspaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultWorkspace"), m_DefaultWorkspace));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DocumentLabelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentLabels"), m_DocumentLabels));
    }
    if(m_DocumentThumbnailElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentThumbnailElementId"), m_DocumentThumbnailElementId));
    }
    if(m_DuplicateNameViolationErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("duplicateNameViolationError"), m_DuplicateNameViolationError));
    }
    if(m_HasReleaseRevisionableObjectsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasReleaseRevisionableObjects"), m_HasReleaseRevisionableObjects));
    }
    if(m_HasRelevantInsertablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasRelevantInsertables"), m_HasRelevantInsertables));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isContainer"), m_IsContainer));
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwned"), m_IsEnterpriseOwned));
    }
    if(m_IsMutableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMutable"), m_IsMutable));
    }
    if(m_IsOrphanedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOrphaned"), m_IsOrphaned));
    }
    if(m_IsUpgradedToLatestVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUpgradedToLatestVersion"), m_IsUpgradedToLatestVersion));
    }
    if(m_IsUsingManagedWorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUsingManagedWorkflow"), m_IsUsingManagedWorkflow));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_LikedByCurrentUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("likedByCurrentUser"), m_LikedByCurrentUser));
    }
    if(m_LikesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("likes"), m_Likes));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_ModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedBy"), m_ModifiedBy));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NotRevisionManagedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notRevisionManaged"), m_NotRevisionManaged));
    }
    if(m_NumberOfTimesCopiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberOfTimesCopied"), m_NumberOfTimesCopied));
    }
    if(m_NumberOfTimesReferencedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberOfTimesReferenced"), m_NumberOfTimesReferenced));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PermissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permission"), m_Permission));
    }
    if(m_PermissionSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissionSet"), m_PermissionSet));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_r_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public"), m_r_public));
    }
    if(m_RecentVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recentVersion"), m_RecentVersion));
    }
    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceType"), m_ResourceType));
    }
    if(m_SupportTeamUserAndSharedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportTeamUserAndShared"), m_SupportTeamUserAndShared));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnail"), m_Thumbnail));
    }
    if(m_TotalWorkspacesScheduledForUpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate"), m_TotalWorkspacesScheduledForUpdate));
    }
    if(m_TotalWorkspacesUpdatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalWorkspacesUpdating"), m_TotalWorkspacesUpdating));
    }
    if(m_TrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trash"), m_Trash));
    }
    if(m_TrashedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trashedAt"), m_TrashedAt));
    }
    if(m_TreeHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treeHref"), m_TreeHref));
    }
    if(m_UserAccountLimitsBreachedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userAccountLimitsBreached"), m_UserAccountLimitsBreached));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_TranslationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("translationId"), m_TranslationId));
    }
    if(m_TranslationEventKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("translationEventKey"), m_TranslationEventKey));
    }
}

bool BTDocumentProcessingInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("anonymousAccessAllowed")))
    {
        bool refVal_anonymousAccessAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anonymousAccessAllowed")), refVal_anonymousAccessAllowed );
        setAnonymousAccessAllowed(refVal_anonymousAccessAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("anonymousAllowsExport")))
    {
        bool refVal_anonymousAllowsExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anonymousAllowsExport")), refVal_anonymousAllowsExport );
        setAnonymousAllowsExport(refVal_anonymousAllowsExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("betaCapabilityIds")))
    {
        std::vector<utility::string_t> refVal_betaCapabilityIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("betaCapabilityIds")), refVal_betaCapabilityIds );
        setBetaCapabilityIds(refVal_betaCapabilityIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canMove")))
    {
        bool refVal_canMove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canMove")), refVal_canMove );
        setCanMove(refVal_canMove);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canUnshare")))
    {
        bool refVal_canUnshare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canUnshare")), refVal_canUnshare );
        setCanUnshare(refVal_canUnshare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdWithEducationPlan")))
    {
        bool refVal_createdWithEducationPlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdWithEducationPlan")), refVal_createdWithEducationPlan );
        setCreatedWithEducationPlan(refVal_createdWithEducationPlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultElementId")))
    {
        utility::string_t refVal_defaultElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultElementId")), refVal_defaultElementId );
        setDefaultElementId(refVal_defaultElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultWorkspace")))
    {
        std::shared_ptr<BTWorkspaceInfo> refVal_defaultWorkspace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultWorkspace")), refVal_defaultWorkspace );
        setDefaultWorkspace(refVal_defaultWorkspace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentLabels")))
    {
        std::vector<std::shared_ptr<BTDocumentLabelInfo>> refVal_documentLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentLabels")), refVal_documentLabels );
        setDocumentLabels(refVal_documentLabels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentThumbnailElementId")))
    {
        utility::string_t refVal_documentThumbnailElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentThumbnailElementId")), refVal_documentThumbnailElementId );
        setDocumentThumbnailElementId(refVal_documentThumbnailElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("duplicateNameViolationError")))
    {
        utility::string_t refVal_duplicateNameViolationError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("duplicateNameViolationError")), refVal_duplicateNameViolationError );
        setDuplicateNameViolationError(refVal_duplicateNameViolationError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasReleaseRevisionableObjects")))
    {
        bool refVal_hasReleaseRevisionableObjects;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasReleaseRevisionableObjects")), refVal_hasReleaseRevisionableObjects );
        setHasReleaseRevisionableObjects(refVal_hasReleaseRevisionableObjects);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasRelevantInsertables")))
    {
        bool refVal_hasRelevantInsertables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasRelevantInsertables")), refVal_hasRelevantInsertables );
        setHasRelevantInsertables(refVal_hasRelevantInsertables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isContainer")))
    {
        bool refVal_isContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isContainer")), refVal_isContainer );
        setIsContainer(refVal_isContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        bool refVal_isEnterpriseOwned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwned")), refVal_isEnterpriseOwned );
        setIsEnterpriseOwned(refVal_isEnterpriseOwned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMutable")))
    {
        bool refVal_isMutable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMutable")), refVal_isMutable );
        setIsMutable(refVal_isMutable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOrphaned")))
    {
        bool refVal_isOrphaned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOrphaned")), refVal_isOrphaned );
        setIsOrphaned(refVal_isOrphaned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUpgradedToLatestVersion")))
    {
        bool refVal_isUpgradedToLatestVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUpgradedToLatestVersion")), refVal_isUpgradedToLatestVersion );
        setIsUpgradedToLatestVersion(refVal_isUpgradedToLatestVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUsingManagedWorkflow")))
    {
        bool refVal_isUsingManagedWorkflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUsingManagedWorkflow")), refVal_isUsingManagedWorkflow );
        setIsUsingManagedWorkflow(refVal_isUsingManagedWorkflow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("likedByCurrentUser")))
    {
        bool refVal_likedByCurrentUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("likedByCurrentUser")), refVal_likedByCurrentUser );
        setLikedByCurrentUser(refVal_likedByCurrentUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("likes")))
    {
        int64_t refVal_likes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("likes")), refVal_likes );
        setLikes(refVal_likes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedBy")), refVal_modifiedBy );
        setModifiedBy(refVal_modifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notRevisionManaged")))
    {
        bool refVal_notRevisionManaged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notRevisionManaged")), refVal_notRevisionManaged );
        setNotRevisionManaged(refVal_notRevisionManaged);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfTimesCopied")))
    {
        int64_t refVal_numberOfTimesCopied;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberOfTimesCopied")), refVal_numberOfTimesCopied );
        setNumberOfTimesCopied(refVal_numberOfTimesCopied);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfTimesReferenced")))
    {
        int64_t refVal_numberOfTimesReferenced;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberOfTimesReferenced")), refVal_numberOfTimesReferenced );
        setNumberOfTimesReferenced(refVal_numberOfTimesReferenced);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permission")))
    {
        utility::string_t refVal_permission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permission")), refVal_permission );
        setPermission(refVal_permission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissionSet")))
    {
        std::shared_ptr<Object> refVal_permissionSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissionSet")), refVal_permissionSet );
        setPermissionSet(refVal_permissionSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("public")))
    {
        bool refVal_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("public")), refVal_public );
        setRPublic(refVal_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recentVersion")))
    {
        std::shared_ptr<BTBaseInfo> refVal_recentVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recentVersion")), refVal_recentVersion );
        setRecentVersion(refVal_recentVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourceType")))
    {
        utility::string_t refVal_resourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceType")), refVal_resourceType );
        setResourceType(refVal_resourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportTeamUserAndShared")))
    {
        bool refVal_supportTeamUserAndShared;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportTeamUserAndShared")), refVal_supportTeamUserAndShared );
        setSupportTeamUserAndShared(refVal_supportTeamUserAndShared);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnail")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnail")), refVal_thumbnail );
        setThumbnail(refVal_thumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")))
    {
        int32_t refVal_totalWorkspacesScheduledForUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")), refVal_totalWorkspacesScheduledForUpdate );
        setTotalWorkspacesScheduledForUpdate(refVal_totalWorkspacesScheduledForUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalWorkspacesUpdating")))
    {
        int32_t refVal_totalWorkspacesUpdating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalWorkspacesUpdating")), refVal_totalWorkspacesUpdating );
        setTotalWorkspacesUpdating(refVal_totalWorkspacesUpdating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trash")))
    {
        bool refVal_trash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trash")), refVal_trash );
        setTrash(refVal_trash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trashedAt")))
    {
        utility::datetime refVal_trashedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trashedAt")), refVal_trashedAt );
        setTrashedAt(refVal_trashedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treeHref")))
    {
        utility::string_t refVal_treeHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treeHref")), refVal_treeHref );
        setTreeHref(refVal_treeHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userAccountLimitsBreached")))
    {
        bool refVal_userAccountLimitsBreached;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userAccountLimitsBreached")), refVal_userAccountLimitsBreached );
        setUserAccountLimitsBreached(refVal_userAccountLimitsBreached);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translationId")))
    {
        utility::string_t refVal_translationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("translationId")), refVal_translationId );
        setTranslationId(refVal_translationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translationEventKey")))
    {
        utility::string_t refVal_translationEventKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("translationEventKey")), refVal_translationEventKey );
        setTranslationEventKey(refVal_translationEventKey);
    }
    return ok;
}

utility::string_t BTDocumentProcessingInfo::getTranslationId() const
{
    return m_TranslationId;
}

void BTDocumentProcessingInfo::setTranslationId(const utility::string_t& value)
{
    m_TranslationId = value;
    m_TranslationIdIsSet = true;
}

bool BTDocumentProcessingInfo::translationIdIsSet() const
{
    return m_TranslationIdIsSet;
}

void BTDocumentProcessingInfo::unsetTranslationId()
{
    m_TranslationIdIsSet = false;
}
utility::string_t BTDocumentProcessingInfo::getTranslationEventKey() const
{
    return m_TranslationEventKey;
}

void BTDocumentProcessingInfo::setTranslationEventKey(const utility::string_t& value)
{
    m_TranslationEventKey = value;
    m_TranslationEventKeyIsSet = true;
}

bool BTDocumentProcessingInfo::translationEventKeyIsSet() const
{
    return m_TranslationEventKeyIsSet;
}

void BTDocumentProcessingInfo::unsetTranslationEventKey()
{
    m_TranslationEventKeyIsSet = false;
}
}
}
}
}


