/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBillOfMaterialsTableRow_1425_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBillOfMaterialsTableRow_1425_allOf::BTBillOfMaterialsTableRow_1425_allOf()
{
    m_UniqueItemIdIsSet = false;
    m_IndentLevel = 0;
    m_IndentLevelIsSet = false;
    m_ExpansionStatus = utility::conversions::to_string_t("");
    m_ExpansionStatusIsSet = false;
    m_ExclusionStatus = utility::conversions::to_string_t("");
    m_ExclusionStatusIsSet = false;
    m_ExcludeIsEditable = false;
    m_ExcludeIsEditableIsSet = false;
    m_MetadataUpdateHref = utility::conversions::to_string_t("");
    m_MetadataUpdateHrefIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTBillOfMaterialsTableRow_1425_allOf::~BTBillOfMaterialsTableRow_1425_allOf()
{
}

void BTBillOfMaterialsTableRow_1425_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTBillOfMaterialsTableRow_1425_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UniqueItemIdIsSet)
    {
        val[utility::conversions::to_string_t("uniqueItemId")] = ModelBase::toJson(m_UniqueItemId);
    }
    if(m_IndentLevelIsSet)
    {
        val[utility::conversions::to_string_t("indentLevel")] = ModelBase::toJson(m_IndentLevel);
    }
    if(m_ExpansionStatusIsSet)
    {
        val[utility::conversions::to_string_t("expansionStatus")] = ModelBase::toJson(m_ExpansionStatus);
    }
    if(m_ExclusionStatusIsSet)
    {
        val[utility::conversions::to_string_t("exclusionStatus")] = ModelBase::toJson(m_ExclusionStatus);
    }
    if(m_ExcludeIsEditableIsSet)
    {
        val[utility::conversions::to_string_t("excludeIsEditable")] = ModelBase::toJson(m_ExcludeIsEditable);
    }
    if(m_MetadataUpdateHrefIsSet)
    {
        val[utility::conversions::to_string_t("metadataUpdateHref")] = ModelBase::toJson(m_MetadataUpdateHref);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTBillOfMaterialsTableRow_1425_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("uniqueItemId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uniqueItemId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_uniqueItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uniqueItemId);
            setUniqueItemId(refVal_uniqueItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indentLevel")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("indentLevel"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_indentLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_indentLevel);
            setIndentLevel(refVal_indentLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expansionStatus")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expansionStatus"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_expansionStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_expansionStatus);
            setExpansionStatus(refVal_expansionStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exclusionStatus")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exclusionStatus"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_exclusionStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_exclusionStatus);
            setExclusionStatus(refVal_exclusionStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeIsEditable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeIsEditable"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeIsEditable;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeIsEditable);
            setExcludeIsEditable(refVal_excludeIsEditable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadataUpdateHref")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadataUpdateHref"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_metadataUpdateHref;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadataUpdateHref);
            setMetadataUpdateHref(refVal_metadataUpdateHref);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTBillOfMaterialsTableRow_1425_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UniqueItemIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uniqueItemId"), m_UniqueItemId));
    }
    if(m_IndentLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indentLevel"), m_IndentLevel));
    }
    if(m_ExpansionStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expansionStatus"), m_ExpansionStatus));
    }
    if(m_ExclusionStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exclusionStatus"), m_ExclusionStatus));
    }
    if(m_ExcludeIsEditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeIsEditable"), m_ExcludeIsEditable));
    }
    if(m_MetadataUpdateHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadataUpdateHref"), m_MetadataUpdateHref));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTBillOfMaterialsTableRow_1425_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("uniqueItemId")))
    {
        std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_uniqueItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uniqueItemId")), refVal_uniqueItemId );
        setUniqueItemId(refVal_uniqueItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indentLevel")))
    {
        int32_t refVal_indentLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("indentLevel")), refVal_indentLevel );
        setIndentLevel(refVal_indentLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expansionStatus")))
    {
        utility::string_t refVal_expansionStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expansionStatus")), refVal_expansionStatus );
        setExpansionStatus(refVal_expansionStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exclusionStatus")))
    {
        utility::string_t refVal_exclusionStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exclusionStatus")), refVal_exclusionStatus );
        setExclusionStatus(refVal_exclusionStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeIsEditable")))
    {
        bool refVal_excludeIsEditable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeIsEditable")), refVal_excludeIsEditable );
        setExcludeIsEditable(refVal_excludeIsEditable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadataUpdateHref")))
    {
        utility::string_t refVal_metadataUpdateHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadataUpdateHref")), refVal_metadataUpdateHref );
        setMetadataUpdateHref(refVal_metadataUpdateHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> BTBillOfMaterialsTableRow_1425_allOf::getUniqueItemId() const
{
    return m_UniqueItemId;
}

void BTBillOfMaterialsTableRow_1425_allOf::setUniqueItemId(const std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029>& value)
{
    m_UniqueItemId = value;
    m_UniqueItemIdIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::uniqueItemIdIsSet() const
{
    return m_UniqueItemIdIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetUniqueItemId()
{
    m_UniqueItemIdIsSet = false;
}
int32_t BTBillOfMaterialsTableRow_1425_allOf::getIndentLevel() const
{
    return m_IndentLevel;
}

void BTBillOfMaterialsTableRow_1425_allOf::setIndentLevel(int32_t value)
{
    m_IndentLevel = value;
    m_IndentLevelIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::indentLevelIsSet() const
{
    return m_IndentLevelIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetIndentLevel()
{
    m_IndentLevelIsSet = false;
}
utility::string_t BTBillOfMaterialsTableRow_1425_allOf::getExpansionStatus() const
{
    return m_ExpansionStatus;
}

void BTBillOfMaterialsTableRow_1425_allOf::setExpansionStatus(const utility::string_t& value)
{
    m_ExpansionStatus = value;
    m_ExpansionStatusIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::expansionStatusIsSet() const
{
    return m_ExpansionStatusIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetExpansionStatus()
{
    m_ExpansionStatusIsSet = false;
}
utility::string_t BTBillOfMaterialsTableRow_1425_allOf::getExclusionStatus() const
{
    return m_ExclusionStatus;
}

void BTBillOfMaterialsTableRow_1425_allOf::setExclusionStatus(const utility::string_t& value)
{
    m_ExclusionStatus = value;
    m_ExclusionStatusIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::exclusionStatusIsSet() const
{
    return m_ExclusionStatusIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetExclusionStatus()
{
    m_ExclusionStatusIsSet = false;
}
bool BTBillOfMaterialsTableRow_1425_allOf::isExcludeIsEditable() const
{
    return m_ExcludeIsEditable;
}

void BTBillOfMaterialsTableRow_1425_allOf::setExcludeIsEditable(bool value)
{
    m_ExcludeIsEditable = value;
    m_ExcludeIsEditableIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::excludeIsEditableIsSet() const
{
    return m_ExcludeIsEditableIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetExcludeIsEditable()
{
    m_ExcludeIsEditableIsSet = false;
}
utility::string_t BTBillOfMaterialsTableRow_1425_allOf::getMetadataUpdateHref() const
{
    return m_MetadataUpdateHref;
}

void BTBillOfMaterialsTableRow_1425_allOf::setMetadataUpdateHref(const utility::string_t& value)
{
    m_MetadataUpdateHref = value;
    m_MetadataUpdateHrefIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::metadataUpdateHrefIsSet() const
{
    return m_MetadataUpdateHrefIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetMetadataUpdateHref()
{
    m_MetadataUpdateHrefIsSet = false;
}
utility::string_t BTBillOfMaterialsTableRow_1425_allOf::getBtType() const
{
    return m_BtType;
}

void BTBillOfMaterialsTableRow_1425_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTBillOfMaterialsTableRow_1425_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTBillOfMaterialsTableRow_1425_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


