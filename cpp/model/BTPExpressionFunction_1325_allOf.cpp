/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPExpressionFunction_1325_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPExpressionFunction_1325_allOf::BTPExpressionFunction_1325_allOf()
{
    m_ArgumentsIsSet = false;
    m_BodyIsSet = false;
    m_PreconditionIsSet = false;
    m_SpaceAfterArglistIsSet = false;
    m_SpaceInEmptyListIsSet = false;
    m_SpaceAfterFunctionIsSet = false;
    m_ReturnTypeIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPExpressionFunction_1325_allOf::~BTPExpressionFunction_1325_allOf()
{
}

void BTPExpressionFunction_1325_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPExpressionFunction_1325_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ArgumentsIsSet)
    {
        val[utility::conversions::to_string_t("arguments")] = ModelBase::toJson(m_Arguments);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_PreconditionIsSet)
    {
        val[utility::conversions::to_string_t("precondition")] = ModelBase::toJson(m_Precondition);
    }
    if(m_SpaceAfterArglistIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterArglist")] = ModelBase::toJson(m_SpaceAfterArglist);
    }
    if(m_SpaceInEmptyListIsSet)
    {
        val[utility::conversions::to_string_t("spaceInEmptyList")] = ModelBase::toJson(m_SpaceInEmptyList);
    }
    if(m_SpaceAfterFunctionIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterFunction")] = ModelBase::toJson(m_SpaceAfterFunction);
    }
    if(m_ReturnTypeIsSet)
    {
        val[utility::conversions::to_string_t("returnType")] = ModelBase::toJson(m_ReturnType);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPExpressionFunction_1325_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("arguments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arguments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_arguments;
            ok &= ModelBase::fromJson(fieldValue, refVal_arguments);
            setArguments(refVal_arguments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatementBlock_271> refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precondition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precondition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_precondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_precondition);
            setPrecondition(refVal_precondition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterArglist")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterArglist"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterArglist;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterArglist);
            setSpaceAfterArglist(refVal_spaceAfterArglist);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceInEmptyList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceInEmptyList"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceInEmptyList;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceInEmptyList);
            setSpaceInEmptyList(refVal_spaceInEmptyList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterFunction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterFunction"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterFunction;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterFunction);
            setSpaceAfterFunction(refVal_spaceAfterFunction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("returnType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("returnType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPTypeName_290> refVal_returnType;
            ok &= ModelBase::fromJson(fieldValue, refVal_returnType);
            setReturnType(refVal_returnType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPExpressionFunction_1325_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ArgumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arguments"), m_Arguments));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_PreconditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precondition"), m_Precondition));
    }
    if(m_SpaceAfterArglistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterArglist"), m_SpaceAfterArglist));
    }
    if(m_SpaceInEmptyListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceInEmptyList"), m_SpaceInEmptyList));
    }
    if(m_SpaceAfterFunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterFunction"), m_SpaceAfterFunction));
    }
    if(m_ReturnTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnType"), m_ReturnType));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPExpressionFunction_1325_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("arguments")))
    {
        std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_arguments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arguments")), refVal_arguments );
        setArguments(refVal_arguments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        std::shared_ptr<BTPStatementBlock_271> refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precondition")))
    {
        std::shared_ptr<BTPStatement_269> refVal_precondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precondition")), refVal_precondition );
        setPrecondition(refVal_precondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterArglist")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterArglist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterArglist")), refVal_spaceAfterArglist );
        setSpaceAfterArglist(refVal_spaceAfterArglist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceInEmptyList")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceInEmptyList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceInEmptyList")), refVal_spaceInEmptyList );
        setSpaceInEmptyList(refVal_spaceInEmptyList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterFunction")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterFunction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterFunction")), refVal_spaceAfterFunction );
        setSpaceAfterFunction(refVal_spaceAfterFunction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnType")))
    {
        std::shared_ptr<BTPTypeName_290> refVal_returnType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnType")), refVal_returnType );
        setReturnType(refVal_returnType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& BTPExpressionFunction_1325_allOf::getArguments()
{
    return m_Arguments;
}

void BTPExpressionFunction_1325_allOf::setArguments(const std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& value)
{
    m_Arguments = value;
    m_ArgumentsIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::argumentsIsSet() const
{
    return m_ArgumentsIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetArguments()
{
    m_ArgumentsIsSet = false;
}
std::shared_ptr<BTPStatementBlock_271> BTPExpressionFunction_1325_allOf::getBody() const
{
    return m_Body;
}

void BTPExpressionFunction_1325_allOf::setBody(const std::shared_ptr<BTPStatementBlock_271>& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::bodyIsSet() const
{
    return m_BodyIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetBody()
{
    m_BodyIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPExpressionFunction_1325_allOf::getPrecondition() const
{
    return m_Precondition;
}

void BTPExpressionFunction_1325_allOf::setPrecondition(const std::shared_ptr<BTPStatement_269>& value)
{
    m_Precondition = value;
    m_PreconditionIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::preconditionIsSet() const
{
    return m_PreconditionIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetPrecondition()
{
    m_PreconditionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPExpressionFunction_1325_allOf::getSpaceAfterArglist() const
{
    return m_SpaceAfterArglist;
}

void BTPExpressionFunction_1325_allOf::setSpaceAfterArglist(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterArglist = value;
    m_SpaceAfterArglistIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::spaceAfterArglistIsSet() const
{
    return m_SpaceAfterArglistIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetSpaceAfterArglist()
{
    m_SpaceAfterArglistIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPExpressionFunction_1325_allOf::getSpaceInEmptyList() const
{
    return m_SpaceInEmptyList;
}

void BTPExpressionFunction_1325_allOf::setSpaceInEmptyList(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceInEmptyList = value;
    m_SpaceInEmptyListIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::spaceInEmptyListIsSet() const
{
    return m_SpaceInEmptyListIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetSpaceInEmptyList()
{
    m_SpaceInEmptyListIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPExpressionFunction_1325_allOf::getSpaceAfterFunction() const
{
    return m_SpaceAfterFunction;
}

void BTPExpressionFunction_1325_allOf::setSpaceAfterFunction(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterFunction = value;
    m_SpaceAfterFunctionIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::spaceAfterFunctionIsSet() const
{
    return m_SpaceAfterFunctionIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetSpaceAfterFunction()
{
    m_SpaceAfterFunctionIsSet = false;
}
std::shared_ptr<BTPTypeName_290> BTPExpressionFunction_1325_allOf::getReturnType() const
{
    return m_ReturnType;
}

void BTPExpressionFunction_1325_allOf::setReturnType(const std::shared_ptr<BTPTypeName_290>& value)
{
    m_ReturnType = value;
    m_ReturnTypeIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::returnTypeIsSet() const
{
    return m_ReturnTypeIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetReturnType()
{
    m_ReturnTypeIsSet = false;
}
utility::string_t BTPExpressionFunction_1325_allOf::getBtType() const
{
    return m_BtType;
}

void BTPExpressionFunction_1325_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPExpressionFunction_1325_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPExpressionFunction_1325_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


