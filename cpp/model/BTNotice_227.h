/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTNotice_227.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTNotice_227_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTNotice_227_H_


#include "../ModelBase.h"

#include "BTNodeReference_21.h"
#include <cpprest/details/basic_types.h>
#include "BTLocationInfo_226.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTNotice_227
    : public ModelBase
{
public:
    BTNotice_227();
    virtual ~BTNotice_227();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTNotice_227 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLevel() const;
    bool levelIsSet() const;
    void unsetLevel();

    void setLevel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTLocationInfo_226>>& getLocationInfos();
    bool locationInfosIsSet() const;
    void unsetLocationInfos();

    void setLocationInfos(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParameterId() const;
    bool parameterIdIsSet() const;
    void unsetParameterId();

    void setParameterId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTLocationInfo_226>>& getStackTrace();
    bool stackTraceIsSet() const;
    void unsetStackTrace();

    void setStackTrace(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTNodeReference_21> getTryNode() const;
    bool tryNodeIsSet() const;
    void unsetTryNode();

    void setTryNode(const std::shared_ptr<BTNodeReference_21>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    utility::string_t m_Level;
    bool m_LevelIsSet;
    std::vector<std::shared_ptr<BTLocationInfo_226>> m_LocationInfos;
    bool m_LocationInfosIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    utility::string_t m_ParameterId;
    bool m_ParameterIdIsSet;
    std::vector<std::shared_ptr<BTLocationInfo_226>> m_StackTrace;
    bool m_StackTraceIsSet;
    std::shared_ptr<BTNodeReference_21> m_TryNode;
    bool m_TryNodeIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTNotice_227_H_ */
