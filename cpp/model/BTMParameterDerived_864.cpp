/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterDerived_864.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterDerived_864::BTMParameterDerived_864()
{
    m_ModuleIdIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_ImportsIsSet = false;
}

BTMParameterDerived_864::~BTMParameterDerived_864()
{
}

void BTMParameterDerived_864::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterDerived_864::toJson() const
{
    web::json::value val = this->BTMParameter_1::toJson();
    
    if(m_ModuleIdIsSet)
    {
        val[utility::conversions::to_string_t("moduleId")] = ModelBase::toJson(m_ModuleId);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_ImportsIsSet)
    {
        val[utility::conversions::to_string_t("imports")] = ModelBase::toJson(m_Imports);
    }

    return val;
}

bool BTMParameterDerived_864::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMParameter_1::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("moduleId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moduleId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPModuleId_235> refVal_moduleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_moduleId);
            setModuleId(refVal_moduleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imports"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMImport_136>> refVal_imports;
            ok &= ModelBase::fromJson(fieldValue, refVal_imports);
            setImports(refVal_imports);
        }
    }
    return ok;
}

void BTMParameterDerived_864::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ModuleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moduleId"), m_ModuleId));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_ImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imports"), m_Imports));
    }
}

bool BTMParameterDerived_864::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moduleId")))
    {
        std::shared_ptr<BTPModuleId_235> refVal_moduleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moduleId")), refVal_moduleId );
        setModuleId(refVal_moduleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imports")))
    {
        std::vector<std::shared_ptr<BTMImport_136>> refVal_imports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imports")), refVal_imports );
        setImports(refVal_imports);
    }
    return ok;
}

std::shared_ptr<BTPModuleId_235> BTMParameterDerived_864::getModuleId() const
{
    return m_ModuleId;
}

void BTMParameterDerived_864::setModuleId(const std::shared_ptr<BTPModuleId_235>& value)
{
    m_ModuleId = value;
    m_ModuleIdIsSet = true;
}

bool BTMParameterDerived_864::moduleIdIsSet() const
{
    return m_ModuleIdIsSet;
}

void BTMParameterDerived_864::unsetModuleId()
{
    m_ModuleIdIsSet = false;
}
utility::string_t BTMParameterDerived_864::getRNamespace() const
{
    return m_r_namespace;
}

void BTMParameterDerived_864::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMParameterDerived_864::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMParameterDerived_864::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
std::vector<std::shared_ptr<BTMImport_136>>& BTMParameterDerived_864::getImports()
{
    return m_Imports;
}

void BTMParameterDerived_864::setImports(const std::vector<std::shared_ptr<BTMImport_136>>& value)
{
    m_Imports = value;
    m_ImportsIsSet = true;
}

bool BTMParameterDerived_864::importsIsSet() const
{
    return m_ImportsIsSet;
}

void BTMParameterDerived_864::unsetImports()
{
    m_ImportsIsSet = false;
}
}
}
}
}


