/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTranslationRequestInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTranslationRequestInfo::BTTranslationRequestInfo()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_FailureReason = utility::conversions::to_string_t("");
    m_FailureReasonIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_RequestElementId = utility::conversions::to_string_t("");
    m_RequestElementIdIsSet = false;
    m_RequestState = utility::conversions::to_string_t("");
    m_RequestStateIsSet = false;
    m_ResultDocumentId = utility::conversions::to_string_t("");
    m_ResultDocumentIdIsSet = false;
    m_ResultElementIdsIsSet = false;
    m_ResultExternalDataIdsIsSet = false;
    m_ResultWorkspaceId = utility::conversions::to_string_t("");
    m_ResultWorkspaceIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTTranslationRequestInfo::~BTTranslationRequestInfo()
{
}

void BTTranslationRequestInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTTranslationRequestInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_FailureReasonIsSet)
    {
        val[utility::conversions::to_string_t("failureReason")] = ModelBase::toJson(m_FailureReason);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_RequestElementIdIsSet)
    {
        val[utility::conversions::to_string_t("requestElementId")] = ModelBase::toJson(m_RequestElementId);
    }
    if(m_RequestStateIsSet)
    {
        val[utility::conversions::to_string_t("requestState")] = ModelBase::toJson(m_RequestState);
    }
    if(m_ResultDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("resultDocumentId")] = ModelBase::toJson(m_ResultDocumentId);
    }
    if(m_ResultElementIdsIsSet)
    {
        val[utility::conversions::to_string_t("resultElementIds")] = ModelBase::toJson(m_ResultElementIds);
    }
    if(m_ResultExternalDataIdsIsSet)
    {
        val[utility::conversions::to_string_t("resultExternalDataIds")] = ModelBase::toJson(m_ResultExternalDataIds);
    }
    if(m_ResultWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("resultWorkspaceId")] = ModelBase::toJson(m_ResultWorkspaceId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTTranslationRequestInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failureReason")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("failureReason"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_failureReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_failureReason);
            setFailureReason(refVal_failureReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requestElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requestElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestElementId);
            setRequestElementId(refVal_requestElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requestState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requestState"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requestState;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestState);
            setRequestState(refVal_requestState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resultDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resultDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resultDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_resultDocumentId);
            setResultDocumentId(refVal_resultDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resultElementIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resultElementIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_resultElementIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_resultElementIds);
            setResultElementIds(refVal_resultElementIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resultExternalDataIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resultExternalDataIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_resultExternalDataIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_resultExternalDataIds);
            setResultExternalDataIds(refVal_resultExternalDataIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resultWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resultWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resultWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_resultWorkspaceId);
            setResultWorkspaceId(refVal_resultWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTTranslationRequestInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_FailureReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("failureReason"), m_FailureReason));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_RequestElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requestElementId"), m_RequestElementId));
    }
    if(m_RequestStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requestState"), m_RequestState));
    }
    if(m_ResultDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resultDocumentId"), m_ResultDocumentId));
    }
    if(m_ResultElementIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resultElementIds"), m_ResultElementIds));
    }
    if(m_ResultExternalDataIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resultExternalDataIds"), m_ResultExternalDataIds));
    }
    if(m_ResultWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resultWorkspaceId"), m_ResultWorkspaceId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTTranslationRequestInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failureReason")))
    {
        utility::string_t refVal_failureReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("failureReason")), refVal_failureReason );
        setFailureReason(refVal_failureReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestElementId")))
    {
        utility::string_t refVal_requestElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requestElementId")), refVal_requestElementId );
        setRequestElementId(refVal_requestElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requestState")))
    {
        utility::string_t refVal_requestState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requestState")), refVal_requestState );
        setRequestState(refVal_requestState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resultDocumentId")))
    {
        utility::string_t refVal_resultDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resultDocumentId")), refVal_resultDocumentId );
        setResultDocumentId(refVal_resultDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resultElementIds")))
    {
        std::vector<utility::string_t> refVal_resultElementIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resultElementIds")), refVal_resultElementIds );
        setResultElementIds(refVal_resultElementIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resultExternalDataIds")))
    {
        std::vector<utility::string_t> refVal_resultExternalDataIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resultExternalDataIds")), refVal_resultExternalDataIds );
        setResultExternalDataIds(refVal_resultExternalDataIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resultWorkspaceId")))
    {
        utility::string_t refVal_resultWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resultWorkspaceId")), refVal_resultWorkspaceId );
        setResultWorkspaceId(refVal_resultWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

utility::string_t BTTranslationRequestInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTTranslationRequestInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTTranslationRequestInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTTranslationRequestInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getFailureReason() const
{
    return m_FailureReason;
}

void BTTranslationRequestInfo::setFailureReason(const utility::string_t& value)
{
    m_FailureReason = value;
    m_FailureReasonIsSet = true;
}

bool BTTranslationRequestInfo::failureReasonIsSet() const
{
    return m_FailureReasonIsSet;
}

void BTTranslationRequestInfo::unsetFailureReason()
{
    m_FailureReasonIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getHref() const
{
    return m_Href;
}

void BTTranslationRequestInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTTranslationRequestInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTTranslationRequestInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getId() const
{
    return m_Id;
}

void BTTranslationRequestInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTTranslationRequestInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTTranslationRequestInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getName() const
{
    return m_Name;
}

void BTTranslationRequestInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTTranslationRequestInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTTranslationRequestInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getRequestElementId() const
{
    return m_RequestElementId;
}

void BTTranslationRequestInfo::setRequestElementId(const utility::string_t& value)
{
    m_RequestElementId = value;
    m_RequestElementIdIsSet = true;
}

bool BTTranslationRequestInfo::requestElementIdIsSet() const
{
    return m_RequestElementIdIsSet;
}

void BTTranslationRequestInfo::unsetRequestElementId()
{
    m_RequestElementIdIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getRequestState() const
{
    return m_RequestState;
}

void BTTranslationRequestInfo::setRequestState(const utility::string_t& value)
{
    m_RequestState = value;
    m_RequestStateIsSet = true;
}

bool BTTranslationRequestInfo::requestStateIsSet() const
{
    return m_RequestStateIsSet;
}

void BTTranslationRequestInfo::unsetRequestState()
{
    m_RequestStateIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getResultDocumentId() const
{
    return m_ResultDocumentId;
}

void BTTranslationRequestInfo::setResultDocumentId(const utility::string_t& value)
{
    m_ResultDocumentId = value;
    m_ResultDocumentIdIsSet = true;
}

bool BTTranslationRequestInfo::resultDocumentIdIsSet() const
{
    return m_ResultDocumentIdIsSet;
}

void BTTranslationRequestInfo::unsetResultDocumentId()
{
    m_ResultDocumentIdIsSet = false;
}
std::vector<utility::string_t>& BTTranslationRequestInfo::getResultElementIds()
{
    return m_ResultElementIds;
}

void BTTranslationRequestInfo::setResultElementIds(const std::vector<utility::string_t>& value)
{
    m_ResultElementIds = value;
    m_ResultElementIdsIsSet = true;
}

bool BTTranslationRequestInfo::resultElementIdsIsSet() const
{
    return m_ResultElementIdsIsSet;
}

void BTTranslationRequestInfo::unsetResultElementIds()
{
    m_ResultElementIdsIsSet = false;
}
std::vector<utility::string_t>& BTTranslationRequestInfo::getResultExternalDataIds()
{
    return m_ResultExternalDataIds;
}

void BTTranslationRequestInfo::setResultExternalDataIds(const std::vector<utility::string_t>& value)
{
    m_ResultExternalDataIds = value;
    m_ResultExternalDataIdsIsSet = true;
}

bool BTTranslationRequestInfo::resultExternalDataIdsIsSet() const
{
    return m_ResultExternalDataIdsIsSet;
}

void BTTranslationRequestInfo::unsetResultExternalDataIds()
{
    m_ResultExternalDataIdsIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getResultWorkspaceId() const
{
    return m_ResultWorkspaceId;
}

void BTTranslationRequestInfo::setResultWorkspaceId(const utility::string_t& value)
{
    m_ResultWorkspaceId = value;
    m_ResultWorkspaceIdIsSet = true;
}

bool BTTranslationRequestInfo::resultWorkspaceIdIsSet() const
{
    return m_ResultWorkspaceIdIsSet;
}

void BTTranslationRequestInfo::unsetResultWorkspaceId()
{
    m_ResultWorkspaceIdIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getVersionId() const
{
    return m_VersionId;
}

void BTTranslationRequestInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTTranslationRequestInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTTranslationRequestInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTTranslationRequestInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTTranslationRequestInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTTranslationRequestInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
utility::string_t BTTranslationRequestInfo::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTTranslationRequestInfo::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTTranslationRequestInfo::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTTranslationRequestInfo::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


