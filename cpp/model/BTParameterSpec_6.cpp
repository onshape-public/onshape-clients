/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpec_6.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpec_6::BTParameterSpec_6()
{
    m_AdditionalLocalizedStrings = 0;
    m_AdditionalLocalizedStringsIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ColumnName = utility::conversions::to_string_t("");
    m_ColumnNameIsSet = false;
    m_DefaultValueIsSet = false;
    m_IconUri = utility::conversions::to_string_t("");
    m_IconUriIsSet = false;
    m_LocalizableName = utility::conversions::to_string_t("");
    m_LocalizableNameIsSet = false;
    m_LocalizedName = utility::conversions::to_string_t("");
    m_LocalizedNameIsSet = false;
    m_ParameterId = utility::conversions::to_string_t("");
    m_ParameterIdIsSet = false;
    m_ParameterName = utility::conversions::to_string_t("");
    m_ParameterNameIsSet = false;
    m_StringsToLocalizeIsSet = false;
    m_UiHint = utility::conversions::to_string_t("");
    m_UiHintIsSet = false;
    m_UiHintsIsSet = false;
    m_VisibilityConditionIsSet = false;
}

BTParameterSpec_6::~BTParameterSpec_6()
{
}

void BTParameterSpec_6::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpec_6::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdditionalLocalizedStringsIsSet)
    {
        val[utility::conversions::to_string_t("additionalLocalizedStrings")] = ModelBase::toJson(m_AdditionalLocalizedStrings);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ColumnNameIsSet)
    {
        val[utility::conversions::to_string_t("columnName")] = ModelBase::toJson(m_ColumnName);
    }
    if(m_DefaultValueIsSet)
    {
        val[utility::conversions::to_string_t("defaultValue")] = ModelBase::toJson(m_DefaultValue);
    }
    if(m_IconUriIsSet)
    {
        val[utility::conversions::to_string_t("iconUri")] = ModelBase::toJson(m_IconUri);
    }
    if(m_LocalizableNameIsSet)
    {
        val[utility::conversions::to_string_t("localizableName")] = ModelBase::toJson(m_LocalizableName);
    }
    if(m_LocalizedNameIsSet)
    {
        val[utility::conversions::to_string_t("localizedName")] = ModelBase::toJson(m_LocalizedName);
    }
    if(m_ParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("parameterId")] = ModelBase::toJson(m_ParameterId);
    }
    if(m_ParameterNameIsSet)
    {
        val[utility::conversions::to_string_t("parameterName")] = ModelBase::toJson(m_ParameterName);
    }
    if(m_StringsToLocalizeIsSet)
    {
        val[utility::conversions::to_string_t("stringsToLocalize")] = ModelBase::toJson(m_StringsToLocalize);
    }
    if(m_UiHintIsSet)
    {
        val[utility::conversions::to_string_t("uiHint")] = ModelBase::toJson(m_UiHint);
    }
    if(m_UiHintsIsSet)
    {
        val[utility::conversions::to_string_t("uiHints")] = ModelBase::toJson(m_UiHints);
    }
    if(m_VisibilityConditionIsSet)
    {
        val[utility::conversions::to_string_t("visibilityCondition")] = ModelBase::toJson(m_VisibilityCondition);
    }

    return val;
}

bool BTParameterSpec_6::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalLocalizedStrings"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_additionalLocalizedStrings;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalLocalizedStrings);
            setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("columnName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("columnName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_columnName;
            ok &= ModelBase::fromJson(fieldValue, refVal_columnName);
            setColumnName(refVal_columnName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultValue"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMParameter_1> refVal_defaultValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultValue);
            setDefaultValue(refVal_defaultValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iconUri")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iconUri"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iconUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_iconUri);
            setIconUri(refVal_iconUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizableName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizableName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizableName);
            setLocalizableName(refVal_localizableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizedName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizedName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizedName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizedName);
            setLocalizedName(refVal_localizedName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterId);
            setParameterId(refVal_parameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterName;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterName);
            setParameterName(refVal_parameterName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringsToLocalize")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stringsToLocalize"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_stringsToLocalize;
            ok &= ModelBase::fromJson(fieldValue, refVal_stringsToLocalize);
            setStringsToLocalize(refVal_stringsToLocalize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiHint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiHint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uiHint;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiHint);
            setUiHint(refVal_uiHint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiHints")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiHints"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_uiHints;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiHints);
            setUiHints(refVal_uiHints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("visibilityCondition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("visibilityCondition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTParameterVisibilityCondition_177> refVal_visibilityCondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_visibilityCondition);
            setVisibilityCondition(refVal_visibilityCondition);
        }
    }
    return ok;
}

void BTParameterSpec_6::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnName"), m_ColumnName));
    }
    if(m_DefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultValue"), m_DefaultValue));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_UiHintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHint"), m_UiHint));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
    if(m_VisibilityConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visibilityCondition"), m_VisibilityCondition));
    }
}

bool BTParameterSpec_6::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnName")))
    {
        utility::string_t refVal_columnName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnName")), refVal_columnName );
        setColumnName(refVal_columnName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultValue")))
    {
        std::shared_ptr<BTMParameter_1> refVal_defaultValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultValue")), refVal_defaultValue );
        setDefaultValue(refVal_defaultValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHint")))
    {
        utility::string_t refVal_uiHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHint")), refVal_uiHint );
        setUiHint(refVal_uiHint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visibilityCondition")))
    {
        std::shared_ptr<BTParameterVisibilityCondition_177> refVal_visibilityCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visibilityCondition")), refVal_visibilityCondition );
        setVisibilityCondition(refVal_visibilityCondition);
    }
    return ok;
}

int32_t BTParameterSpec_6::getAdditionalLocalizedStrings() const
{
    return m_AdditionalLocalizedStrings;
}

void BTParameterSpec_6::setAdditionalLocalizedStrings(int32_t value)
{
    m_AdditionalLocalizedStrings = value;
    m_AdditionalLocalizedStringsIsSet = true;
}

bool BTParameterSpec_6::additionalLocalizedStringsIsSet() const
{
    return m_AdditionalLocalizedStringsIsSet;
}

void BTParameterSpec_6::unsetAdditionalLocalizedStrings()
{
    m_AdditionalLocalizedStringsIsSet = false;
}
utility::string_t BTParameterSpec_6::getBtType() const
{
    return m_BtType;
}

void BTParameterSpec_6::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterSpec_6::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterSpec_6::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTParameterSpec_6::getColumnName() const
{
    return m_ColumnName;
}

void BTParameterSpec_6::setColumnName(const utility::string_t& value)
{
    m_ColumnName = value;
    m_ColumnNameIsSet = true;
}

bool BTParameterSpec_6::columnNameIsSet() const
{
    return m_ColumnNameIsSet;
}

void BTParameterSpec_6::unsetColumnName()
{
    m_ColumnNameIsSet = false;
}
std::shared_ptr<BTMParameter_1> BTParameterSpec_6::getDefaultValue() const
{
    return m_DefaultValue;
}

void BTParameterSpec_6::setDefaultValue(const std::shared_ptr<BTMParameter_1>& value)
{
    m_DefaultValue = value;
    m_DefaultValueIsSet = true;
}

bool BTParameterSpec_6::defaultValueIsSet() const
{
    return m_DefaultValueIsSet;
}

void BTParameterSpec_6::unsetDefaultValue()
{
    m_DefaultValueIsSet = false;
}
utility::string_t BTParameterSpec_6::getIconUri() const
{
    return m_IconUri;
}

void BTParameterSpec_6::setIconUri(const utility::string_t& value)
{
    m_IconUri = value;
    m_IconUriIsSet = true;
}

bool BTParameterSpec_6::iconUriIsSet() const
{
    return m_IconUriIsSet;
}

void BTParameterSpec_6::unsetIconUri()
{
    m_IconUriIsSet = false;
}
utility::string_t BTParameterSpec_6::getLocalizableName() const
{
    return m_LocalizableName;
}

void BTParameterSpec_6::setLocalizableName(const utility::string_t& value)
{
    m_LocalizableName = value;
    m_LocalizableNameIsSet = true;
}

bool BTParameterSpec_6::localizableNameIsSet() const
{
    return m_LocalizableNameIsSet;
}

void BTParameterSpec_6::unsetLocalizableName()
{
    m_LocalizableNameIsSet = false;
}
utility::string_t BTParameterSpec_6::getLocalizedName() const
{
    return m_LocalizedName;
}

void BTParameterSpec_6::setLocalizedName(const utility::string_t& value)
{
    m_LocalizedName = value;
    m_LocalizedNameIsSet = true;
}

bool BTParameterSpec_6::localizedNameIsSet() const
{
    return m_LocalizedNameIsSet;
}

void BTParameterSpec_6::unsetLocalizedName()
{
    m_LocalizedNameIsSet = false;
}
utility::string_t BTParameterSpec_6::getParameterId() const
{
    return m_ParameterId;
}

void BTParameterSpec_6::setParameterId(const utility::string_t& value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}

bool BTParameterSpec_6::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}

void BTParameterSpec_6::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
utility::string_t BTParameterSpec_6::getParameterName() const
{
    return m_ParameterName;
}

void BTParameterSpec_6::setParameterName(const utility::string_t& value)
{
    m_ParameterName = value;
    m_ParameterNameIsSet = true;
}

bool BTParameterSpec_6::parameterNameIsSet() const
{
    return m_ParameterNameIsSet;
}

void BTParameterSpec_6::unsetParameterName()
{
    m_ParameterNameIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpec_6::getStringsToLocalize()
{
    return m_StringsToLocalize;
}

void BTParameterSpec_6::setStringsToLocalize(const std::vector<utility::string_t>& value)
{
    m_StringsToLocalize = value;
    m_StringsToLocalizeIsSet = true;
}

bool BTParameterSpec_6::stringsToLocalizeIsSet() const
{
    return m_StringsToLocalizeIsSet;
}

void BTParameterSpec_6::unsetStringsToLocalize()
{
    m_StringsToLocalizeIsSet = false;
}
utility::string_t BTParameterSpec_6::getUiHint() const
{
    return m_UiHint;
}

void BTParameterSpec_6::setUiHint(const utility::string_t& value)
{
    m_UiHint = value;
    m_UiHintIsSet = true;
}

bool BTParameterSpec_6::uiHintIsSet() const
{
    return m_UiHintIsSet;
}

void BTParameterSpec_6::unsetUiHint()
{
    m_UiHintIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpec_6::getUiHints()
{
    return m_UiHints;
}

void BTParameterSpec_6::setUiHints(const std::vector<utility::string_t>& value)
{
    m_UiHints = value;
    m_UiHintsIsSet = true;
}

bool BTParameterSpec_6::uiHintsIsSet() const
{
    return m_UiHintsIsSet;
}

void BTParameterSpec_6::unsetUiHints()
{
    m_UiHintsIsSet = false;
}
std::shared_ptr<BTParameterVisibilityCondition_177> BTParameterSpec_6::getVisibilityCondition() const
{
    return m_VisibilityCondition;
}

void BTParameterSpec_6::setVisibilityCondition(const std::shared_ptr<BTParameterVisibilityCondition_177>& value)
{
    m_VisibilityCondition = value;
    m_VisibilityConditionIsSet = true;
}

bool BTParameterSpec_6::visibilityConditionIsSet() const
{
    return m_VisibilityConditionIsSet;
}

void BTParameterSpec_6::unsetVisibilityCondition()
{
    m_VisibilityConditionIsSet = false;
}
}
}
}
}


