/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTForeignDataResponse_1070.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTForeignDataResponse_1070::BTForeignDataResponse_1070()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_BucketName = utility::conversions::to_string_t("");
    m_BucketNameIsSet = false;
    m_BucketPath = utility::conversions::to_string_t("");
    m_BucketPathIsSet = false;
    m_CacheChunkListIsSet = false;
    m_DataId = utility::conversions::to_string_t("");
    m_DataIdIsSet = false;
    m_Format = utility::conversions::to_string_t("");
    m_FormatIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_UseLocalStorage = false;
    m_UseLocalStorageIsSet = false;
}

BTForeignDataResponse_1070::~BTForeignDataResponse_1070()
{
}

void BTForeignDataResponse_1070::validate()
{
    // TODO: implement validation
}

web::json::value BTForeignDataResponse_1070::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_BucketNameIsSet)
    {
        val[utility::conversions::to_string_t("bucketName")] = ModelBase::toJson(m_BucketName);
    }
    if(m_BucketPathIsSet)
    {
        val[utility::conversions::to_string_t("bucketPath")] = ModelBase::toJson(m_BucketPath);
    }
    if(m_CacheChunkListIsSet)
    {
        val[utility::conversions::to_string_t("cacheChunkList")] = ModelBase::toJson(m_CacheChunkList);
    }
    if(m_DataIdIsSet)
    {
        val[utility::conversions::to_string_t("dataId")] = ModelBase::toJson(m_DataId);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_Format);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t("region")] = ModelBase::toJson(m_Region);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_UseLocalStorageIsSet)
    {
        val[utility::conversions::to_string_t("useLocalStorage")] = ModelBase::toJson(m_UseLocalStorage);
    }

    return val;
}

bool BTForeignDataResponse_1070::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bucketName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bucketName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bucketName;
            ok &= ModelBase::fromJson(fieldValue, refVal_bucketName);
            setBucketName(refVal_bucketName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bucketPath")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bucketPath"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bucketPath;
            ok &= ModelBase::fromJson(fieldValue, refVal_bucketPath);
            setBucketPath(refVal_bucketPath);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cacheChunkList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cacheChunkList"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_cacheChunkList;
            ok &= ModelBase::fromJson(fieldValue, refVal_cacheChunkList);
            setCacheChunkList(refVal_cacheChunkList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataId);
            setDataId(refVal_dataId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("format"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_format);
            setFormat(refVal_format);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("region"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_region;
            ok &= ModelBase::fromJson(fieldValue, refVal_region);
            setRegion(refVal_region);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("size"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useLocalStorage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("useLocalStorage"));
        if(!fieldValue.is_null())
        {
            bool refVal_useLocalStorage;
            ok &= ModelBase::fromJson(fieldValue, refVal_useLocalStorage);
            setUseLocalStorage(refVal_useLocalStorage);
        }
    }
    return ok;
}

void BTForeignDataResponse_1070::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_BucketNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bucketName"), m_BucketName));
    }
    if(m_BucketPathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bucketPath"), m_BucketPath));
    }
    if(m_CacheChunkListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cacheChunkList"), m_CacheChunkList));
    }
    if(m_DataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataId"), m_DataId));
    }
    if(m_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("format"), m_Format));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region"), m_Region));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_UseLocalStorageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("useLocalStorage"), m_UseLocalStorage));
    }
}

bool BTForeignDataResponse_1070::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bucketName")))
    {
        utility::string_t refVal_bucketName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bucketName")), refVal_bucketName );
        setBucketName(refVal_bucketName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bucketPath")))
    {
        utility::string_t refVal_bucketPath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bucketPath")), refVal_bucketPath );
        setBucketPath(refVal_bucketPath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cacheChunkList")))
    {
        std::vector<utility::string_t> refVal_cacheChunkList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cacheChunkList")), refVal_cacheChunkList );
        setCacheChunkList(refVal_cacheChunkList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataId")))
    {
        utility::string_t refVal_dataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataId")), refVal_dataId );
        setDataId(refVal_dataId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        utility::string_t refVal_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("format")), refVal_format );
        setFormat(refVal_format);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region")))
    {
        utility::string_t refVal_region;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("region")), refVal_region );
        setRegion(refVal_region);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        int32_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("size")), refVal_size );
        setSize(refVal_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useLocalStorage")))
    {
        bool refVal_useLocalStorage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("useLocalStorage")), refVal_useLocalStorage );
        setUseLocalStorage(refVal_useLocalStorage);
    }
    return ok;
}

utility::string_t BTForeignDataResponse_1070::getBtType() const
{
    return m_BtType;
}

void BTForeignDataResponse_1070::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTForeignDataResponse_1070::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTForeignDataResponse_1070::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getBucketName() const
{
    return m_BucketName;
}

void BTForeignDataResponse_1070::setBucketName(const utility::string_t& value)
{
    m_BucketName = value;
    m_BucketNameIsSet = true;
}

bool BTForeignDataResponse_1070::bucketNameIsSet() const
{
    return m_BucketNameIsSet;
}

void BTForeignDataResponse_1070::unsetBucketName()
{
    m_BucketNameIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getBucketPath() const
{
    return m_BucketPath;
}

void BTForeignDataResponse_1070::setBucketPath(const utility::string_t& value)
{
    m_BucketPath = value;
    m_BucketPathIsSet = true;
}

bool BTForeignDataResponse_1070::bucketPathIsSet() const
{
    return m_BucketPathIsSet;
}

void BTForeignDataResponse_1070::unsetBucketPath()
{
    m_BucketPathIsSet = false;
}
std::vector<utility::string_t>& BTForeignDataResponse_1070::getCacheChunkList()
{
    return m_CacheChunkList;
}

void BTForeignDataResponse_1070::setCacheChunkList(const std::vector<utility::string_t>& value)
{
    m_CacheChunkList = value;
    m_CacheChunkListIsSet = true;
}

bool BTForeignDataResponse_1070::cacheChunkListIsSet() const
{
    return m_CacheChunkListIsSet;
}

void BTForeignDataResponse_1070::unsetCacheChunkList()
{
    m_CacheChunkListIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getDataId() const
{
    return m_DataId;
}

void BTForeignDataResponse_1070::setDataId(const utility::string_t& value)
{
    m_DataId = value;
    m_DataIdIsSet = true;
}

bool BTForeignDataResponse_1070::dataIdIsSet() const
{
    return m_DataIdIsSet;
}

void BTForeignDataResponse_1070::unsetDataId()
{
    m_DataIdIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getFormat() const
{
    return m_Format;
}

void BTForeignDataResponse_1070::setFormat(const utility::string_t& value)
{
    m_Format = value;
    m_FormatIsSet = true;
}

bool BTForeignDataResponse_1070::formatIsSet() const
{
    return m_FormatIsSet;
}

void BTForeignDataResponse_1070::unsetFormat()
{
    m_FormatIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getName() const
{
    return m_Name;
}

void BTForeignDataResponse_1070::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTForeignDataResponse_1070::nameIsSet() const
{
    return m_NameIsSet;
}

void BTForeignDataResponse_1070::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTForeignDataResponse_1070::getRegion() const
{
    return m_Region;
}

void BTForeignDataResponse_1070::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool BTForeignDataResponse_1070::regionIsSet() const
{
    return m_RegionIsSet;
}

void BTForeignDataResponse_1070::unsetRegion()
{
    m_RegionIsSet = false;
}
int32_t BTForeignDataResponse_1070::getSize() const
{
    return m_Size;
}

void BTForeignDataResponse_1070::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool BTForeignDataResponse_1070::sizeIsSet() const
{
    return m_SizeIsSet;
}

void BTForeignDataResponse_1070::unsetSize()
{
    m_SizeIsSet = false;
}
bool BTForeignDataResponse_1070::isUseLocalStorage() const
{
    return m_UseLocalStorage;
}

void BTForeignDataResponse_1070::setUseLocalStorage(bool value)
{
    m_UseLocalStorage = value;
    m_UseLocalStorageIsSet = true;
}

bool BTForeignDataResponse_1070::useLocalStorageIsSet() const
{
    return m_UseLocalStorageIsSet;
}

void BTForeignDataResponse_1070::unsetUseLocalStorage()
{
    m_UseLocalStorageIsSet = false;
}
}
}
}
}


