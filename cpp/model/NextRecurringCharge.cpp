/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NextRecurringCharge.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NextRecurringCharge::NextRecurringCharge()
{
    m_Amount = 0L;
    m_AmountIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
}

NextRecurringCharge::~NextRecurringCharge()
{
}

void NextRecurringCharge::validate()
{
    // TODO: implement validation
}

web::json::value NextRecurringCharge::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    }

    return val;
}

bool NextRecurringCharge::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amount"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_amount;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount);
            setAmount(refVal_amount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_date);
            setDate(refVal_date);
        }
    }
    return ok;
}

void NextRecurringCharge::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
    }
}

bool NextRecurringCharge::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        int64_t refVal_amount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount")), refVal_amount );
        setAmount(refVal_amount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date")))
    {
        utility::string_t refVal_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date")), refVal_date );
        setDate(refVal_date);
    }
    return ok;
}

int64_t NextRecurringCharge::getAmount() const
{
    return m_Amount;
}

void NextRecurringCharge::setAmount(int64_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool NextRecurringCharge::amountIsSet() const
{
    return m_AmountIsSet;
}

void NextRecurringCharge::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t NextRecurringCharge::getDate() const
{
    return m_date;
}

void NextRecurringCharge::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool NextRecurringCharge::dateIsSet() const
{
    return m_dateIsSet;
}

void NextRecurringCharge::unsetdate()
{
    m_dateIsSet = false;
}
}
}
}
}


