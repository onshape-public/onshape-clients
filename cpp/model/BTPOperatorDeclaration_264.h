/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPOperatorDeclaration_264.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPOperatorDeclaration_264_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPOperatorDeclaration_264_H_


#include "BTPStatementBlock_271.h"
#include "BTPTypeName_290.h"
#include <cpprest/details/basic_types.h>
#include "BTPOperatorDeclaration_264_allOf.h"
#include "BTPIdentifier_8.h"
#include "BTPSpace_10.h"
#include <vector>
#include "BTPAnnotation_231.h"
#include "BTPArgumentDeclaration_232.h"
#include "BTPProcedureDeclarationBase_266.h"
#include "BTPStatement_269.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPOperatorDeclaration_264
    : public BTPProcedureDeclarationBase_266
{
public:
    BTPOperatorDeclaration_264();
    virtual ~BTPOperatorDeclaration_264();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPOperatorDeclaration_264 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getROperator() const;
    bool rOperatorIsSet() const;
    void unsetr_operator();

    void setROperator(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceBeforeOperator() const;
    bool spaceBeforeOperatorIsSet() const;
    void unsetSpaceBeforeOperator();

    void setSpaceBeforeOperator(const std::shared_ptr<BTPSpace_10>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPSpace_10> getSpaceAfterOperator() const;
    bool spaceAfterOperatorIsSet() const;
    void unsetSpaceAfterOperator();

    void setSpaceAfterOperator(const std::shared_ptr<BTPSpace_10>& value);


protected:
    utility::string_t m_r_operator;
    bool m_r_operatorIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceBeforeOperator;
    bool m_SpaceBeforeOperatorIsSet;
    std::shared_ptr<BTPSpace_10> m_SpaceAfterOperator;
    bool m_SpaceAfterOperatorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPOperatorDeclaration_264_H_ */
