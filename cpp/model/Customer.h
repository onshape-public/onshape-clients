/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Customer.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Customer_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Customer_H_


#include "../ModelBase.h"

#include "ExternalAccount.h"
#include "ExternalAccountCollection.h"
#include "NextRecurringCharge.h"
#include "CustomerCardCollection.h"
#include "ShippingDetails.h"
#include <cpprest/details/basic_types.h>
#include "CustomerSubscriptionCollection.h"
#include <map>
#include "Discount.h"
#include <vector>
#include "Subscription.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Customer
    : public ModelBase
{
public:
    Customer();
    virtual ~Customer();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Customer members

    /// <summary>
    /// 
    /// </summary>
    int64_t getAccountBalance() const;
    bool accountBalanceIsSet() const;
    void unsetAccountBalance();

    void setAccountBalance(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBusinessVatId() const;
    bool businessVatIdIsSet() const;
    void unsetBusinessVatId();

    void setBusinessVatId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CustomerCardCollection> getCards() const;
    bool cardsIsSet() const;
    void unsetCards();

    void setCards(const std::shared_ptr<CustomerCardCollection>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();

    void setCreated(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultCard() const;
    bool defaultCardIsSet() const;
    void unsetDefaultCard();

    void setDefaultCard(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultSource() const;
    bool defaultSourceIsSet() const;
    void unsetDefaultSource();

    void setDefaultSource(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExternalAccount> getDefaultSourceObject() const;
    bool defaultSourceObjectIsSet() const;
    void unsetDefaultSourceObject();

    void setDefaultSourceObject(const std::shared_ptr<ExternalAccount>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();

    void setDeleted(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isDelinquent() const;
    bool delinquentIsSet() const;
    void unsetDelinquent();

    void setDelinquent(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Discount> getDiscount() const;
    bool discountIsSet() const;
    void unsetDiscount();

    void setDiscount(const std::shared_ptr<Discount>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isLivemode() const;
    bool livemodeIsSet() const;
    void unsetLivemode();

    void setLivemode(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getMetadata();
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NextRecurringCharge> getNextRecurringCharge() const;
    bool nextRecurringChargeIsSet() const;
    void unsetNextRecurringCharge();

    void setNextRecurringCharge(const std::shared_ptr<NextRecurringCharge>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShippingDetails> getShipping() const;
    bool shippingIsSet() const;
    void unsetShipping();

    void setShipping(const std::shared_ptr<ShippingDetails>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExternalAccountCollection> getSources() const;
    bool sourcesIsSet() const;
    void unsetSources();

    void setSources(const std::shared_ptr<ExternalAccountCollection>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Subscription> getSubscription() const;
    bool subscriptionIsSet() const;
    void unsetSubscription();

    void setSubscription(const std::shared_ptr<Subscription>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CustomerSubscriptionCollection> getSubscriptions() const;
    bool subscriptionsIsSet() const;
    void unsetSubscriptions();

    void setSubscriptions(const std::shared_ptr<CustomerSubscriptionCollection>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getTrialEnd() const;
    bool trialEndIsSet() const;
    void unsetTrialEnd();

    void setTrialEnd(int64_t value);


protected:
    int64_t m_AccountBalance;
    bool m_AccountBalanceIsSet;
    utility::string_t m_BusinessVatId;
    bool m_BusinessVatIdIsSet;
    std::shared_ptr<CustomerCardCollection> m_Cards;
    bool m_CardsIsSet;
    int64_t m_Created;
    bool m_CreatedIsSet;
    utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_DefaultCard;
    bool m_DefaultCardIsSet;
    utility::string_t m_DefaultSource;
    bool m_DefaultSourceIsSet;
    std::shared_ptr<ExternalAccount> m_DefaultSourceObject;
    bool m_DefaultSourceObjectIsSet;
    bool m_Deleted;
    bool m_DeletedIsSet;
    bool m_Delinquent;
    bool m_DelinquentIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<Discount> m_Discount;
    bool m_DiscountIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_Livemode;
    bool m_LivemodeIsSet;
    std::map<utility::string_t, utility::string_t> m_Metadata;
    bool m_MetadataIsSet;
    std::shared_ptr<NextRecurringCharge> m_NextRecurringCharge;
    bool m_NextRecurringChargeIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    std::shared_ptr<ShippingDetails> m_Shipping;
    bool m_ShippingIsSet;
    std::shared_ptr<ExternalAccountCollection> m_Sources;
    bool m_SourcesIsSet;
    std::shared_ptr<Subscription> m_Subscription;
    bool m_SubscriptionIsSet;
    std::shared_ptr<CustomerSubscriptionCollection> m_Subscriptions;
    bool m_SubscriptionsIsSet;
    int64_t m_TrialEnd;
    bool m_TrialEndIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Customer_H_ */
