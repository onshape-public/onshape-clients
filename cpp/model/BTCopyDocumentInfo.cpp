/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCopyDocumentInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCopyDocumentInfo::BTCopyDocumentInfo()
{
    m_NewDocumentId = utility::conversions::to_string_t("");
    m_NewDocumentIdIsSet = false;
    m_NewDocumentName = utility::conversions::to_string_t("");
    m_NewDocumentNameIsSet = false;
    m_NewOwnerIsSet = false;
    m_NewParentId = utility::conversions::to_string_t("");
    m_NewParentIdIsSet = false;
    m_NewProjectId = utility::conversions::to_string_t("");
    m_NewProjectIdIsSet = false;
    m_NewWorkspaceId = utility::conversions::to_string_t("");
    m_NewWorkspaceIdIsSet = false;
}

BTCopyDocumentInfo::~BTCopyDocumentInfo()
{
}

void BTCopyDocumentInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCopyDocumentInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NewDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("newDocumentId")] = ModelBase::toJson(m_NewDocumentId);
    }
    if(m_NewDocumentNameIsSet)
    {
        val[utility::conversions::to_string_t("newDocumentName")] = ModelBase::toJson(m_NewDocumentName);
    }
    if(m_NewOwnerIsSet)
    {
        val[utility::conversions::to_string_t("newOwner")] = ModelBase::toJson(m_NewOwner);
    }
    if(m_NewParentIdIsSet)
    {
        val[utility::conversions::to_string_t("newParentId")] = ModelBase::toJson(m_NewParentId);
    }
    if(m_NewProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("newProjectId")] = ModelBase::toJson(m_NewProjectId);
    }
    if(m_NewWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("newWorkspaceId")] = ModelBase::toJson(m_NewWorkspaceId);
    }

    return val;
}

bool BTCopyDocumentInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("newDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newDocumentId);
            setNewDocumentId(refVal_newDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newDocumentName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newDocumentName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newDocumentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_newDocumentName);
            setNewDocumentName(refVal_newDocumentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newOwner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newOwner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOwnerInfo> refVal_newOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_newOwner);
            setNewOwner(refVal_newOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newParentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newParentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newParentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newParentId);
            setNewParentId(refVal_newParentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newProjectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newProjectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newProjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newProjectId);
            setNewProjectId(refVal_newProjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_newWorkspaceId);
            setNewWorkspaceId(refVal_newWorkspaceId);
        }
    }
    return ok;
}

void BTCopyDocumentInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NewDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newDocumentId"), m_NewDocumentId));
    }
    if(m_NewDocumentNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newDocumentName"), m_NewDocumentName));
    }
    if(m_NewOwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newOwner"), m_NewOwner));
    }
    if(m_NewParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newParentId"), m_NewParentId));
    }
    if(m_NewProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newProjectId"), m_NewProjectId));
    }
    if(m_NewWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newWorkspaceId"), m_NewWorkspaceId));
    }
}

bool BTCopyDocumentInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("newDocumentId")))
    {
        utility::string_t refVal_newDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newDocumentId")), refVal_newDocumentId );
        setNewDocumentId(refVal_newDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newDocumentName")))
    {
        utility::string_t refVal_newDocumentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newDocumentName")), refVal_newDocumentName );
        setNewDocumentName(refVal_newDocumentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newOwner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_newOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newOwner")), refVal_newOwner );
        setNewOwner(refVal_newOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newParentId")))
    {
        utility::string_t refVal_newParentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newParentId")), refVal_newParentId );
        setNewParentId(refVal_newParentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newProjectId")))
    {
        utility::string_t refVal_newProjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newProjectId")), refVal_newProjectId );
        setNewProjectId(refVal_newProjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newWorkspaceId")))
    {
        utility::string_t refVal_newWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newWorkspaceId")), refVal_newWorkspaceId );
        setNewWorkspaceId(refVal_newWorkspaceId);
    }
    return ok;
}

utility::string_t BTCopyDocumentInfo::getNewDocumentId() const
{
    return m_NewDocumentId;
}

void BTCopyDocumentInfo::setNewDocumentId(const utility::string_t& value)
{
    m_NewDocumentId = value;
    m_NewDocumentIdIsSet = true;
}

bool BTCopyDocumentInfo::newDocumentIdIsSet() const
{
    return m_NewDocumentIdIsSet;
}

void BTCopyDocumentInfo::unsetNewDocumentId()
{
    m_NewDocumentIdIsSet = false;
}
utility::string_t BTCopyDocumentInfo::getNewDocumentName() const
{
    return m_NewDocumentName;
}

void BTCopyDocumentInfo::setNewDocumentName(const utility::string_t& value)
{
    m_NewDocumentName = value;
    m_NewDocumentNameIsSet = true;
}

bool BTCopyDocumentInfo::newDocumentNameIsSet() const
{
    return m_NewDocumentNameIsSet;
}

void BTCopyDocumentInfo::unsetNewDocumentName()
{
    m_NewDocumentNameIsSet = false;
}
std::shared_ptr<BTOwnerInfo> BTCopyDocumentInfo::getNewOwner() const
{
    return m_NewOwner;
}

void BTCopyDocumentInfo::setNewOwner(const std::shared_ptr<BTOwnerInfo>& value)
{
    m_NewOwner = value;
    m_NewOwnerIsSet = true;
}

bool BTCopyDocumentInfo::newOwnerIsSet() const
{
    return m_NewOwnerIsSet;
}

void BTCopyDocumentInfo::unsetNewOwner()
{
    m_NewOwnerIsSet = false;
}
utility::string_t BTCopyDocumentInfo::getNewParentId() const
{
    return m_NewParentId;
}

void BTCopyDocumentInfo::setNewParentId(const utility::string_t& value)
{
    m_NewParentId = value;
    m_NewParentIdIsSet = true;
}

bool BTCopyDocumentInfo::newParentIdIsSet() const
{
    return m_NewParentIdIsSet;
}

void BTCopyDocumentInfo::unsetNewParentId()
{
    m_NewParentIdIsSet = false;
}
utility::string_t BTCopyDocumentInfo::getNewProjectId() const
{
    return m_NewProjectId;
}

void BTCopyDocumentInfo::setNewProjectId(const utility::string_t& value)
{
    m_NewProjectId = value;
    m_NewProjectIdIsSet = true;
}

bool BTCopyDocumentInfo::newProjectIdIsSet() const
{
    return m_NewProjectIdIsSet;
}

void BTCopyDocumentInfo::unsetNewProjectId()
{
    m_NewProjectIdIsSet = false;
}
utility::string_t BTCopyDocumentInfo::getNewWorkspaceId() const
{
    return m_NewWorkspaceId;
}

void BTCopyDocumentInfo::setNewWorkspaceId(const utility::string_t& value)
{
    m_NewWorkspaceId = value;
    m_NewWorkspaceIdIsSet = true;
}

bool BTCopyDocumentInfo::newWorkspaceIdIsSet() const
{
    return m_NewWorkspaceIdIsSet;
}

void BTCopyDocumentInfo::unsetNewWorkspaceId()
{
    m_NewWorkspaceIdIsSet = false;
}
}
}
}
}


