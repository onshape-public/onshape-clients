/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMInferenceQueryWithOccurrence_1083.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMInferenceQueryWithOccurrence_1083_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMInferenceQueryWithOccurrence_1083_H_


#include "BTMIndividualQueryWithOccurrence_811.h"
#include "BTMInferenceQueryWithOccurrence_1083_allOf.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "BTMIndividualQueryBase_139.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMInferenceQueryWithOccurrence_1083
    : public BTMIndividualQueryWithOccurrence_811
{
public:
    BTMInferenceQueryWithOccurrence_1083();
    virtual ~BTMInferenceQueryWithOccurrence_1083();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMInferenceQueryWithOccurrence_1083 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSecondEntityQuery() const;
    bool secondEntityQueryIsSet() const;
    void unsetSecondEntityQuery();

    void setSecondEntityQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInferenceType() const;
    bool inferenceTypeIsSet() const;
    void unsetInferenceType();

    void setInferenceType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSecondDeterministicId() const;
    bool secondDeterministicIdIsSet() const;
    void unsetSecondDeterministicId();

    void setSecondDeterministicId(const utility::string_t& value);


protected:
    utility::string_t m_SecondEntityQuery;
    bool m_SecondEntityQueryIsSet;
    utility::string_t m_InferenceType;
    bool m_InferenceTypeIsSet;
    utility::string_t m_SecondDeterministicId;
    bool m_SecondDeterministicIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMInferenceQueryWithOccurrence_1083_H_ */
