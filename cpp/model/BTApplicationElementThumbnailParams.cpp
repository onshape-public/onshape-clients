/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTApplicationElementThumbnailParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTApplicationElementThumbnailParams::BTApplicationElementThumbnailParams()
{
    m_Base64EncodedImage = utility::conversions::to_string_t("");
    m_Base64EncodedImageIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ImageHeight = 0;
    m_ImageHeightIsSet = false;
    m_ImageWidth = 0;
    m_ImageWidthIsSet = false;
    m_IsPrimary = false;
    m_IsPrimaryIsSet = false;
    m_UniqueId = utility::conversions::to_string_t("");
    m_UniqueIdIsSet = false;
}

BTApplicationElementThumbnailParams::~BTApplicationElementThumbnailParams()
{
}

void BTApplicationElementThumbnailParams::validate()
{
    // TODO: implement validation
}

web::json::value BTApplicationElementThumbnailParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Base64EncodedImageIsSet)
    {
        val[utility::conversions::to_string_t("base64EncodedImage")] = ModelBase::toJson(m_Base64EncodedImage);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ImageHeightIsSet)
    {
        val[utility::conversions::to_string_t("imageHeight")] = ModelBase::toJson(m_ImageHeight);
    }
    if(m_ImageWidthIsSet)
    {
        val[utility::conversions::to_string_t("imageWidth")] = ModelBase::toJson(m_ImageWidth);
    }
    if(m_IsPrimaryIsSet)
    {
        val[utility::conversions::to_string_t("isPrimary")] = ModelBase::toJson(m_IsPrimary);
    }
    if(m_UniqueIdIsSet)
    {
        val[utility::conversions::to_string_t("uniqueId")] = ModelBase::toJson(m_UniqueId);
    }

    return val;
}

bool BTApplicationElementThumbnailParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("base64EncodedImage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("base64EncodedImage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_base64EncodedImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_base64EncodedImage);
            setBase64EncodedImage(refVal_base64EncodedImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imageHeight")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imageHeight"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_imageHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_imageHeight);
            setImageHeight(refVal_imageHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imageWidth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imageWidth"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_imageWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_imageWidth);
            setImageWidth(refVal_imageWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPrimary")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPrimary"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPrimary;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPrimary);
            setIsPrimary(refVal_isPrimary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uniqueId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uniqueId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uniqueId);
            setUniqueId(refVal_uniqueId);
        }
    }
    return ok;
}

void BTApplicationElementThumbnailParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Base64EncodedImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("base64EncodedImage"), m_Base64EncodedImage));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ImageHeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageHeight"), m_ImageHeight));
    }
    if(m_ImageWidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageWidth"), m_ImageWidth));
    }
    if(m_IsPrimaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPrimary"), m_IsPrimary));
    }
    if(m_UniqueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uniqueId"), m_UniqueId));
    }
}

bool BTApplicationElementThumbnailParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("base64EncodedImage")))
    {
        utility::string_t refVal_base64EncodedImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("base64EncodedImage")), refVal_base64EncodedImage );
        setBase64EncodedImage(refVal_base64EncodedImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageHeight")))
    {
        int32_t refVal_imageHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageHeight")), refVal_imageHeight );
        setImageHeight(refVal_imageHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageWidth")))
    {
        int32_t refVal_imageWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageWidth")), refVal_imageWidth );
        setImageWidth(refVal_imageWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPrimary")))
    {
        bool refVal_isPrimary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPrimary")), refVal_isPrimary );
        setIsPrimary(refVal_isPrimary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uniqueId")))
    {
        utility::string_t refVal_uniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uniqueId")), refVal_uniqueId );
        setUniqueId(refVal_uniqueId);
    }
    return ok;
}

utility::string_t BTApplicationElementThumbnailParams::getBase64EncodedImage() const
{
    return m_Base64EncodedImage;
}

void BTApplicationElementThumbnailParams::setBase64EncodedImage(const utility::string_t& value)
{
    m_Base64EncodedImage = value;
    m_Base64EncodedImageIsSet = true;
}

bool BTApplicationElementThumbnailParams::base64EncodedImageIsSet() const
{
    return m_Base64EncodedImageIsSet;
}

void BTApplicationElementThumbnailParams::unsetBase64EncodedImage()
{
    m_Base64EncodedImageIsSet = false;
}
utility::string_t BTApplicationElementThumbnailParams::getDescription() const
{
    return m_Description;
}

void BTApplicationElementThumbnailParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTApplicationElementThumbnailParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTApplicationElementThumbnailParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t BTApplicationElementThumbnailParams::getImageHeight() const
{
    return m_ImageHeight;
}

void BTApplicationElementThumbnailParams::setImageHeight(int32_t value)
{
    m_ImageHeight = value;
    m_ImageHeightIsSet = true;
}

bool BTApplicationElementThumbnailParams::imageHeightIsSet() const
{
    return m_ImageHeightIsSet;
}

void BTApplicationElementThumbnailParams::unsetImageHeight()
{
    m_ImageHeightIsSet = false;
}
int32_t BTApplicationElementThumbnailParams::getImageWidth() const
{
    return m_ImageWidth;
}

void BTApplicationElementThumbnailParams::setImageWidth(int32_t value)
{
    m_ImageWidth = value;
    m_ImageWidthIsSet = true;
}

bool BTApplicationElementThumbnailParams::imageWidthIsSet() const
{
    return m_ImageWidthIsSet;
}

void BTApplicationElementThumbnailParams::unsetImageWidth()
{
    m_ImageWidthIsSet = false;
}
bool BTApplicationElementThumbnailParams::isIsPrimary() const
{
    return m_IsPrimary;
}

void BTApplicationElementThumbnailParams::setIsPrimary(bool value)
{
    m_IsPrimary = value;
    m_IsPrimaryIsSet = true;
}

bool BTApplicationElementThumbnailParams::isPrimaryIsSet() const
{
    return m_IsPrimaryIsSet;
}

void BTApplicationElementThumbnailParams::unsetIsPrimary()
{
    m_IsPrimaryIsSet = false;
}
utility::string_t BTApplicationElementThumbnailParams::getUniqueId() const
{
    return m_UniqueId;
}

void BTApplicationElementThumbnailParams::setUniqueId(const utility::string_t& value)
{
    m_UniqueId = value;
    m_UniqueIdIsSet = true;
}

bool BTApplicationElementThumbnailParams::uniqueIdIsSet() const
{
    return m_UniqueIdIsSet;
}

void BTApplicationElementThumbnailParams::unsetUniqueId()
{
    m_UniqueIdIsSet = false;
}
}
}
}
}


