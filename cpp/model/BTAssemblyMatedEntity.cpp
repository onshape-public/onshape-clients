/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyMatedEntity.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyMatedEntity::BTAssemblyMatedEntity()
{
    m_MateCSIsSet = false;
    m_MatedOccurrenceIsSet = false;
}

BTAssemblyMatedEntity::~BTAssemblyMatedEntity()
{
}

void BTAssemblyMatedEntity::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyMatedEntity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MateCSIsSet)
    {
        val[utility::conversions::to_string_t("mateCS")] = ModelBase::toJson(m_MateCS);
    }
    if(m_MatedOccurrenceIsSet)
    {
        val[utility::conversions::to_string_t("matedOccurrence")] = ModelBase::toJson(m_MatedOccurrence);
    }

    return val;
}

bool BTAssemblyMatedEntity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mateCS")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mateCS"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMateConnectorCSInfo> refVal_mateCS;
            ok &= ModelBase::fromJson(fieldValue, refVal_mateCS);
            setMateCS(refVal_mateCS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("matedOccurrence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("matedOccurrence"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_matedOccurrence;
            ok &= ModelBase::fromJson(fieldValue, refVal_matedOccurrence);
            setMatedOccurrence(refVal_matedOccurrence);
        }
    }
    return ok;
}

void BTAssemblyMatedEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MateCSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mateCS"), m_MateCS));
    }
    if(m_MatedOccurrenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("matedOccurrence"), m_MatedOccurrence));
    }
}

bool BTAssemblyMatedEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mateCS")))
    {
        std::shared_ptr<BTMateConnectorCSInfo> refVal_mateCS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mateCS")), refVal_mateCS );
        setMateCS(refVal_mateCS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("matedOccurrence")))
    {
        std::vector<utility::string_t> refVal_matedOccurrence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("matedOccurrence")), refVal_matedOccurrence );
        setMatedOccurrence(refVal_matedOccurrence);
    }
    return ok;
}

std::shared_ptr<BTMateConnectorCSInfo> BTAssemblyMatedEntity::getMateCS() const
{
    return m_MateCS;
}

void BTAssemblyMatedEntity::setMateCS(const std::shared_ptr<BTMateConnectorCSInfo>& value)
{
    m_MateCS = value;
    m_MateCSIsSet = true;
}

bool BTAssemblyMatedEntity::mateCSIsSet() const
{
    return m_MateCSIsSet;
}

void BTAssemblyMatedEntity::unsetMateCS()
{
    m_MateCSIsSet = false;
}
std::vector<utility::string_t>& BTAssemblyMatedEntity::getMatedOccurrence()
{
    return m_MatedOccurrence;
}

void BTAssemblyMatedEntity::setMatedOccurrence(const std::vector<utility::string_t>& value)
{
    m_MatedOccurrence = value;
    m_MatedOccurrenceIsSet = true;
}

bool BTAssemblyMatedEntity::matedOccurrenceIsSet() const
{
    return m_MatedOccurrenceIsSet;
}

void BTAssemblyMatedEntity::unsetMatedOccurrence()
{
    m_MatedOccurrenceIsSet = false;
}
}
}
}
}


