/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCommonUnitInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCommonUnitInfo::BTCommonUnitInfo()
{
    m_Abbreviation = utility::conversions::to_string_t("");
    m_AbbreviationIsSet = false;
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_UnitName = utility::conversions::to_string_t("");
    m_UnitNameIsSet = false;
    m_UnitType = utility::conversions::to_string_t("");
    m_UnitTypeIsSet = false;
    m_ValueInBaseUnits = 0.0;
    m_ValueInBaseUnitsIsSet = false;
}

BTCommonUnitInfo::~BTCommonUnitInfo()
{
}

void BTCommonUnitInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCommonUnitInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AbbreviationIsSet)
    {
        val[utility::conversions::to_string_t("abbreviation")] = ModelBase::toJson(m_Abbreviation);
    }
    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t("unit")] = ModelBase::toJson(m_Unit);
    }
    if(m_UnitNameIsSet)
    {
        val[utility::conversions::to_string_t("unitName")] = ModelBase::toJson(m_UnitName);
    }
    if(m_UnitTypeIsSet)
    {
        val[utility::conversions::to_string_t("unitType")] = ModelBase::toJson(m_UnitType);
    }
    if(m_ValueInBaseUnitsIsSet)
    {
        val[utility::conversions::to_string_t("valueInBaseUnits")] = ModelBase::toJson(m_ValueInBaseUnits);
    }

    return val;
}

bool BTCommonUnitInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("abbreviation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("abbreviation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_abbreviation;
            ok &= ModelBase::fromJson(fieldValue, refVal_abbreviation);
            setAbbreviation(refVal_abbreviation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unit"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unit;
            ok &= ModelBase::fromJson(fieldValue, refVal_unit);
            setUnit(refVal_unit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unitName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unitName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unitName;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitName);
            setUnitName(refVal_unitName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unitType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unitType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unitType;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitType);
            setUnitType(refVal_unitType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valueInBaseUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valueInBaseUnits"));
        if(!fieldValue.is_null())
        {
            double refVal_valueInBaseUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_valueInBaseUnits);
            setValueInBaseUnits(refVal_valueInBaseUnits);
        }
    }
    return ok;
}

void BTCommonUnitInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AbbreviationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("abbreviation"), m_Abbreviation));
    }
    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit"), m_Unit));
    }
    if(m_UnitNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unitName"), m_UnitName));
    }
    if(m_UnitTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unitType"), m_UnitType));
    }
    if(m_ValueInBaseUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valueInBaseUnits"), m_ValueInBaseUnits));
    }
}

bool BTCommonUnitInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("abbreviation")))
    {
        utility::string_t refVal_abbreviation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("abbreviation")), refVal_abbreviation );
        setAbbreviation(refVal_abbreviation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unit")))
    {
        utility::string_t refVal_unit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit")), refVal_unit );
        setUnit(refVal_unit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unitName")))
    {
        utility::string_t refVal_unitName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unitName")), refVal_unitName );
        setUnitName(refVal_unitName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unitType")))
    {
        utility::string_t refVal_unitType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unitType")), refVal_unitType );
        setUnitType(refVal_unitType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valueInBaseUnits")))
    {
        double refVal_valueInBaseUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valueInBaseUnits")), refVal_valueInBaseUnits );
        setValueInBaseUnits(refVal_valueInBaseUnits);
    }
    return ok;
}

utility::string_t BTCommonUnitInfo::getAbbreviation() const
{
    return m_Abbreviation;
}

void BTCommonUnitInfo::setAbbreviation(const utility::string_t& value)
{
    m_Abbreviation = value;
    m_AbbreviationIsSet = true;
}

bool BTCommonUnitInfo::abbreviationIsSet() const
{
    return m_AbbreviationIsSet;
}

void BTCommonUnitInfo::unsetAbbreviation()
{
    m_AbbreviationIsSet = false;
}
utility::string_t BTCommonUnitInfo::getUnit() const
{
    return m_Unit;
}

void BTCommonUnitInfo::setUnit(const utility::string_t& value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}

bool BTCommonUnitInfo::unitIsSet() const
{
    return m_UnitIsSet;
}

void BTCommonUnitInfo::unsetUnit()
{
    m_UnitIsSet = false;
}
utility::string_t BTCommonUnitInfo::getUnitName() const
{
    return m_UnitName;
}

void BTCommonUnitInfo::setUnitName(const utility::string_t& value)
{
    m_UnitName = value;
    m_UnitNameIsSet = true;
}

bool BTCommonUnitInfo::unitNameIsSet() const
{
    return m_UnitNameIsSet;
}

void BTCommonUnitInfo::unsetUnitName()
{
    m_UnitNameIsSet = false;
}
utility::string_t BTCommonUnitInfo::getUnitType() const
{
    return m_UnitType;
}

void BTCommonUnitInfo::setUnitType(const utility::string_t& value)
{
    m_UnitType = value;
    m_UnitTypeIsSet = true;
}

bool BTCommonUnitInfo::unitTypeIsSet() const
{
    return m_UnitTypeIsSet;
}

void BTCommonUnitInfo::unsetUnitType()
{
    m_UnitTypeIsSet = false;
}
double BTCommonUnitInfo::getValueInBaseUnits() const
{
    return m_ValueInBaseUnits;
}

void BTCommonUnitInfo::setValueInBaseUnits(double value)
{
    m_ValueInBaseUnits = value;
    m_ValueInBaseUnitsIsSet = true;
}

bool BTCommonUnitInfo::valueInBaseUnitsIsSet() const
{
    return m_ValueInBaseUnitsIsSet;
}

void BTCommonUnitInfo::unsetValueInBaseUnits()
{
    m_ValueInBaseUnitsIsSet = false;
}
}
}
}
}


