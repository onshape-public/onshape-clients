/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMicroversionId_366.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMicroversionId_366::BTMicroversionId_366()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_TheId = utility::conversions::to_string_t("");
    m_TheIdIsSet = false;
}

BTMicroversionId_366::~BTMicroversionId_366()
{
}

void BTMicroversionId_366::validate()
{
    // TODO: implement validation
}

web::json::value BTMicroversionId_366::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_DeletedIsSet)
    {
        val[utility::conversions::to_string_t("deleted")] = ModelBase::toJson(m_Deleted);
    }
    if(m_TheIdIsSet)
    {
        val[utility::conversions::to_string_t("theId")] = ModelBase::toJson(m_TheId);
    }

    return val;
}

bool BTMicroversionId_366::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deleted")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deleted"));
        if(!fieldValue.is_null())
        {
            bool refVal_deleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_deleted);
            setDeleted(refVal_deleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("theId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("theId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_theId;
            ok &= ModelBase::fromJson(fieldValue, refVal_theId);
            setTheId(refVal_theId);
        }
    }
    return ok;
}

void BTMicroversionId_366::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleted"), m_Deleted));
    }
    if(m_TheIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("theId"), m_TheId));
    }
}

bool BTMicroversionId_366::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleted")))
    {
        bool refVal_deleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleted")), refVal_deleted );
        setDeleted(refVal_deleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("theId")))
    {
        utility::string_t refVal_theId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("theId")), refVal_theId );
        setTheId(refVal_theId);
    }
    return ok;
}

utility::string_t BTMicroversionId_366::getBtType() const
{
    return m_BtType;
}

void BTMicroversionId_366::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMicroversionId_366::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMicroversionId_366::unsetBtType()
{
    m_BtTypeIsSet = false;
}
bool BTMicroversionId_366::isDeleted() const
{
    return m_Deleted;
}

void BTMicroversionId_366::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool BTMicroversionId_366::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void BTMicroversionId_366::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t BTMicroversionId_366::getTheId() const
{
    return m_TheId;
}

void BTMicroversionId_366::setTheId(const utility::string_t& value)
{
    m_TheId = value;
    m_TheIdIsSet = true;
}

bool BTMicroversionId_366::theIdIsSet() const
{
    return m_TheIdIsSet;
}

void BTMicroversionId_366::unsetTheId()
{
    m_TheIdIsSet = false;
}
}
}
}
}


