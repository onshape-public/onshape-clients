/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ThreeDSecure.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ThreeDSecure::ThreeDSecure()
{
    m_Amount = 0L;
    m_AmountIsSet = false;
    m_Authenticated = false;
    m_AuthenticatedIsSet = false;
    m_CardIsSet = false;
    m_Created = 0L;
    m_CreatedIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Livemode = false;
    m_LivemodeIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_RedirectURL = utility::conversions::to_string_t("");
    m_RedirectURLIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

ThreeDSecure::~ThreeDSecure()
{
}

void ThreeDSecure::validate()
{
    // TODO: implement validation
}

web::json::value ThreeDSecure::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_AuthenticatedIsSet)
    {
        val[utility::conversions::to_string_t("authenticated")] = ModelBase::toJson(m_Authenticated);
    }
    if(m_CardIsSet)
    {
        val[utility::conversions::to_string_t("card")] = ModelBase::toJson(m_Card);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LivemodeIsSet)
    {
        val[utility::conversions::to_string_t("livemode")] = ModelBase::toJson(m_Livemode);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_RedirectURLIsSet)
    {
        val[utility::conversions::to_string_t("redirectURL")] = ModelBase::toJson(m_RedirectURL);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool ThreeDSecure::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amount"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_amount;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount);
            setAmount(refVal_amount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("authenticated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("authenticated"));
        if(!fieldValue.is_null())
        {
            bool refVal_authenticated;
            ok &= ModelBase::fromJson(fieldValue, refVal_authenticated);
            setAuthenticated(refVal_authenticated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("card")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("card"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Card> refVal_card;
            ok &= ModelBase::fromJson(fieldValue, refVal_card);
            setCard(refVal_card);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currency"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_currency);
            setCurrency(refVal_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("livemode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("livemode"));
        if(!fieldValue.is_null())
        {
            bool refVal_livemode;
            ok &= ModelBase::fromJson(fieldValue, refVal_livemode);
            setLivemode(refVal_livemode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("redirectURL")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("redirectURL"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_redirectURL;
            ok &= ModelBase::fromJson(fieldValue, refVal_redirectURL);
            setRedirectURL(refVal_redirectURL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    return ok;
}

void ThreeDSecure::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_AuthenticatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("authenticated"), m_Authenticated));
    }
    if(m_CardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("card"), m_Card));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_LivemodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("livemode"), m_Livemode));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_RedirectURLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("redirectURL"), m_RedirectURL));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
}

bool ThreeDSecure::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        int64_t refVal_amount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount")), refVal_amount );
        setAmount(refVal_amount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("authenticated")))
    {
        bool refVal_authenticated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("authenticated")), refVal_authenticated );
        setAuthenticated(refVal_authenticated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("card")))
    {
        std::shared_ptr<Card> refVal_card;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("card")), refVal_card );
        setCard(refVal_card);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        int64_t refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        utility::string_t refVal_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency")), refVal_currency );
        setCurrency(refVal_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("livemode")))
    {
        bool refVal_livemode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("livemode")), refVal_livemode );
        setLivemode(refVal_livemode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("redirectURL")))
    {
        utility::string_t refVal_redirectURL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("redirectURL")), refVal_redirectURL );
        setRedirectURL(refVal_redirectURL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    return ok;
}

int64_t ThreeDSecure::getAmount() const
{
    return m_Amount;
}

void ThreeDSecure::setAmount(int64_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool ThreeDSecure::amountIsSet() const
{
    return m_AmountIsSet;
}

void ThreeDSecure::unsetAmount()
{
    m_AmountIsSet = false;
}
bool ThreeDSecure::isAuthenticated() const
{
    return m_Authenticated;
}

void ThreeDSecure::setAuthenticated(bool value)
{
    m_Authenticated = value;
    m_AuthenticatedIsSet = true;
}

bool ThreeDSecure::authenticatedIsSet() const
{
    return m_AuthenticatedIsSet;
}

void ThreeDSecure::unsetAuthenticated()
{
    m_AuthenticatedIsSet = false;
}
std::shared_ptr<Card> ThreeDSecure::getCard() const
{
    return m_Card;
}

void ThreeDSecure::setCard(const std::shared_ptr<Card>& value)
{
    m_Card = value;
    m_CardIsSet = true;
}

bool ThreeDSecure::cardIsSet() const
{
    return m_CardIsSet;
}

void ThreeDSecure::unsetCard()
{
    m_CardIsSet = false;
}
int64_t ThreeDSecure::getCreated() const
{
    return m_Created;
}

void ThreeDSecure::setCreated(int64_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool ThreeDSecure::createdIsSet() const
{
    return m_CreatedIsSet;
}

void ThreeDSecure::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t ThreeDSecure::getCurrency() const
{
    return m_Currency;
}

void ThreeDSecure::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool ThreeDSecure::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void ThreeDSecure::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t ThreeDSecure::getId() const
{
    return m_Id;
}

void ThreeDSecure::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ThreeDSecure::idIsSet() const
{
    return m_IdIsSet;
}

void ThreeDSecure::unsetId()
{
    m_IdIsSet = false;
}
bool ThreeDSecure::isLivemode() const
{
    return m_Livemode;
}

void ThreeDSecure::setLivemode(bool value)
{
    m_Livemode = value;
    m_LivemodeIsSet = true;
}

bool ThreeDSecure::livemodeIsSet() const
{
    return m_LivemodeIsSet;
}

void ThreeDSecure::unsetLivemode()
{
    m_LivemodeIsSet = false;
}
utility::string_t ThreeDSecure::getObject() const
{
    return m_object;
}

void ThreeDSecure::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool ThreeDSecure::objectIsSet() const
{
    return m_objectIsSet;
}

void ThreeDSecure::unsetobject()
{
    m_objectIsSet = false;
}
utility::string_t ThreeDSecure::getRedirectURL() const
{
    return m_RedirectURL;
}

void ThreeDSecure::setRedirectURL(const utility::string_t& value)
{
    m_RedirectURL = value;
    m_RedirectURLIsSet = true;
}

bool ThreeDSecure::redirectURLIsSet() const
{
    return m_RedirectURLIsSet;
}

void ThreeDSecure::unsetRedirectURL()
{
    m_RedirectURLIsSet = false;
}
utility::string_t ThreeDSecure::getStatus() const
{
    return m_Status;
}

void ThreeDSecure::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ThreeDSecure::statusIsSet() const
{
    return m_StatusIsSet;
}

void ThreeDSecure::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


