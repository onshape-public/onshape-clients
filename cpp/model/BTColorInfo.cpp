/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTColorInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTColorInfo::BTColorInfo()
{
    m_Blue = 0;
    m_BlueIsSet = false;
    m_Green = 0;
    m_GreenIsSet = false;
    m_Red = 0;
    m_RedIsSet = false;
}

BTColorInfo::~BTColorInfo()
{
}

void BTColorInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTColorInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BlueIsSet)
    {
        val[utility::conversions::to_string_t("blue")] = ModelBase::toJson(m_Blue);
    }
    if(m_GreenIsSet)
    {
        val[utility::conversions::to_string_t("green")] = ModelBase::toJson(m_Green);
    }
    if(m_RedIsSet)
    {
        val[utility::conversions::to_string_t("red")] = ModelBase::toJson(m_Red);
    }

    return val;
}

bool BTColorInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("blue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("blue"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_blue;
            ok &= ModelBase::fromJson(fieldValue, refVal_blue);
            setBlue(refVal_blue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("green")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("green"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_green;
            ok &= ModelBase::fromJson(fieldValue, refVal_green);
            setGreen(refVal_green);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("red")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("red"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_red;
            ok &= ModelBase::fromJson(fieldValue, refVal_red);
            setRed(refVal_red);
        }
    }
    return ok;
}

void BTColorInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BlueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blue"), m_Blue));
    }
    if(m_GreenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("green"), m_Green));
    }
    if(m_RedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("red"), m_Red));
    }
}

bool BTColorInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("blue")))
    {
        int32_t refVal_blue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("blue")), refVal_blue );
        setBlue(refVal_blue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("green")))
    {
        int32_t refVal_green;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("green")), refVal_green );
        setGreen(refVal_green);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("red")))
    {
        int32_t refVal_red;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("red")), refVal_red );
        setRed(refVal_red);
    }
    return ok;
}

int32_t BTColorInfo::getBlue() const
{
    return m_Blue;
}

void BTColorInfo::setBlue(int32_t value)
{
    m_Blue = value;
    m_BlueIsSet = true;
}

bool BTColorInfo::blueIsSet() const
{
    return m_BlueIsSet;
}

void BTColorInfo::unsetBlue()
{
    m_BlueIsSet = false;
}
int32_t BTColorInfo::getGreen() const
{
    return m_Green;
}

void BTColorInfo::setGreen(int32_t value)
{
    m_Green = value;
    m_GreenIsSet = true;
}

bool BTColorInfo::greenIsSet() const
{
    return m_GreenIsSet;
}

void BTColorInfo::unsetGreen()
{
    m_GreenIsSet = false;
}
int32_t BTColorInfo::getRed() const
{
    return m_Red;
}

void BTColorInfo::setRed(int32_t value)
{
    m_Red = value;
    m_RedIsSet = true;
}

bool BTColorInfo::redIsSet() const
{
    return m_RedIsSet;
}

void BTColorInfo::unsetRed()
{
    m_RedIsSet = false;
}
}
}
}
}


