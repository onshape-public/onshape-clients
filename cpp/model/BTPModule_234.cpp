/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPModule_234.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPModule_234::BTPModule_234()
{
    m_VersionNumber = 0;
    m_VersionNumberIsSet = false;
    m_DeepImportsIsSet = false;
    m_IsInternalModule = false;
    m_IsInternalModuleIsSet = false;
    m_ImportsIsSet = false;
    m_PathMapIsSet = false;
    m_VersionIsSet = false;
    m_TopLevelIsSet = false;
    m_PathToCacheIsSet = false;
    m_IsBlob = false;
    m_IsBlobIsSet = false;
    m_MayHaveImplicitImports = false;
    m_MayHaveImplicitImportsIsSet = false;
}

BTPModule_234::~BTPModule_234()
{
}

void BTPModule_234::validate()
{
    // TODO: implement validation
}

web::json::value BTPModule_234::toJson() const
{
    web::json::value val = this->BTPNode_7::toJson();
    
    if(m_VersionNumberIsSet)
    {
        val[utility::conversions::to_string_t("versionNumber")] = ModelBase::toJson(m_VersionNumber);
    }
    if(m_DeepImportsIsSet)
    {
        val[utility::conversions::to_string_t("deepImports")] = ModelBase::toJson(m_DeepImports);
    }
    if(m_IsInternalModuleIsSet)
    {
        val[utility::conversions::to_string_t("isInternalModule")] = ModelBase::toJson(m_IsInternalModule);
    }
    if(m_ImportsIsSet)
    {
        val[utility::conversions::to_string_t("imports")] = ModelBase::toJson(m_Imports);
    }
    if(m_PathMapIsSet)
    {
        val[utility::conversions::to_string_t("pathMap")] = ModelBase::toJson(m_PathMap);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_TopLevelIsSet)
    {
        val[utility::conversions::to_string_t("topLevel")] = ModelBase::toJson(m_TopLevel);
    }
    if(m_PathToCacheIsSet)
    {
        val[utility::conversions::to_string_t("pathToCache")] = ModelBase::toJson(m_PathToCache);
    }
    if(m_IsBlobIsSet)
    {
        val[utility::conversions::to_string_t("isBlob")] = ModelBase::toJson(m_IsBlob);
    }
    if(m_MayHaveImplicitImportsIsSet)
    {
        val[utility::conversions::to_string_t("mayHaveImplicitImports")] = ModelBase::toJson(m_MayHaveImplicitImports);
    }

    return val;
}

bool BTPModule_234::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPNode_7::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("versionNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionNumber"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_versionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionNumber);
            setVersionNumber(refVal_versionNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deepImports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deepImports"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>> refVal_deepImports;
            ok &= ModelBase::fromJson(fieldValue, refVal_deepImports);
            setDeepImports(refVal_deepImports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isInternalModule")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isInternalModule"));
        if(!fieldValue.is_null())
        {
            bool refVal_isInternalModule;
            ok &= ModelBase::fromJson(fieldValue, refVal_isInternalModule);
            setIsInternalModule(refVal_isInternalModule);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imports"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPTopLevelImport_285>> refVal_imports;
            ok &= ModelBase::fromJson(fieldValue, refVal_imports);
            setImports(refVal_imports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pathMap")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pathMap"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>> refVal_pathMap;
            ok &= ModelBase::fromJson(fieldValue, refVal_pathMap);
            setPathMap(refVal_pathMap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralNumber_258> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topLevel")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topLevel"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPTopLevelNode_286>> refVal_topLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_topLevel);
            setTopLevel(refVal_topLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pathToCache")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pathToCache"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCacheDataPath_191> refVal_pathToCache;
            ok &= ModelBase::fromJson(fieldValue, refVal_pathToCache);
            setPathToCache(refVal_pathToCache);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isBlob")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isBlob"));
        if(!fieldValue.is_null())
        {
            bool refVal_isBlob;
            ok &= ModelBase::fromJson(fieldValue, refVal_isBlob);
            setIsBlob(refVal_isBlob);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mayHaveImplicitImports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mayHaveImplicitImports"));
        if(!fieldValue.is_null())
        {
            bool refVal_mayHaveImplicitImports;
            ok &= ModelBase::fromJson(fieldValue, refVal_mayHaveImplicitImports);
            setMayHaveImplicitImports(refVal_mayHaveImplicitImports);
        }
    }
    return ok;
}

void BTPModule_234::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_VersionNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionNumber"), m_VersionNumber));
    }
    if(m_DeepImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deepImports"), m_DeepImports));
    }
    if(m_IsInternalModuleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInternalModule"), m_IsInternalModule));
    }
    if(m_ImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imports"), m_Imports));
    }
    if(m_PathMapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pathMap"), m_PathMap));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_TopLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topLevel"), m_TopLevel));
    }
    if(m_PathToCacheIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pathToCache"), m_PathToCache));
    }
    if(m_IsBlobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isBlob"), m_IsBlob));
    }
    if(m_MayHaveImplicitImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mayHaveImplicitImports"), m_MayHaveImplicitImports));
    }
}

bool BTPModule_234::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionNumber")))
    {
        int32_t refVal_versionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionNumber")), refVal_versionNumber );
        setVersionNumber(refVal_versionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deepImports")))
    {
        std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>> refVal_deepImports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deepImports")), refVal_deepImports );
        setDeepImports(refVal_deepImports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isInternalModule")))
    {
        bool refVal_isInternalModule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInternalModule")), refVal_isInternalModule );
        setIsInternalModule(refVal_isInternalModule);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imports")))
    {
        std::vector<std::shared_ptr<BTPTopLevelImport_285>> refVal_imports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imports")), refVal_imports );
        setImports(refVal_imports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pathMap")))
    {
        std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>> refVal_pathMap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pathMap")), refVal_pathMap );
        setPathMap(refVal_pathMap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<BTPLiteralNumber_258> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topLevel")))
    {
        std::vector<std::shared_ptr<BTPTopLevelNode_286>> refVal_topLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topLevel")), refVal_topLevel );
        setTopLevel(refVal_topLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pathToCache")))
    {
        std::shared_ptr<BTCacheDataPath_191> refVal_pathToCache;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pathToCache")), refVal_pathToCache );
        setPathToCache(refVal_pathToCache);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isBlob")))
    {
        bool refVal_isBlob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isBlob")), refVal_isBlob );
        setIsBlob(refVal_isBlob);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mayHaveImplicitImports")))
    {
        bool refVal_mayHaveImplicitImports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mayHaveImplicitImports")), refVal_mayHaveImplicitImports );
        setMayHaveImplicitImports(refVal_mayHaveImplicitImports);
    }
    return ok;
}

int32_t BTPModule_234::getVersionNumber() const
{
    return m_VersionNumber;
}

void BTPModule_234::setVersionNumber(int32_t value)
{
    m_VersionNumber = value;
    m_VersionNumberIsSet = true;
}

bool BTPModule_234::versionNumberIsSet() const
{
    return m_VersionNumberIsSet;
}

void BTPModule_234::unsetVersionNumber()
{
    m_VersionNumberIsSet = false;
}
std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>>& BTPModule_234::getDeepImports()
{
    return m_DeepImports;
}

void BTPModule_234::setDeepImports(const std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>>& value)
{
    m_DeepImports = value;
    m_DeepImportsIsSet = true;
}

bool BTPModule_234::deepImportsIsSet() const
{
    return m_DeepImportsIsSet;
}

void BTPModule_234::unsetDeepImports()
{
    m_DeepImportsIsSet = false;
}
bool BTPModule_234::isIsInternalModule() const
{
    return m_IsInternalModule;
}

void BTPModule_234::setIsInternalModule(bool value)
{
    m_IsInternalModule = value;
    m_IsInternalModuleIsSet = true;
}

bool BTPModule_234::isInternalModuleIsSet() const
{
    return m_IsInternalModuleIsSet;
}

void BTPModule_234::unsetIsInternalModule()
{
    m_IsInternalModuleIsSet = false;
}
std::vector<std::shared_ptr<BTPTopLevelImport_285>>& BTPModule_234::getImports()
{
    return m_Imports;
}

void BTPModule_234::setImports(const std::vector<std::shared_ptr<BTPTopLevelImport_285>>& value)
{
    m_Imports = value;
    m_ImportsIsSet = true;
}

bool BTPModule_234::importsIsSet() const
{
    return m_ImportsIsSet;
}

void BTPModule_234::unsetImports()
{
    m_ImportsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>>& BTPModule_234::getPathMap()
{
    return m_PathMap;
}

void BTPModule_234::setPathMap(const std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>>& value)
{
    m_PathMap = value;
    m_PathMapIsSet = true;
}

bool BTPModule_234::pathMapIsSet() const
{
    return m_PathMapIsSet;
}

void BTPModule_234::unsetPathMap()
{
    m_PathMapIsSet = false;
}
std::shared_ptr<BTPLiteralNumber_258> BTPModule_234::getVersion() const
{
    return m_Version;
}

void BTPModule_234::setVersion(const std::shared_ptr<BTPLiteralNumber_258>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTPModule_234::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTPModule_234::unsetVersion()
{
    m_VersionIsSet = false;
}
std::vector<std::shared_ptr<BTPTopLevelNode_286>>& BTPModule_234::getTopLevel()
{
    return m_TopLevel;
}

void BTPModule_234::setTopLevel(const std::vector<std::shared_ptr<BTPTopLevelNode_286>>& value)
{
    m_TopLevel = value;
    m_TopLevelIsSet = true;
}

bool BTPModule_234::topLevelIsSet() const
{
    return m_TopLevelIsSet;
}

void BTPModule_234::unsetTopLevel()
{
    m_TopLevelIsSet = false;
}
std::shared_ptr<BTCacheDataPath_191> BTPModule_234::getPathToCache() const
{
    return m_PathToCache;
}

void BTPModule_234::setPathToCache(const std::shared_ptr<BTCacheDataPath_191>& value)
{
    m_PathToCache = value;
    m_PathToCacheIsSet = true;
}

bool BTPModule_234::pathToCacheIsSet() const
{
    return m_PathToCacheIsSet;
}

void BTPModule_234::unsetPathToCache()
{
    m_PathToCacheIsSet = false;
}
bool BTPModule_234::isIsBlob() const
{
    return m_IsBlob;
}

void BTPModule_234::setIsBlob(bool value)
{
    m_IsBlob = value;
    m_IsBlobIsSet = true;
}

bool BTPModule_234::isBlobIsSet() const
{
    return m_IsBlobIsSet;
}

void BTPModule_234::unsetIsBlob()
{
    m_IsBlobIsSet = false;
}
bool BTPModule_234::isMayHaveImplicitImports() const
{
    return m_MayHaveImplicitImports;
}

void BTPModule_234::setMayHaveImplicitImports(bool value)
{
    m_MayHaveImplicitImports = value;
    m_MayHaveImplicitImportsIsSet = true;
}

bool BTPModule_234::mayHaveImplicitImportsIsSet() const
{
    return m_MayHaveImplicitImportsIsSet;
}

void BTPModule_234::unsetMayHaveImplicitImports()
{
    m_MayHaveImplicitImportsIsSet = false;
}
}
}
}
}


