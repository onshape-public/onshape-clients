/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchGeomEntity_5.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchGeomEntity_5::BTMSketchGeomEntity_5()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ControlBoxIdsIsSet = false;
    m_EntityId = utility::conversions::to_string_t("");
    m_EntityIdIsSet = false;
    m_EntityIdAndReplaceInDependentFields = utility::conversions::to_string_t("");
    m_EntityIdAndReplaceInDependentFieldsIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_IsConstruction = false;
    m_IsConstructionIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ParametersIsSet = false;
}

BTMSketchGeomEntity_5::~BTMSketchGeomEntity_5()
{
}

void BTMSketchGeomEntity_5::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchGeomEntity_5::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ControlBoxIdsIsSet)
    {
        val[utility::conversions::to_string_t("controlBoxIds")] = ModelBase::toJson(m_ControlBoxIds);
    }
    if(m_EntityIdIsSet)
    {
        val[utility::conversions::to_string_t("entityId")] = ModelBase::toJson(m_EntityId);
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        val[utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")] = ModelBase::toJson(m_EntityIdAndReplaceInDependentFields);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_IsConstructionIsSet)
    {
        val[utility::conversions::to_string_t("isConstruction")] = ModelBase::toJson(m_IsConstruction);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }

    return val;
}

bool BTMSketchGeomEntity_5::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("controlBoxIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("controlBoxIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_controlBoxIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_controlBoxIds);
            setControlBoxIds(refVal_controlBoxIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityId);
            setEntityId(refVal_entityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityIdAndReplaceInDependentFields;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityIdAndReplaceInDependentFields);
            setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isConstruction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isConstruction"));
        if(!fieldValue.is_null())
        {
            bool refVal_isConstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_isConstruction);
            setIsConstruction(refVal_isConstruction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    return ok;
}

void BTMSketchGeomEntity_5::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ControlBoxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("controlBoxIds"), m_ControlBoxIds));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"), m_EntityIdAndReplaceInDependentFields));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_IsConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConstruction"), m_IsConstruction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
}

bool BTMSketchGeomEntity_5::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("controlBoxIds")))
    {
        std::vector<utility::string_t> refVal_controlBoxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("controlBoxIds")), refVal_controlBoxIds );
        setControlBoxIds(refVal_controlBoxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityId")))
    {
        utility::string_t refVal_entityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId")), refVal_entityId );
        setEntityId(refVal_entityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        utility::string_t refVal_entityIdAndReplaceInDependentFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")), refVal_entityIdAndReplaceInDependentFields );
        setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConstruction")))
    {
        bool refVal_isConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConstruction")), refVal_isConstruction );
        setIsConstruction(refVal_isConstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    return ok;
}

utility::string_t BTMSketchGeomEntity_5::getBtType() const
{
    return m_BtType;
}

void BTMSketchGeomEntity_5::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchGeomEntity_5::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchGeomEntity_5::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::vector<utility::string_t>& BTMSketchGeomEntity_5::getControlBoxIds()
{
    return m_ControlBoxIds;
}

void BTMSketchGeomEntity_5::setControlBoxIds(const std::vector<utility::string_t>& value)
{
    m_ControlBoxIds = value;
    m_ControlBoxIdsIsSet = true;
}

bool BTMSketchGeomEntity_5::controlBoxIdsIsSet() const
{
    return m_ControlBoxIdsIsSet;
}

void BTMSketchGeomEntity_5::unsetControlBoxIds()
{
    m_ControlBoxIdsIsSet = false;
}
utility::string_t BTMSketchGeomEntity_5::getEntityId() const
{
    return m_EntityId;
}

void BTMSketchGeomEntity_5::setEntityId(const utility::string_t& value)
{
    m_EntityId = value;
    m_EntityIdIsSet = true;
}

bool BTMSketchGeomEntity_5::entityIdIsSet() const
{
    return m_EntityIdIsSet;
}

void BTMSketchGeomEntity_5::unsetEntityId()
{
    m_EntityIdIsSet = false;
}
utility::string_t BTMSketchGeomEntity_5::getEntityIdAndReplaceInDependentFields() const
{
    return m_EntityIdAndReplaceInDependentFields;
}

void BTMSketchGeomEntity_5::setEntityIdAndReplaceInDependentFields(const utility::string_t& value)
{
    m_EntityIdAndReplaceInDependentFields = value;
    m_EntityIdAndReplaceInDependentFieldsIsSet = true;
}

bool BTMSketchGeomEntity_5::entityIdAndReplaceInDependentFieldsIsSet() const
{
    return m_EntityIdAndReplaceInDependentFieldsIsSet;
}

void BTMSketchGeomEntity_5::unsetEntityIdAndReplaceInDependentFields()
{
    m_EntityIdAndReplaceInDependentFieldsIsSet = false;
}
utility::string_t BTMSketchGeomEntity_5::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMSketchGeomEntity_5::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMSketchGeomEntity_5::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMSketchGeomEntity_5::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
bool BTMSketchGeomEntity_5::isIsConstruction() const
{
    return m_IsConstruction;
}

void BTMSketchGeomEntity_5::setIsConstruction(bool value)
{
    m_IsConstruction = value;
    m_IsConstructionIsSet = true;
}

bool BTMSketchGeomEntity_5::isConstructionIsSet() const
{
    return m_IsConstructionIsSet;
}

void BTMSketchGeomEntity_5::unsetIsConstruction()
{
    m_IsConstructionIsSet = false;
}
utility::string_t BTMSketchGeomEntity_5::getRNamespace() const
{
    return m_r_namespace;
}

void BTMSketchGeomEntity_5::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMSketchGeomEntity_5::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMSketchGeomEntity_5::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTMSketchGeomEntity_5::getNodeId() const
{
    return m_NodeId;
}

void BTMSketchGeomEntity_5::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMSketchGeomEntity_5::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMSketchGeomEntity_5::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
std::vector<std::shared_ptr<BTMParameter_1>>& BTMSketchGeomEntity_5::getParameters()
{
    return m_Parameters;
}

void BTMSketchGeomEntity_5::setParameters(const std::vector<std::shared_ptr<BTMParameter_1>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BTMSketchGeomEntity_5::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BTMSketchGeomEntity_5::unsetParameters()
{
    m_ParametersIsSet = false;
}
}
}
}
}


