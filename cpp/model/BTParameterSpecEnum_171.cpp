/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecEnum_171.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecEnum_171::BTParameterSpecEnum_171()
{
    m_EnumName = utility::conversions::to_string_t("");
    m_EnumNameIsSet = false;
    m_OptionNamesIsSet = false;
    m_OptionsIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
}

BTParameterSpecEnum_171::~BTParameterSpecEnum_171()
{
}

void BTParameterSpecEnum_171::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecEnum_171::toJson() const
{
    web::json::value val = this->BTParameterSpec_6::toJson();
    
    if(m_EnumNameIsSet)
    {
        val[utility::conversions::to_string_t("enumName")] = ModelBase::toJson(m_EnumName);
    }
    if(m_OptionNamesIsSet)
    {
        val[utility::conversions::to_string_t("optionNames")] = ModelBase::toJson(m_OptionNames);
    }
    if(m_OptionsIsSet)
    {
        val[utility::conversions::to_string_t("options")] = ModelBase::toJson(m_Options);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }

    return val;
}

bool BTParameterSpecEnum_171::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTParameterSpec_6::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("enumName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enumName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_enumName;
            ok &= ModelBase::fromJson(fieldValue, refVal_enumName);
            setEnumName(refVal_enumName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optionNames")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("optionNames"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_optionNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_optionNames);
            setOptionNames(refVal_optionNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("options")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("options"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_options;
            ok &= ModelBase::fromJson(fieldValue, refVal_options);
            setOptions(refVal_options);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    return ok;
}

void BTParameterSpecEnum_171::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnName"), m_ColumnName));
    }
    if(m_DefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultValue"), m_DefaultValue));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_UiHintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHint"), m_UiHint));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
    if(m_VisibilityConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visibilityCondition"), m_VisibilityCondition));
    }
    if(m_EnumNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enumName"), m_EnumName));
    }
    if(m_OptionNamesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optionNames"), m_OptionNames));
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("options"), m_Options));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
}

bool BTParameterSpecEnum_171::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnName")))
    {
        utility::string_t refVal_columnName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnName")), refVal_columnName );
        setColumnName(refVal_columnName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultValue")))
    {
        std::shared_ptr<BTMParameter_1> refVal_defaultValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultValue")), refVal_defaultValue );
        setDefaultValue(refVal_defaultValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHint")))
    {
        utility::string_t refVal_uiHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHint")), refVal_uiHint );
        setUiHint(refVal_uiHint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visibilityCondition")))
    {
        std::shared_ptr<BTParameterVisibilityCondition_177> refVal_visibilityCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visibilityCondition")), refVal_visibilityCondition );
        setVisibilityCondition(refVal_visibilityCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enumName")))
    {
        utility::string_t refVal_enumName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enumName")), refVal_enumName );
        setEnumName(refVal_enumName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optionNames")))
    {
        std::vector<utility::string_t> refVal_optionNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("optionNames")), refVal_optionNames );
        setOptionNames(refVal_optionNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("options")))
    {
        std::vector<utility::string_t> refVal_options;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("options")), refVal_options );
        setOptions(refVal_options);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    return ok;
}

utility::string_t BTParameterSpecEnum_171::getEnumName() const
{
    return m_EnumName;
}

void BTParameterSpecEnum_171::setEnumName(const utility::string_t& value)
{
    m_EnumName = value;
    m_EnumNameIsSet = true;
}

bool BTParameterSpecEnum_171::enumNameIsSet() const
{
    return m_EnumNameIsSet;
}

void BTParameterSpecEnum_171::unsetEnumName()
{
    m_EnumNameIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecEnum_171::getOptionNames()
{
    return m_OptionNames;
}

void BTParameterSpecEnum_171::setOptionNames(const std::vector<utility::string_t>& value)
{
    m_OptionNames = value;
    m_OptionNamesIsSet = true;
}

bool BTParameterSpecEnum_171::optionNamesIsSet() const
{
    return m_OptionNamesIsSet;
}

void BTParameterSpecEnum_171::unsetOptionNames()
{
    m_OptionNamesIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecEnum_171::getOptions()
{
    return m_Options;
}

void BTParameterSpecEnum_171::setOptions(const std::vector<utility::string_t>& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}

bool BTParameterSpecEnum_171::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void BTParameterSpecEnum_171::unsetOptions()
{
    m_OptionsIsSet = false;
}
utility::string_t BTParameterSpecEnum_171::getRNamespace() const
{
    return m_r_namespace;
}

void BTParameterSpecEnum_171::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTParameterSpecEnum_171::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTParameterSpecEnum_171::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
}
}
}
}


