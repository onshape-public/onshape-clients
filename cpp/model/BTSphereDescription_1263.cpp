/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTSphereDescription_1263.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTSphereDescription_1263::BTSphereDescription_1263()
{
    m_Radius = 0.0;
    m_RadiusIsSet = false;
    m_OriginIsSet = false;
}

BTSphereDescription_1263::~BTSphereDescription_1263()
{
}

void BTSphereDescription_1263::validate()
{
    // TODO: implement validation
}

web::json::value BTSphereDescription_1263::toJson() const
{
    web::json::value val = this->BTSurfaceDescription_1564::toJson();
    
    if(m_RadiusIsSet)
    {
        val[utility::conversions::to_string_t("radius")] = ModelBase::toJson(m_Radius);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }

    return val;
}

bool BTSphereDescription_1263::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTSurfaceDescription_1564::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("radius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("radius"));
        if(!fieldValue.is_null())
        {
            double refVal_radius;
            ok &= ModelBase::fromJson(fieldValue, refVal_radius);
            setRadius(refVal_radius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    return ok;
}

void BTSphereDescription_1263::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_RadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("radius"), m_Radius));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
}

bool BTSphereDescription_1263::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("radius")))
    {
        double refVal_radius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("radius")), refVal_radius );
        setRadius(refVal_radius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::shared_ptr<BTVector3d_389> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    return ok;
}

double BTSphereDescription_1263::getRadius() const
{
    return m_Radius;
}

void BTSphereDescription_1263::setRadius(double value)
{
    m_Radius = value;
    m_RadiusIsSet = true;
}

bool BTSphereDescription_1263::radiusIsSet() const
{
    return m_RadiusIsSet;
}

void BTSphereDescription_1263::unsetRadius()
{
    m_RadiusIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTSphereDescription_1263::getOrigin() const
{
    return m_Origin;
}

void BTSphereDescription_1263::setOrigin(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool BTSphereDescription_1263::originIsSet() const
{
    return m_OriginIsSet;
}

void BTSphereDescription_1263::unsetOrigin()
{
    m_OriginIsSet = false;
}
}
}
}
}


