/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTStringFormatBlockPattern_1755.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTStringFormatBlockPattern_1755::BTStringFormatBlockPattern_1755()
{
    m_RegExpToBlock = utility::conversions::to_string_t("");
    m_RegExpToBlockIsSet = false;
}

BTStringFormatBlockPattern_1755::~BTStringFormatBlockPattern_1755()
{
}

void BTStringFormatBlockPattern_1755::validate()
{
    // TODO: implement validation
}

web::json::value BTStringFormatBlockPattern_1755::toJson() const
{
    web::json::value val = this->BTStringFormatCondition_683::toJson();
    
    if(m_RegExpToBlockIsSet)
    {
        val[utility::conversions::to_string_t("regExpToBlock")] = ModelBase::toJson(m_RegExpToBlock);
    }

    return val;
}

bool BTStringFormatBlockPattern_1755::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTStringFormatCondition_683::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("regExpToBlock")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("regExpToBlock"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_regExpToBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_regExpToBlock);
            setRegExpToBlock(refVal_regExpToBlock);
        }
    }
    return ok;
}

void BTStringFormatBlockPattern_1755::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_ShouldResetValueWhenConfirmedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shouldResetValueWhenConfirmed"), m_ShouldResetValueWhenConfirmed));
    }
    if(m_RegExpToBlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("regExpToBlock"), m_RegExpToBlock));
    }
}

bool BTStringFormatBlockPattern_1755::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")))
    {
        bool refVal_shouldResetValueWhenConfirmed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")), refVal_shouldResetValueWhenConfirmed );
        setShouldResetValueWhenConfirmed(refVal_shouldResetValueWhenConfirmed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("regExpToBlock")))
    {
        utility::string_t refVal_regExpToBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("regExpToBlock")), refVal_regExpToBlock );
        setRegExpToBlock(refVal_regExpToBlock);
    }
    return ok;
}

utility::string_t BTStringFormatBlockPattern_1755::getRegExpToBlock() const
{
    return m_RegExpToBlock;
}

void BTStringFormatBlockPattern_1755::setRegExpToBlock(const utility::string_t& value)
{
    m_RegExpToBlock = value;
    m_RegExpToBlockIsSet = true;
}

bool BTStringFormatBlockPattern_1755::regExpToBlockIsSet() const
{
    return m_RegExpToBlockIsSet;
}

void BTStringFormatBlockPattern_1755::unsetRegExpToBlock()
{
    m_RegExpToBlockIsSet = false;
}
}
}
}
}


