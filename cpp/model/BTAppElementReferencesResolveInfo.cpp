/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementReferencesResolveInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementReferencesResolveInfo::BTAppElementReferencesResolveInfo()
{
    m_ResolvedReferencesIsSet = false;
    m_UnresolvedReferenceIdsIsSet = false;
}

BTAppElementReferencesResolveInfo::~BTAppElementReferencesResolveInfo()
{
}

void BTAppElementReferencesResolveInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementReferencesResolveInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ResolvedReferencesIsSet)
    {
        val[utility::conversions::to_string_t("resolvedReferences")] = ModelBase::toJson(m_ResolvedReferences);
    }
    if(m_UnresolvedReferenceIdsIsSet)
    {
        val[utility::conversions::to_string_t("unresolvedReferenceIds")] = ModelBase::toJson(m_UnresolvedReferenceIds);
    }

    return val;
}

bool BTAppElementReferencesResolveInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("resolvedReferences")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolvedReferences"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>> refVal_resolvedReferences;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolvedReferences);
            setResolvedReferences(refVal_resolvedReferences);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unresolvedReferenceIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unresolvedReferenceIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_unresolvedReferenceIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_unresolvedReferenceIds);
            setUnresolvedReferenceIds(refVal_unresolvedReferenceIds);
        }
    }
    return ok;
}

void BTAppElementReferencesResolveInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ResolvedReferencesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolvedReferences"), m_ResolvedReferences));
    }
    if(m_UnresolvedReferenceIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unresolvedReferenceIds"), m_UnresolvedReferenceIds));
    }
}

bool BTAppElementReferencesResolveInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("resolvedReferences")))
    {
        std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>> refVal_resolvedReferences;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolvedReferences")), refVal_resolvedReferences );
        setResolvedReferences(refVal_resolvedReferences);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unresolvedReferenceIds")))
    {
        std::vector<utility::string_t> refVal_unresolvedReferenceIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unresolvedReferenceIds")), refVal_unresolvedReferenceIds );
        setUnresolvedReferenceIds(refVal_unresolvedReferenceIds);
    }
    return ok;
}

std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>>& BTAppElementReferencesResolveInfo::getResolvedReferences()
{
    return m_ResolvedReferences;
}

void BTAppElementReferencesResolveInfo::setResolvedReferences(const std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>>& value)
{
    m_ResolvedReferences = value;
    m_ResolvedReferencesIsSet = true;
}

bool BTAppElementReferencesResolveInfo::resolvedReferencesIsSet() const
{
    return m_ResolvedReferencesIsSet;
}

void BTAppElementReferencesResolveInfo::unsetResolvedReferences()
{
    m_ResolvedReferencesIsSet = false;
}
std::vector<utility::string_t>& BTAppElementReferencesResolveInfo::getUnresolvedReferenceIds()
{
    return m_UnresolvedReferenceIds;
}

void BTAppElementReferencesResolveInfo::setUnresolvedReferenceIds(const std::vector<utility::string_t>& value)
{
    m_UnresolvedReferenceIds = value;
    m_UnresolvedReferenceIdsIsSet = true;
}

bool BTAppElementReferencesResolveInfo::unresolvedReferenceIdsIsSet() const
{
    return m_UnresolvedReferenceIdsIsSet;
}

void BTAppElementReferencesResolveInfo::unsetUnresolvedReferenceIds()
{
    m_UnresolvedReferenceIdsIsSet = false;
}
}
}
}
}


