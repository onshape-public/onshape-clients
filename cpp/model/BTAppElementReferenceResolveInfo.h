/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTAppElementReferenceResolveInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceResolveInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceResolveInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTAppElementReferenceResolveInfo
    : public ModelBase
{
public:
    BTAppElementReferenceResolveInfo();
    virtual ~BTAppElementReferenceResolveInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTAppElementReferenceResolveInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getChangeId() const;
    bool changeIdIsSet() const;
    void unsetChangeId();

    void setChangeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getErrorCode() const;
    bool errorCodeIsSet() const;
    void unsetErrorCode();

    void setErrorCode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorDescription() const;
    bool errorDescriptionIsSet() const;
    void unsetErrorDescription();

    void setErrorDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorValue() const;
    bool errorValueIsSet() const;
    void unsetErrorValue();

    void setErrorValue(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIdTag() const;
    bool idTagIsSet() const;
    void unsetIdTag();

    void setIdTag(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIdTagIsValid() const;
    bool idTagIsValidIsSet() const;
    void unsetIdTagIsValid();

    void setIdTagIsValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsConfigurable() const;
    bool isConfigurableIsSet() const;
    void unsetIsConfigurable();

    void setIsConfigurable(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFlattenedPart() const;
    bool isFlattenedPartIsSet() const;
    void unsetIsFlattenedPart();

    void setIsFlattenedPart(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSketchOnly() const;
    bool isSketchOnlyIsSet() const;
    void unsetIsSketchOnly();

    void setIsSketchOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSurface() const;
    bool isSurfaceIsSet() const;
    void unsetIsSurface();

    void setIsSurface(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPartNumber();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferenceId() const;
    bool referenceIdIsSet() const;
    void unsetReferenceId();

    void setReferenceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getReferenceType() const;
    bool referenceTypeIsSet() const;
    void unsetReferenceType();

    void setReferenceType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResolvedDocumentMicroversionId() const;
    bool resolvedDocumentMicroversionIdIsSet() const;
    void unsetResolvedDocumentMicroversionId();

    void setResolvedDocumentMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResolvedElementMicroversionId() const;
    bool resolvedElementMicroversionIdIsSet() const;
    void unsetResolvedElementMicroversionId();

    void setResolvedElementMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSketchIds();
    bool sketchIdsIsSet() const;
    void unsetSketchIds();

    void setSketchIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetConfiguration() const;
    bool targetConfigurationIsSet() const;
    void unsetTargetConfiguration();

    void setTargetConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetDocumentId() const;
    bool targetDocumentIdIsSet() const;
    void unsetTargetDocumentId();

    void setTargetDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetDocumentMicroversionId() const;
    bool targetDocumentMicroversionIdIsSet() const;
    void unsetTargetDocumentMicroversionId();

    void setTargetDocumentMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetElementId() const;
    bool targetElementIdIsSet() const;
    void unsetTargetElementId();

    void setTargetElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetElementMicroversionId() const;
    bool targetElementMicroversionIdIsSet() const;
    void unsetTargetElementMicroversionId();

    void setTargetElementMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetVersionId() const;
    bool targetVersionIdIsSet() const;
    void unsetTargetVersionId();

    void setTargetVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrackNewVersions() const;
    bool trackNewVersionsIsSet() const;
    void unsetTrackNewVersions();

    void setTrackNewVersions(bool value);


protected:
    utility::string_t m_ChangeId;
    bool m_ChangeIdIsSet;
    int32_t m_ErrorCode;
    bool m_ErrorCodeIsSet;
    utility::string_t m_ErrorDescription;
    bool m_ErrorDescriptionIsSet;
    utility::string_t m_ErrorValue;
    bool m_ErrorValueIsSet;
    utility::string_t m_IdTag;
    bool m_IdTagIsSet;
    bool m_IdTagIsValid;
    bool m_IdTagIsValidIsSet;
    bool m_IsConfigurable;
    bool m_IsConfigurableIsSet;
    bool m_IsFlattenedPart;
    bool m_IsFlattenedPartIsSet;
    bool m_IsSketchOnly;
    bool m_IsSketchOnlyIsSet;
    bool m_IsSurface;
    bool m_IsSurfaceIsSet;
    utility::string_t m_PartNumber;
    bool m_PartNumberIsSet;
    utility::string_t m_ReferenceId;
    bool m_ReferenceIdIsSet;
    int32_t m_ReferenceType;
    bool m_ReferenceTypeIsSet;
    utility::string_t m_ResolvedDocumentMicroversionId;
    bool m_ResolvedDocumentMicroversionIdIsSet;
    utility::string_t m_ResolvedElementMicroversionId;
    bool m_ResolvedElementMicroversionIdIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
    std::vector<utility::string_t> m_SketchIds;
    bool m_SketchIdsIsSet;
    utility::string_t m_TargetConfiguration;
    bool m_TargetConfigurationIsSet;
    utility::string_t m_TargetDocumentId;
    bool m_TargetDocumentIdIsSet;
    utility::string_t m_TargetDocumentMicroversionId;
    bool m_TargetDocumentMicroversionIdIsSet;
    utility::string_t m_TargetElementId;
    bool m_TargetElementIdIsSet;
    utility::string_t m_TargetElementMicroversionId;
    bool m_TargetElementMicroversionIdIsSet;
    utility::string_t m_TargetVersionId;
    bool m_TargetVersionIdIsSet;
    bool m_TrackNewVersions;
    bool m_TrackNewVersionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferenceResolveInfo_H_ */
