/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTableResponse_1546.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTableResponse_1546::BTTableResponse_1546()
{
    m_SourceMicroversion = utility::conversions::to_string_t("");
    m_SourceMicroversionIsSet = false;
    m_TableIsSet = false;
}

BTTableResponse_1546::~BTTableResponse_1546()
{
}

void BTTableResponse_1546::validate()
{
    // TODO: implement validation
}

web::json::value BTTableResponse_1546::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SourceMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("sourceMicroversion")] = ModelBase::toJson(m_SourceMicroversion);
    }
    if(m_TableIsSet)
    {
        val[utility::conversions::to_string_t("table")] = ModelBase::toJson(m_Table);
    }

    return val;
}

bool BTTableResponse_1546::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("sourceMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceMicroversion);
            setSourceMicroversion(refVal_sourceMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("table")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("table"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTTable_1825> refVal_table;
            ok &= ModelBase::fromJson(fieldValue, refVal_table);
            setTable(refVal_table);
        }
    }
    return ok;
}

void BTTableResponse_1546::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SourceMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversion"), m_SourceMicroversion));
    }
    if(m_TableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("table"), m_Table));
    }
}

bool BTTableResponse_1546::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversion")))
    {
        utility::string_t refVal_sourceMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversion")), refVal_sourceMicroversion );
        setSourceMicroversion(refVal_sourceMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("table")))
    {
        std::shared_ptr<BTTable_1825> refVal_table;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("table")), refVal_table );
        setTable(refVal_table);
    }
    return ok;
}

utility::string_t BTTableResponse_1546::getSourceMicroversion() const
{
    return m_SourceMicroversion;
}

void BTTableResponse_1546::setSourceMicroversion(const utility::string_t& value)
{
    m_SourceMicroversion = value;
    m_SourceMicroversionIsSet = true;
}

bool BTTableResponse_1546::sourceMicroversionIsSet() const
{
    return m_SourceMicroversionIsSet;
}

void BTTableResponse_1546::unsetSourceMicroversion()
{
    m_SourceMicroversionIsSet = false;
}
std::shared_ptr<BTTable_1825> BTTableResponse_1546::getTable() const
{
    return m_Table;
}

void BTTableResponse_1546::setTable(const std::shared_ptr<BTTable_1825>& value)
{
    m_Table = value;
    m_TableIsSet = true;
}

bool BTTableResponse_1546::tableIsSet() const
{
    return m_TableIsSet;
}

void BTTableResponse_1546::unsetTable()
{
    m_TableIsSet = false;
}
}
}
}
}


