/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPartMetadataInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPartMetadataInfo::BTPartMetadataInfo()
{
    m_AppearanceIsSet = false;
    m_BodyType = utility::conversions::to_string_t("");
    m_BodyTypeIsSet = false;
    m_ConfigurationId = utility::conversions::to_string_t("");
    m_ConfigurationIdIsSet = false;
    m_CustomPropertiesIsSet = false;
    m_CustomPropertyDefinitionsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IsFlattenedBody = false;
    m_IsFlattenedBodyIsSet = false;
    m_IsHidden = false;
    m_IsHiddenIsSet = false;
    m_IsMesh = false;
    m_IsMeshIsSet = false;
    m_MaterialIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Ordinal = 0;
    m_OrdinalIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_PartQuery = utility::conversions::to_string_t("");
    m_PartQueryIsSet = false;
    m_ProductLine = utility::conversions::to_string_t("");
    m_ProductLineIsSet = false;
    m_Project = utility::conversions::to_string_t("");
    m_ProjectIsSet = false;
    m_PropertySourceTypesIsSet = false;
    m_ReferencingConfiguredPartNodeIdsIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_ThumbnailConfigurationId = utility::conversions::to_string_t("");
    m_ThumbnailConfigurationIdIsSet = false;
    m_ThumbnailInfoIsSet = false;
    m_Title1 = utility::conversions::to_string_t("");
    m_Title1IsSet = false;
    m_Title2 = utility::conversions::to_string_t("");
    m_Title2IsSet = false;
    m_Title3 = utility::conversions::to_string_t("");
    m_Title3IsSet = false;
    m_UnflattenedPartId = utility::conversions::to_string_t("");
    m_UnflattenedPartIdIsSet = false;
    m_Vendor = utility::conversions::to_string_t("");
    m_VendorIsSet = false;
}

BTPartMetadataInfo::~BTPartMetadataInfo()
{
}

void BTPartMetadataInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTPartMetadataInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AppearanceIsSet)
    {
        val[utility::conversions::to_string_t("appearance")] = ModelBase::toJson(m_Appearance);
    }
    if(m_BodyTypeIsSet)
    {
        val[utility::conversions::to_string_t("bodyType")] = ModelBase::toJson(m_BodyType);
    }
    if(m_ConfigurationIdIsSet)
    {
        val[utility::conversions::to_string_t("configurationId")] = ModelBase::toJson(m_ConfigurationId);
    }
    if(m_CustomPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("customProperties")] = ModelBase::toJson(m_CustomProperties);
    }
    if(m_CustomPropertyDefinitionsIsSet)
    {
        val[utility::conversions::to_string_t("customPropertyDefinitions")] = ModelBase::toJson(m_CustomPropertyDefinitions);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IsFlattenedBodyIsSet)
    {
        val[utility::conversions::to_string_t("isFlattenedBody")] = ModelBase::toJson(m_IsFlattenedBody);
    }
    if(m_IsHiddenIsSet)
    {
        val[utility::conversions::to_string_t("isHidden")] = ModelBase::toJson(m_IsHidden);
    }
    if(m_IsMeshIsSet)
    {
        val[utility::conversions::to_string_t("isMesh")] = ModelBase::toJson(m_IsMesh);
    }
    if(m_MaterialIsSet)
    {
        val[utility::conversions::to_string_t("material")] = ModelBase::toJson(m_Material);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OrdinalIsSet)
    {
        val[utility::conversions::to_string_t("ordinal")] = ModelBase::toJson(m_Ordinal);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_PartQueryIsSet)
    {
        val[utility::conversions::to_string_t("partQuery")] = ModelBase::toJson(m_PartQuery);
    }
    if(m_ProductLineIsSet)
    {
        val[utility::conversions::to_string_t("productLine")] = ModelBase::toJson(m_ProductLine);
    }
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t("project")] = ModelBase::toJson(m_Project);
    }
    if(m_PropertySourceTypesIsSet)
    {
        val[utility::conversions::to_string_t("propertySourceTypes")] = ModelBase::toJson(m_PropertySourceTypes);
    }
    if(m_ReferencingConfiguredPartNodeIdsIsSet)
    {
        val[utility::conversions::to_string_t("referencingConfiguredPartNodeIds")] = ModelBase::toJson(m_ReferencingConfiguredPartNodeIds);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_ThumbnailConfigurationIdIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailConfigurationId")] = ModelBase::toJson(m_ThumbnailConfigurationId);
    }
    if(m_ThumbnailInfoIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailInfo")] = ModelBase::toJson(m_ThumbnailInfo);
    }
    if(m_Title1IsSet)
    {
        val[utility::conversions::to_string_t("title1")] = ModelBase::toJson(m_Title1);
    }
    if(m_Title2IsSet)
    {
        val[utility::conversions::to_string_t("title2")] = ModelBase::toJson(m_Title2);
    }
    if(m_Title3IsSet)
    {
        val[utility::conversions::to_string_t("title3")] = ModelBase::toJson(m_Title3);
    }
    if(m_UnflattenedPartIdIsSet)
    {
        val[utility::conversions::to_string_t("unflattenedPartId")] = ModelBase::toJson(m_UnflattenedPartId);
    }
    if(m_VendorIsSet)
    {
        val[utility::conversions::to_string_t("vendor")] = ModelBase::toJson(m_Vendor);
    }

    return val;
}

bool BTPartMetadataInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("appearance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appearance"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPartAppearanceInfo> refVal_appearance;
            ok &= ModelBase::fromJson(fieldValue, refVal_appearance);
            setAppearance(refVal_appearance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bodyType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyType);
            setBodyType(refVal_bodyType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationId);
            setConfigurationId(refVal_configurationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customProperties"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_customProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_customProperties);
            setCustomProperties(refVal_customProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customPropertyDefinitions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customPropertyDefinitions"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>> refVal_customPropertyDefinitions;
            ok &= ModelBase::fromJson(fieldValue, refVal_customPropertyDefinitions);
            setCustomPropertyDefinitions(refVal_customPropertyDefinitions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFlattenedBody")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFlattenedBody"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFlattenedBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFlattenedBody);
            setIsFlattenedBody(refVal_isFlattenedBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isHidden")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isHidden"));
        if(!fieldValue.is_null())
        {
            bool refVal_isHidden;
            ok &= ModelBase::fromJson(fieldValue, refVal_isHidden);
            setIsHidden(refVal_isHidden);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isMesh")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isMesh"));
        if(!fieldValue.is_null())
        {
            bool refVal_isMesh;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMesh);
            setIsMesh(refVal_isMesh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("material")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("material"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPartMaterialInfo> refVal_material;
            ok &= ModelBase::fromJson(fieldValue, refVal_material);
            setMaterial(refVal_material);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ordinal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ordinal"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ordinal;
            ok &= ModelBase::fromJson(fieldValue, refVal_ordinal);
            setOrdinal(refVal_ordinal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_partQuery);
            setPartQuery(refVal_partQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("productLine")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("productLine"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_productLine;
            ok &= ModelBase::fromJson(fieldValue, refVal_productLine);
            setProductLine(refVal_productLine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_project;
            ok &= ModelBase::fromJson(fieldValue, refVal_project);
            setProject(refVal_project);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propertySourceTypes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("propertySourceTypes"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, int32_t> refVal_propertySourceTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_propertySourceTypes);
            setPropertySourceTypes(refVal_propertySourceTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("referencingConfiguredPartNodeIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("referencingConfiguredPartNodeIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_referencingConfiguredPartNodeIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_referencingConfiguredPartNodeIds);
            setReferencingConfiguredPartNodeIds(refVal_referencingConfiguredPartNodeIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailConfigurationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailConfigurationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_thumbnailConfigurationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailConfigurationId);
            setThumbnailConfigurationId(refVal_thumbnailConfigurationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailInfo);
            setThumbnailInfo(refVal_thumbnailInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title1;
            ok &= ModelBase::fromJson(fieldValue, refVal_title1);
            setTitle1(refVal_title1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title2;
            ok &= ModelBase::fromJson(fieldValue, refVal_title2);
            setTitle2(refVal_title2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title3")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title3"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title3;
            ok &= ModelBase::fromJson(fieldValue, refVal_title3);
            setTitle3(refVal_title3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unflattenedPartId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unflattenedPartId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unflattenedPartId;
            ok &= ModelBase::fromJson(fieldValue, refVal_unflattenedPartId);
            setUnflattenedPartId(refVal_unflattenedPartId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vendor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vendor"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_vendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_vendor);
            setVendor(refVal_vendor);
        }
    }
    return ok;
}

void BTPartMetadataInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AppearanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appearance"), m_Appearance));
    }
    if(m_BodyTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyType"), m_BodyType));
    }
    if(m_ConfigurationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationId"), m_ConfigurationId));
    }
    if(m_CustomPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customProperties"), m_CustomProperties));
    }
    if(m_CustomPropertyDefinitionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customPropertyDefinitions"), m_CustomPropertyDefinitions));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsFlattenedBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFlattenedBody"), m_IsFlattenedBody));
    }
    if(m_IsHiddenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isHidden"), m_IsHidden));
    }
    if(m_IsMeshIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMesh"), m_IsMesh));
    }
    if(m_MaterialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("material"), m_Material));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OrdinalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ordinal"), m_Ordinal));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_PartQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partQuery"), m_PartQuery));
    }
    if(m_ProductLineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("productLine"), m_ProductLine));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project"), m_Project));
    }
    if(m_PropertySourceTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("propertySourceTypes"), m_PropertySourceTypes));
    }
    if(m_ReferencingConfiguredPartNodeIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referencingConfiguredPartNodeIds"), m_ReferencingConfiguredPartNodeIds));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_ThumbnailConfigurationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailConfigurationId"), m_ThumbnailConfigurationId));
    }
    if(m_ThumbnailInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailInfo"), m_ThumbnailInfo));
    }
    if(m_Title1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title1"), m_Title1));
    }
    if(m_Title2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title2"), m_Title2));
    }
    if(m_Title3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title3"), m_Title3));
    }
    if(m_UnflattenedPartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unflattenedPartId"), m_UnflattenedPartId));
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vendor"), m_Vendor));
    }
}

bool BTPartMetadataInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("appearance")))
    {
        std::shared_ptr<BTPartAppearanceInfo> refVal_appearance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appearance")), refVal_appearance );
        setAppearance(refVal_appearance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyType")))
    {
        utility::string_t refVal_bodyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyType")), refVal_bodyType );
        setBodyType(refVal_bodyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationId")))
    {
        utility::string_t refVal_configurationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationId")), refVal_configurationId );
        setConfigurationId(refVal_configurationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customProperties")))
    {
        std::map<utility::string_t, utility::string_t> refVal_customProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customProperties")), refVal_customProperties );
        setCustomProperties(refVal_customProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customPropertyDefinitions")))
    {
        std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>> refVal_customPropertyDefinitions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customPropertyDefinitions")), refVal_customPropertyDefinitions );
        setCustomPropertyDefinitions(refVal_customPropertyDefinitions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFlattenedBody")))
    {
        bool refVal_isFlattenedBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFlattenedBody")), refVal_isFlattenedBody );
        setIsFlattenedBody(refVal_isFlattenedBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isHidden")))
    {
        bool refVal_isHidden;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isHidden")), refVal_isHidden );
        setIsHidden(refVal_isHidden);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMesh")))
    {
        bool refVal_isMesh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMesh")), refVal_isMesh );
        setIsMesh(refVal_isMesh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("material")))
    {
        std::shared_ptr<BTPartMaterialInfo> refVal_material;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("material")), refVal_material );
        setMaterial(refVal_material);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ordinal")))
    {
        int32_t refVal_ordinal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ordinal")), refVal_ordinal );
        setOrdinal(refVal_ordinal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partQuery")))
    {
        utility::string_t refVal_partQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partQuery")), refVal_partQuery );
        setPartQuery(refVal_partQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("productLine")))
    {
        utility::string_t refVal_productLine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("productLine")), refVal_productLine );
        setProductLine(refVal_productLine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project")))
    {
        utility::string_t refVal_project;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project")), refVal_project );
        setProject(refVal_project);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propertySourceTypes")))
    {
        std::map<utility::string_t, int32_t> refVal_propertySourceTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("propertySourceTypes")), refVal_propertySourceTypes );
        setPropertySourceTypes(refVal_propertySourceTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referencingConfiguredPartNodeIds")))
    {
        std::vector<utility::string_t> refVal_referencingConfiguredPartNodeIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("referencingConfiguredPartNodeIds")), refVal_referencingConfiguredPartNodeIds );
        setReferencingConfiguredPartNodeIds(refVal_referencingConfiguredPartNodeIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        utility::string_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailConfigurationId")))
    {
        utility::string_t refVal_thumbnailConfigurationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailConfigurationId")), refVal_thumbnailConfigurationId );
        setThumbnailConfigurationId(refVal_thumbnailConfigurationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailInfo")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailInfo")), refVal_thumbnailInfo );
        setThumbnailInfo(refVal_thumbnailInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title1")))
    {
        utility::string_t refVal_title1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title1")), refVal_title1 );
        setTitle1(refVal_title1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title2")))
    {
        utility::string_t refVal_title2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title2")), refVal_title2 );
        setTitle2(refVal_title2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title3")))
    {
        utility::string_t refVal_title3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title3")), refVal_title3 );
        setTitle3(refVal_title3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unflattenedPartId")))
    {
        utility::string_t refVal_unflattenedPartId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unflattenedPartId")), refVal_unflattenedPartId );
        setUnflattenedPartId(refVal_unflattenedPartId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vendor")))
    {
        utility::string_t refVal_vendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vendor")), refVal_vendor );
        setVendor(refVal_vendor);
    }
    return ok;
}

std::shared_ptr<BTPartAppearanceInfo> BTPartMetadataInfo::getAppearance() const
{
    return m_Appearance;
}

void BTPartMetadataInfo::setAppearance(const std::shared_ptr<BTPartAppearanceInfo>& value)
{
    m_Appearance = value;
    m_AppearanceIsSet = true;
}

bool BTPartMetadataInfo::appearanceIsSet() const
{
    return m_AppearanceIsSet;
}

void BTPartMetadataInfo::unsetAppearance()
{
    m_AppearanceIsSet = false;
}
utility::string_t BTPartMetadataInfo::getBodyType() const
{
    return m_BodyType;
}

void BTPartMetadataInfo::setBodyType(const utility::string_t& value)
{
    m_BodyType = value;
    m_BodyTypeIsSet = true;
}

bool BTPartMetadataInfo::bodyTypeIsSet() const
{
    return m_BodyTypeIsSet;
}

void BTPartMetadataInfo::unsetBodyType()
{
    m_BodyTypeIsSet = false;
}
utility::string_t BTPartMetadataInfo::getConfigurationId() const
{
    return m_ConfigurationId;
}

void BTPartMetadataInfo::setConfigurationId(const utility::string_t& value)
{
    m_ConfigurationId = value;
    m_ConfigurationIdIsSet = true;
}

bool BTPartMetadataInfo::configurationIdIsSet() const
{
    return m_ConfigurationIdIsSet;
}

void BTPartMetadataInfo::unsetConfigurationId()
{
    m_ConfigurationIdIsSet = false;
}
std::map<utility::string_t, utility::string_t>& BTPartMetadataInfo::getCustomProperties()
{
    return m_CustomProperties;
}

void BTPartMetadataInfo::setCustomProperties(const std::map<utility::string_t, utility::string_t>& value)
{
    m_CustomProperties = value;
    m_CustomPropertiesIsSet = true;
}

bool BTPartMetadataInfo::customPropertiesIsSet() const
{
    return m_CustomPropertiesIsSet;
}

void BTPartMetadataInfo::unsetCustomProperties()
{
    m_CustomPropertiesIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>>& BTPartMetadataInfo::getCustomPropertyDefinitions()
{
    return m_CustomPropertyDefinitions;
}

void BTPartMetadataInfo::setCustomPropertyDefinitions(const std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>>& value)
{
    m_CustomPropertyDefinitions = value;
    m_CustomPropertyDefinitionsIsSet = true;
}

bool BTPartMetadataInfo::customPropertyDefinitionsIsSet() const
{
    return m_CustomPropertyDefinitionsIsSet;
}

void BTPartMetadataInfo::unsetCustomPropertyDefinitions()
{
    m_CustomPropertyDefinitionsIsSet = false;
}
utility::string_t BTPartMetadataInfo::getDescription() const
{
    return m_Description;
}

void BTPartMetadataInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTPartMetadataInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTPartMetadataInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTPartMetadataInfo::getElementId() const
{
    return m_ElementId;
}

void BTPartMetadataInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTPartMetadataInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTPartMetadataInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTPartMetadataInfo::getHref() const
{
    return m_Href;
}

void BTPartMetadataInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTPartMetadataInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTPartMetadataInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTPartMetadataInfo::getId() const
{
    return m_Id;
}

void BTPartMetadataInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTPartMetadataInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTPartMetadataInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTPartMetadataInfo::isIsFlattenedBody() const
{
    return m_IsFlattenedBody;
}

void BTPartMetadataInfo::setIsFlattenedBody(bool value)
{
    m_IsFlattenedBody = value;
    m_IsFlattenedBodyIsSet = true;
}

bool BTPartMetadataInfo::isFlattenedBodyIsSet() const
{
    return m_IsFlattenedBodyIsSet;
}

void BTPartMetadataInfo::unsetIsFlattenedBody()
{
    m_IsFlattenedBodyIsSet = false;
}
bool BTPartMetadataInfo::isIsHidden() const
{
    return m_IsHidden;
}

void BTPartMetadataInfo::setIsHidden(bool value)
{
    m_IsHidden = value;
    m_IsHiddenIsSet = true;
}

bool BTPartMetadataInfo::isHiddenIsSet() const
{
    return m_IsHiddenIsSet;
}

void BTPartMetadataInfo::unsetIsHidden()
{
    m_IsHiddenIsSet = false;
}
bool BTPartMetadataInfo::isIsMesh() const
{
    return m_IsMesh;
}

void BTPartMetadataInfo::setIsMesh(bool value)
{
    m_IsMesh = value;
    m_IsMeshIsSet = true;
}

bool BTPartMetadataInfo::isMeshIsSet() const
{
    return m_IsMeshIsSet;
}

void BTPartMetadataInfo::unsetIsMesh()
{
    m_IsMeshIsSet = false;
}
std::shared_ptr<BTPartMaterialInfo> BTPartMetadataInfo::getMaterial() const
{
    return m_Material;
}

void BTPartMetadataInfo::setMaterial(const std::shared_ptr<BTPartMaterialInfo>& value)
{
    m_Material = value;
    m_MaterialIsSet = true;
}

bool BTPartMetadataInfo::materialIsSet() const
{
    return m_MaterialIsSet;
}

void BTPartMetadataInfo::unsetMaterial()
{
    m_MaterialIsSet = false;
}
utility::string_t BTPartMetadataInfo::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTPartMetadataInfo::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTPartMetadataInfo::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTPartMetadataInfo::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTPartMetadataInfo::getName() const
{
    return m_Name;
}

void BTPartMetadataInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPartMetadataInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPartMetadataInfo::unsetName()
{
    m_NameIsSet = false;
}
int32_t BTPartMetadataInfo::getOrdinal() const
{
    return m_Ordinal;
}

void BTPartMetadataInfo::setOrdinal(int32_t value)
{
    m_Ordinal = value;
    m_OrdinalIsSet = true;
}

bool BTPartMetadataInfo::ordinalIsSet() const
{
    return m_OrdinalIsSet;
}

void BTPartMetadataInfo::unsetOrdinal()
{
    m_OrdinalIsSet = false;
}
utility::string_t BTPartMetadataInfo::getPartId() const
{
    return m_PartId;
}

void BTPartMetadataInfo::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTPartMetadataInfo::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTPartMetadataInfo::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTPartMetadataInfo::getPartNumber() const
{
    return m_PartNumber;
}

void BTPartMetadataInfo::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTPartMetadataInfo::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTPartMetadataInfo::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTPartMetadataInfo::getPartQuery() const
{
    return m_PartQuery;
}

void BTPartMetadataInfo::setPartQuery(const utility::string_t& value)
{
    m_PartQuery = value;
    m_PartQueryIsSet = true;
}

bool BTPartMetadataInfo::partQueryIsSet() const
{
    return m_PartQueryIsSet;
}

void BTPartMetadataInfo::unsetPartQuery()
{
    m_PartQueryIsSet = false;
}
utility::string_t BTPartMetadataInfo::getProductLine() const
{
    return m_ProductLine;
}

void BTPartMetadataInfo::setProductLine(const utility::string_t& value)
{
    m_ProductLine = value;
    m_ProductLineIsSet = true;
}

bool BTPartMetadataInfo::productLineIsSet() const
{
    return m_ProductLineIsSet;
}

void BTPartMetadataInfo::unsetProductLine()
{
    m_ProductLineIsSet = false;
}
utility::string_t BTPartMetadataInfo::getProject() const
{
    return m_Project;
}

void BTPartMetadataInfo::setProject(const utility::string_t& value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool BTPartMetadataInfo::projectIsSet() const
{
    return m_ProjectIsSet;
}

void BTPartMetadataInfo::unsetProject()
{
    m_ProjectIsSet = false;
}
std::map<utility::string_t, int32_t>& BTPartMetadataInfo::getPropertySourceTypes()
{
    return m_PropertySourceTypes;
}

void BTPartMetadataInfo::setPropertySourceTypes(std::map<utility::string_t, int32_t> value)
{
    m_PropertySourceTypes = value;
    m_PropertySourceTypesIsSet = true;
}

bool BTPartMetadataInfo::propertySourceTypesIsSet() const
{
    return m_PropertySourceTypesIsSet;
}

void BTPartMetadataInfo::unsetPropertySourceTypes()
{
    m_PropertySourceTypesIsSet = false;
}
std::vector<utility::string_t>& BTPartMetadataInfo::getReferencingConfiguredPartNodeIds()
{
    return m_ReferencingConfiguredPartNodeIds;
}

void BTPartMetadataInfo::setReferencingConfiguredPartNodeIds(const std::vector<utility::string_t>& value)
{
    m_ReferencingConfiguredPartNodeIds = value;
    m_ReferencingConfiguredPartNodeIdsIsSet = true;
}

bool BTPartMetadataInfo::referencingConfiguredPartNodeIdsIsSet() const
{
    return m_ReferencingConfiguredPartNodeIdsIsSet;
}

void BTPartMetadataInfo::unsetReferencingConfiguredPartNodeIds()
{
    m_ReferencingConfiguredPartNodeIdsIsSet = false;
}
utility::string_t BTPartMetadataInfo::getRevision() const
{
    return m_Revision;
}

void BTPartMetadataInfo::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTPartMetadataInfo::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTPartMetadataInfo::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTPartMetadataInfo::getState() const
{
    return m_State;
}

void BTPartMetadataInfo::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTPartMetadataInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTPartMetadataInfo::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t BTPartMetadataInfo::getThumbnailConfigurationId() const
{
    return m_ThumbnailConfigurationId;
}

void BTPartMetadataInfo::setThumbnailConfigurationId(const utility::string_t& value)
{
    m_ThumbnailConfigurationId = value;
    m_ThumbnailConfigurationIdIsSet = true;
}

bool BTPartMetadataInfo::thumbnailConfigurationIdIsSet() const
{
    return m_ThumbnailConfigurationIdIsSet;
}

void BTPartMetadataInfo::unsetThumbnailConfigurationId()
{
    m_ThumbnailConfigurationIdIsSet = false;
}
std::shared_ptr<BTThumbnailInfo> BTPartMetadataInfo::getThumbnailInfo() const
{
    return m_ThumbnailInfo;
}

void BTPartMetadataInfo::setThumbnailInfo(const std::shared_ptr<BTThumbnailInfo>& value)
{
    m_ThumbnailInfo = value;
    m_ThumbnailInfoIsSet = true;
}

bool BTPartMetadataInfo::thumbnailInfoIsSet() const
{
    return m_ThumbnailInfoIsSet;
}

void BTPartMetadataInfo::unsetThumbnailInfo()
{
    m_ThumbnailInfoIsSet = false;
}
utility::string_t BTPartMetadataInfo::getTitle1() const
{
    return m_Title1;
}

void BTPartMetadataInfo::setTitle1(const utility::string_t& value)
{
    m_Title1 = value;
    m_Title1IsSet = true;
}

bool BTPartMetadataInfo::title1IsSet() const
{
    return m_Title1IsSet;
}

void BTPartMetadataInfo::unsetTitle1()
{
    m_Title1IsSet = false;
}
utility::string_t BTPartMetadataInfo::getTitle2() const
{
    return m_Title2;
}

void BTPartMetadataInfo::setTitle2(const utility::string_t& value)
{
    m_Title2 = value;
    m_Title2IsSet = true;
}

bool BTPartMetadataInfo::title2IsSet() const
{
    return m_Title2IsSet;
}

void BTPartMetadataInfo::unsetTitle2()
{
    m_Title2IsSet = false;
}
utility::string_t BTPartMetadataInfo::getTitle3() const
{
    return m_Title3;
}

void BTPartMetadataInfo::setTitle3(const utility::string_t& value)
{
    m_Title3 = value;
    m_Title3IsSet = true;
}

bool BTPartMetadataInfo::title3IsSet() const
{
    return m_Title3IsSet;
}

void BTPartMetadataInfo::unsetTitle3()
{
    m_Title3IsSet = false;
}
utility::string_t BTPartMetadataInfo::getUnflattenedPartId() const
{
    return m_UnflattenedPartId;
}

void BTPartMetadataInfo::setUnflattenedPartId(const utility::string_t& value)
{
    m_UnflattenedPartId = value;
    m_UnflattenedPartIdIsSet = true;
}

bool BTPartMetadataInfo::unflattenedPartIdIsSet() const
{
    return m_UnflattenedPartIdIsSet;
}

void BTPartMetadataInfo::unsetUnflattenedPartId()
{
    m_UnflattenedPartIdIsSet = false;
}
utility::string_t BTPartMetadataInfo::getVendor() const
{
    return m_Vendor;
}

void BTPartMetadataInfo::setVendor(const utility::string_t& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}

bool BTPartMetadataInfo::vendorIsSet() const
{
    return m_VendorIsSet;
}

void BTPartMetadataInfo::unsetVendor()
{
    m_VendorIsSet = false;
}
}
}
}
}


