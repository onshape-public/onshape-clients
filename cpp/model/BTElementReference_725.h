/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTElementReference_725.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTElementReference_725_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTElementReference_725_H_


#include "../ModelBase.h"

#include "BTMicroversionIdAndConfiguration_2338.h"
#include "BTDocumentWithVersionId.h"
#include "BTFullElementId_756.h"
#include <cpprest/details/basic_types.h>
#include "BTDocumentWithVersionAndElementId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTElementReference_725
    : public ModelBase
{
public:
    BTElementReference_725();
    virtual ~BTElementReference_725();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTElementReference_725 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isConfigured() const;
    bool configuredIsSet() const;
    void unsetConfigured();

    void setConfigured(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDocumentWithVersionId> getExternalDocumentWithVersion() const;
    bool externalDocumentWithVersionIsSet() const;
    void unsetExternalDocumentWithVersion();

    void setExternalDocumentWithVersion(const std::shared_ptr<BTDocumentWithVersionId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDocumentWithVersionAndElementId> getExternalDocumentWithVersionAndElementId() const;
    bool externalDocumentWithVersionAndElementIdIsSet() const;
    void unsetExternalDocumentWithVersionAndElementId();

    void setExternalDocumentWithVersionAndElementId(const std::shared_ptr<BTDocumentWithVersionAndElementId>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExternalReference() const;
    bool externalReferenceIsSet() const;
    void unsetExternalReference();

    void setExternalReference(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTFullElementId_756> getFullElementId() const;
    bool fullElementIdIsSet() const;
    void unsetFullElementId();

    void setFullElementId(const std::shared_ptr<BTFullElementId_756>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> getMicroversionIdAndConfiguration() const;
    bool microversionIdAndConfigurationIsSet() const;
    void unsetMicroversionIdAndConfiguration();

    void setMicroversionIdAndConfiguration(const std::shared_ptr<BTMicroversionIdAndConfiguration_2338>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    bool m_Configured;
    bool m_ConfiguredIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::shared_ptr<BTDocumentWithVersionId> m_ExternalDocumentWithVersion;
    bool m_ExternalDocumentWithVersionIsSet;
    std::shared_ptr<BTDocumentWithVersionAndElementId> m_ExternalDocumentWithVersionAndElementId;
    bool m_ExternalDocumentWithVersionAndElementIdIsSet;
    bool m_ExternalReference;
    bool m_ExternalReferenceIsSet;
    std::shared_ptr<BTFullElementId_756> m_FullElementId;
    bool m_FullElementIdIsSet;
    std::shared_ptr<BTMicroversionIdAndConfiguration_2338> m_MicroversionIdAndConfiguration;
    bool m_MicroversionIdAndConfigurationIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTElementReference_725_H_ */
