/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterNullableQuantity_807.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterNullableQuantity_807::BTMParameterNullableQuantity_807()
{
    m_NullValue = utility::conversions::to_string_t("");
    m_NullValueIsSet = false;
    m_IsNull = false;
    m_IsNullIsSet = false;
}

BTMParameterNullableQuantity_807::~BTMParameterNullableQuantity_807()
{
}

void BTMParameterNullableQuantity_807::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterNullableQuantity_807::toJson() const
{
    web::json::value val = this->BTMParameterQuantity_147::toJson();
    
    if(m_NullValueIsSet)
    {
        val[utility::conversions::to_string_t("nullValue")] = ModelBase::toJson(m_NullValue);
    }
    if(m_IsNullIsSet)
    {
        val[utility::conversions::to_string_t("isNull")] = ModelBase::toJson(m_IsNull);
    }

    return val;
}

bool BTMParameterNullableQuantity_807::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMParameterQuantity_147::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("nullValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nullValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nullValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_nullValue);
            setNullValue(refVal_nullValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isNull")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isNull"));
        if(!fieldValue.is_null())
        {
            bool refVal_isNull;
            ok &= ModelBase::fromJson(fieldValue, refVal_isNull);
            setIsNull(refVal_isNull);
        }
    }
    return ok;
}

void BTMParameterNullableQuantity_807::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("units"), m_Units));
    }
    if(m_IsIntegerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInteger"), m_IsInteger));
    }
    if(m_ExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expression"), m_Expression));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_NullValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nullValue"), m_NullValue));
    }
    if(m_IsNullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isNull"), m_IsNull));
    }
}

bool BTMParameterNullableQuantity_807::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("units")))
    {
        utility::string_t refVal_units;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("units")), refVal_units );
        setUnits(refVal_units);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isInteger")))
    {
        bool refVal_isInteger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInteger")), refVal_isInteger );
        setIsInteger(refVal_isInteger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expression")))
    {
        utility::string_t refVal_expression;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expression")), refVal_expression );
        setExpression(refVal_expression);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        double refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nullValue")))
    {
        utility::string_t refVal_nullValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nullValue")), refVal_nullValue );
        setNullValue(refVal_nullValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isNull")))
    {
        bool refVal_isNull;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isNull")), refVal_isNull );
        setIsNull(refVal_isNull);
    }
    return ok;
}

utility::string_t BTMParameterNullableQuantity_807::getNullValue() const
{
    return m_NullValue;
}

void BTMParameterNullableQuantity_807::setNullValue(const utility::string_t& value)
{
    m_NullValue = value;
    m_NullValueIsSet = true;
}

bool BTMParameterNullableQuantity_807::nullValueIsSet() const
{
    return m_NullValueIsSet;
}

void BTMParameterNullableQuantity_807::unsetNullValue()
{
    m_NullValueIsSet = false;
}
bool BTMParameterNullableQuantity_807::isIsNull() const
{
    return m_IsNull;
}

void BTMParameterNullableQuantity_807::setIsNull(bool value)
{
    m_IsNull = value;
    m_IsNullIsSet = true;
}

bool BTMParameterNullableQuantity_807::isNullIsSet() const
{
    return m_IsNullIsSet;
}

void BTMParameterNullableQuantity_807::unsetIsNull()
{
    m_IsNullIsSet = false;
}
}
}
}
}


