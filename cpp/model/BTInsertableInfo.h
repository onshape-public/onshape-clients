/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTInsertableInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTInsertableInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTInsertableInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTInsertableInfo
    : public ModelBase
{
public:
    BTInsertableInfo();
    virtual ~BTInsertableInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTInsertableInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBodyType() const;
    bool bodyTypeIsSet() const;
    void unsetBodyType();

    void setBodyType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getClassType() const;
    bool classTypeIsSet() const;
    void unsetClassType();

    void setClassType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfigurationId() const;
    bool configurationIdIsSet() const;
    void unsetConfigurationId();

    void setConfigurationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getConfigurationParameterValues();
    bool configurationParameterValuesIsSet() const;
    void unsetConfigurationParameterValues();

    void setConfigurationParameterValues(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getConfigurationParameters();
    bool configurationParametersIsSet() const;
    void unsetConfigurationParameters();

    void setConfigurationParameters(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataType() const;
    bool dataTypeIsSet() const;
    void unsetDataType();

    void setDataType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeterministicId() const;
    bool deterministicIdIsSet() const;
    void unsetDeterministicId();

    void setDeterministicId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementName() const;
    bool elementNameIsSet() const;
    void unsetElementName();

    void setElementName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementType() const;
    bool elementTypeIsSet() const;
    void unsetElementType();

    void setElementType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureId() const;
    bool featureIdIsSet() const;
    void unsetFeatureId();

    void setFeatureId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureName() const;
    bool featureNameIsSet() const;
    void unsetFeatureName();

    void setFeatureName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFeatureSpec();
    bool featureSpecIsSet() const;
    void unsetFeatureSpec();

    void setFeatureSpec(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureType() const;
    bool featureTypeIsSet() const;
    void unsetFeatureType();

    void setFeatureType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFsTableSpec();
    bool fsTableSpecIsSet() const;
    void unsetFsTableSpec();

    void setFsTableSpec(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasFaults() const;
    bool hasFaultsIsSet() const;
    void unsetHasFaults();

    void setHasFaults(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInsertableQuery() const;
    bool insertableQueryIsSet() const;
    void unsetInsertableQuery();

    void setInsertableQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFlattenedBody() const;
    bool isFlattenedBodyIsSet() const;
    void unsetIsFlattenedBody();

    void setIsFlattenedBody(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsMesh() const;
    bool isMeshIsSet() const;
    void unsetIsMesh();

    void setIsMesh(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMicroversionId() const;
    bool microversionIdIsSet() const;
    void unsetMicroversionId();

    void setMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartName() const;
    bool partNameIsSet() const;
    void unsetPartName();

    void setPartName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPredictableId() const;
    bool predictableIdIsSet() const;
    void unsetPredictableId();

    void setPredictableId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThumbnailUri() const;
    bool thumbnailUriIsSet() const;
    void unsetThumbnailUri();

    void setThumbnailUri(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnflattenedPartDeterministicId() const;
    bool unflattenedPartDeterministicIdIsSet() const;
    void unsetUnflattenedPartDeterministicId();

    void setUnflattenedPartDeterministicId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionName() const;
    bool versionNameIsSet() const;
    void unsetVersionName();

    void setVersionName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    utility::string_t m_BodyType;
    bool m_BodyTypeIsSet;
    int32_t m_ClassType;
    bool m_ClassTypeIsSet;
    utility::string_t m_ConfigurationId;
    bool m_ConfigurationIdIsSet;
    std::vector<utility::string_t> m_ConfigurationParameterValues;
    bool m_ConfigurationParameterValuesIsSet;
    std::vector<utility::string_t> m_ConfigurationParameters;
    bool m_ConfigurationParametersIsSet;
    utility::string_t m_DataType;
    bool m_DataTypeIsSet;
    utility::string_t m_DeterministicId;
    bool m_DeterministicIdIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    utility::string_t m_ElementName;
    bool m_ElementNameIsSet;
    utility::string_t m_ElementType;
    bool m_ElementTypeIsSet;
    utility::string_t m_FeatureId;
    bool m_FeatureIdIsSet;
    utility::string_t m_FeatureName;
    bool m_FeatureNameIsSet;
    std::vector<utility::string_t> m_FeatureSpec;
    bool m_FeatureSpecIsSet;
    utility::string_t m_FeatureType;
    bool m_FeatureTypeIsSet;
    std::vector<utility::string_t> m_FsTableSpec;
    bool m_FsTableSpecIsSet;
    bool m_HasFaults;
    bool m_HasFaultsIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_InsertableQuery;
    bool m_InsertableQueryIsSet;
    bool m_IsFlattenedBody;
    bool m_IsFlattenedBodyIsSet;
    bool m_IsMesh;
    bool m_IsMeshIsSet;
    utility::string_t m_MicroversionId;
    bool m_MicroversionIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_PartName;
    bool m_PartNameIsSet;
    utility::string_t m_PredictableId;
    bool m_PredictableIdIsSet;
    utility::string_t m_ThumbnailUri;
    bool m_ThumbnailUriIsSet;
    utility::string_t m_UnflattenedPartDeterministicId;
    bool m_UnflattenedPartDeterministicIdIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    utility::string_t m_VersionName;
    bool m_VersionNameIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTInsertableInfo_H_ */
