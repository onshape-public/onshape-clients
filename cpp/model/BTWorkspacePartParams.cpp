/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWorkspacePartParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWorkspacePartParams::BTWorkspacePartParams()
{
    m_AppearanceIsSet = false;
    m_ApplyUpdateToAllConfigurations = false;
    m_ApplyUpdateToAllConfigurationsIsSet = false;
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_ConnectionId = utility::conversions::to_string_t("");
    m_ConnectionIdIsSet = false;
    m_CustomPropertiesIsSet = false;
    m_CustomPropertyDefinitionsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_MaterialIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_ProductLine = utility::conversions::to_string_t("");
    m_ProductLineIsSet = false;
    m_Project = utility::conversions::to_string_t("");
    m_ProjectIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_Title1 = utility::conversions::to_string_t("");
    m_Title1IsSet = false;
    m_Title2 = utility::conversions::to_string_t("");
    m_Title2IsSet = false;
    m_Title3 = utility::conversions::to_string_t("");
    m_Title3IsSet = false;
    m_Vendor = utility::conversions::to_string_t("");
    m_VendorIsSet = false;
}

BTWorkspacePartParams::~BTWorkspacePartParams()
{
}

void BTWorkspacePartParams::validate()
{
    // TODO: implement validation
}

web::json::value BTWorkspacePartParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AppearanceIsSet)
    {
        val[utility::conversions::to_string_t("appearance")] = ModelBase::toJson(m_Appearance);
    }
    if(m_ApplyUpdateToAllConfigurationsIsSet)
    {
        val[utility::conversions::to_string_t("applyUpdateToAllConfigurations")] = ModelBase::toJson(m_ApplyUpdateToAllConfigurations);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_ConnectionIdIsSet)
    {
        val[utility::conversions::to_string_t("connectionId")] = ModelBase::toJson(m_ConnectionId);
    }
    if(m_CustomPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("customProperties")] = ModelBase::toJson(m_CustomProperties);
    }
    if(m_CustomPropertyDefinitionsIsSet)
    {
        val[utility::conversions::to_string_t("customPropertyDefinitions")] = ModelBase::toJson(m_CustomPropertyDefinitions);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_MaterialIsSet)
    {
        val[utility::conversions::to_string_t("material")] = ModelBase::toJson(m_Material);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_ProductLineIsSet)
    {
        val[utility::conversions::to_string_t("productLine")] = ModelBase::toJson(m_ProductLine);
    }
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t("project")] = ModelBase::toJson(m_Project);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_Title1IsSet)
    {
        val[utility::conversions::to_string_t("title1")] = ModelBase::toJson(m_Title1);
    }
    if(m_Title2IsSet)
    {
        val[utility::conversions::to_string_t("title2")] = ModelBase::toJson(m_Title2);
    }
    if(m_Title3IsSet)
    {
        val[utility::conversions::to_string_t("title3")] = ModelBase::toJson(m_Title3);
    }
    if(m_VendorIsSet)
    {
        val[utility::conversions::to_string_t("vendor")] = ModelBase::toJson(m_Vendor);
    }

    return val;
}

bool BTWorkspacePartParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("appearance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appearance"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPartAppearanceParams> refVal_appearance;
            ok &= ModelBase::fromJson(fieldValue, refVal_appearance);
            setAppearance(refVal_appearance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("applyUpdateToAllConfigurations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("applyUpdateToAllConfigurations"));
        if(!fieldValue.is_null())
        {
            bool refVal_applyUpdateToAllConfigurations;
            ok &= ModelBase::fromJson(fieldValue, refVal_applyUpdateToAllConfigurations);
            setApplyUpdateToAllConfigurations(refVal_applyUpdateToAllConfigurations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connectionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_connectionId);
            setConnectionId(refVal_connectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customProperties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTNameValuePair>> refVal_customProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_customProperties);
            setCustomProperties(refVal_customProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customPropertyDefinitions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customPropertyDefinitions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTCustomPropertyDefinitionParams>> refVal_customPropertyDefinitions;
            ok &= ModelBase::fromJson(fieldValue, refVal_customPropertyDefinitions);
            setCustomPropertyDefinitions(refVal_customPropertyDefinitions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("material")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("material"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMaterialParams> refVal_material;
            ok &= ModelBase::fromJson(fieldValue, refVal_material);
            setMaterial(refVal_material);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("productLine")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("productLine"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_productLine;
            ok &= ModelBase::fromJson(fieldValue, refVal_productLine);
            setProductLine(refVal_productLine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_project;
            ok &= ModelBase::fromJson(fieldValue, refVal_project);
            setProject(refVal_project);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title1;
            ok &= ModelBase::fromJson(fieldValue, refVal_title1);
            setTitle1(refVal_title1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title2;
            ok &= ModelBase::fromJson(fieldValue, refVal_title2);
            setTitle2(refVal_title2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title3")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title3"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title3;
            ok &= ModelBase::fromJson(fieldValue, refVal_title3);
            setTitle3(refVal_title3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vendor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vendor"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_vendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_vendor);
            setVendor(refVal_vendor);
        }
    }
    return ok;
}

void BTWorkspacePartParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AppearanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appearance"), m_Appearance));
    }
    if(m_ApplyUpdateToAllConfigurationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("applyUpdateToAllConfigurations"), m_ApplyUpdateToAllConfigurations));
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_ConnectionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connectionId"), m_ConnectionId));
    }
    if(m_CustomPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customProperties"), m_CustomProperties));
    }
    if(m_CustomPropertyDefinitionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customPropertyDefinitions"), m_CustomPropertyDefinitions));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_MaterialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("material"), m_Material));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_ProductLineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("productLine"), m_ProductLine));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project"), m_Project));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_Title1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title1"), m_Title1));
    }
    if(m_Title2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title2"), m_Title2));
    }
    if(m_Title3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title3"), m_Title3));
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vendor"), m_Vendor));
    }
}

bool BTWorkspacePartParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("appearance")))
    {
        std::shared_ptr<BTPartAppearanceParams> refVal_appearance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appearance")), refVal_appearance );
        setAppearance(refVal_appearance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("applyUpdateToAllConfigurations")))
    {
        bool refVal_applyUpdateToAllConfigurations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("applyUpdateToAllConfigurations")), refVal_applyUpdateToAllConfigurations );
        setApplyUpdateToAllConfigurations(refVal_applyUpdateToAllConfigurations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionId")))
    {
        utility::string_t refVal_connectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connectionId")), refVal_connectionId );
        setConnectionId(refVal_connectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customProperties")))
    {
        std::vector<std::shared_ptr<BTNameValuePair>> refVal_customProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customProperties")), refVal_customProperties );
        setCustomProperties(refVal_customProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customPropertyDefinitions")))
    {
        std::vector<std::shared_ptr<BTCustomPropertyDefinitionParams>> refVal_customPropertyDefinitions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customPropertyDefinitions")), refVal_customPropertyDefinitions );
        setCustomPropertyDefinitions(refVal_customPropertyDefinitions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("material")))
    {
        std::shared_ptr<BTMaterialParams> refVal_material;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("material")), refVal_material );
        setMaterial(refVal_material);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("productLine")))
    {
        utility::string_t refVal_productLine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("productLine")), refVal_productLine );
        setProductLine(refVal_productLine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project")))
    {
        utility::string_t refVal_project;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project")), refVal_project );
        setProject(refVal_project);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title1")))
    {
        utility::string_t refVal_title1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title1")), refVal_title1 );
        setTitle1(refVal_title1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title2")))
    {
        utility::string_t refVal_title2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title2")), refVal_title2 );
        setTitle2(refVal_title2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title3")))
    {
        utility::string_t refVal_title3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title3")), refVal_title3 );
        setTitle3(refVal_title3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vendor")))
    {
        utility::string_t refVal_vendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vendor")), refVal_vendor );
        setVendor(refVal_vendor);
    }
    return ok;
}

std::shared_ptr<BTPartAppearanceParams> BTWorkspacePartParams::getAppearance() const
{
    return m_Appearance;
}

void BTWorkspacePartParams::setAppearance(const std::shared_ptr<BTPartAppearanceParams>& value)
{
    m_Appearance = value;
    m_AppearanceIsSet = true;
}

bool BTWorkspacePartParams::appearanceIsSet() const
{
    return m_AppearanceIsSet;
}

void BTWorkspacePartParams::unsetAppearance()
{
    m_AppearanceIsSet = false;
}
bool BTWorkspacePartParams::isApplyUpdateToAllConfigurations() const
{
    return m_ApplyUpdateToAllConfigurations;
}

void BTWorkspacePartParams::setApplyUpdateToAllConfigurations(bool value)
{
    m_ApplyUpdateToAllConfigurations = value;
    m_ApplyUpdateToAllConfigurationsIsSet = true;
}

bool BTWorkspacePartParams::applyUpdateToAllConfigurationsIsSet() const
{
    return m_ApplyUpdateToAllConfigurationsIsSet;
}

void BTWorkspacePartParams::unsetApplyUpdateToAllConfigurations()
{
    m_ApplyUpdateToAllConfigurationsIsSet = false;
}
utility::string_t BTWorkspacePartParams::getConfiguration() const
{
    return m_Configuration;
}

void BTWorkspacePartParams::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTWorkspacePartParams::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTWorkspacePartParams::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
utility::string_t BTWorkspacePartParams::getConnectionId() const
{
    return m_ConnectionId;
}

void BTWorkspacePartParams::setConnectionId(const utility::string_t& value)
{
    m_ConnectionId = value;
    m_ConnectionIdIsSet = true;
}

bool BTWorkspacePartParams::connectionIdIsSet() const
{
    return m_ConnectionIdIsSet;
}

void BTWorkspacePartParams::unsetConnectionId()
{
    m_ConnectionIdIsSet = false;
}
std::vector<std::shared_ptr<BTNameValuePair>>& BTWorkspacePartParams::getCustomProperties()
{
    return m_CustomProperties;
}

void BTWorkspacePartParams::setCustomProperties(const std::vector<std::shared_ptr<BTNameValuePair>>& value)
{
    m_CustomProperties = value;
    m_CustomPropertiesIsSet = true;
}

bool BTWorkspacePartParams::customPropertiesIsSet() const
{
    return m_CustomPropertiesIsSet;
}

void BTWorkspacePartParams::unsetCustomProperties()
{
    m_CustomPropertiesIsSet = false;
}
std::vector<std::shared_ptr<BTCustomPropertyDefinitionParams>>& BTWorkspacePartParams::getCustomPropertyDefinitions()
{
    return m_CustomPropertyDefinitions;
}

void BTWorkspacePartParams::setCustomPropertyDefinitions(const std::vector<std::shared_ptr<BTCustomPropertyDefinitionParams>>& value)
{
    m_CustomPropertyDefinitions = value;
    m_CustomPropertyDefinitionsIsSet = true;
}

bool BTWorkspacePartParams::customPropertyDefinitionsIsSet() const
{
    return m_CustomPropertyDefinitionsIsSet;
}

void BTWorkspacePartParams::unsetCustomPropertyDefinitions()
{
    m_CustomPropertyDefinitionsIsSet = false;
}
utility::string_t BTWorkspacePartParams::getDescription() const
{
    return m_Description;
}

void BTWorkspacePartParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTWorkspacePartParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTWorkspacePartParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTWorkspacePartParams::getElementId() const
{
    return m_ElementId;
}

void BTWorkspacePartParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTWorkspacePartParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTWorkspacePartParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
std::shared_ptr<BTMaterialParams> BTWorkspacePartParams::getMaterial() const
{
    return m_Material;
}

void BTWorkspacePartParams::setMaterial(const std::shared_ptr<BTMaterialParams>& value)
{
    m_Material = value;
    m_MaterialIsSet = true;
}

bool BTWorkspacePartParams::materialIsSet() const
{
    return m_MaterialIsSet;
}

void BTWorkspacePartParams::unsetMaterial()
{
    m_MaterialIsSet = false;
}
utility::string_t BTWorkspacePartParams::getName() const
{
    return m_Name;
}

void BTWorkspacePartParams::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTWorkspacePartParams::nameIsSet() const
{
    return m_NameIsSet;
}

void BTWorkspacePartParams::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTWorkspacePartParams::getPartId() const
{
    return m_PartId;
}

void BTWorkspacePartParams::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTWorkspacePartParams::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTWorkspacePartParams::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTWorkspacePartParams::getPartNumber() const
{
    return m_PartNumber;
}

void BTWorkspacePartParams::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTWorkspacePartParams::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTWorkspacePartParams::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTWorkspacePartParams::getProductLine() const
{
    return m_ProductLine;
}

void BTWorkspacePartParams::setProductLine(const utility::string_t& value)
{
    m_ProductLine = value;
    m_ProductLineIsSet = true;
}

bool BTWorkspacePartParams::productLineIsSet() const
{
    return m_ProductLineIsSet;
}

void BTWorkspacePartParams::unsetProductLine()
{
    m_ProductLineIsSet = false;
}
utility::string_t BTWorkspacePartParams::getProject() const
{
    return m_Project;
}

void BTWorkspacePartParams::setProject(const utility::string_t& value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool BTWorkspacePartParams::projectIsSet() const
{
    return m_ProjectIsSet;
}

void BTWorkspacePartParams::unsetProject()
{
    m_ProjectIsSet = false;
}
utility::string_t BTWorkspacePartParams::getRevision() const
{
    return m_Revision;
}

void BTWorkspacePartParams::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTWorkspacePartParams::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTWorkspacePartParams::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTWorkspacePartParams::getTitle1() const
{
    return m_Title1;
}

void BTWorkspacePartParams::setTitle1(const utility::string_t& value)
{
    m_Title1 = value;
    m_Title1IsSet = true;
}

bool BTWorkspacePartParams::title1IsSet() const
{
    return m_Title1IsSet;
}

void BTWorkspacePartParams::unsetTitle1()
{
    m_Title1IsSet = false;
}
utility::string_t BTWorkspacePartParams::getTitle2() const
{
    return m_Title2;
}

void BTWorkspacePartParams::setTitle2(const utility::string_t& value)
{
    m_Title2 = value;
    m_Title2IsSet = true;
}

bool BTWorkspacePartParams::title2IsSet() const
{
    return m_Title2IsSet;
}

void BTWorkspacePartParams::unsetTitle2()
{
    m_Title2IsSet = false;
}
utility::string_t BTWorkspacePartParams::getTitle3() const
{
    return m_Title3;
}

void BTWorkspacePartParams::setTitle3(const utility::string_t& value)
{
    m_Title3 = value;
    m_Title3IsSet = true;
}

bool BTWorkspacePartParams::title3IsSet() const
{
    return m_Title3IsSet;
}

void BTWorkspacePartParams::unsetTitle3()
{
    m_Title3IsSet = false;
}
utility::string_t BTWorkspacePartParams::getVendor() const
{
    return m_Vendor;
}

void BTWorkspacePartParams::setVendor(const utility::string_t& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}

bool BTWorkspacePartParams::vendorIsSet() const
{
    return m_VendorIsSet;
}

void BTWorkspacePartParams::unsetVendor()
{
    m_VendorIsSet = false;
}
}
}
}
}


