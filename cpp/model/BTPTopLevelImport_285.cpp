/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPTopLevelImport_285.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPTopLevelImport_285::BTPTopLevelImport_285()
{
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_NamespaceString = utility::conversions::to_string_t("");
    m_NamespaceStringIsSet = false;
    m_CombinedNamespacePathAndVersion = utility::conversions::to_string_t("");
    m_CombinedNamespacePathAndVersionIsSet = false;
    m_ModuleIdIsSet = false;
    m_SpaceBeforeImportIsSet = false;
    m_r_namespaceIsSet = false;
}

BTPTopLevelImport_285::~BTPTopLevelImport_285()
{
}

void BTPTopLevelImport_285::validate()
{
    // TODO: implement validation
}

web::json::value BTPTopLevelImport_285::toJson() const
{
    web::json::value val = this->BTPTopLevelNode_286::toJson();
    
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NamespaceStringIsSet)
    {
        val[utility::conversions::to_string_t("namespaceString")] = ModelBase::toJson(m_NamespaceString);
    }
    if(m_CombinedNamespacePathAndVersionIsSet)
    {
        val[utility::conversions::to_string_t("combinedNamespacePathAndVersion")] = ModelBase::toJson(m_CombinedNamespacePathAndVersion);
    }
    if(m_ModuleIdIsSet)
    {
        val[utility::conversions::to_string_t("moduleId")] = ModelBase::toJson(m_ModuleId);
    }
    if(m_SpaceBeforeImportIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeImport")] = ModelBase::toJson(m_SpaceBeforeImport);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }

    return val;
}

bool BTPTopLevelImport_285::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPTopLevelNode_286::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespaceString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespaceString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespaceString;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespaceString);
            setNamespaceString(refVal_namespaceString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("combinedNamespacePathAndVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("combinedNamespacePathAndVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_combinedNamespacePathAndVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_combinedNamespacePathAndVersion);
            setCombinedNamespacePathAndVersion(refVal_combinedNamespacePathAndVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moduleId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moduleId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPModuleId_235> refVal_moduleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_moduleId);
            setModuleId(refVal_moduleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeImport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeImport"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeImport;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeImport);
            setSpaceBeforeImport(refVal_spaceBeforeImport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    return ok;
}

void BTPTopLevelImport_285::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_DeprecatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecated"), m_Deprecated));
    }
    if(m_SymbolNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbolName"), m_SymbolName));
    }
    if(m_ArgumentsToDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("argumentsToDocument"), m_ArgumentsToDocument));
    }
    if(m_DeprecatedExplanationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecatedExplanation"), m_DeprecatedExplanation));
    }
    if(m_ForExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forExport"), m_ForExport));
    }
    if(m_SpaceAfterExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterExport"), m_SpaceAfterExport));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NamespaceStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceString"), m_NamespaceString));
    }
    if(m_CombinedNamespacePathAndVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("combinedNamespacePathAndVersion"), m_CombinedNamespacePathAndVersion));
    }
    if(m_ModuleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moduleId"), m_ModuleId));
    }
    if(m_SpaceBeforeImportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeImport"), m_SpaceBeforeImport));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
}

bool BTPTopLevelImport_285::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecated")))
    {
        bool refVal_deprecated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecated")), refVal_deprecated );
        setDeprecated(refVal_deprecated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbolName")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_symbolName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbolName")), refVal_symbolName );
        setSymbolName(refVal_symbolName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("argumentsToDocument")))
    {
        std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_argumentsToDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("argumentsToDocument")), refVal_argumentsToDocument );
        setArgumentsToDocument(refVal_argumentsToDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecatedExplanation")))
    {
        utility::string_t refVal_deprecatedExplanation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecatedExplanation")), refVal_deprecatedExplanation );
        setDeprecatedExplanation(refVal_deprecatedExplanation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("forExport")))
    {
        bool refVal_forExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("forExport")), refVal_forExport );
        setForExport(refVal_forExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterExport")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterExport")), refVal_spaceAfterExport );
        setSpaceAfterExport(refVal_spaceAfterExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceString")))
    {
        utility::string_t refVal_namespaceString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceString")), refVal_namespaceString );
        setNamespaceString(refVal_namespaceString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("combinedNamespacePathAndVersion")))
    {
        utility::string_t refVal_combinedNamespacePathAndVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("combinedNamespacePathAndVersion")), refVal_combinedNamespacePathAndVersion );
        setCombinedNamespacePathAndVersion(refVal_combinedNamespacePathAndVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moduleId")))
    {
        std::shared_ptr<BTPModuleId_235> refVal_moduleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moduleId")), refVal_moduleId );
        setModuleId(refVal_moduleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeImport")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeImport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeImport")), refVal_spaceBeforeImport );
        setSpaceBeforeImport(refVal_spaceBeforeImport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    return ok;
}

utility::string_t BTPTopLevelImport_285::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTPTopLevelImport_285::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTPTopLevelImport_285::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTPTopLevelImport_285::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTPTopLevelImport_285::getNamespaceString() const
{
    return m_NamespaceString;
}

void BTPTopLevelImport_285::setNamespaceString(const utility::string_t& value)
{
    m_NamespaceString = value;
    m_NamespaceStringIsSet = true;
}

bool BTPTopLevelImport_285::namespaceStringIsSet() const
{
    return m_NamespaceStringIsSet;
}

void BTPTopLevelImport_285::unsetNamespaceString()
{
    m_NamespaceStringIsSet = false;
}
utility::string_t BTPTopLevelImport_285::getCombinedNamespacePathAndVersion() const
{
    return m_CombinedNamespacePathAndVersion;
}

void BTPTopLevelImport_285::setCombinedNamespacePathAndVersion(const utility::string_t& value)
{
    m_CombinedNamespacePathAndVersion = value;
    m_CombinedNamespacePathAndVersionIsSet = true;
}

bool BTPTopLevelImport_285::combinedNamespacePathAndVersionIsSet() const
{
    return m_CombinedNamespacePathAndVersionIsSet;
}

void BTPTopLevelImport_285::unsetCombinedNamespacePathAndVersion()
{
    m_CombinedNamespacePathAndVersionIsSet = false;
}
std::shared_ptr<BTPModuleId_235> BTPTopLevelImport_285::getModuleId() const
{
    return m_ModuleId;
}

void BTPTopLevelImport_285::setModuleId(const std::shared_ptr<BTPModuleId_235>& value)
{
    m_ModuleId = value;
    m_ModuleIdIsSet = true;
}

bool BTPTopLevelImport_285::moduleIdIsSet() const
{
    return m_ModuleIdIsSet;
}

void BTPTopLevelImport_285::unsetModuleId()
{
    m_ModuleIdIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPTopLevelImport_285::getSpaceBeforeImport() const
{
    return m_SpaceBeforeImport;
}

void BTPTopLevelImport_285::setSpaceBeforeImport(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeImport = value;
    m_SpaceBeforeImportIsSet = true;
}

bool BTPTopLevelImport_285::spaceBeforeImportIsSet() const
{
    return m_SpaceBeforeImportIsSet;
}

void BTPTopLevelImport_285::unsetSpaceBeforeImport()
{
    m_SpaceBeforeImportIsSet = false;
}
std::vector<std::shared_ptr<BTPIdentifier_8>>& BTPTopLevelImport_285::getRNamespace()
{
    return m_r_namespace;
}

void BTPTopLevelImport_285::setRNamespace(const std::vector<std::shared_ptr<BTPIdentifier_8>>& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTPTopLevelImport_285::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTPTopLevelImport_285::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
}
}
}
}


