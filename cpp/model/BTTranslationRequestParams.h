/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTTranslationRequestParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslationRequestParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslationRequestParams_H_


#include "../ModelBase.h"

#include "FormDataContentDisposition.h"
#include <cpprest/details/basic_types.h>
#include "HttpContent.h"
#include "FormDataBodyPart.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTTranslationRequestParams
    : public ModelBase
{
public:
    BTTranslationRequestParams();
    virtual ~BTTranslationRequestParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTTranslationRequestParams members

    /// <summary>
    /// 
    /// </summary>
    bool isAllowFaultyParts() const;
    bool allowFaultyPartsIsSet() const;
    void unsetAllowFaultyParts();

    void setAllowFaultyParts(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCreateComposite() const;
    bool createCompositeIsSet() const;
    void unsetCreateComposite();

    void setCreateComposite(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCreateDrawingIfPossible() const;
    bool createDrawingIfPossibleIsSet() const;
    void unsetCreateDrawingIfPossible();

    void setCreateDrawingIfPossible(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEncodedFilename() const;
    bool encodedFilenameIsSet() const;
    void unsetEncodedFilename();

    void setEncodedFilename(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExtractAssemblyHierarchy() const;
    bool extractAssemblyHierarchyIsSet() const;
    void unsetExtractAssemblyHierarchy();

    void setExtractAssemblyHierarchy(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HttpContent> getFile() const;
    bool fileIsSet() const;
    void unsetfile();

    void setFile(const std::shared_ptr<HttpContent>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FormDataBodyPart> getFileBodyWithDetails() const;
    bool fileBodyWithDetailsIsSet() const;
    void unsetFileBodyWithDetails();

    void setFileBodyWithDetails(const std::shared_ptr<FormDataBodyPart>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getFileContentLength() const;
    bool fileContentLengthIsSet() const;
    void unsetFileContentLength();

    void setFileContentLength(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FormDataContentDisposition> getFileDetail() const;
    bool fileDetailIsSet() const;
    void unsetFileDetail();

    void setFileDetail(const std::shared_ptr<FormDataContentDisposition>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isFlattenAssemblies() const;
    bool flattenAssembliesIsSet() const;
    void unsetFlattenAssemblies();

    void setFlattenAssemblies(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFormatName() const;
    bool formatNameIsSet() const;
    void unsetFormatName();

    void setFormatName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsyAxisIsUp() const;
    bool isyAxisIsUpIsSet() const;
    void unsetIsyAxisIsUp();

    void setIsyAxisIsUp(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isJoinAdjacentSurfaces() const;
    bool joinAdjacentSurfacesIsSet() const;
    void unsetJoinAdjacentSurfaces();

    void setJoinAdjacentSurfaces(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocationElementId() const;
    bool locationElementIdIsSet() const;
    void unsetLocationElementId();

    void setLocationElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocationGroupId() const;
    bool locationGroupIdIsSet() const;
    void unsetLocationGroupId();

    void setLocationGroupId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLocationPosition() const;
    bool locationPositionIsSet() const;
    void unsetLocationPosition();

    void setLocationPosition(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isNotifyUser() const;
    bool notifyUserIsSet() const;
    void unsetNotifyUser();

    void setNotifyUser(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwnerId();

    void setOwnerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwnerType() const;
    bool ownerTypeIsSet() const;
    void unsetOwnerType();

    void setOwnerType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProjectId();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isRPublic() const;
    bool rPublicIsSet() const;
    void unsetr_public();

    void setRPublic(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSplitAssembliesIntoMultipleDocuments() const;
    bool splitAssembliesIntoMultipleDocumentsIsSet() const;
    void unsetSplitAssembliesIntoMultipleDocuments();

    void setSplitAssembliesIntoMultipleDocuments(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isStoreInDocument() const;
    bool storeInDocumentIsSet() const;
    void unsetStoreInDocument();

    void setStoreInDocument(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isTranslate() const;
    bool translateIsSet() const;
    void unsetTranslate();

    void setTranslate(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnit() const;
    bool unitIsSet() const;
    void unsetUnit();

    void setUnit(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUploadId() const;
    bool uploadIdIsSet() const;
    void unsetUploadId();

    void setUploadId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionString() const;
    bool versionStringIsSet() const;
    void unsetVersionString();

    void setVersionString(const utility::string_t& value);


protected:
    bool m_AllowFaultyParts;
    bool m_AllowFaultyPartsIsSet;
    bool m_CreateComposite;
    bool m_CreateCompositeIsSet;
    bool m_CreateDrawingIfPossible;
    bool m_CreateDrawingIfPossibleIsSet;
    utility::string_t m_EncodedFilename;
    bool m_EncodedFilenameIsSet;
    bool m_ExtractAssemblyHierarchy;
    bool m_ExtractAssemblyHierarchyIsSet;
    std::shared_ptr<HttpContent> m_file;
    bool m_fileIsSet;
    std::shared_ptr<FormDataBodyPart> m_FileBodyWithDetails;
    bool m_FileBodyWithDetailsIsSet;
    int64_t m_FileContentLength;
    bool m_FileContentLengthIsSet;
    std::shared_ptr<FormDataContentDisposition> m_FileDetail;
    bool m_FileDetailIsSet;
    bool m_FlattenAssemblies;
    bool m_FlattenAssembliesIsSet;
    utility::string_t m_FormatName;
    bool m_FormatNameIsSet;
    bool m_IsyAxisIsUp;
    bool m_IsyAxisIsUpIsSet;
    bool m_JoinAdjacentSurfaces;
    bool m_JoinAdjacentSurfacesIsSet;
    utility::string_t m_LocationElementId;
    bool m_LocationElementIdIsSet;
    utility::string_t m_LocationGroupId;
    bool m_LocationGroupIdIsSet;
    int32_t m_LocationPosition;
    bool m_LocationPositionIsSet;
    bool m_NotifyUser;
    bool m_NotifyUserIsSet;
    utility::string_t m_OwnerId;
    bool m_OwnerIdIsSet;
    utility::string_t m_OwnerType;
    bool m_OwnerTypeIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_ProjectId;
    bool m_ProjectIdIsSet;
    bool m_r_public;
    bool m_r_publicIsSet;
    bool m_SplitAssembliesIntoMultipleDocuments;
    bool m_SplitAssembliesIntoMultipleDocumentsIsSet;
    bool m_StoreInDocument;
    bool m_StoreInDocumentIsSet;
    bool m_Translate;
    bool m_TranslateIsSet;
    utility::string_t m_Unit;
    bool m_UnitIsSet;
    utility::string_t m_UploadId;
    bool m_UploadIdIsSet;
    utility::string_t m_VersionString;
    bool m_VersionStringIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslationRequestParams_H_ */
