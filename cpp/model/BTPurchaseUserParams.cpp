/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPurchaseUserParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPurchaseUserParams::BTPurchaseUserParams()
{
    m_ConsumedQuantity = 0;
    m_ConsumedQuantityIsSet = false;
    m_PurchaseId = utility::conversions::to_string_t("");
    m_PurchaseIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
}

BTPurchaseUserParams::~BTPurchaseUserParams()
{
}

void BTPurchaseUserParams::validate()
{
    // TODO: implement validation
}

web::json::value BTPurchaseUserParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConsumedQuantityIsSet)
    {
        val[utility::conversions::to_string_t("consumedQuantity")] = ModelBase::toJson(m_ConsumedQuantity);
    }
    if(m_PurchaseIdIsSet)
    {
        val[utility::conversions::to_string_t("purchaseId")] = ModelBase::toJson(m_PurchaseId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }

    return val;
}

bool BTPurchaseUserParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("consumedQuantity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("consumedQuantity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_consumedQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_consumedQuantity);
            setConsumedQuantity(refVal_consumedQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("purchaseId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("purchaseId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_purchaseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_purchaseId);
            setPurchaseId(refVal_purchaseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    return ok;
}

void BTPurchaseUserParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ConsumedQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consumedQuantity"), m_ConsumedQuantity));
    }
    if(m_PurchaseIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("purchaseId"), m_PurchaseId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
}

bool BTPurchaseUserParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("consumedQuantity")))
    {
        int32_t refVal_consumedQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("consumedQuantity")), refVal_consumedQuantity );
        setConsumedQuantity(refVal_consumedQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("purchaseId")))
    {
        utility::string_t refVal_purchaseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("purchaseId")), refVal_purchaseId );
        setPurchaseId(refVal_purchaseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    return ok;
}

int32_t BTPurchaseUserParams::getConsumedQuantity() const
{
    return m_ConsumedQuantity;
}

void BTPurchaseUserParams::setConsumedQuantity(int32_t value)
{
    m_ConsumedQuantity = value;
    m_ConsumedQuantityIsSet = true;
}

bool BTPurchaseUserParams::consumedQuantityIsSet() const
{
    return m_ConsumedQuantityIsSet;
}

void BTPurchaseUserParams::unsetConsumedQuantity()
{
    m_ConsumedQuantityIsSet = false;
}
utility::string_t BTPurchaseUserParams::getPurchaseId() const
{
    return m_PurchaseId;
}

void BTPurchaseUserParams::setPurchaseId(const utility::string_t& value)
{
    m_PurchaseId = value;
    m_PurchaseIdIsSet = true;
}

bool BTPurchaseUserParams::purchaseIdIsSet() const
{
    return m_PurchaseIdIsSet;
}

void BTPurchaseUserParams::unsetPurchaseId()
{
    m_PurchaseIdIsSet = false;
}
utility::string_t BTPurchaseUserParams::getUserId() const
{
    return m_UserId;
}

void BTPurchaseUserParams::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool BTPurchaseUserParams::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void BTPurchaseUserParams::unsetUserId()
{
    m_UserIdIsSet = false;
}
}
}
}
}


