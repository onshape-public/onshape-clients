/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBillingPlanInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBillingPlanInfo::BTBillingPlanInfo()
{
    m_AmountCents = 0;
    m_AmountCentsIsSet = false;
    m_ApplicationId = utility::conversions::to_string_t("");
    m_ApplicationIdIsSet = false;
    m_ClientId = utility::conversions::to_string_t("");
    m_ClientIdIsSet = false;
    m_CompanyPlan = false;
    m_CompanyPlanIsSet = false;
    m_ConsumableQuantity = 0;
    m_ConsumableQuantityIsSet = false;
    m_Deprecated = false;
    m_DeprecatedIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DiscountInfoIsSet = false;
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_Hidden = false;
    m_HiddenIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Interval = utility::conversions::to_string_t("");
    m_IntervalIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OnshapePlan = false;
    m_OnshapePlanIsSet = false;
    m_PlanType = 0;
    m_PlanTypeIsSet = false;
    m_TrialPeriodDays = 0;
    m_TrialPeriodDaysIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTBillingPlanInfo::~BTBillingPlanInfo()
{
}

void BTBillingPlanInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTBillingPlanInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmountCentsIsSet)
    {
        val[utility::conversions::to_string_t("amountCents")] = ModelBase::toJson(m_AmountCents);
    }
    if(m_ApplicationIdIsSet)
    {
        val[utility::conversions::to_string_t("applicationId")] = ModelBase::toJson(m_ApplicationId);
    }
    if(m_ClientIdIsSet)
    {
        val[utility::conversions::to_string_t("clientId")] = ModelBase::toJson(m_ClientId);
    }
    if(m_CompanyPlanIsSet)
    {
        val[utility::conversions::to_string_t("companyPlan")] = ModelBase::toJson(m_CompanyPlan);
    }
    if(m_ConsumableQuantityIsSet)
    {
        val[utility::conversions::to_string_t("consumableQuantity")] = ModelBase::toJson(m_ConsumableQuantity);
    }
    if(m_DeprecatedIsSet)
    {
        val[utility::conversions::to_string_t("deprecated")] = ModelBase::toJson(m_Deprecated);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DiscountInfoIsSet)
    {
        val[utility::conversions::to_string_t("discountInfo")] = ModelBase::toJson(m_DiscountInfo);
    }
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t("group")] = ModelBase::toJson(m_Group);
    }
    if(m_HiddenIsSet)
    {
        val[utility::conversions::to_string_t("hidden")] = ModelBase::toJson(m_Hidden);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OnshapePlanIsSet)
    {
        val[utility::conversions::to_string_t("onshapePlan")] = ModelBase::toJson(m_OnshapePlan);
    }
    if(m_PlanTypeIsSet)
    {
        val[utility::conversions::to_string_t("planType")] = ModelBase::toJson(m_PlanType);
    }
    if(m_TrialPeriodDaysIsSet)
    {
        val[utility::conversions::to_string_t("trialPeriodDays")] = ModelBase::toJson(m_TrialPeriodDays);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTBillingPlanInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("amountCents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amountCents"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_amountCents;
            ok &= ModelBase::fromJson(fieldValue, refVal_amountCents);
            setAmountCents(refVal_amountCents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("applicationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("applicationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_applicationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_applicationId);
            setApplicationId(refVal_applicationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clientId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clientId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_clientId);
            setClientId(refVal_clientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyPlan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyPlan"));
        if(!fieldValue.is_null())
        {
            bool refVal_companyPlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyPlan);
            setCompanyPlan(refVal_companyPlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consumableQuantity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("consumableQuantity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_consumableQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_consumableQuantity);
            setConsumableQuantity(refVal_consumableQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deprecated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deprecated"));
        if(!fieldValue.is_null())
        {
            bool refVal_deprecated;
            ok &= ModelBase::fromJson(fieldValue, refVal_deprecated);
            setDeprecated(refVal_deprecated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("discountInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("discountInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDiscountInfo> refVal_discountInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_discountInfo);
            setDiscountInfo(refVal_discountInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("group"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_group);
            setGroup(refVal_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hidden")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hidden"));
        if(!fieldValue.is_null())
        {
            bool refVal_hidden;
            ok &= ModelBase::fromJson(fieldValue, refVal_hidden);
            setHidden(refVal_hidden);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("interval"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_interval;
            ok &= ModelBase::fromJson(fieldValue, refVal_interval);
            setInterval(refVal_interval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("onshapePlan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("onshapePlan"));
        if(!fieldValue.is_null())
        {
            bool refVal_onshapePlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_onshapePlan);
            setOnshapePlan(refVal_onshapePlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_planType;
            ok &= ModelBase::fromJson(fieldValue, refVal_planType);
            setPlanType(refVal_planType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trialPeriodDays")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trialPeriodDays"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_trialPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_trialPeriodDays);
            setTrialPeriodDays(refVal_trialPeriodDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTBillingPlanInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AmountCentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amountCents"), m_AmountCents));
    }
    if(m_ApplicationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("applicationId"), m_ApplicationId));
    }
    if(m_ClientIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientId"), m_ClientId));
    }
    if(m_CompanyPlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyPlan"), m_CompanyPlan));
    }
    if(m_ConsumableQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consumableQuantity"), m_ConsumableQuantity));
    }
    if(m_DeprecatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecated"), m_Deprecated));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DiscountInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("discountInfo"), m_DiscountInfo));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("group"), m_Group));
    }
    if(m_HiddenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hidden"), m_Hidden));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("interval"), m_Interval));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OnshapePlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("onshapePlan"), m_OnshapePlan));
    }
    if(m_PlanTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planType"), m_PlanType));
    }
    if(m_TrialPeriodDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trialPeriodDays"), m_TrialPeriodDays));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTBillingPlanInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("amountCents")))
    {
        int32_t refVal_amountCents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amountCents")), refVal_amountCents );
        setAmountCents(refVal_amountCents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("applicationId")))
    {
        utility::string_t refVal_applicationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("applicationId")), refVal_applicationId );
        setApplicationId(refVal_applicationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clientId")))
    {
        utility::string_t refVal_clientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientId")), refVal_clientId );
        setClientId(refVal_clientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyPlan")))
    {
        bool refVal_companyPlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyPlan")), refVal_companyPlan );
        setCompanyPlan(refVal_companyPlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consumableQuantity")))
    {
        int32_t refVal_consumableQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("consumableQuantity")), refVal_consumableQuantity );
        setConsumableQuantity(refVal_consumableQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecated")))
    {
        bool refVal_deprecated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecated")), refVal_deprecated );
        setDeprecated(refVal_deprecated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("discountInfo")))
    {
        std::shared_ptr<BTDiscountInfo> refVal_discountInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("discountInfo")), refVal_discountInfo );
        setDiscountInfo(refVal_discountInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group")))
    {
        utility::string_t refVal_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("group")), refVal_group );
        setGroup(refVal_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hidden")))
    {
        bool refVal_hidden;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hidden")), refVal_hidden );
        setHidden(refVal_hidden);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        utility::string_t refVal_interval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("interval")), refVal_interval );
        setInterval(refVal_interval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("onshapePlan")))
    {
        bool refVal_onshapePlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("onshapePlan")), refVal_onshapePlan );
        setOnshapePlan(refVal_onshapePlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planType")))
    {
        int32_t refVal_planType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planType")), refVal_planType );
        setPlanType(refVal_planType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trialPeriodDays")))
    {
        int32_t refVal_trialPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trialPeriodDays")), refVal_trialPeriodDays );
        setTrialPeriodDays(refVal_trialPeriodDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

int32_t BTBillingPlanInfo::getAmountCents() const
{
    return m_AmountCents;
}

void BTBillingPlanInfo::setAmountCents(int32_t value)
{
    m_AmountCents = value;
    m_AmountCentsIsSet = true;
}

bool BTBillingPlanInfo::amountCentsIsSet() const
{
    return m_AmountCentsIsSet;
}

void BTBillingPlanInfo::unsetAmountCents()
{
    m_AmountCentsIsSet = false;
}
utility::string_t BTBillingPlanInfo::getApplicationId() const
{
    return m_ApplicationId;
}

void BTBillingPlanInfo::setApplicationId(const utility::string_t& value)
{
    m_ApplicationId = value;
    m_ApplicationIdIsSet = true;
}

bool BTBillingPlanInfo::applicationIdIsSet() const
{
    return m_ApplicationIdIsSet;
}

void BTBillingPlanInfo::unsetApplicationId()
{
    m_ApplicationIdIsSet = false;
}
utility::string_t BTBillingPlanInfo::getClientId() const
{
    return m_ClientId;
}

void BTBillingPlanInfo::setClientId(const utility::string_t& value)
{
    m_ClientId = value;
    m_ClientIdIsSet = true;
}

bool BTBillingPlanInfo::clientIdIsSet() const
{
    return m_ClientIdIsSet;
}

void BTBillingPlanInfo::unsetClientId()
{
    m_ClientIdIsSet = false;
}
bool BTBillingPlanInfo::isCompanyPlan() const
{
    return m_CompanyPlan;
}

void BTBillingPlanInfo::setCompanyPlan(bool value)
{
    m_CompanyPlan = value;
    m_CompanyPlanIsSet = true;
}

bool BTBillingPlanInfo::companyPlanIsSet() const
{
    return m_CompanyPlanIsSet;
}

void BTBillingPlanInfo::unsetCompanyPlan()
{
    m_CompanyPlanIsSet = false;
}
int32_t BTBillingPlanInfo::getConsumableQuantity() const
{
    return m_ConsumableQuantity;
}

void BTBillingPlanInfo::setConsumableQuantity(int32_t value)
{
    m_ConsumableQuantity = value;
    m_ConsumableQuantityIsSet = true;
}

bool BTBillingPlanInfo::consumableQuantityIsSet() const
{
    return m_ConsumableQuantityIsSet;
}

void BTBillingPlanInfo::unsetConsumableQuantity()
{
    m_ConsumableQuantityIsSet = false;
}
bool BTBillingPlanInfo::isDeprecated() const
{
    return m_Deprecated;
}

void BTBillingPlanInfo::setDeprecated(bool value)
{
    m_Deprecated = value;
    m_DeprecatedIsSet = true;
}

bool BTBillingPlanInfo::deprecatedIsSet() const
{
    return m_DeprecatedIsSet;
}

void BTBillingPlanInfo::unsetDeprecated()
{
    m_DeprecatedIsSet = false;
}
utility::string_t BTBillingPlanInfo::getDescription() const
{
    return m_Description;
}

void BTBillingPlanInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTBillingPlanInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTBillingPlanInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<BTDiscountInfo> BTBillingPlanInfo::getDiscountInfo() const
{
    return m_DiscountInfo;
}

void BTBillingPlanInfo::setDiscountInfo(const std::shared_ptr<BTDiscountInfo>& value)
{
    m_DiscountInfo = value;
    m_DiscountInfoIsSet = true;
}

bool BTBillingPlanInfo::discountInfoIsSet() const
{
    return m_DiscountInfoIsSet;
}

void BTBillingPlanInfo::unsetDiscountInfo()
{
    m_DiscountInfoIsSet = false;
}
utility::string_t BTBillingPlanInfo::getGroup() const
{
    return m_Group;
}

void BTBillingPlanInfo::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool BTBillingPlanInfo::groupIsSet() const
{
    return m_GroupIsSet;
}

void BTBillingPlanInfo::unsetGroup()
{
    m_GroupIsSet = false;
}
bool BTBillingPlanInfo::isHidden() const
{
    return m_Hidden;
}

void BTBillingPlanInfo::setHidden(bool value)
{
    m_Hidden = value;
    m_HiddenIsSet = true;
}

bool BTBillingPlanInfo::hiddenIsSet() const
{
    return m_HiddenIsSet;
}

void BTBillingPlanInfo::unsetHidden()
{
    m_HiddenIsSet = false;
}
utility::string_t BTBillingPlanInfo::getHref() const
{
    return m_Href;
}

void BTBillingPlanInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTBillingPlanInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTBillingPlanInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTBillingPlanInfo::getId() const
{
    return m_Id;
}

void BTBillingPlanInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTBillingPlanInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTBillingPlanInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTBillingPlanInfo::getInterval() const
{
    return m_Interval;
}

void BTBillingPlanInfo::setInterval(const utility::string_t& value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}

bool BTBillingPlanInfo::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void BTBillingPlanInfo::unsetInterval()
{
    m_IntervalIsSet = false;
}
utility::string_t BTBillingPlanInfo::getName() const
{
    return m_Name;
}

void BTBillingPlanInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTBillingPlanInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTBillingPlanInfo::unsetName()
{
    m_NameIsSet = false;
}
bool BTBillingPlanInfo::isOnshapePlan() const
{
    return m_OnshapePlan;
}

void BTBillingPlanInfo::setOnshapePlan(bool value)
{
    m_OnshapePlan = value;
    m_OnshapePlanIsSet = true;
}

bool BTBillingPlanInfo::onshapePlanIsSet() const
{
    return m_OnshapePlanIsSet;
}

void BTBillingPlanInfo::unsetOnshapePlan()
{
    m_OnshapePlanIsSet = false;
}
int32_t BTBillingPlanInfo::getPlanType() const
{
    return m_PlanType;
}

void BTBillingPlanInfo::setPlanType(int32_t value)
{
    m_PlanType = value;
    m_PlanTypeIsSet = true;
}

bool BTBillingPlanInfo::planTypeIsSet() const
{
    return m_PlanTypeIsSet;
}

void BTBillingPlanInfo::unsetPlanType()
{
    m_PlanTypeIsSet = false;
}
int32_t BTBillingPlanInfo::getTrialPeriodDays() const
{
    return m_TrialPeriodDays;
}

void BTBillingPlanInfo::setTrialPeriodDays(int32_t value)
{
    m_TrialPeriodDays = value;
    m_TrialPeriodDaysIsSet = true;
}

bool BTBillingPlanInfo::trialPeriodDaysIsSet() const
{
    return m_TrialPeriodDaysIsSet;
}

void BTBillingPlanInfo::unsetTrialPeriodDays()
{
    m_TrialPeriodDaysIsSet = false;
}
utility::string_t BTBillingPlanInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTBillingPlanInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTBillingPlanInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTBillingPlanInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


