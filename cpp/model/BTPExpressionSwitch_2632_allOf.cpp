/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPExpressionSwitch_2632_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPExpressionSwitch_2632_allOf::BTPExpressionSwitch_2632_allOf()
{
    m_SelectorIsSet = false;
    m_SpaceAfterSwitchIsSet = false;
    m_ChoicesIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPExpressionSwitch_2632_allOf::~BTPExpressionSwitch_2632_allOf()
{
}

void BTPExpressionSwitch_2632_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPExpressionSwitch_2632_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SelectorIsSet)
    {
        val[utility::conversions::to_string_t("selector")] = ModelBase::toJson(m_Selector);
    }
    if(m_SpaceAfterSwitchIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterSwitch")] = ModelBase::toJson(m_SpaceAfterSwitch);
    }
    if(m_ChoicesIsSet)
    {
        val[utility::conversions::to_string_t("choices")] = ModelBase::toJson(m_Choices);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPExpressionSwitch_2632_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("selector")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("selector"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_selector;
            ok &= ModelBase::fromJson(fieldValue, refVal_selector);
            setSelector(refVal_selector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterSwitch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterSwitch"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterSwitch;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterSwitch);
            setSpaceAfterSwitch(refVal_spaceAfterSwitch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("choices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("choices"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPLiteralMap_256> refVal_choices;
            ok &= ModelBase::fromJson(fieldValue, refVal_choices);
            setChoices(refVal_choices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPExpressionSwitch_2632_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SelectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("selector"), m_Selector));
    }
    if(m_SpaceAfterSwitchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterSwitch"), m_SpaceAfterSwitch));
    }
    if(m_ChoicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("choices"), m_Choices));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPExpressionSwitch_2632_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("selector")))
    {
        std::shared_ptr<BTPExpression_9> refVal_selector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("selector")), refVal_selector );
        setSelector(refVal_selector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterSwitch")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterSwitch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterSwitch")), refVal_spaceAfterSwitch );
        setSpaceAfterSwitch(refVal_spaceAfterSwitch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("choices")))
    {
        std::shared_ptr<BTPLiteralMap_256> refVal_choices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("choices")), refVal_choices );
        setChoices(refVal_choices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTPExpression_9> BTPExpressionSwitch_2632_allOf::getSelector() const
{
    return m_Selector;
}

void BTPExpressionSwitch_2632_allOf::setSelector(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Selector = value;
    m_SelectorIsSet = true;
}

bool BTPExpressionSwitch_2632_allOf::selectorIsSet() const
{
    return m_SelectorIsSet;
}

void BTPExpressionSwitch_2632_allOf::unsetSelector()
{
    m_SelectorIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPExpressionSwitch_2632_allOf::getSpaceAfterSwitch() const
{
    return m_SpaceAfterSwitch;
}

void BTPExpressionSwitch_2632_allOf::setSpaceAfterSwitch(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterSwitch = value;
    m_SpaceAfterSwitchIsSet = true;
}

bool BTPExpressionSwitch_2632_allOf::spaceAfterSwitchIsSet() const
{
    return m_SpaceAfterSwitchIsSet;
}

void BTPExpressionSwitch_2632_allOf::unsetSpaceAfterSwitch()
{
    m_SpaceAfterSwitchIsSet = false;
}
std::shared_ptr<BTPLiteralMap_256> BTPExpressionSwitch_2632_allOf::getChoices() const
{
    return m_Choices;
}

void BTPExpressionSwitch_2632_allOf::setChoices(const std::shared_ptr<BTPLiteralMap_256>& value)
{
    m_Choices = value;
    m_ChoicesIsSet = true;
}

bool BTPExpressionSwitch_2632_allOf::choicesIsSet() const
{
    return m_ChoicesIsSet;
}

void BTPExpressionSwitch_2632_allOf::unsetChoices()
{
    m_ChoicesIsSet = false;
}
utility::string_t BTPExpressionSwitch_2632_allOf::getBtType() const
{
    return m_BtType;
}

void BTPExpressionSwitch_2632_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPExpressionSwitch_2632_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPExpressionSwitch_2632_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


