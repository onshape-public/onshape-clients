/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCurveGeometryEllipse_1189.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCurveGeometryEllipse_1189::BTCurveGeometryEllipse_1189()
{
    m_MinorRadius = 0.0;
    m_MinorRadiusIsSet = false;
}

BTCurveGeometryEllipse_1189::~BTCurveGeometryEllipse_1189()
{
}

void BTCurveGeometryEllipse_1189::validate()
{
    // TODO: implement validation
}

web::json::value BTCurveGeometryEllipse_1189::toJson() const
{
    web::json::value val = this->BTCurveGeometryCircle_115::toJson();
    
    if(m_MinorRadiusIsSet)
    {
        val[utility::conversions::to_string_t("minorRadius")] = ModelBase::toJson(m_MinorRadius);
    }

    return val;
}

bool BTCurveGeometryEllipse_1189::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTCurveGeometryCircle_115::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("minorRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minorRadius"));
        if(!fieldValue.is_null())
        {
            double refVal_minorRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_minorRadius);
            setMinorRadius(refVal_minorRadius);
        }
    }
    return ok;
}

void BTCurveGeometryEllipse_1189::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_RadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("radius"), m_Radius));
    }
    if(m_XcenterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xcenter"), m_Xcenter));
    }
    if(m_YcenterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ycenter"), m_Ycenter));
    }
    if(m_XdirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xdir"), m_Xdir));
    }
    if(m_YdirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ydir"), m_Ydir));
    }
    if(m_ClockwiseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clockwise"), m_Clockwise));
    }
    if(m_MinorRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minorRadius"), m_MinorRadius));
    }
}

bool BTCurveGeometryEllipse_1189::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("radius")))
    {
        double refVal_radius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("radius")), refVal_radius );
        setRadius(refVal_radius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xcenter")))
    {
        double refVal_xcenter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xcenter")), refVal_xcenter );
        setXcenter(refVal_xcenter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ycenter")))
    {
        double refVal_ycenter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ycenter")), refVal_ycenter );
        setYcenter(refVal_ycenter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xdir")))
    {
        double refVal_xdir;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xdir")), refVal_xdir );
        setXdir(refVal_xdir);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ydir")))
    {
        double refVal_ydir;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ydir")), refVal_ydir );
        setYdir(refVal_ydir);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clockwise")))
    {
        bool refVal_clockwise;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clockwise")), refVal_clockwise );
        setClockwise(refVal_clockwise);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minorRadius")))
    {
        double refVal_minorRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minorRadius")), refVal_minorRadius );
        setMinorRadius(refVal_minorRadius);
    }
    return ok;
}

double BTCurveGeometryEllipse_1189::getMinorRadius() const
{
    return m_MinorRadius;
}

void BTCurveGeometryEllipse_1189::setMinorRadius(double value)
{
    m_MinorRadius = value;
    m_MinorRadiusIsSet = true;
}

bool BTCurveGeometryEllipse_1189::minorRadiusIsSet() const
{
    return m_MinorRadiusIsSet;
}

void BTCurveGeometryEllipse_1189::unsetMinorRadius()
{
    m_MinorRadiusIsSet = false;
}
}
}
}
}


