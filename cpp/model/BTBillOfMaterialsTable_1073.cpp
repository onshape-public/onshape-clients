/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBillOfMaterialsTable_1073.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBillOfMaterialsTable_1073::BTBillOfMaterialsTable_1073()
{
    m_Indented = false;
    m_IndentedIsSet = false;
    m_ShowingExcluded = false;
    m_ShowingExcludedIsSet = false;
    m_FailedMetadataRepresentativeOccurrencesIsSet = false;
}

BTBillOfMaterialsTable_1073::~BTBillOfMaterialsTable_1073()
{
}

void BTBillOfMaterialsTable_1073::validate()
{
    // TODO: implement validation
}

web::json::value BTBillOfMaterialsTable_1073::toJson() const
{
    web::json::value val = this->BTTable_1825::toJson();
    
    if(m_IndentedIsSet)
    {
        val[utility::conversions::to_string_t("indented")] = ModelBase::toJson(m_Indented);
    }
    if(m_ShowingExcludedIsSet)
    {
        val[utility::conversions::to_string_t("showingExcluded")] = ModelBase::toJson(m_ShowingExcluded);
    }
    if(m_FailedMetadataRepresentativeOccurrencesIsSet)
    {
        val[utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences")] = ModelBase::toJson(m_FailedMetadataRepresentativeOccurrences);
    }

    return val;
}

bool BTBillOfMaterialsTable_1073::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTTable_1825::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("indented")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("indented"));
        if(!fieldValue.is_null())
        {
            bool refVal_indented;
            ok &= ModelBase::fromJson(fieldValue, refVal_indented);
            setIndented(refVal_indented);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showingExcluded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("showingExcluded"));
        if(!fieldValue.is_null())
        {
            bool refVal_showingExcluded;
            ok &= ModelBase::fromJson(fieldValue, refVal_showingExcluded);
            setShowingExcluded(refVal_showingExcluded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_failedMetadataRepresentativeOccurrences;
            ok &= ModelBase::fromJson(fieldValue, refVal_failedMetadataRepresentativeOccurrences);
            setFailedMetadataRepresentativeOccurrences(refVal_failedMetadataRepresentativeOccurrences);
        }
    }
    return ok;
}

void BTBillOfMaterialsTable_1073::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AllRowValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allRowValues"), m_AllRowValues));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnCount"), m_ColumnCount));
    }
    if(m_FrozenColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("frozenColumns"), m_FrozenColumns));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readOnly"), m_ReadOnly));
    }
    if(m_RowCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rowCount"), m_RowCount));
    }
    if(m_TableColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableColumns"), m_TableColumns));
    }
    if(m_TableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableId"), m_TableId));
    }
    if(m_TableRowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableRows"), m_TableRows));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_IndentedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indented"), m_Indented));
    }
    if(m_ShowingExcludedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showingExcluded"), m_ShowingExcluded));
    }
    if(m_FailedMetadataRepresentativeOccurrencesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences"), m_FailedMetadataRepresentativeOccurrences));
    }
}

bool BTBillOfMaterialsTable_1073::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allRowValues")))
    {
        std::vector<std::vector<utility::string_t>> refVal_allRowValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allRowValues")), refVal_allRowValues );
        setAllRowValues(refVal_allRowValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnCount")))
    {
        int32_t refVal_columnCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnCount")), refVal_columnCount );
        setColumnCount(refVal_columnCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("frozenColumns")))
    {
        int32_t refVal_frozenColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("frozenColumns")), refVal_frozenColumns );
        setFrozenColumns(refVal_frozenColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readOnly")))
    {
        bool refVal_readOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readOnly")), refVal_readOnly );
        setReadOnly(refVal_readOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rowCount")))
    {
        int32_t refVal_rowCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rowCount")), refVal_rowCount );
        setRowCount(refVal_rowCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableColumns")))
    {
        std::vector<std::shared_ptr<BTTableColumnInfo_1222>> refVal_tableColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableColumns")), refVal_tableColumns );
        setTableColumns(refVal_tableColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableId")))
    {
        utility::string_t refVal_tableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableId")), refVal_tableId );
        setTableId(refVal_tableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableRows")))
    {
        std::vector<std::shared_ptr<BTTableRow_1054>> refVal_tableRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableRows")), refVal_tableRows );
        setTableRows(refVal_tableRows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indented")))
    {
        bool refVal_indented;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("indented")), refVal_indented );
        setIndented(refVal_indented);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showingExcluded")))
    {
        bool refVal_showingExcluded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("showingExcluded")), refVal_showingExcluded );
        setShowingExcluded(refVal_showingExcluded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences")))
    {
        std::vector<utility::string_t> refVal_failedMetadataRepresentativeOccurrences;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("failedMetadataRepresentativeOccurrences")), refVal_failedMetadataRepresentativeOccurrences );
        setFailedMetadataRepresentativeOccurrences(refVal_failedMetadataRepresentativeOccurrences);
    }
    return ok;
}

bool BTBillOfMaterialsTable_1073::isIndented() const
{
    return m_Indented;
}

void BTBillOfMaterialsTable_1073::setIndented(bool value)
{
    m_Indented = value;
    m_IndentedIsSet = true;
}

bool BTBillOfMaterialsTable_1073::indentedIsSet() const
{
    return m_IndentedIsSet;
}

void BTBillOfMaterialsTable_1073::unsetIndented()
{
    m_IndentedIsSet = false;
}
bool BTBillOfMaterialsTable_1073::isShowingExcluded() const
{
    return m_ShowingExcluded;
}

void BTBillOfMaterialsTable_1073::setShowingExcluded(bool value)
{
    m_ShowingExcluded = value;
    m_ShowingExcludedIsSet = true;
}

bool BTBillOfMaterialsTable_1073::showingExcludedIsSet() const
{
    return m_ShowingExcludedIsSet;
}

void BTBillOfMaterialsTable_1073::unsetShowingExcluded()
{
    m_ShowingExcludedIsSet = false;
}
std::vector<utility::string_t>& BTBillOfMaterialsTable_1073::getFailedMetadataRepresentativeOccurrences()
{
    return m_FailedMetadataRepresentativeOccurrences;
}

void BTBillOfMaterialsTable_1073::setFailedMetadataRepresentativeOccurrences(const std::vector<utility::string_t>& value)
{
    m_FailedMetadataRepresentativeOccurrences = value;
    m_FailedMetadataRepresentativeOccurrencesIsSet = true;
}

bool BTBillOfMaterialsTable_1073::failedMetadataRepresentativeOccurrencesIsSet() const
{
    return m_FailedMetadataRepresentativeOccurrencesIsSet;
}

void BTBillOfMaterialsTable_1073::unsetFailedMetadataRepresentativeOccurrences()
{
    m_FailedMetadataRepresentativeOccurrencesIsSet = false;
}
}
}
}
}


