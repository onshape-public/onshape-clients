/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTReleasePackageInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageInfo_H_


#include "../ModelBase.h"

#include "BTPublishedWorkflowId.h"
#include "BTWorkflowPropertyInfo.h"
#include "BTReleasePackageItemInfo.h"
#include "BTCommentInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTWorkflowSnapshotInfo.h"
#include <map>
#include <vector>
#include "BTReleaseCommentListInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTReleasePackageInfo
    : public ModelBase
{
public:
    BTReleasePackageInfo();
    virtual ~BTReleasePackageInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTReleasePackageInfo members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getColumnNames();
    bool columnNamesIsSet() const;
    void unsetColumnNames();

    void setColumnNames(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTCommentInfo>>& getComments();
    bool commentsIsSet() const;
    void unsetComments();

    void setComments(const std::vector<std::shared_ptr<BTCommentInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescriptionAsProperty() const;
    bool descriptionAsPropertyIsSet() const;
    void unsetDescriptionAsProperty();

    void setDescriptionAsProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDetailed() const;
    bool detailedIsSet() const;
    void unsetDetailed();

    void setDetailed(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsObsoletion() const;
    bool isObsoletionIsSet() const;
    void unsetIsObsoletion();

    void setIsObsoletion(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTReleasePackageItemInfo>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<BTReleasePackageItemInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getLinkedVersionIds();
    bool linkedVersionIdsIsSet() const;
    void unsetLinkedVersionIds();

    void setLinkedVersionIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNameAsProperty() const;
    bool nameAsPropertyIsSet() const;
    void unsetNameAsProperty();

    void setNameAsProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPackageThumbnail() const;
    bool packageThumbnailIsSet() const;
    void unsetPackageThumbnail();

    void setPackageThumbnail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTReleaseCommentListInfo>>& getParentComments();
    bool parentCommentsIsSet() const;
    void unsetParentComments();

    void setParentComments(const std::vector<std::shared_ptr<BTReleaseCommentListInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getParentPackages();
    bool parentPackagesIsSet() const;
    void unsetParentPackages();

    void setParentPackages(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevisionRuleId() const;
    bool revisionRuleIdIsSet() const;
    void unsetRevisionRuleId();

    void setRevisionRuleId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWorkflowSnapshotInfo> getWorkflow() const;
    bool workflowIsSet() const;
    void unsetWorkflow();

    void setWorkflow(const std::shared_ptr<BTWorkflowSnapshotInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPublishedWorkflowId> getWorkflowId() const;
    bool workflowIdIsSet() const;
    void unsetWorkflowId();

    void setWorkflowId(const std::shared_ptr<BTPublishedWorkflowId>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWorkspaceId() const;
    bool workspaceIdIsSet() const;
    void unsetWorkspaceId();

    void setWorkspaceId(const utility::string_t& value);


protected:
    std::map<utility::string_t, utility::string_t> m_ColumnNames;
    bool m_ColumnNamesIsSet;
    std::vector<std::shared_ptr<BTCommentInfo>> m_Comments;
    bool m_CommentsIsSet;
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_DescriptionAsProperty;
    bool m_DescriptionAsPropertyIsSet;
    bool m_Detailed;
    bool m_DetailedIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_IsObsoletion;
    bool m_IsObsoletionIsSet;
    std::vector<std::shared_ptr<BTReleasePackageItemInfo>> m_Items;
    bool m_ItemsIsSet;
    std::vector<utility::string_t> m_LinkedVersionIds;
    bool m_LinkedVersionIdsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_NameAsProperty;
    bool m_NameAsPropertyIsSet;
    utility::string_t m_PackageThumbnail;
    bool m_PackageThumbnailIsSet;
    std::vector<std::shared_ptr<BTReleaseCommentListInfo>> m_ParentComments;
    bool m_ParentCommentsIsSet;
    std::vector<utility::string_t> m_ParentPackages;
    bool m_ParentPackagesIsSet;
    std::vector<std::shared_ptr<BTWorkflowPropertyInfo>> m_Properties;
    bool m_PropertiesIsSet;
    utility::string_t m_RevisionRuleId;
    bool m_RevisionRuleIdIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
    std::shared_ptr<BTWorkflowSnapshotInfo> m_Workflow;
    bool m_WorkflowIsSet;
    std::shared_ptr<BTPublishedWorkflowId> m_WorkflowId;
    bool m_WorkflowIdIsSet;
    utility::string_t m_WorkspaceId;
    bool m_WorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageInfo_H_ */
