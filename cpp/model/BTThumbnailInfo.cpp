/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTThumbnailInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTThumbnailInfo::BTThumbnailInfo()
{
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_SecondarySizesIsSet = false;
    m_SizesIsSet = false;
}

BTThumbnailInfo::~BTThumbnailInfo()
{
}

void BTThumbnailInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTThumbnailInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_SecondarySizesIsSet)
    {
        val[utility::conversions::to_string_t("secondarySizes")] = ModelBase::toJson(m_SecondarySizes);
    }
    if(m_SizesIsSet)
    {
        val[utility::conversions::to_string_t("sizes")] = ModelBase::toJson(m_Sizes);
    }

    return val;
}

bool BTThumbnailInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondarySizes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondarySizes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::vector<std::shared_ptr<BTThumbnailSizeInfo>>> refVal_secondarySizes;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondarySizes);
            setSecondarySizes(refVal_secondarySizes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sizes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sizes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTThumbnailSizeInfo>> refVal_sizes;
            ok &= ModelBase::fromJson(fieldValue, refVal_sizes);
            setSizes(refVal_sizes);
        }
    }
    return ok;
}

void BTThumbnailInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_SecondarySizesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondarySizes"), m_SecondarySizes));
    }
    if(m_SizesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sizes"), m_Sizes));
    }
}

bool BTThumbnailInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondarySizes")))
    {
        std::vector<std::vector<std::shared_ptr<BTThumbnailSizeInfo>>> refVal_secondarySizes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondarySizes")), refVal_secondarySizes );
        setSecondarySizes(refVal_secondarySizes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sizes")))
    {
        std::vector<std::shared_ptr<BTThumbnailSizeInfo>> refVal_sizes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sizes")), refVal_sizes );
        setSizes(refVal_sizes);
    }
    return ok;
}

utility::string_t BTThumbnailInfo::getHref() const
{
    return m_Href;
}

void BTThumbnailInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTThumbnailInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTThumbnailInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTThumbnailInfo::getId() const
{
    return m_Id;
}

void BTThumbnailInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTThumbnailInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTThumbnailInfo::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::vector<std::shared_ptr<BTThumbnailSizeInfo>>>& BTThumbnailInfo::getSecondarySizes()
{
    return m_SecondarySizes;
}

void BTThumbnailInfo::setSecondarySizes(const std::vector<std::vector<std::shared_ptr<BTThumbnailSizeInfo>>>& value)
{
    m_SecondarySizes = value;
    m_SecondarySizesIsSet = true;
}

bool BTThumbnailInfo::secondarySizesIsSet() const
{
    return m_SecondarySizesIsSet;
}

void BTThumbnailInfo::unsetSecondarySizes()
{
    m_SecondarySizesIsSet = false;
}
std::vector<std::shared_ptr<BTThumbnailSizeInfo>>& BTThumbnailInfo::getSizes()
{
    return m_Sizes;
}

void BTThumbnailInfo::setSizes(const std::vector<std::shared_ptr<BTThumbnailSizeInfo>>& value)
{
    m_Sizes = value;
    m_SizesIsSet = true;
}

bool BTThumbnailInfo::sizesIsSet() const
{
    return m_SizesIsSet;
}

void BTThumbnailInfo::unsetSizes()
{
    m_SizesIsSet = false;
}
}
}
}
}


