/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDiffInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDiffInfo::BTDiffInfo()
{
    m_CollectionChangesIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_GeometryChangeMessagesIsSet = false;
    m_SourceId = utility::conversions::to_string_t("");
    m_SourceIdIsSet = false;
    m_SourceValue = utility::conversions::to_string_t("");
    m_SourceValueIsSet = false;
    m_TargetId = utility::conversions::to_string_t("");
    m_TargetIdIsSet = false;
    m_TargetValue = utility::conversions::to_string_t("");
    m_TargetValueIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

BTDiffInfo::~BTDiffInfo()
{
}

void BTDiffInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDiffInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CollectionChangesIsSet)
    {
        val[utility::conversions::to_string_t("collectionChanges")] = ModelBase::toJson(m_CollectionChanges);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t("entityType")] = ModelBase::toJson(m_EntityType);
    }
    if(m_GeometryChangeMessagesIsSet)
    {
        val[utility::conversions::to_string_t("geometryChangeMessages")] = ModelBase::toJson(m_GeometryChangeMessages);
    }
    if(m_SourceIdIsSet)
    {
        val[utility::conversions::to_string_t("sourceId")] = ModelBase::toJson(m_SourceId);
    }
    if(m_SourceValueIsSet)
    {
        val[utility::conversions::to_string_t("sourceValue")] = ModelBase::toJson(m_SourceValue);
    }
    if(m_TargetIdIsSet)
    {
        val[utility::conversions::to_string_t("targetId")] = ModelBase::toJson(m_TargetId);
    }
    if(m_TargetValueIsSet)
    {
        val[utility::conversions::to_string_t("targetValue")] = ModelBase::toJson(m_TargetValue);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool BTDiffInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("collectionChanges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionChanges"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>> refVal_collectionChanges;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionChanges);
            setCollectionChanges(refVal_collectionChanges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityType);
            setEntityType(refVal_entityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("geometryChangeMessages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("geometryChangeMessages"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_geometryChangeMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_geometryChangeMessages);
            setGeometryChangeMessages(refVal_geometryChangeMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceId);
            setSourceId(refVal_sourceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceValue);
            setSourceValue(refVal_sourceValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetId);
            setTargetId(refVal_targetId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetValue);
            setTargetValue(refVal_targetValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void BTDiffInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CollectionChangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionChanges"), m_CollectionChanges));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityType"), m_EntityType));
    }
    if(m_GeometryChangeMessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geometryChangeMessages"), m_GeometryChangeMessages));
    }
    if(m_SourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceId"), m_SourceId));
    }
    if(m_SourceValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceValue"), m_SourceValue));
    }
    if(m_TargetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetId"), m_TargetId));
    }
    if(m_TargetValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetValue"), m_TargetValue));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool BTDiffInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("collectionChanges")))
    {
        std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>> refVal_collectionChanges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionChanges")), refVal_collectionChanges );
        setCollectionChanges(refVal_collectionChanges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityType")))
    {
        utility::string_t refVal_entityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityType")), refVal_entityType );
        setEntityType(refVal_entityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geometryChangeMessages")))
    {
        std::vector<utility::string_t> refVal_geometryChangeMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geometryChangeMessages")), refVal_geometryChangeMessages );
        setGeometryChangeMessages(refVal_geometryChangeMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceId")))
    {
        utility::string_t refVal_sourceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceId")), refVal_sourceId );
        setSourceId(refVal_sourceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceValue")))
    {
        utility::string_t refVal_sourceValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceValue")), refVal_sourceValue );
        setSourceValue(refVal_sourceValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetId")))
    {
        utility::string_t refVal_targetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetId")), refVal_targetId );
        setTargetId(refVal_targetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetValue")))
    {
        utility::string_t refVal_targetValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetValue")), refVal_targetValue );
        setTargetValue(refVal_targetValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& BTDiffInfo::getCollectionChanges()
{
    return m_CollectionChanges;
}

void BTDiffInfo::setCollectionChanges(const std::map<utility::string_t, std::vector<std::shared_ptr<BTDiffInfo>>>& value)
{
    m_CollectionChanges = value;
    m_CollectionChangesIsSet = true;
}

bool BTDiffInfo::collectionChangesIsSet() const
{
    return m_CollectionChangesIsSet;
}

void BTDiffInfo::unsetCollectionChanges()
{
    m_CollectionChangesIsSet = false;
}
utility::string_t BTDiffInfo::getEntityType() const
{
    return m_EntityType;
}

void BTDiffInfo::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool BTDiffInfo::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void BTDiffInfo::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
std::vector<utility::string_t>& BTDiffInfo::getGeometryChangeMessages()
{
    return m_GeometryChangeMessages;
}

void BTDiffInfo::setGeometryChangeMessages(const std::vector<utility::string_t>& value)
{
    m_GeometryChangeMessages = value;
    m_GeometryChangeMessagesIsSet = true;
}

bool BTDiffInfo::geometryChangeMessagesIsSet() const
{
    return m_GeometryChangeMessagesIsSet;
}

void BTDiffInfo::unsetGeometryChangeMessages()
{
    m_GeometryChangeMessagesIsSet = false;
}
utility::string_t BTDiffInfo::getSourceId() const
{
    return m_SourceId;
}

void BTDiffInfo::setSourceId(const utility::string_t& value)
{
    m_SourceId = value;
    m_SourceIdIsSet = true;
}

bool BTDiffInfo::sourceIdIsSet() const
{
    return m_SourceIdIsSet;
}

void BTDiffInfo::unsetSourceId()
{
    m_SourceIdIsSet = false;
}
utility::string_t BTDiffInfo::getSourceValue() const
{
    return m_SourceValue;
}

void BTDiffInfo::setSourceValue(const utility::string_t& value)
{
    m_SourceValue = value;
    m_SourceValueIsSet = true;
}

bool BTDiffInfo::sourceValueIsSet() const
{
    return m_SourceValueIsSet;
}

void BTDiffInfo::unsetSourceValue()
{
    m_SourceValueIsSet = false;
}
utility::string_t BTDiffInfo::getTargetId() const
{
    return m_TargetId;
}

void BTDiffInfo::setTargetId(const utility::string_t& value)
{
    m_TargetId = value;
    m_TargetIdIsSet = true;
}

bool BTDiffInfo::targetIdIsSet() const
{
    return m_TargetIdIsSet;
}

void BTDiffInfo::unsetTargetId()
{
    m_TargetIdIsSet = false;
}
utility::string_t BTDiffInfo::getTargetValue() const
{
    return m_TargetValue;
}

void BTDiffInfo::setTargetValue(const utility::string_t& value)
{
    m_TargetValue = value;
    m_TargetValueIsSet = true;
}

bool BTDiffInfo::targetValueIsSet() const
{
    return m_TargetValueIsSet;
}

void BTDiffInfo::unsetTargetValue()
{
    m_TargetValueIsSet = false;
}
utility::string_t BTDiffInfo::getType() const
{
    return m_Type;
}

void BTDiffInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTDiffInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTDiffInfo::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


