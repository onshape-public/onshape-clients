/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMFeature_134.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMFeature_134::BTMFeature_134()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_FeatureType = utility::conversions::to_string_t("");
    m_FeatureTypeIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ParametersIsSet = false;
    m_ReturnAfterSubfeatures = false;
    m_ReturnAfterSubfeaturesIsSet = false;
    m_SubFeaturesIsSet = false;
    m_Suppressed = false;
    m_SuppressedIsSet = false;
}

BTMFeature_134::~BTMFeature_134()
{
}

void BTMFeature_134::validate()
{
    // TODO: implement validation
}

web::json::value BTMFeature_134::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_FeatureTypeIsSet)
    {
        val[utility::conversions::to_string_t("featureType")] = ModelBase::toJson(m_FeatureType);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_ReturnAfterSubfeaturesIsSet)
    {
        val[utility::conversions::to_string_t("returnAfterSubfeatures")] = ModelBase::toJson(m_ReturnAfterSubfeatures);
    }
    if(m_SubFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("subFeatures")] = ModelBase::toJson(m_SubFeatures);
    }
    if(m_SuppressedIsSet)
    {
        val[utility::conversions::to_string_t("suppressed")] = ModelBase::toJson(m_Suppressed);
    }

    return val;
}

bool BTMFeature_134::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureType);
            setFeatureType(refVal_featureType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("returnAfterSubfeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("returnAfterSubfeatures"));
        if(!fieldValue.is_null())
        {
            bool refVal_returnAfterSubfeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_returnAfterSubfeatures);
            setReturnAfterSubfeatures(refVal_returnAfterSubfeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subFeatures"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMFeature_134>> refVal_subFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_subFeatures);
            setSubFeatures(refVal_subFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suppressed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suppressed"));
        if(!fieldValue.is_null())
        {
            bool refVal_suppressed;
            ok &= ModelBase::fromJson(fieldValue, refVal_suppressed);
            setSuppressed(refVal_suppressed);
        }
    }
    return ok;
}

void BTMFeature_134::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_ReturnAfterSubfeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnAfterSubfeatures"), m_ReturnAfterSubfeatures));
    }
    if(m_SubFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subFeatures"), m_SubFeatures));
    }
    if(m_SuppressedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suppressed"), m_Suppressed));
    }
}

bool BTMFeature_134::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnAfterSubfeatures")))
    {
        bool refVal_returnAfterSubfeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnAfterSubfeatures")), refVal_returnAfterSubfeatures );
        setReturnAfterSubfeatures(refVal_returnAfterSubfeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subFeatures")))
    {
        std::vector<std::shared_ptr<BTMFeature_134>> refVal_subFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subFeatures")), refVal_subFeatures );
        setSubFeatures(refVal_subFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suppressed")))
    {
        bool refVal_suppressed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suppressed")), refVal_suppressed );
        setSuppressed(refVal_suppressed);
    }
    return ok;
}

utility::string_t BTMFeature_134::getBtType() const
{
    return m_BtType;
}

void BTMFeature_134::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMFeature_134::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMFeature_134::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTMFeature_134::getFeatureId() const
{
    return m_FeatureId;
}

void BTMFeature_134::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTMFeature_134::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTMFeature_134::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
utility::string_t BTMFeature_134::getFeatureType() const
{
    return m_FeatureType;
}

void BTMFeature_134::setFeatureType(const utility::string_t& value)
{
    m_FeatureType = value;
    m_FeatureTypeIsSet = true;
}

bool BTMFeature_134::featureTypeIsSet() const
{
    return m_FeatureTypeIsSet;
}

void BTMFeature_134::unsetFeatureType()
{
    m_FeatureTypeIsSet = false;
}
utility::string_t BTMFeature_134::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMFeature_134::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMFeature_134::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMFeature_134::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMFeature_134::getName() const
{
    return m_Name;
}

void BTMFeature_134::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTMFeature_134::nameIsSet() const
{
    return m_NameIsSet;
}

void BTMFeature_134::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTMFeature_134::getRNamespace() const
{
    return m_r_namespace;
}

void BTMFeature_134::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMFeature_134::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMFeature_134::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTMFeature_134::getNodeId() const
{
    return m_NodeId;
}

void BTMFeature_134::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMFeature_134::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMFeature_134::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
std::vector<std::shared_ptr<BTMParameter_1>>& BTMFeature_134::getParameters()
{
    return m_Parameters;
}

void BTMFeature_134::setParameters(const std::vector<std::shared_ptr<BTMParameter_1>>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BTMFeature_134::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BTMFeature_134::unsetParameters()
{
    m_ParametersIsSet = false;
}
bool BTMFeature_134::isReturnAfterSubfeatures() const
{
    return m_ReturnAfterSubfeatures;
}

void BTMFeature_134::setReturnAfterSubfeatures(bool value)
{
    m_ReturnAfterSubfeatures = value;
    m_ReturnAfterSubfeaturesIsSet = true;
}

bool BTMFeature_134::returnAfterSubfeaturesIsSet() const
{
    return m_ReturnAfterSubfeaturesIsSet;
}

void BTMFeature_134::unsetReturnAfterSubfeatures()
{
    m_ReturnAfterSubfeaturesIsSet = false;
}
std::vector<std::shared_ptr<BTMFeature_134>>& BTMFeature_134::getSubFeatures()
{
    return m_SubFeatures;
}

void BTMFeature_134::setSubFeatures(const std::vector<std::shared_ptr<BTMFeature_134>>& value)
{
    m_SubFeatures = value;
    m_SubFeaturesIsSet = true;
}

bool BTMFeature_134::subFeaturesIsSet() const
{
    return m_SubFeaturesIsSet;
}

void BTMFeature_134::unsetSubFeatures()
{
    m_SubFeaturesIsSet = false;
}
bool BTMFeature_134::isSuppressed() const
{
    return m_Suppressed;
}

void BTMFeature_134::setSuppressed(bool value)
{
    m_Suppressed = value;
    m_SuppressedIsSet = true;
}

bool BTMFeature_134::suppressedIsSet() const
{
    return m_SuppressedIsSet;
}

void BTMFeature_134::unsetSuppressed()
{
    m_SuppressedIsSet = false;
}
}
}
}
}


