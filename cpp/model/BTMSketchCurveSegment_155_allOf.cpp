/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchCurveSegment_155_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchCurveSegment_155_allOf::BTMSketchCurveSegment_155_allOf()
{
    m_StartPointId = utility::conversions::to_string_t("");
    m_StartPointIdIsSet = false;
    m_EndPointId = utility::conversions::to_string_t("");
    m_EndPointIdIsSet = false;
    m_StartParam = 0.0;
    m_StartParamIsSet = false;
    m_EndParam = 0.0;
    m_EndParamIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMSketchCurveSegment_155_allOf::~BTMSketchCurveSegment_155_allOf()
{
}

void BTMSketchCurveSegment_155_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchCurveSegment_155_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StartPointIdIsSet)
    {
        val[utility::conversions::to_string_t("startPointId")] = ModelBase::toJson(m_StartPointId);
    }
    if(m_EndPointIdIsSet)
    {
        val[utility::conversions::to_string_t("endPointId")] = ModelBase::toJson(m_EndPointId);
    }
    if(m_StartParamIsSet)
    {
        val[utility::conversions::to_string_t("startParam")] = ModelBase::toJson(m_StartParam);
    }
    if(m_EndParamIsSet)
    {
        val[utility::conversions::to_string_t("endParam")] = ModelBase::toJson(m_EndParam);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMSketchCurveSegment_155_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("startPointId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startPointId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_startPointId;
            ok &= ModelBase::fromJson(fieldValue, refVal_startPointId);
            setStartPointId(refVal_startPointId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endPointId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endPointId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_endPointId;
            ok &= ModelBase::fromJson(fieldValue, refVal_endPointId);
            setEndPointId(refVal_endPointId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startParam")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startParam"));
        if(!fieldValue.is_null())
        {
            double refVal_startParam;
            ok &= ModelBase::fromJson(fieldValue, refVal_startParam);
            setStartParam(refVal_startParam);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endParam")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endParam"));
        if(!fieldValue.is_null())
        {
            double refVal_endParam;
            ok &= ModelBase::fromJson(fieldValue, refVal_endParam);
            setEndParam(refVal_endParam);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMSketchCurveSegment_155_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StartPointIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startPointId"), m_StartPointId));
    }
    if(m_EndPointIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endPointId"), m_EndPointId));
    }
    if(m_StartParamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startParam"), m_StartParam));
    }
    if(m_EndParamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endParam"), m_EndParam));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMSketchCurveSegment_155_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("startPointId")))
    {
        utility::string_t refVal_startPointId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startPointId")), refVal_startPointId );
        setStartPointId(refVal_startPointId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endPointId")))
    {
        utility::string_t refVal_endPointId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endPointId")), refVal_endPointId );
        setEndPointId(refVal_endPointId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startParam")))
    {
        double refVal_startParam;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startParam")), refVal_startParam );
        setStartParam(refVal_startParam);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endParam")))
    {
        double refVal_endParam;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endParam")), refVal_endParam );
        setEndParam(refVal_endParam);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTMSketchCurveSegment_155_allOf::getStartPointId() const
{
    return m_StartPointId;
}

void BTMSketchCurveSegment_155_allOf::setStartPointId(const utility::string_t& value)
{
    m_StartPointId = value;
    m_StartPointIdIsSet = true;
}

bool BTMSketchCurveSegment_155_allOf::startPointIdIsSet() const
{
    return m_StartPointIdIsSet;
}

void BTMSketchCurveSegment_155_allOf::unsetStartPointId()
{
    m_StartPointIdIsSet = false;
}
utility::string_t BTMSketchCurveSegment_155_allOf::getEndPointId() const
{
    return m_EndPointId;
}

void BTMSketchCurveSegment_155_allOf::setEndPointId(const utility::string_t& value)
{
    m_EndPointId = value;
    m_EndPointIdIsSet = true;
}

bool BTMSketchCurveSegment_155_allOf::endPointIdIsSet() const
{
    return m_EndPointIdIsSet;
}

void BTMSketchCurveSegment_155_allOf::unsetEndPointId()
{
    m_EndPointIdIsSet = false;
}
double BTMSketchCurveSegment_155_allOf::getStartParam() const
{
    return m_StartParam;
}

void BTMSketchCurveSegment_155_allOf::setStartParam(double value)
{
    m_StartParam = value;
    m_StartParamIsSet = true;
}

bool BTMSketchCurveSegment_155_allOf::startParamIsSet() const
{
    return m_StartParamIsSet;
}

void BTMSketchCurveSegment_155_allOf::unsetStartParam()
{
    m_StartParamIsSet = false;
}
double BTMSketchCurveSegment_155_allOf::getEndParam() const
{
    return m_EndParam;
}

void BTMSketchCurveSegment_155_allOf::setEndParam(double value)
{
    m_EndParam = value;
    m_EndParamIsSet = true;
}

bool BTMSketchCurveSegment_155_allOf::endParamIsSet() const
{
    return m_EndParamIsSet;
}

void BTMSketchCurveSegment_155_allOf::unsetEndParam()
{
    m_EndParamIsSet = false;
}
utility::string_t BTMSketchCurveSegment_155_allOf::getBtType() const
{
    return m_BtType;
}

void BTMSketchCurveSegment_155_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchCurveSegment_155_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchCurveSegment_155_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


