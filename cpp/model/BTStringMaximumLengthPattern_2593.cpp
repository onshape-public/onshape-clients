/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTStringMaximumLengthPattern_2593.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTStringMaximumLengthPattern_2593::BTStringMaximumLengthPattern_2593()
{
    m_MaximumLength = 0;
    m_MaximumLengthIsSet = false;
}

BTStringMaximumLengthPattern_2593::~BTStringMaximumLengthPattern_2593()
{
}

void BTStringMaximumLengthPattern_2593::validate()
{
    // TODO: implement validation
}

web::json::value BTStringMaximumLengthPattern_2593::toJson() const
{
    web::json::value val = this->BTStringFormatCondition_683::toJson();
    
    if(m_MaximumLengthIsSet)
    {
        val[utility::conversions::to_string_t("maximumLength")] = ModelBase::toJson(m_MaximumLength);
    }

    return val;
}

bool BTStringMaximumLengthPattern_2593::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTStringFormatCondition_683::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("maximumLength")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maximumLength"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_maximumLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_maximumLength);
            setMaximumLength(refVal_maximumLength);
        }
    }
    return ok;
}

void BTStringMaximumLengthPattern_2593::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_ShouldResetValueWhenConfirmedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shouldResetValueWhenConfirmed"), m_ShouldResetValueWhenConfirmed));
    }
    if(m_MaximumLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maximumLength"), m_MaximumLength));
    }
}

bool BTStringMaximumLengthPattern_2593::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")))
    {
        bool refVal_shouldResetValueWhenConfirmed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shouldResetValueWhenConfirmed")), refVal_shouldResetValueWhenConfirmed );
        setShouldResetValueWhenConfirmed(refVal_shouldResetValueWhenConfirmed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maximumLength")))
    {
        int32_t refVal_maximumLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maximumLength")), refVal_maximumLength );
        setMaximumLength(refVal_maximumLength);
    }
    return ok;
}

int32_t BTStringMaximumLengthPattern_2593::getMaximumLength() const
{
    return m_MaximumLength;
}

void BTStringMaximumLengthPattern_2593::setMaximumLength(int32_t value)
{
    m_MaximumLength = value;
    m_MaximumLengthIsSet = true;
}

bool BTStringMaximumLengthPattern_2593::maximumLengthIsSet() const
{
    return m_MaximumLengthIsSet;
}

void BTStringMaximumLengthPattern_2593::unsetMaximumLength()
{
    m_MaximumLengthIsSet = false;
}
}
}
}
}


