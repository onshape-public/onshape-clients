/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureDefinitionResponse_1617_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureDefinitionResponse_1617_allOf::BTFeatureDefinitionResponse_1617_allOf()
{
    m_FeatureStateIsSet = false;
    m_FeatureIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTFeatureDefinitionResponse_1617_allOf::~BTFeatureDefinitionResponse_1617_allOf()
{
}

void BTFeatureDefinitionResponse_1617_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureDefinitionResponse_1617_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeatureStateIsSet)
    {
        val[utility::conversions::to_string_t("featureState")] = ModelBase::toJson(m_FeatureState);
    }
    if(m_FeatureIsSet)
    {
        val[utility::conversions::to_string_t("feature")] = ModelBase::toJson(m_Feature);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTFeatureDefinitionResponse_1617_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("featureState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureState"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTFeatureState_1688> refVal_featureState;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureState);
            setFeatureState(refVal_featureState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("feature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("feature"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMFeature_134> refVal_feature;
            ok &= ModelBase::fromJson(fieldValue, refVal_feature);
            setFeature(refVal_feature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTFeatureDefinitionResponse_1617_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FeatureStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureState"), m_FeatureState));
    }
    if(m_FeatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("feature"), m_Feature));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTFeatureDefinitionResponse_1617_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("featureState")))
    {
        std::shared_ptr<BTFeatureState_1688> refVal_featureState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureState")), refVal_featureState );
        setFeatureState(refVal_featureState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("feature")))
    {
        std::shared_ptr<BTMFeature_134> refVal_feature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("feature")), refVal_feature );
        setFeature(refVal_feature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTFeatureState_1688> BTFeatureDefinitionResponse_1617_allOf::getFeatureState() const
{
    return m_FeatureState;
}

void BTFeatureDefinitionResponse_1617_allOf::setFeatureState(const std::shared_ptr<BTFeatureState_1688>& value)
{
    m_FeatureState = value;
    m_FeatureStateIsSet = true;
}

bool BTFeatureDefinitionResponse_1617_allOf::featureStateIsSet() const
{
    return m_FeatureStateIsSet;
}

void BTFeatureDefinitionResponse_1617_allOf::unsetFeatureState()
{
    m_FeatureStateIsSet = false;
}
std::shared_ptr<BTMFeature_134> BTFeatureDefinitionResponse_1617_allOf::getFeature() const
{
    return m_Feature;
}

void BTFeatureDefinitionResponse_1617_allOf::setFeature(const std::shared_ptr<BTMFeature_134>& value)
{
    m_Feature = value;
    m_FeatureIsSet = true;
}

bool BTFeatureDefinitionResponse_1617_allOf::featureIsSet() const
{
    return m_FeatureIsSet;
}

void BTFeatureDefinitionResponse_1617_allOf::unsetFeature()
{
    m_FeatureIsSet = false;
}
utility::string_t BTFeatureDefinitionResponse_1617_allOf::getBtType() const
{
    return m_BtType;
}

void BTFeatureDefinitionResponse_1617_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTFeatureDefinitionResponse_1617_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTFeatureDefinitionResponse_1617_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


