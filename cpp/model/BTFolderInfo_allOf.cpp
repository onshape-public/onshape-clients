/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFolderInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFolderInfo_allOf::BTFolderInfo_allOf()
{
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_PermissionSetIsSet = false;
    m_Trash = false;
    m_TrashIsSet = false;
    m_CanUnshare = false;
    m_CanUnshareIsSet = false;
    m_Active = false;
    m_ActiveIsSet = false;
    m_TrashedAt = utility::datetime();
    m_TrashedAtIsSet = false;
    m_IsOrphaned = false;
    m_IsOrphanedIsSet = false;
}

BTFolderInfo_allOf::~BTFolderInfo_allOf()
{
}

void BTFolderInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTFolderInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_PermissionSetIsSet)
    {
        val[utility::conversions::to_string_t("permissionSet")] = ModelBase::toJson(m_PermissionSet);
    }
    if(m_TrashIsSet)
    {
        val[utility::conversions::to_string_t("trash")] = ModelBase::toJson(m_Trash);
    }
    if(m_CanUnshareIsSet)
    {
        val[utility::conversions::to_string_t("canUnshare")] = ModelBase::toJson(m_CanUnshare);
    }
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t("active")] = ModelBase::toJson(m_Active);
    }
    if(m_TrashedAtIsSet)
    {
        val[utility::conversions::to_string_t("trashedAt")] = ModelBase::toJson(m_TrashedAt);
    }
    if(m_IsOrphanedIsSet)
    {
        val[utility::conversions::to_string_t("isOrphaned")] = ModelBase::toJson(m_IsOrphaned);
    }

    return val;
}

bool BTFolderInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permissionSet")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permissionSet"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_permissionSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_permissionSet);
            setPermissionSet(refVal_permissionSet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trash"));
        if(!fieldValue.is_null())
        {
            bool refVal_trash;
            ok &= ModelBase::fromJson(fieldValue, refVal_trash);
            setTrash(refVal_trash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canUnshare")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canUnshare"));
        if(!fieldValue.is_null())
        {
            bool refVal_canUnshare;
            ok &= ModelBase::fromJson(fieldValue, refVal_canUnshare);
            setCanUnshare(refVal_canUnshare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("active"));
        if(!fieldValue.is_null())
        {
            bool refVal_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_active);
            setActive(refVal_active);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trashedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trashedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_trashedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_trashedAt);
            setTrashedAt(refVal_trashedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isOrphaned")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isOrphaned"));
        if(!fieldValue.is_null())
        {
            bool refVal_isOrphaned;
            ok &= ModelBase::fromJson(fieldValue, refVal_isOrphaned);
            setIsOrphaned(refVal_isOrphaned);
        }
    }
    return ok;
}

void BTFolderInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PermissionSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissionSet"), m_PermissionSet));
    }
    if(m_TrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trash"), m_Trash));
    }
    if(m_CanUnshareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canUnshare"), m_CanUnshare));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("active"), m_Active));
    }
    if(m_TrashedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trashedAt"), m_TrashedAt));
    }
    if(m_IsOrphanedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOrphaned"), m_IsOrphaned));
    }
}

bool BTFolderInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissionSet")))
    {
        std::shared_ptr<Object> refVal_permissionSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissionSet")), refVal_permissionSet );
        setPermissionSet(refVal_permissionSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trash")))
    {
        bool refVal_trash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trash")), refVal_trash );
        setTrash(refVal_trash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canUnshare")))
    {
        bool refVal_canUnshare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canUnshare")), refVal_canUnshare );
        setCanUnshare(refVal_canUnshare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("active")))
    {
        bool refVal_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("active")), refVal_active );
        setActive(refVal_active);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trashedAt")))
    {
        utility::datetime refVal_trashedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trashedAt")), refVal_trashedAt );
        setTrashedAt(refVal_trashedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOrphaned")))
    {
        bool refVal_isOrphaned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOrphaned")), refVal_isOrphaned );
        setIsOrphaned(refVal_isOrphaned);
    }
    return ok;
}

utility::string_t BTFolderInfo_allOf::getParentId() const
{
    return m_ParentId;
}

void BTFolderInfo_allOf::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTFolderInfo_allOf::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTFolderInfo_allOf::unsetParentId()
{
    m_ParentIdIsSet = false;
}
std::shared_ptr<Object> BTFolderInfo_allOf::getPermissionSet() const
{
    return m_PermissionSet;
}

void BTFolderInfo_allOf::setPermissionSet(const std::shared_ptr<Object>& value)
{
    m_PermissionSet = value;
    m_PermissionSetIsSet = true;
}

bool BTFolderInfo_allOf::permissionSetIsSet() const
{
    return m_PermissionSetIsSet;
}

void BTFolderInfo_allOf::unsetPermissionSet()
{
    m_PermissionSetIsSet = false;
}
bool BTFolderInfo_allOf::isTrash() const
{
    return m_Trash;
}

void BTFolderInfo_allOf::setTrash(bool value)
{
    m_Trash = value;
    m_TrashIsSet = true;
}

bool BTFolderInfo_allOf::trashIsSet() const
{
    return m_TrashIsSet;
}

void BTFolderInfo_allOf::unsetTrash()
{
    m_TrashIsSet = false;
}
bool BTFolderInfo_allOf::isCanUnshare() const
{
    return m_CanUnshare;
}

void BTFolderInfo_allOf::setCanUnshare(bool value)
{
    m_CanUnshare = value;
    m_CanUnshareIsSet = true;
}

bool BTFolderInfo_allOf::canUnshareIsSet() const
{
    return m_CanUnshareIsSet;
}

void BTFolderInfo_allOf::unsetCanUnshare()
{
    m_CanUnshareIsSet = false;
}
bool BTFolderInfo_allOf::isActive() const
{
    return m_Active;
}

void BTFolderInfo_allOf::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool BTFolderInfo_allOf::activeIsSet() const
{
    return m_ActiveIsSet;
}

void BTFolderInfo_allOf::unsetActive()
{
    m_ActiveIsSet = false;
}
utility::datetime BTFolderInfo_allOf::getTrashedAt() const
{
    return m_TrashedAt;
}

void BTFolderInfo_allOf::setTrashedAt(const utility::datetime& value)
{
    m_TrashedAt = value;
    m_TrashedAtIsSet = true;
}

bool BTFolderInfo_allOf::trashedAtIsSet() const
{
    return m_TrashedAtIsSet;
}

void BTFolderInfo_allOf::unsetTrashedAt()
{
    m_TrashedAtIsSet = false;
}
bool BTFolderInfo_allOf::isIsOrphaned() const
{
    return m_IsOrphaned;
}

void BTFolderInfo_allOf::setIsOrphaned(bool value)
{
    m_IsOrphaned = value;
    m_IsOrphanedIsSet = true;
}

bool BTFolderInfo_allOf::isOrphanedIsSet() const
{
    return m_IsOrphanedIsSet;
}

void BTFolderInfo_allOf::unsetIsOrphaned()
{
    m_IsOrphanedIsSet = false;
}
}
}
}
}


