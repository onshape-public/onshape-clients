/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPurchaseInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPurchaseInfo::BTPurchaseInfo()
{
    m_AccountId = utility::conversions::to_string_t("");
    m_AccountIdIsSet = false;
    m_ActualAmountPaidCents = 0L;
    m_ActualAmountPaidCentsIsSet = false;
    m_AmountCents = 0L;
    m_AmountCentsIsSet = false;
    m_ApplicationIsSet = false;
    m_CanceledAt = utility::datetime();
    m_CanceledAtIsSet = false;
    m_CardIsSet = false;
    m_ClientId = utility::conversions::to_string_t("");
    m_ClientIdIsSet = false;
    m_CouponAmountOff = 0L;
    m_CouponAmountOffIsSet = false;
    m_CouponPercentOff = 0;
    m_CouponPercentOffIsSet = false;
    m_CreatedBy = utility::conversions::to_string_t("");
    m_CreatedByIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_DurationMonths = 0;
    m_DurationMonthsIsSet = false;
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_LastModified = utility::datetime();
    m_LastModifiedIsSet = false;
    m_LastModifiedBy = utility::conversions::to_string_t("");
    m_LastModifiedByIsSet = false;
    m_LightSeats = 0L;
    m_LightSeatsIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NextChargeIsSet = false;
    m_PaymentType = 0;
    m_PaymentTypeIsSet = false;
    m_PendingCancelation = false;
    m_PendingCancelationIsSet = false;
    m_PlanIsSet = false;
    m_PlanId = utility::conversions::to_string_t("");
    m_PlanIdIsSet = false;
    m_PlanName = utility::conversions::to_string_t("");
    m_PlanNameIsSet = false;
    m_PlanType = 0;
    m_PlanTypeIsSet = false;
    m_ProratedChargesIsSet = false;
    m_ProratedTotal = 0L;
    m_ProratedTotalIsSet = false;
    m_PurchaseDate = utility::datetime();
    m_PurchaseDateIsSet = false;
    m_ResellerName = utility::conversions::to_string_t("");
    m_ResellerNameIsSet = false;
    m_Seats = 0L;
    m_SeatsIsSet = false;
    m_State = 0;
    m_StateIsSet = false;
    m_SubscribersIsSet = false;
    m_SubscriptionBeginAt = utility::datetime();
    m_SubscriptionBeginAtIsSet = false;
    m_SubscriptionEndAt = utility::datetime();
    m_SubscriptionEndAtIsSet = false;
    m_SubscriptionFieldsIsSet = false;
    m_SubscriptionId = utility::conversions::to_string_t("");
    m_SubscriptionIdIsSet = false;
    m_SubscriptionType = 0;
    m_SubscriptionTypeIsSet = false;
    m_TrialEnd = utility::datetime();
    m_TrialEndIsSet = false;
    m_TrialInitiatedBy = utility::conversions::to_string_t("");
    m_TrialInitiatedByIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTPurchaseInfo::~BTPurchaseInfo()
{
}

void BTPurchaseInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTPurchaseInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIdIsSet)
    {
        val[utility::conversions::to_string_t("accountId")] = ModelBase::toJson(m_AccountId);
    }
    if(m_ActualAmountPaidCentsIsSet)
    {
        val[utility::conversions::to_string_t("actualAmountPaidCents")] = ModelBase::toJson(m_ActualAmountPaidCents);
    }
    if(m_AmountCentsIsSet)
    {
        val[utility::conversions::to_string_t("amountCents")] = ModelBase::toJson(m_AmountCents);
    }
    if(m_ApplicationIsSet)
    {
        val[utility::conversions::to_string_t("application")] = ModelBase::toJson(m_Application);
    }
    if(m_CanceledAtIsSet)
    {
        val[utility::conversions::to_string_t("canceledAt")] = ModelBase::toJson(m_CanceledAt);
    }
    if(m_CardIsSet)
    {
        val[utility::conversions::to_string_t("card")] = ModelBase::toJson(m_Card);
    }
    if(m_ClientIdIsSet)
    {
        val[utility::conversions::to_string_t("clientId")] = ModelBase::toJson(m_ClientId);
    }
    if(m_CouponAmountOffIsSet)
    {
        val[utility::conversions::to_string_t("couponAmountOff")] = ModelBase::toJson(m_CouponAmountOff);
    }
    if(m_CouponPercentOffIsSet)
    {
        val[utility::conversions::to_string_t("couponPercentOff")] = ModelBase::toJson(m_CouponPercentOff);
    }
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t("createdBy")] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_DurationIsSet)
    {
        val[utility::conversions::to_string_t("duration")] = ModelBase::toJson(m_Duration);
    }
    if(m_DurationMonthsIsSet)
    {
        val[utility::conversions::to_string_t("durationMonths")] = ModelBase::toJson(m_DurationMonths);
    }
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t("group")] = ModelBase::toJson(m_Group);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LastModifiedIsSet)
    {
        val[utility::conversions::to_string_t("lastModified")] = ModelBase::toJson(m_LastModified);
    }
    if(m_LastModifiedByIsSet)
    {
        val[utility::conversions::to_string_t("lastModifiedBy")] = ModelBase::toJson(m_LastModifiedBy);
    }
    if(m_LightSeatsIsSet)
    {
        val[utility::conversions::to_string_t("lightSeats")] = ModelBase::toJson(m_LightSeats);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NextChargeIsSet)
    {
        val[utility::conversions::to_string_t("nextCharge")] = ModelBase::toJson(m_NextCharge);
    }
    if(m_PaymentTypeIsSet)
    {
        val[utility::conversions::to_string_t("paymentType")] = ModelBase::toJson(m_PaymentType);
    }
    if(m_PendingCancelationIsSet)
    {
        val[utility::conversions::to_string_t("pendingCancelation")] = ModelBase::toJson(m_PendingCancelation);
    }
    if(m_PlanIsSet)
    {
        val[utility::conversions::to_string_t("plan")] = ModelBase::toJson(m_Plan);
    }
    if(m_PlanIdIsSet)
    {
        val[utility::conversions::to_string_t("planId")] = ModelBase::toJson(m_PlanId);
    }
    if(m_PlanNameIsSet)
    {
        val[utility::conversions::to_string_t("planName")] = ModelBase::toJson(m_PlanName);
    }
    if(m_PlanTypeIsSet)
    {
        val[utility::conversions::to_string_t("planType")] = ModelBase::toJson(m_PlanType);
    }
    if(m_ProratedChargesIsSet)
    {
        val[utility::conversions::to_string_t("proratedCharges")] = ModelBase::toJson(m_ProratedCharges);
    }
    if(m_ProratedTotalIsSet)
    {
        val[utility::conversions::to_string_t("proratedTotal")] = ModelBase::toJson(m_ProratedTotal);
    }
    if(m_PurchaseDateIsSet)
    {
        val[utility::conversions::to_string_t("purchaseDate")] = ModelBase::toJson(m_PurchaseDate);
    }
    if(m_ResellerNameIsSet)
    {
        val[utility::conversions::to_string_t("resellerName")] = ModelBase::toJson(m_ResellerName);
    }
    if(m_SeatsIsSet)
    {
        val[utility::conversions::to_string_t("seats")] = ModelBase::toJson(m_Seats);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }
    if(m_SubscribersIsSet)
    {
        val[utility::conversions::to_string_t("subscribers")] = ModelBase::toJson(m_Subscribers);
    }
    if(m_SubscriptionBeginAtIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionBeginAt")] = ModelBase::toJson(m_SubscriptionBeginAt);
    }
    if(m_SubscriptionEndAtIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionEndAt")] = ModelBase::toJson(m_SubscriptionEndAt);
    }
    if(m_SubscriptionFieldsIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionFields")] = ModelBase::toJson(m_SubscriptionFields);
    }
    if(m_SubscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionId")] = ModelBase::toJson(m_SubscriptionId);
    }
    if(m_SubscriptionTypeIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionType")] = ModelBase::toJson(m_SubscriptionType);
    }
    if(m_TrialEndIsSet)
    {
        val[utility::conversions::to_string_t("trialEnd")] = ModelBase::toJson(m_TrialEnd);
    }
    if(m_TrialInitiatedByIsSet)
    {
        val[utility::conversions::to_string_t("trialInitiatedBy")] = ModelBase::toJson(m_TrialInitiatedBy);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTPurchaseInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("accountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("accountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountId);
            setAccountId(refVal_accountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("actualAmountPaidCents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("actualAmountPaidCents"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_actualAmountPaidCents;
            ok &= ModelBase::fromJson(fieldValue, refVal_actualAmountPaidCents);
            setActualAmountPaidCents(refVal_actualAmountPaidCents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amountCents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amountCents"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_amountCents;
            ok &= ModelBase::fromJson(fieldValue, refVal_amountCents);
            setAmountCents(refVal_amountCents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("application")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("application"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTAPIApplicationSummaryInfo> refVal_application;
            ok &= ModelBase::fromJson(fieldValue, refVal_application);
            setApplication(refVal_application);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canceledAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canceledAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_canceledAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_canceledAt);
            setCanceledAt(refVal_canceledAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("card")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("card"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCardInfo> refVal_card;
            ok &= ModelBase::fromJson(fieldValue, refVal_card);
            setCard(refVal_card);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clientId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clientId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clientId;
            ok &= ModelBase::fromJson(fieldValue, refVal_clientId);
            setClientId(refVal_clientId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("couponAmountOff")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("couponAmountOff"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_couponAmountOff;
            ok &= ModelBase::fromJson(fieldValue, refVal_couponAmountOff);
            setCouponAmountOff(refVal_couponAmountOff);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("couponPercentOff")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("couponPercentOff"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_couponPercentOff;
            ok &= ModelBase::fromJson(fieldValue, refVal_couponPercentOff);
            setCouponPercentOff(refVal_couponPercentOff);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdBy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currency"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_currency);
            setCurrency(refVal_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("duration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("duration"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_duration;
            ok &= ModelBase::fromJson(fieldValue, refVal_duration);
            setDuration(refVal_duration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("durationMonths")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("durationMonths"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_durationMonths;
            ok &= ModelBase::fromJson(fieldValue, refVal_durationMonths);
            setDurationMonths(refVal_durationMonths);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("group")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("group"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_group);
            setGroup(refVal_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastModified")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastModified"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_lastModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastModified);
            setLastModified(refVal_lastModified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastModifiedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastModifiedBy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lastModifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastModifiedBy);
            setLastModifiedBy(refVal_lastModifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lightSeats")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lightSeats"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_lightSeats;
            ok &= ModelBase::fromJson(fieldValue, refVal_lightSeats);
            setLightSeats(refVal_lightSeats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nextCharge")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nextCharge"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NextCharge> refVal_nextCharge;
            ok &= ModelBase::fromJson(fieldValue, refVal_nextCharge);
            setNextCharge(refVal_nextCharge);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("paymentType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("paymentType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_paymentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_paymentType);
            setPaymentType(refVal_paymentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingCancelation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pendingCancelation"));
        if(!fieldValue.is_null())
        {
            bool refVal_pendingCancelation;
            ok &= ModelBase::fromJson(fieldValue, refVal_pendingCancelation);
            setPendingCancelation(refVal_pendingCancelation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plan"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTBillingPlanInfo> refVal_plan;
            ok &= ModelBase::fromJson(fieldValue, refVal_plan);
            setPlan(refVal_plan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_planId;
            ok &= ModelBase::fromJson(fieldValue, refVal_planId);
            setPlanId(refVal_planId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_planName;
            ok &= ModelBase::fromJson(fieldValue, refVal_planName);
            setPlanName(refVal_planName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("planType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("planType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_planType;
            ok &= ModelBase::fromJson(fieldValue, refVal_planType);
            setPlanType(refVal_planType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proratedCharges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proratedCharges"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ProratedCharges>> refVal_proratedCharges;
            ok &= ModelBase::fromJson(fieldValue, refVal_proratedCharges);
            setProratedCharges(refVal_proratedCharges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proratedTotal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proratedTotal"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_proratedTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_proratedTotal);
            setProratedTotal(refVal_proratedTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("purchaseDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("purchaseDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_purchaseDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_purchaseDate);
            setPurchaseDate(refVal_purchaseDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resellerName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resellerName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resellerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_resellerName);
            setResellerName(refVal_resellerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("seats")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("seats"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_seats;
            ok &= ModelBase::fromJson(fieldValue, refVal_seats);
            setSeats(refVal_seats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscribers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscribers"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPlanSubscriberInfo>> refVal_subscribers;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscribers);
            setSubscribers(refVal_subscribers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionBeginAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionBeginAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_subscriptionBeginAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionBeginAt);
            setSubscriptionBeginAt(refVal_subscriptionBeginAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionEndAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionEndAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_subscriptionEndAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionEndAt);
            setSubscriptionEndAt(refVal_subscriptionEndAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionFields")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionFields"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Subscription> refVal_subscriptionFields;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionFields);
            setSubscriptionFields(refVal_subscriptionFields);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionId);
            setSubscriptionId(refVal_subscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_subscriptionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionType);
            setSubscriptionType(refVal_subscriptionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trialEnd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trialEnd"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_trialEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_trialEnd);
            setTrialEnd(refVal_trialEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trialInitiatedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trialInitiatedBy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_trialInitiatedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_trialInitiatedBy);
            setTrialInitiatedBy(refVal_trialInitiatedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTPurchaseInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accountId"), m_AccountId));
    }
    if(m_ActualAmountPaidCentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("actualAmountPaidCents"), m_ActualAmountPaidCents));
    }
    if(m_AmountCentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amountCents"), m_AmountCents));
    }
    if(m_ApplicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("application"), m_Application));
    }
    if(m_CanceledAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canceledAt"), m_CanceledAt));
    }
    if(m_CardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("card"), m_Card));
    }
    if(m_ClientIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientId"), m_ClientId));
    }
    if(m_CouponAmountOffIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("couponAmountOff"), m_CouponAmountOff));
    }
    if(m_CouponPercentOffIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("couponPercentOff"), m_CouponPercentOff));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("duration"), m_Duration));
    }
    if(m_DurationMonthsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("durationMonths"), m_DurationMonths));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("group"), m_Group));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_LastModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastModified"), m_LastModified));
    }
    if(m_LastModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastModifiedBy"), m_LastModifiedBy));
    }
    if(m_LightSeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lightSeats"), m_LightSeats));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NextChargeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nextCharge"), m_NextCharge));
    }
    if(m_PaymentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("paymentType"), m_PaymentType));
    }
    if(m_PendingCancelationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pendingCancelation"), m_PendingCancelation));
    }
    if(m_PlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plan"), m_Plan));
    }
    if(m_PlanIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planId"), m_PlanId));
    }
    if(m_PlanNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planName"), m_PlanName));
    }
    if(m_PlanTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("planType"), m_PlanType));
    }
    if(m_ProratedChargesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proratedCharges"), m_ProratedCharges));
    }
    if(m_ProratedTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proratedTotal"), m_ProratedTotal));
    }
    if(m_PurchaseDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("purchaseDate"), m_PurchaseDate));
    }
    if(m_ResellerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resellerName"), m_ResellerName));
    }
    if(m_SeatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("seats"), m_Seats));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
    if(m_SubscribersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscribers"), m_Subscribers));
    }
    if(m_SubscriptionBeginAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionBeginAt"), m_SubscriptionBeginAt));
    }
    if(m_SubscriptionEndAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionEndAt"), m_SubscriptionEndAt));
    }
    if(m_SubscriptionFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionFields"), m_SubscriptionFields));
    }
    if(m_SubscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionId"), m_SubscriptionId));
    }
    if(m_SubscriptionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionType"), m_SubscriptionType));
    }
    if(m_TrialEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trialEnd"), m_TrialEnd));
    }
    if(m_TrialInitiatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trialInitiatedBy"), m_TrialInitiatedBy));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTPurchaseInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("accountId")))
    {
        utility::string_t refVal_accountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("accountId")), refVal_accountId );
        setAccountId(refVal_accountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("actualAmountPaidCents")))
    {
        int64_t refVal_actualAmountPaidCents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("actualAmountPaidCents")), refVal_actualAmountPaidCents );
        setActualAmountPaidCents(refVal_actualAmountPaidCents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amountCents")))
    {
        int64_t refVal_amountCents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amountCents")), refVal_amountCents );
        setAmountCents(refVal_amountCents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("application")))
    {
        std::shared_ptr<BTAPIApplicationSummaryInfo> refVal_application;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("application")), refVal_application );
        setApplication(refVal_application);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canceledAt")))
    {
        utility::datetime refVal_canceledAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canceledAt")), refVal_canceledAt );
        setCanceledAt(refVal_canceledAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("card")))
    {
        std::shared_ptr<BTCardInfo> refVal_card;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("card")), refVal_card );
        setCard(refVal_card);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clientId")))
    {
        utility::string_t refVal_clientId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientId")), refVal_clientId );
        setClientId(refVal_clientId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("couponAmountOff")))
    {
        int64_t refVal_couponAmountOff;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("couponAmountOff")), refVal_couponAmountOff );
        setCouponAmountOff(refVal_couponAmountOff);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("couponPercentOff")))
    {
        int32_t refVal_couponPercentOff;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("couponPercentOff")), refVal_couponPercentOff );
        setCouponPercentOff(refVal_couponPercentOff);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        utility::string_t refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        utility::string_t refVal_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency")), refVal_currency );
        setCurrency(refVal_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("duration")))
    {
        int32_t refVal_duration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("duration")), refVal_duration );
        setDuration(refVal_duration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("durationMonths")))
    {
        int32_t refVal_durationMonths;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("durationMonths")), refVal_durationMonths );
        setDurationMonths(refVal_durationMonths);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("group")))
    {
        utility::string_t refVal_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("group")), refVal_group );
        setGroup(refVal_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastModified")))
    {
        utility::datetime refVal_lastModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastModified")), refVal_lastModified );
        setLastModified(refVal_lastModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastModifiedBy")))
    {
        utility::string_t refVal_lastModifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastModifiedBy")), refVal_lastModifiedBy );
        setLastModifiedBy(refVal_lastModifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lightSeats")))
    {
        int64_t refVal_lightSeats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lightSeats")), refVal_lightSeats );
        setLightSeats(refVal_lightSeats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nextCharge")))
    {
        std::shared_ptr<NextCharge> refVal_nextCharge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nextCharge")), refVal_nextCharge );
        setNextCharge(refVal_nextCharge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("paymentType")))
    {
        int32_t refVal_paymentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("paymentType")), refVal_paymentType );
        setPaymentType(refVal_paymentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingCancelation")))
    {
        bool refVal_pendingCancelation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pendingCancelation")), refVal_pendingCancelation );
        setPendingCancelation(refVal_pendingCancelation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plan")))
    {
        std::shared_ptr<BTBillingPlanInfo> refVal_plan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plan")), refVal_plan );
        setPlan(refVal_plan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planId")))
    {
        utility::string_t refVal_planId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planId")), refVal_planId );
        setPlanId(refVal_planId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planName")))
    {
        utility::string_t refVal_planName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planName")), refVal_planName );
        setPlanName(refVal_planName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("planType")))
    {
        int32_t refVal_planType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("planType")), refVal_planType );
        setPlanType(refVal_planType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proratedCharges")))
    {
        std::vector<std::shared_ptr<ProratedCharges>> refVal_proratedCharges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proratedCharges")), refVal_proratedCharges );
        setProratedCharges(refVal_proratedCharges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proratedTotal")))
    {
        int64_t refVal_proratedTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proratedTotal")), refVal_proratedTotal );
        setProratedTotal(refVal_proratedTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("purchaseDate")))
    {
        utility::datetime refVal_purchaseDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("purchaseDate")), refVal_purchaseDate );
        setPurchaseDate(refVal_purchaseDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resellerName")))
    {
        utility::string_t refVal_resellerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resellerName")), refVal_resellerName );
        setResellerName(refVal_resellerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("seats")))
    {
        int64_t refVal_seats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("seats")), refVal_seats );
        setSeats(refVal_seats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        int32_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscribers")))
    {
        std::vector<std::shared_ptr<BTPlanSubscriberInfo>> refVal_subscribers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscribers")), refVal_subscribers );
        setSubscribers(refVal_subscribers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionBeginAt")))
    {
        utility::datetime refVal_subscriptionBeginAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionBeginAt")), refVal_subscriptionBeginAt );
        setSubscriptionBeginAt(refVal_subscriptionBeginAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionEndAt")))
    {
        utility::datetime refVal_subscriptionEndAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionEndAt")), refVal_subscriptionEndAt );
        setSubscriptionEndAt(refVal_subscriptionEndAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionFields")))
    {
        std::shared_ptr<Subscription> refVal_subscriptionFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionFields")), refVal_subscriptionFields );
        setSubscriptionFields(refVal_subscriptionFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionId")))
    {
        utility::string_t refVal_subscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionId")), refVal_subscriptionId );
        setSubscriptionId(refVal_subscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionType")))
    {
        int32_t refVal_subscriptionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionType")), refVal_subscriptionType );
        setSubscriptionType(refVal_subscriptionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trialEnd")))
    {
        utility::datetime refVal_trialEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trialEnd")), refVal_trialEnd );
        setTrialEnd(refVal_trialEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trialInitiatedBy")))
    {
        utility::string_t refVal_trialInitiatedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trialInitiatedBy")), refVal_trialInitiatedBy );
        setTrialInitiatedBy(refVal_trialInitiatedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTPurchaseInfo::getAccountId() const
{
    return m_AccountId;
}

void BTPurchaseInfo::setAccountId(const utility::string_t& value)
{
    m_AccountId = value;
    m_AccountIdIsSet = true;
}

bool BTPurchaseInfo::accountIdIsSet() const
{
    return m_AccountIdIsSet;
}

void BTPurchaseInfo::unsetAccountId()
{
    m_AccountIdIsSet = false;
}
int64_t BTPurchaseInfo::getActualAmountPaidCents() const
{
    return m_ActualAmountPaidCents;
}

void BTPurchaseInfo::setActualAmountPaidCents(int64_t value)
{
    m_ActualAmountPaidCents = value;
    m_ActualAmountPaidCentsIsSet = true;
}

bool BTPurchaseInfo::actualAmountPaidCentsIsSet() const
{
    return m_ActualAmountPaidCentsIsSet;
}

void BTPurchaseInfo::unsetActualAmountPaidCents()
{
    m_ActualAmountPaidCentsIsSet = false;
}
int64_t BTPurchaseInfo::getAmountCents() const
{
    return m_AmountCents;
}

void BTPurchaseInfo::setAmountCents(int64_t value)
{
    m_AmountCents = value;
    m_AmountCentsIsSet = true;
}

bool BTPurchaseInfo::amountCentsIsSet() const
{
    return m_AmountCentsIsSet;
}

void BTPurchaseInfo::unsetAmountCents()
{
    m_AmountCentsIsSet = false;
}
std::shared_ptr<BTAPIApplicationSummaryInfo> BTPurchaseInfo::getApplication() const
{
    return m_Application;
}

void BTPurchaseInfo::setApplication(const std::shared_ptr<BTAPIApplicationSummaryInfo>& value)
{
    m_Application = value;
    m_ApplicationIsSet = true;
}

bool BTPurchaseInfo::applicationIsSet() const
{
    return m_ApplicationIsSet;
}

void BTPurchaseInfo::unsetApplication()
{
    m_ApplicationIsSet = false;
}
utility::datetime BTPurchaseInfo::getCanceledAt() const
{
    return m_CanceledAt;
}

void BTPurchaseInfo::setCanceledAt(const utility::datetime& value)
{
    m_CanceledAt = value;
    m_CanceledAtIsSet = true;
}

bool BTPurchaseInfo::canceledAtIsSet() const
{
    return m_CanceledAtIsSet;
}

void BTPurchaseInfo::unsetCanceledAt()
{
    m_CanceledAtIsSet = false;
}
std::shared_ptr<BTCardInfo> BTPurchaseInfo::getCard() const
{
    return m_Card;
}

void BTPurchaseInfo::setCard(const std::shared_ptr<BTCardInfo>& value)
{
    m_Card = value;
    m_CardIsSet = true;
}

bool BTPurchaseInfo::cardIsSet() const
{
    return m_CardIsSet;
}

void BTPurchaseInfo::unsetCard()
{
    m_CardIsSet = false;
}
utility::string_t BTPurchaseInfo::getClientId() const
{
    return m_ClientId;
}

void BTPurchaseInfo::setClientId(const utility::string_t& value)
{
    m_ClientId = value;
    m_ClientIdIsSet = true;
}

bool BTPurchaseInfo::clientIdIsSet() const
{
    return m_ClientIdIsSet;
}

void BTPurchaseInfo::unsetClientId()
{
    m_ClientIdIsSet = false;
}
int64_t BTPurchaseInfo::getCouponAmountOff() const
{
    return m_CouponAmountOff;
}

void BTPurchaseInfo::setCouponAmountOff(int64_t value)
{
    m_CouponAmountOff = value;
    m_CouponAmountOffIsSet = true;
}

bool BTPurchaseInfo::couponAmountOffIsSet() const
{
    return m_CouponAmountOffIsSet;
}

void BTPurchaseInfo::unsetCouponAmountOff()
{
    m_CouponAmountOffIsSet = false;
}
int32_t BTPurchaseInfo::getCouponPercentOff() const
{
    return m_CouponPercentOff;
}

void BTPurchaseInfo::setCouponPercentOff(int32_t value)
{
    m_CouponPercentOff = value;
    m_CouponPercentOffIsSet = true;
}

bool BTPurchaseInfo::couponPercentOffIsSet() const
{
    return m_CouponPercentOffIsSet;
}

void BTPurchaseInfo::unsetCouponPercentOff()
{
    m_CouponPercentOffIsSet = false;
}
utility::string_t BTPurchaseInfo::getCreatedBy() const
{
    return m_CreatedBy;
}

void BTPurchaseInfo::setCreatedBy(const utility::string_t& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool BTPurchaseInfo::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void BTPurchaseInfo::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
utility::string_t BTPurchaseInfo::getCurrency() const
{
    return m_Currency;
}

void BTPurchaseInfo::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool BTPurchaseInfo::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void BTPurchaseInfo::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
int32_t BTPurchaseInfo::getDuration() const
{
    return m_Duration;
}

void BTPurchaseInfo::setDuration(int32_t value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool BTPurchaseInfo::durationIsSet() const
{
    return m_DurationIsSet;
}

void BTPurchaseInfo::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t BTPurchaseInfo::getDurationMonths() const
{
    return m_DurationMonths;
}

void BTPurchaseInfo::setDurationMonths(int32_t value)
{
    m_DurationMonths = value;
    m_DurationMonthsIsSet = true;
}

bool BTPurchaseInfo::durationMonthsIsSet() const
{
    return m_DurationMonthsIsSet;
}

void BTPurchaseInfo::unsetDurationMonths()
{
    m_DurationMonthsIsSet = false;
}
utility::string_t BTPurchaseInfo::getGroup() const
{
    return m_Group;
}

void BTPurchaseInfo::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool BTPurchaseInfo::groupIsSet() const
{
    return m_GroupIsSet;
}

void BTPurchaseInfo::unsetGroup()
{
    m_GroupIsSet = false;
}
utility::string_t BTPurchaseInfo::getHref() const
{
    return m_Href;
}

void BTPurchaseInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTPurchaseInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTPurchaseInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTPurchaseInfo::getId() const
{
    return m_Id;
}

void BTPurchaseInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTPurchaseInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTPurchaseInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime BTPurchaseInfo::getLastModified() const
{
    return m_LastModified;
}

void BTPurchaseInfo::setLastModified(const utility::datetime& value)
{
    m_LastModified = value;
    m_LastModifiedIsSet = true;
}

bool BTPurchaseInfo::lastModifiedIsSet() const
{
    return m_LastModifiedIsSet;
}

void BTPurchaseInfo::unsetLastModified()
{
    m_LastModifiedIsSet = false;
}
utility::string_t BTPurchaseInfo::getLastModifiedBy() const
{
    return m_LastModifiedBy;
}

void BTPurchaseInfo::setLastModifiedBy(const utility::string_t& value)
{
    m_LastModifiedBy = value;
    m_LastModifiedByIsSet = true;
}

bool BTPurchaseInfo::lastModifiedByIsSet() const
{
    return m_LastModifiedByIsSet;
}

void BTPurchaseInfo::unsetLastModifiedBy()
{
    m_LastModifiedByIsSet = false;
}
int64_t BTPurchaseInfo::getLightSeats() const
{
    return m_LightSeats;
}

void BTPurchaseInfo::setLightSeats(int64_t value)
{
    m_LightSeats = value;
    m_LightSeatsIsSet = true;
}

bool BTPurchaseInfo::lightSeatsIsSet() const
{
    return m_LightSeatsIsSet;
}

void BTPurchaseInfo::unsetLightSeats()
{
    m_LightSeatsIsSet = false;
}
utility::string_t BTPurchaseInfo::getName() const
{
    return m_Name;
}

void BTPurchaseInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPurchaseInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPurchaseInfo::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<NextCharge> BTPurchaseInfo::getNextCharge() const
{
    return m_NextCharge;
}

void BTPurchaseInfo::setNextCharge(const std::shared_ptr<NextCharge>& value)
{
    m_NextCharge = value;
    m_NextChargeIsSet = true;
}

bool BTPurchaseInfo::nextChargeIsSet() const
{
    return m_NextChargeIsSet;
}

void BTPurchaseInfo::unsetNextCharge()
{
    m_NextChargeIsSet = false;
}
int32_t BTPurchaseInfo::getPaymentType() const
{
    return m_PaymentType;
}

void BTPurchaseInfo::setPaymentType(int32_t value)
{
    m_PaymentType = value;
    m_PaymentTypeIsSet = true;
}

bool BTPurchaseInfo::paymentTypeIsSet() const
{
    return m_PaymentTypeIsSet;
}

void BTPurchaseInfo::unsetPaymentType()
{
    m_PaymentTypeIsSet = false;
}
bool BTPurchaseInfo::isPendingCancelation() const
{
    return m_PendingCancelation;
}

void BTPurchaseInfo::setPendingCancelation(bool value)
{
    m_PendingCancelation = value;
    m_PendingCancelationIsSet = true;
}

bool BTPurchaseInfo::pendingCancelationIsSet() const
{
    return m_PendingCancelationIsSet;
}

void BTPurchaseInfo::unsetPendingCancelation()
{
    m_PendingCancelationIsSet = false;
}
std::shared_ptr<BTBillingPlanInfo> BTPurchaseInfo::getPlan() const
{
    return m_Plan;
}

void BTPurchaseInfo::setPlan(const std::shared_ptr<BTBillingPlanInfo>& value)
{
    m_Plan = value;
    m_PlanIsSet = true;
}

bool BTPurchaseInfo::planIsSet() const
{
    return m_PlanIsSet;
}

void BTPurchaseInfo::unsetPlan()
{
    m_PlanIsSet = false;
}
utility::string_t BTPurchaseInfo::getPlanId() const
{
    return m_PlanId;
}

void BTPurchaseInfo::setPlanId(const utility::string_t& value)
{
    m_PlanId = value;
    m_PlanIdIsSet = true;
}

bool BTPurchaseInfo::planIdIsSet() const
{
    return m_PlanIdIsSet;
}

void BTPurchaseInfo::unsetPlanId()
{
    m_PlanIdIsSet = false;
}
utility::string_t BTPurchaseInfo::getPlanName() const
{
    return m_PlanName;
}

void BTPurchaseInfo::setPlanName(const utility::string_t& value)
{
    m_PlanName = value;
    m_PlanNameIsSet = true;
}

bool BTPurchaseInfo::planNameIsSet() const
{
    return m_PlanNameIsSet;
}

void BTPurchaseInfo::unsetPlanName()
{
    m_PlanNameIsSet = false;
}
int32_t BTPurchaseInfo::getPlanType() const
{
    return m_PlanType;
}

void BTPurchaseInfo::setPlanType(int32_t value)
{
    m_PlanType = value;
    m_PlanTypeIsSet = true;
}

bool BTPurchaseInfo::planTypeIsSet() const
{
    return m_PlanTypeIsSet;
}

void BTPurchaseInfo::unsetPlanType()
{
    m_PlanTypeIsSet = false;
}
std::vector<std::shared_ptr<ProratedCharges>>& BTPurchaseInfo::getProratedCharges()
{
    return m_ProratedCharges;
}

void BTPurchaseInfo::setProratedCharges(const std::vector<std::shared_ptr<ProratedCharges>>& value)
{
    m_ProratedCharges = value;
    m_ProratedChargesIsSet = true;
}

bool BTPurchaseInfo::proratedChargesIsSet() const
{
    return m_ProratedChargesIsSet;
}

void BTPurchaseInfo::unsetProratedCharges()
{
    m_ProratedChargesIsSet = false;
}
int64_t BTPurchaseInfo::getProratedTotal() const
{
    return m_ProratedTotal;
}

void BTPurchaseInfo::setProratedTotal(int64_t value)
{
    m_ProratedTotal = value;
    m_ProratedTotalIsSet = true;
}

bool BTPurchaseInfo::proratedTotalIsSet() const
{
    return m_ProratedTotalIsSet;
}

void BTPurchaseInfo::unsetProratedTotal()
{
    m_ProratedTotalIsSet = false;
}
utility::datetime BTPurchaseInfo::getPurchaseDate() const
{
    return m_PurchaseDate;
}

void BTPurchaseInfo::setPurchaseDate(const utility::datetime& value)
{
    m_PurchaseDate = value;
    m_PurchaseDateIsSet = true;
}

bool BTPurchaseInfo::purchaseDateIsSet() const
{
    return m_PurchaseDateIsSet;
}

void BTPurchaseInfo::unsetPurchaseDate()
{
    m_PurchaseDateIsSet = false;
}
utility::string_t BTPurchaseInfo::getResellerName() const
{
    return m_ResellerName;
}

void BTPurchaseInfo::setResellerName(const utility::string_t& value)
{
    m_ResellerName = value;
    m_ResellerNameIsSet = true;
}

bool BTPurchaseInfo::resellerNameIsSet() const
{
    return m_ResellerNameIsSet;
}

void BTPurchaseInfo::unsetResellerName()
{
    m_ResellerNameIsSet = false;
}
int64_t BTPurchaseInfo::getSeats() const
{
    return m_Seats;
}

void BTPurchaseInfo::setSeats(int64_t value)
{
    m_Seats = value;
    m_SeatsIsSet = true;
}

bool BTPurchaseInfo::seatsIsSet() const
{
    return m_SeatsIsSet;
}

void BTPurchaseInfo::unsetSeats()
{
    m_SeatsIsSet = false;
}
int32_t BTPurchaseInfo::getState() const
{
    return m_State;
}

void BTPurchaseInfo::setState(int32_t value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool BTPurchaseInfo::stateIsSet() const
{
    return m_StateIsSet;
}

void BTPurchaseInfo::unsetState()
{
    m_StateIsSet = false;
}
std::vector<std::shared_ptr<BTPlanSubscriberInfo>>& BTPurchaseInfo::getSubscribers()
{
    return m_Subscribers;
}

void BTPurchaseInfo::setSubscribers(const std::vector<std::shared_ptr<BTPlanSubscriberInfo>>& value)
{
    m_Subscribers = value;
    m_SubscribersIsSet = true;
}

bool BTPurchaseInfo::subscribersIsSet() const
{
    return m_SubscribersIsSet;
}

void BTPurchaseInfo::unsetSubscribers()
{
    m_SubscribersIsSet = false;
}
utility::datetime BTPurchaseInfo::getSubscriptionBeginAt() const
{
    return m_SubscriptionBeginAt;
}

void BTPurchaseInfo::setSubscriptionBeginAt(const utility::datetime& value)
{
    m_SubscriptionBeginAt = value;
    m_SubscriptionBeginAtIsSet = true;
}

bool BTPurchaseInfo::subscriptionBeginAtIsSet() const
{
    return m_SubscriptionBeginAtIsSet;
}

void BTPurchaseInfo::unsetSubscriptionBeginAt()
{
    m_SubscriptionBeginAtIsSet = false;
}
utility::datetime BTPurchaseInfo::getSubscriptionEndAt() const
{
    return m_SubscriptionEndAt;
}

void BTPurchaseInfo::setSubscriptionEndAt(const utility::datetime& value)
{
    m_SubscriptionEndAt = value;
    m_SubscriptionEndAtIsSet = true;
}

bool BTPurchaseInfo::subscriptionEndAtIsSet() const
{
    return m_SubscriptionEndAtIsSet;
}

void BTPurchaseInfo::unsetSubscriptionEndAt()
{
    m_SubscriptionEndAtIsSet = false;
}
std::shared_ptr<Subscription> BTPurchaseInfo::getSubscriptionFields() const
{
    return m_SubscriptionFields;
}

void BTPurchaseInfo::setSubscriptionFields(const std::shared_ptr<Subscription>& value)
{
    m_SubscriptionFields = value;
    m_SubscriptionFieldsIsSet = true;
}

bool BTPurchaseInfo::subscriptionFieldsIsSet() const
{
    return m_SubscriptionFieldsIsSet;
}

void BTPurchaseInfo::unsetSubscriptionFields()
{
    m_SubscriptionFieldsIsSet = false;
}
utility::string_t BTPurchaseInfo::getSubscriptionId() const
{
    return m_SubscriptionId;
}

void BTPurchaseInfo::setSubscriptionId(const utility::string_t& value)
{
    m_SubscriptionId = value;
    m_SubscriptionIdIsSet = true;
}

bool BTPurchaseInfo::subscriptionIdIsSet() const
{
    return m_SubscriptionIdIsSet;
}

void BTPurchaseInfo::unsetSubscriptionId()
{
    m_SubscriptionIdIsSet = false;
}
int32_t BTPurchaseInfo::getSubscriptionType() const
{
    return m_SubscriptionType;
}

void BTPurchaseInfo::setSubscriptionType(int32_t value)
{
    m_SubscriptionType = value;
    m_SubscriptionTypeIsSet = true;
}

bool BTPurchaseInfo::subscriptionTypeIsSet() const
{
    return m_SubscriptionTypeIsSet;
}

void BTPurchaseInfo::unsetSubscriptionType()
{
    m_SubscriptionTypeIsSet = false;
}
utility::datetime BTPurchaseInfo::getTrialEnd() const
{
    return m_TrialEnd;
}

void BTPurchaseInfo::setTrialEnd(const utility::datetime& value)
{
    m_TrialEnd = value;
    m_TrialEndIsSet = true;
}

bool BTPurchaseInfo::trialEndIsSet() const
{
    return m_TrialEndIsSet;
}

void BTPurchaseInfo::unsetTrialEnd()
{
    m_TrialEndIsSet = false;
}
utility::string_t BTPurchaseInfo::getTrialInitiatedBy() const
{
    return m_TrialInitiatedBy;
}

void BTPurchaseInfo::setTrialInitiatedBy(const utility::string_t& value)
{
    m_TrialInitiatedBy = value;
    m_TrialInitiatedByIsSet = true;
}

bool BTPurchaseInfo::trialInitiatedByIsSet() const
{
    return m_TrialInitiatedByIsSet;
}

void BTPurchaseInfo::unsetTrialInitiatedBy()
{
    m_TrialInitiatedByIsSet = false;
}
utility::string_t BTPurchaseInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTPurchaseInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTPurchaseInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTPurchaseInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


