/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Card.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Card::Card()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_AddressCity = utility::conversions::to_string_t("");
    m_AddressCityIsSet = false;
    m_AddressCountry = utility::conversions::to_string_t("");
    m_AddressCountryIsSet = false;
    m_AddressLine1 = utility::conversions::to_string_t("");
    m_AddressLine1IsSet = false;
    m_AddressLine1Check = utility::conversions::to_string_t("");
    m_AddressLine1CheckIsSet = false;
    m_AddressLine2 = utility::conversions::to_string_t("");
    m_AddressLine2IsSet = false;
    m_AddressState = utility::conversions::to_string_t("");
    m_AddressStateIsSet = false;
    m_AddressZip = utility::conversions::to_string_t("");
    m_AddressZipIsSet = false;
    m_AddressZipCheck = utility::conversions::to_string_t("");
    m_AddressZipCheckIsSet = false;
    m_AvailablePayoutMethodsIsSet = false;
    m_Brand = utility::conversions::to_string_t("");
    m_BrandIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Customer = utility::conversions::to_string_t("");
    m_CustomerIsSet = false;
    m_CvcCheck = utility::conversions::to_string_t("");
    m_CvcCheckIsSet = false;
    m_DefaultForCurrency = false;
    m_DefaultForCurrencyIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DynamicLast4 = utility::conversions::to_string_t("");
    m_DynamicLast4IsSet = false;
    m_ExpMonth = 0;
    m_ExpMonthIsSet = false;
    m_ExpYear = 0;
    m_ExpYearIsSet = false;
    m_Fingerprint = utility::conversions::to_string_t("");
    m_FingerprintIsSet = false;
    m_Funding = utility::conversions::to_string_t("");
    m_FundingIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Iin = utility::conversions::to_string_t("");
    m_IinIsSet = false;
    m_InstanceURL = utility::conversions::to_string_t("");
    m_InstanceURLIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_Last4 = utility::conversions::to_string_t("");
    m_Last4IsSet = false;
    m_MetadataIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Recipient = utility::conversions::to_string_t("");
    m_RecipientIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_ThreeDSecureIsSet = false;
    m_TokenizationMethod = utility::conversions::to_string_t("");
    m_TokenizationMethodIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

Card::~Card()
{
}

void Card::validate()
{
    // TODO: implement validation
}

web::json::value Card::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    }
    if(m_AddressCityIsSet)
    {
        val[utility::conversions::to_string_t("addressCity")] = ModelBase::toJson(m_AddressCity);
    }
    if(m_AddressCountryIsSet)
    {
        val[utility::conversions::to_string_t("addressCountry")] = ModelBase::toJson(m_AddressCountry);
    }
    if(m_AddressLine1IsSet)
    {
        val[utility::conversions::to_string_t("addressLine1")] = ModelBase::toJson(m_AddressLine1);
    }
    if(m_AddressLine1CheckIsSet)
    {
        val[utility::conversions::to_string_t("addressLine1Check")] = ModelBase::toJson(m_AddressLine1Check);
    }
    if(m_AddressLine2IsSet)
    {
        val[utility::conversions::to_string_t("addressLine2")] = ModelBase::toJson(m_AddressLine2);
    }
    if(m_AddressStateIsSet)
    {
        val[utility::conversions::to_string_t("addressState")] = ModelBase::toJson(m_AddressState);
    }
    if(m_AddressZipIsSet)
    {
        val[utility::conversions::to_string_t("addressZip")] = ModelBase::toJson(m_AddressZip);
    }
    if(m_AddressZipCheckIsSet)
    {
        val[utility::conversions::to_string_t("addressZipCheck")] = ModelBase::toJson(m_AddressZipCheck);
    }
    if(m_AvailablePayoutMethodsIsSet)
    {
        val[utility::conversions::to_string_t("availablePayoutMethods")] = ModelBase::toJson(m_AvailablePayoutMethods);
    }
    if(m_BrandIsSet)
    {
        val[utility::conversions::to_string_t("brand")] = ModelBase::toJson(m_Brand);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_CustomerIsSet)
    {
        val[utility::conversions::to_string_t("customer")] = ModelBase::toJson(m_Customer);
    }
    if(m_CvcCheckIsSet)
    {
        val[utility::conversions::to_string_t("cvcCheck")] = ModelBase::toJson(m_CvcCheck);
    }
    if(m_DefaultForCurrencyIsSet)
    {
        val[utility::conversions::to_string_t("defaultForCurrency")] = ModelBase::toJson(m_DefaultForCurrency);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DynamicLast4IsSet)
    {
        val[utility::conversions::to_string_t("dynamicLast4")] = ModelBase::toJson(m_DynamicLast4);
    }
    if(m_ExpMonthIsSet)
    {
        val[utility::conversions::to_string_t("expMonth")] = ModelBase::toJson(m_ExpMonth);
    }
    if(m_ExpYearIsSet)
    {
        val[utility::conversions::to_string_t("expYear")] = ModelBase::toJson(m_ExpYear);
    }
    if(m_FingerprintIsSet)
    {
        val[utility::conversions::to_string_t("fingerprint")] = ModelBase::toJson(m_Fingerprint);
    }
    if(m_FundingIsSet)
    {
        val[utility::conversions::to_string_t("funding")] = ModelBase::toJson(m_Funding);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IinIsSet)
    {
        val[utility::conversions::to_string_t("iin")] = ModelBase::toJson(m_Iin);
    }
    if(m_InstanceURLIsSet)
    {
        val[utility::conversions::to_string_t("instanceURL")] = ModelBase::toJson(m_InstanceURL);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t("issuer")] = ModelBase::toJson(m_Issuer);
    }
    if(m_Last4IsSet)
    {
        val[utility::conversions::to_string_t("last4")] = ModelBase::toJson(m_Last4);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t("metadata")] = ModelBase::toJson(m_Metadata);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_RecipientIsSet)
    {
        val[utility::conversions::to_string_t("recipient")] = ModelBase::toJson(m_Recipient);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_ThreeDSecureIsSet)
    {
        val[utility::conversions::to_string_t("threeDSecure")] = ModelBase::toJson(m_ThreeDSecure);
    }
    if(m_TokenizationMethodIsSet)
    {
        val[utility::conversions::to_string_t("tokenizationMethod")] = ModelBase::toJson(m_TokenizationMethod);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool Card::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("account")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("account"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_account;
            ok &= ModelBase::fromJson(fieldValue, refVal_account);
            setAccount(refVal_account);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressCity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressCity"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressCity);
            setAddressCity(refVal_addressCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressCountry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressCountry"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressCountry);
            setAddressCountry(refVal_addressCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressLine1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressLine1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressLine1;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressLine1);
            setAddressLine1(refVal_addressLine1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressLine1Check")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressLine1Check"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressLine1Check;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressLine1Check);
            setAddressLine1Check(refVal_addressLine1Check);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressLine2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressLine2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressLine2;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressLine2);
            setAddressLine2(refVal_addressLine2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressState"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressState;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressState);
            setAddressState(refVal_addressState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressZip")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressZip"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressZip;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressZip);
            setAddressZip(refVal_addressZip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addressZipCheck")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addressZipCheck"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_addressZipCheck;
            ok &= ModelBase::fromJson(fieldValue, refVal_addressZipCheck);
            setAddressZipCheck(refVal_addressZipCheck);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("availablePayoutMethods")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("availablePayoutMethods"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_availablePayoutMethods;
            ok &= ModelBase::fromJson(fieldValue, refVal_availablePayoutMethods);
            setAvailablePayoutMethods(refVal_availablePayoutMethods);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("brand")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("brand"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_brand;
            ok &= ModelBase::fromJson(fieldValue, refVal_brand);
            setBrand(refVal_brand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currency"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_currency);
            setCurrency(refVal_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customer;
            ok &= ModelBase::fromJson(fieldValue, refVal_customer);
            setCustomer(refVal_customer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cvcCheck")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cvcCheck"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cvcCheck;
            ok &= ModelBase::fromJson(fieldValue, refVal_cvcCheck);
            setCvcCheck(refVal_cvcCheck);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultForCurrency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultForCurrency"));
        if(!fieldValue.is_null())
        {
            bool refVal_defaultForCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultForCurrency);
            setDefaultForCurrency(refVal_defaultForCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dynamicLast4")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dynamicLast4"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dynamicLast4;
            ok &= ModelBase::fromJson(fieldValue, refVal_dynamicLast4);
            setDynamicLast4(refVal_dynamicLast4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expMonth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expMonth"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_expMonth;
            ok &= ModelBase::fromJson(fieldValue, refVal_expMonth);
            setExpMonth(refVal_expMonth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expYear")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expYear"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_expYear;
            ok &= ModelBase::fromJson(fieldValue, refVal_expYear);
            setExpYear(refVal_expYear);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fingerprint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fingerprint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fingerprint;
            ok &= ModelBase::fromJson(fieldValue, refVal_fingerprint);
            setFingerprint(refVal_fingerprint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("funding")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("funding"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_funding;
            ok &= ModelBase::fromJson(fieldValue, refVal_funding);
            setFunding(refVal_funding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iin;
            ok &= ModelBase::fromJson(fieldValue, refVal_iin);
            setIin(refVal_iin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instanceURL")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instanceURL"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_instanceURL;
            ok &= ModelBase::fromJson(fieldValue, refVal_instanceURL);
            setInstanceURL(refVal_instanceURL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("issuer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("issuer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuer);
            setIssuer(refVal_issuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last4")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("last4"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_last4;
            ok &= ModelBase::fromJson(fieldValue, refVal_last4);
            setLast4(refVal_last4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadata")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadata"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_metadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadata);
            setMetadata(refVal_metadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recipient"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_recipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_recipient);
            setRecipient(refVal_recipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("threeDSecure")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("threeDSecure"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ThreeDSecure> refVal_threeDSecure;
            ok &= ModelBase::fromJson(fieldValue, refVal_threeDSecure);
            setThreeDSecure(refVal_threeDSecure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenizationMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tokenizationMethod"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tokenizationMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_tokenizationMethod);
            setTokenizationMethod(refVal_tokenizationMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void Card::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    }
    if(m_AddressCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressCity"), m_AddressCity));
    }
    if(m_AddressCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressCountry"), m_AddressCountry));
    }
    if(m_AddressLine1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressLine1"), m_AddressLine1));
    }
    if(m_AddressLine1CheckIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressLine1Check"), m_AddressLine1Check));
    }
    if(m_AddressLine2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressLine2"), m_AddressLine2));
    }
    if(m_AddressStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressState"), m_AddressState));
    }
    if(m_AddressZipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressZip"), m_AddressZip));
    }
    if(m_AddressZipCheckIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addressZipCheck"), m_AddressZipCheck));
    }
    if(m_AvailablePayoutMethodsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("availablePayoutMethods"), m_AvailablePayoutMethods));
    }
    if(m_BrandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("brand"), m_Brand));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customer"), m_Customer));
    }
    if(m_CvcCheckIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cvcCheck"), m_CvcCheck));
    }
    if(m_DefaultForCurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultForCurrency"), m_DefaultForCurrency));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DynamicLast4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dynamicLast4"), m_DynamicLast4));
    }
    if(m_ExpMonthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expMonth"), m_ExpMonth));
    }
    if(m_ExpYearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expYear"), m_ExpYear));
    }
    if(m_FingerprintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fingerprint"), m_Fingerprint));
    }
    if(m_FundingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("funding"), m_Funding));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iin"), m_Iin));
    }
    if(m_InstanceURLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instanceURL"), m_InstanceURL));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("issuer"), m_Issuer));
    }
    if(m_Last4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last4"), m_Last4));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadata"), m_Metadata));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_RecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipient"), m_Recipient));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_ThreeDSecureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("threeDSecure"), m_ThreeDSecure));
    }
    if(m_TokenizationMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tokenizationMethod"), m_TokenizationMethod));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool Card::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("account")))
    {
        utility::string_t refVal_account;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("account")), refVal_account );
        setAccount(refVal_account);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressCity")))
    {
        utility::string_t refVal_addressCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressCity")), refVal_addressCity );
        setAddressCity(refVal_addressCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressCountry")))
    {
        utility::string_t refVal_addressCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressCountry")), refVal_addressCountry );
        setAddressCountry(refVal_addressCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressLine1")))
    {
        utility::string_t refVal_addressLine1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressLine1")), refVal_addressLine1 );
        setAddressLine1(refVal_addressLine1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressLine1Check")))
    {
        utility::string_t refVal_addressLine1Check;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressLine1Check")), refVal_addressLine1Check );
        setAddressLine1Check(refVal_addressLine1Check);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressLine2")))
    {
        utility::string_t refVal_addressLine2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressLine2")), refVal_addressLine2 );
        setAddressLine2(refVal_addressLine2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressState")))
    {
        utility::string_t refVal_addressState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressState")), refVal_addressState );
        setAddressState(refVal_addressState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressZip")))
    {
        utility::string_t refVal_addressZip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressZip")), refVal_addressZip );
        setAddressZip(refVal_addressZip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addressZipCheck")))
    {
        utility::string_t refVal_addressZipCheck;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addressZipCheck")), refVal_addressZipCheck );
        setAddressZipCheck(refVal_addressZipCheck);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("availablePayoutMethods")))
    {
        std::vector<utility::string_t> refVal_availablePayoutMethods;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("availablePayoutMethods")), refVal_availablePayoutMethods );
        setAvailablePayoutMethods(refVal_availablePayoutMethods);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("brand")))
    {
        utility::string_t refVal_brand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("brand")), refVal_brand );
        setBrand(refVal_brand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("country")), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        utility::string_t refVal_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency")), refVal_currency );
        setCurrency(refVal_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customer")))
    {
        utility::string_t refVal_customer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customer")), refVal_customer );
        setCustomer(refVal_customer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cvcCheck")))
    {
        utility::string_t refVal_cvcCheck;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cvcCheck")), refVal_cvcCheck );
        setCvcCheck(refVal_cvcCheck);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultForCurrency")))
    {
        bool refVal_defaultForCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultForCurrency")), refVal_defaultForCurrency );
        setDefaultForCurrency(refVal_defaultForCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dynamicLast4")))
    {
        utility::string_t refVal_dynamicLast4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dynamicLast4")), refVal_dynamicLast4 );
        setDynamicLast4(refVal_dynamicLast4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expMonth")))
    {
        int32_t refVal_expMonth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expMonth")), refVal_expMonth );
        setExpMonth(refVal_expMonth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expYear")))
    {
        int32_t refVal_expYear;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expYear")), refVal_expYear );
        setExpYear(refVal_expYear);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fingerprint")))
    {
        utility::string_t refVal_fingerprint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fingerprint")), refVal_fingerprint );
        setFingerprint(refVal_fingerprint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("funding")))
    {
        utility::string_t refVal_funding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("funding")), refVal_funding );
        setFunding(refVal_funding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iin")))
    {
        utility::string_t refVal_iin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iin")), refVal_iin );
        setIin(refVal_iin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instanceURL")))
    {
        utility::string_t refVal_instanceURL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instanceURL")), refVal_instanceURL );
        setInstanceURL(refVal_instanceURL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("issuer")))
    {
        utility::string_t refVal_issuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("issuer")), refVal_issuer );
        setIssuer(refVal_issuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last4")))
    {
        utility::string_t refVal_last4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("last4")), refVal_last4 );
        setLast4(refVal_last4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
    {
        std::map<utility::string_t, utility::string_t> refVal_metadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadata")), refVal_metadata );
        setMetadata(refVal_metadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recipient")))
    {
        utility::string_t refVal_recipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipient")), refVal_recipient );
        setRecipient(refVal_recipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("threeDSecure")))
    {
        std::shared_ptr<ThreeDSecure> refVal_threeDSecure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("threeDSecure")), refVal_threeDSecure );
        setThreeDSecure(refVal_threeDSecure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenizationMethod")))
    {
        utility::string_t refVal_tokenizationMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tokenizationMethod")), refVal_tokenizationMethod );
        setTokenizationMethod(refVal_tokenizationMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

utility::string_t Card::getAccount() const
{
    return m_Account;
}

void Card::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool Card::accountIsSet() const
{
    return m_AccountIsSet;
}

void Card::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t Card::getAddressCity() const
{
    return m_AddressCity;
}

void Card::setAddressCity(const utility::string_t& value)
{
    m_AddressCity = value;
    m_AddressCityIsSet = true;
}

bool Card::addressCityIsSet() const
{
    return m_AddressCityIsSet;
}

void Card::unsetAddressCity()
{
    m_AddressCityIsSet = false;
}
utility::string_t Card::getAddressCountry() const
{
    return m_AddressCountry;
}

void Card::setAddressCountry(const utility::string_t& value)
{
    m_AddressCountry = value;
    m_AddressCountryIsSet = true;
}

bool Card::addressCountryIsSet() const
{
    return m_AddressCountryIsSet;
}

void Card::unsetAddressCountry()
{
    m_AddressCountryIsSet = false;
}
utility::string_t Card::getAddressLine1() const
{
    return m_AddressLine1;
}

void Card::setAddressLine1(const utility::string_t& value)
{
    m_AddressLine1 = value;
    m_AddressLine1IsSet = true;
}

bool Card::addressLine1IsSet() const
{
    return m_AddressLine1IsSet;
}

void Card::unsetAddressLine1()
{
    m_AddressLine1IsSet = false;
}
utility::string_t Card::getAddressLine1Check() const
{
    return m_AddressLine1Check;
}

void Card::setAddressLine1Check(const utility::string_t& value)
{
    m_AddressLine1Check = value;
    m_AddressLine1CheckIsSet = true;
}

bool Card::addressLine1CheckIsSet() const
{
    return m_AddressLine1CheckIsSet;
}

void Card::unsetAddressLine1Check()
{
    m_AddressLine1CheckIsSet = false;
}
utility::string_t Card::getAddressLine2() const
{
    return m_AddressLine2;
}

void Card::setAddressLine2(const utility::string_t& value)
{
    m_AddressLine2 = value;
    m_AddressLine2IsSet = true;
}

bool Card::addressLine2IsSet() const
{
    return m_AddressLine2IsSet;
}

void Card::unsetAddressLine2()
{
    m_AddressLine2IsSet = false;
}
utility::string_t Card::getAddressState() const
{
    return m_AddressState;
}

void Card::setAddressState(const utility::string_t& value)
{
    m_AddressState = value;
    m_AddressStateIsSet = true;
}

bool Card::addressStateIsSet() const
{
    return m_AddressStateIsSet;
}

void Card::unsetAddressState()
{
    m_AddressStateIsSet = false;
}
utility::string_t Card::getAddressZip() const
{
    return m_AddressZip;
}

void Card::setAddressZip(const utility::string_t& value)
{
    m_AddressZip = value;
    m_AddressZipIsSet = true;
}

bool Card::addressZipIsSet() const
{
    return m_AddressZipIsSet;
}

void Card::unsetAddressZip()
{
    m_AddressZipIsSet = false;
}
utility::string_t Card::getAddressZipCheck() const
{
    return m_AddressZipCheck;
}

void Card::setAddressZipCheck(const utility::string_t& value)
{
    m_AddressZipCheck = value;
    m_AddressZipCheckIsSet = true;
}

bool Card::addressZipCheckIsSet() const
{
    return m_AddressZipCheckIsSet;
}

void Card::unsetAddressZipCheck()
{
    m_AddressZipCheckIsSet = false;
}
std::vector<utility::string_t>& Card::getAvailablePayoutMethods()
{
    return m_AvailablePayoutMethods;
}

void Card::setAvailablePayoutMethods(const std::vector<utility::string_t>& value)
{
    m_AvailablePayoutMethods = value;
    m_AvailablePayoutMethodsIsSet = true;
}

bool Card::availablePayoutMethodsIsSet() const
{
    return m_AvailablePayoutMethodsIsSet;
}

void Card::unsetAvailablePayoutMethods()
{
    m_AvailablePayoutMethodsIsSet = false;
}
utility::string_t Card::getBrand() const
{
    return m_Brand;
}

void Card::setBrand(const utility::string_t& value)
{
    m_Brand = value;
    m_BrandIsSet = true;
}

bool Card::brandIsSet() const
{
    return m_BrandIsSet;
}

void Card::unsetBrand()
{
    m_BrandIsSet = false;
}
utility::string_t Card::getCountry() const
{
    return m_Country;
}

void Card::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool Card::countryIsSet() const
{
    return m_CountryIsSet;
}

void Card::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t Card::getCurrency() const
{
    return m_Currency;
}

void Card::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool Card::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Card::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t Card::getCustomer() const
{
    return m_Customer;
}

void Card::setCustomer(const utility::string_t& value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}

bool Card::customerIsSet() const
{
    return m_CustomerIsSet;
}

void Card::unsetCustomer()
{
    m_CustomerIsSet = false;
}
utility::string_t Card::getCvcCheck() const
{
    return m_CvcCheck;
}

void Card::setCvcCheck(const utility::string_t& value)
{
    m_CvcCheck = value;
    m_CvcCheckIsSet = true;
}

bool Card::cvcCheckIsSet() const
{
    return m_CvcCheckIsSet;
}

void Card::unsetCvcCheck()
{
    m_CvcCheckIsSet = false;
}
bool Card::isDefaultForCurrency() const
{
    return m_DefaultForCurrency;
}

void Card::setDefaultForCurrency(bool value)
{
    m_DefaultForCurrency = value;
    m_DefaultForCurrencyIsSet = true;
}

bool Card::defaultForCurrencyIsSet() const
{
    return m_DefaultForCurrencyIsSet;
}

void Card::unsetDefaultForCurrency()
{
    m_DefaultForCurrencyIsSet = false;
}
utility::string_t Card::getDescription() const
{
    return m_Description;
}

void Card::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Card::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Card::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Card::getDynamicLast4() const
{
    return m_DynamicLast4;
}

void Card::setDynamicLast4(const utility::string_t& value)
{
    m_DynamicLast4 = value;
    m_DynamicLast4IsSet = true;
}

bool Card::dynamicLast4IsSet() const
{
    return m_DynamicLast4IsSet;
}

void Card::unsetDynamicLast4()
{
    m_DynamicLast4IsSet = false;
}
int32_t Card::getExpMonth() const
{
    return m_ExpMonth;
}

void Card::setExpMonth(int32_t value)
{
    m_ExpMonth = value;
    m_ExpMonthIsSet = true;
}

bool Card::expMonthIsSet() const
{
    return m_ExpMonthIsSet;
}

void Card::unsetExpMonth()
{
    m_ExpMonthIsSet = false;
}
int32_t Card::getExpYear() const
{
    return m_ExpYear;
}

void Card::setExpYear(int32_t value)
{
    m_ExpYear = value;
    m_ExpYearIsSet = true;
}

bool Card::expYearIsSet() const
{
    return m_ExpYearIsSet;
}

void Card::unsetExpYear()
{
    m_ExpYearIsSet = false;
}
utility::string_t Card::getFingerprint() const
{
    return m_Fingerprint;
}

void Card::setFingerprint(const utility::string_t& value)
{
    m_Fingerprint = value;
    m_FingerprintIsSet = true;
}

bool Card::fingerprintIsSet() const
{
    return m_FingerprintIsSet;
}

void Card::unsetFingerprint()
{
    m_FingerprintIsSet = false;
}
utility::string_t Card::getFunding() const
{
    return m_Funding;
}

void Card::setFunding(const utility::string_t& value)
{
    m_Funding = value;
    m_FundingIsSet = true;
}

bool Card::fundingIsSet() const
{
    return m_FundingIsSet;
}

void Card::unsetFunding()
{
    m_FundingIsSet = false;
}
utility::string_t Card::getId() const
{
    return m_Id;
}

void Card::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Card::idIsSet() const
{
    return m_IdIsSet;
}

void Card::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Card::getIin() const
{
    return m_Iin;
}

void Card::setIin(const utility::string_t& value)
{
    m_Iin = value;
    m_IinIsSet = true;
}

bool Card::iinIsSet() const
{
    return m_IinIsSet;
}

void Card::unsetIin()
{
    m_IinIsSet = false;
}
utility::string_t Card::getInstanceURL() const
{
    return m_InstanceURL;
}

void Card::setInstanceURL(const utility::string_t& value)
{
    m_InstanceURL = value;
    m_InstanceURLIsSet = true;
}

bool Card::instanceURLIsSet() const
{
    return m_InstanceURLIsSet;
}

void Card::unsetInstanceURL()
{
    m_InstanceURLIsSet = false;
}
utility::string_t Card::getIssuer() const
{
    return m_Issuer;
}

void Card::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool Card::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void Card::unsetIssuer()
{
    m_IssuerIsSet = false;
}
utility::string_t Card::getLast4() const
{
    return m_Last4;
}

void Card::setLast4(const utility::string_t& value)
{
    m_Last4 = value;
    m_Last4IsSet = true;
}

bool Card::last4IsSet() const
{
    return m_Last4IsSet;
}

void Card::unsetLast4()
{
    m_Last4IsSet = false;
}
std::map<utility::string_t, utility::string_t>& Card::getMetadata()
{
    return m_Metadata;
}

void Card::setMetadata(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool Card::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void Card::unsetMetadata()
{
    m_MetadataIsSet = false;
}
utility::string_t Card::getName() const
{
    return m_Name;
}

void Card::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Card::nameIsSet() const
{
    return m_NameIsSet;
}

void Card::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Card::getObject() const
{
    return m_object;
}

void Card::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool Card::objectIsSet() const
{
    return m_objectIsSet;
}

void Card::unsetobject()
{
    m_objectIsSet = false;
}
utility::string_t Card::getRecipient() const
{
    return m_Recipient;
}

void Card::setRecipient(const utility::string_t& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}

bool Card::recipientIsSet() const
{
    return m_RecipientIsSet;
}

void Card::unsetRecipient()
{
    m_RecipientIsSet = false;
}
utility::string_t Card::getStatus() const
{
    return m_Status;
}

void Card::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Card::statusIsSet() const
{
    return m_StatusIsSet;
}

void Card::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<ThreeDSecure> Card::getThreeDSecure() const
{
    return m_ThreeDSecure;
}

void Card::setThreeDSecure(const std::shared_ptr<ThreeDSecure>& value)
{
    m_ThreeDSecure = value;
    m_ThreeDSecureIsSet = true;
}

bool Card::threeDSecureIsSet() const
{
    return m_ThreeDSecureIsSet;
}

void Card::unsetThreeDSecure()
{
    m_ThreeDSecureIsSet = false;
}
utility::string_t Card::getTokenizationMethod() const
{
    return m_TokenizationMethod;
}

void Card::setTokenizationMethod(const utility::string_t& value)
{
    m_TokenizationMethod = value;
    m_TokenizationMethodIsSet = true;
}

bool Card::tokenizationMethodIsSet() const
{
    return m_TokenizationMethodIsSet;
}

void Card::unsetTokenizationMethod()
{
    m_TokenizationMethodIsSet = false;
}
utility::string_t Card::getType() const
{
    return m_Type;
}

void Card::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Card::typeIsSet() const
{
    return m_TypeIsSet;
}

void Card::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


