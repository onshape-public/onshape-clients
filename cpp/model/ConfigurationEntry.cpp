/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ConfigurationEntry.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ConfigurationEntry::ConfigurationEntry()
{
    m_ParameterId = utility::conversions::to_string_t("");
    m_ParameterIdIsSet = false;
    m_ParameterValue = utility::conversions::to_string_t("");
    m_ParameterValueIsSet = false;
}

ConfigurationEntry::~ConfigurationEntry()
{
}

void ConfigurationEntry::validate()
{
    // TODO: implement validation
}

web::json::value ConfigurationEntry::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("parameterId")] = ModelBase::toJson(m_ParameterId);
    }
    if(m_ParameterValueIsSet)
    {
        val[utility::conversions::to_string_t("parameterValue")] = ModelBase::toJson(m_ParameterValue);
    }

    return val;
}

bool ConfigurationEntry::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("parameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterId);
            setParameterId(refVal_parameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterValue);
            setParameterValue(refVal_parameterValue);
        }
    }
    return ok;
}

void ConfigurationEntry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterValue"), m_ParameterValue));
    }
}

bool ConfigurationEntry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterValue")))
    {
        utility::string_t refVal_parameterValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterValue")), refVal_parameterValue );
        setParameterValue(refVal_parameterValue);
    }
    return ok;
}

utility::string_t ConfigurationEntry::getParameterId() const
{
    return m_ParameterId;
}

void ConfigurationEntry::setParameterId(const utility::string_t& value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}

bool ConfigurationEntry::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}

void ConfigurationEntry::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
utility::string_t ConfigurationEntry::getParameterValue() const
{
    return m_ParameterValue;
}

void ConfigurationEntry::setParameterValue(const utility::string_t& value)
{
    m_ParameterValue = value;
    m_ParameterValueIsSet = true;
}

bool ConfigurationEntry::parameterValueIsSet() const
{
    return m_ParameterValueIsSet;
}

void ConfigurationEntry::unsetParameterValue()
{
    m_ParameterValueIsSet = false;
}
}
}
}
}


