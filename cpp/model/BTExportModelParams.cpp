/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelParams::BTExportModelParams()
{
    m_AngleTolerance = 0.0;
    m_AngleToleranceIsSet = false;
    m_BatchFlatPatterns = false;
    m_BatchFlatPatternsIsSet = false;
    m_ChordTolerance = 0.0;
    m_ChordToleranceIsSet = false;
    m_CloudObjectId = utility::conversions::to_string_t("");
    m_CloudObjectIdIsSet = false;
    m_CloudStorageAccountId = utility::conversions::to_string_t("");
    m_CloudStorageAccountIdIsSet = false;
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_DeepSearchForForeignData = false;
    m_DeepSearchForForeignDataIsSet = false;
    m_DestinationName = utility::conversions::to_string_t("");
    m_DestinationNameIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentVersionId = utility::conversions::to_string_t("");
    m_DocumentVersionIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementIds = utility::conversions::to_string_t("");
    m_ElementIdsIsSet = false;
    m_EmailLink = false;
    m_EmailLinkIsSet = false;
    m_EmailMessage = utility::conversions::to_string_t("");
    m_EmailMessageIsSet = false;
    m_EmailSubject = utility::conversions::to_string_t("");
    m_EmailSubjectIsSet = false;
    m_EmailTo = utility::conversions::to_string_t("");
    m_EmailToIsSet = false;
    m_ExtractToS3 = false;
    m_ExtractToS3IsSet = false;
    m_FeatureIds = utility::conversions::to_string_t("");
    m_FeatureIdsIsSet = false;
    m_Flatten = false;
    m_FlattenIsSet = false;
    m_Format = utility::conversions::to_string_t("");
    m_FormatIsSet = false;
    m_FromUserId = utility::conversions::to_string_t("");
    m_FromUserIdIsSet = false;
    m_Grouping = utility::conversions::to_string_t("");
    m_GroupingIsSet = false;
    m_IncludeBendCenterlines = false;
    m_IncludeBendCenterlinesIsSet = false;
    m_IncludeBendLines = false;
    m_IncludeBendLinesIsSet = false;
    m_IncludeCustomProperties = false;
    m_IncludeCustomPropertiesIsSet = false;
    m_IncludeCustomPropertiesData = false;
    m_IncludeCustomPropertiesDataIsSet = false;
    m_IncludeExportIds = false;
    m_IncludeExportIdsIsSet = false;
    m_IncludeForeignData = false;
    m_IncludeForeignDataIsSet = false;
    m_IncludeItemsData = false;
    m_IncludeItemsDataIsSet = false;
    m_IncludeLinkedDocuments = false;
    m_IncludeLinkedDocumentsIsSet = false;
    m_IncludeReleaseManagementData = false;
    m_IncludeReleaseManagementDataIsSet = false;
    m_IncludeSketches = false;
    m_IncludeSketchesIsSet = false;
    m_IncludeStd = false;
    m_IncludeStdIsSet = false;
    m_IsPartingOut = false;
    m_IsPartingOutIsSet = false;
    m_LinkDocumentId = utility::conversions::to_string_t("");
    m_LinkDocumentIdIsSet = false;
    m_LinkDocumentWorkspaceId = utility::conversions::to_string_t("");
    m_LinkDocumentWorkspaceIdIsSet = false;
    m_MaxFacetWidth = 0.0;
    m_MaxFacetWidthIsSet = false;
    m_Microversion = utility::conversions::to_string_t("");
    m_MicroversionIsSet = false;
    m_MinFacetWidth = 0.0;
    m_MinFacetWidthIsSet = false;
    m_Mode = utility::conversions::to_string_t("");
    m_ModeIsSet = false;
    m_PartIds = utility::conversions::to_string_t("");
    m_PartIdsIsSet = false;
    m_PartQuery = utility::conversions::to_string_t("");
    m_PartQueryIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_PasswordRequired = false;
    m_PasswordRequiredIsSet = false;
    m_Resolution = utility::conversions::to_string_t("");
    m_ResolutionIsSet = false;
    m_Scale = 0.0;
    m_ScaleIsSet = false;
    m_SendCopyToMe = false;
    m_SendCopyToMeIsSet = false;
    m_SheetMetalFlat = false;
    m_SheetMetalFlatIsSet = false;
    m_SplinesAsPolylines = false;
    m_SplinesAsPolylinesIsSet = false;
    m_StoreInDocument = false;
    m_StoreInDocumentIsSet = false;
    m_TriggerAutoDownload = false;
    m_TriggerAutoDownloadIsSet = false;
    m_Units = utility::conversions::to_string_t("");
    m_UnitsIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_ValidForDays = 0;
    m_ValidForDaysIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_View = utility::conversions::to_string_t("");
    m_ViewIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
    m_ZipSingleFileOutput = false;
    m_ZipSingleFileOutputIsSet = false;
}

BTExportModelParams::~BTExportModelParams()
{
}

void BTExportModelParams::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AngleToleranceIsSet)
    {
        val[utility::conversions::to_string_t("angleTolerance")] = ModelBase::toJson(m_AngleTolerance);
    }
    if(m_BatchFlatPatternsIsSet)
    {
        val[utility::conversions::to_string_t("batchFlatPatterns")] = ModelBase::toJson(m_BatchFlatPatterns);
    }
    if(m_ChordToleranceIsSet)
    {
        val[utility::conversions::to_string_t("chordTolerance")] = ModelBase::toJson(m_ChordTolerance);
    }
    if(m_CloudObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudObjectId")] = ModelBase::toJson(m_CloudObjectId);
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageAccountId")] = ModelBase::toJson(m_CloudStorageAccountId);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_DeepSearchForForeignDataIsSet)
    {
        val[utility::conversions::to_string_t("deepSearchForForeignData")] = ModelBase::toJson(m_DeepSearchForForeignData);
    }
    if(m_DestinationNameIsSet)
    {
        val[utility::conversions::to_string_t("destinationName")] = ModelBase::toJson(m_DestinationName);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("documentVersionId")] = ModelBase::toJson(m_DocumentVersionId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementIdsIsSet)
    {
        val[utility::conversions::to_string_t("elementIds")] = ModelBase::toJson(m_ElementIds);
    }
    if(m_EmailLinkIsSet)
    {
        val[utility::conversions::to_string_t("emailLink")] = ModelBase::toJson(m_EmailLink);
    }
    if(m_EmailMessageIsSet)
    {
        val[utility::conversions::to_string_t("emailMessage")] = ModelBase::toJson(m_EmailMessage);
    }
    if(m_EmailSubjectIsSet)
    {
        val[utility::conversions::to_string_t("emailSubject")] = ModelBase::toJson(m_EmailSubject);
    }
    if(m_EmailToIsSet)
    {
        val[utility::conversions::to_string_t("emailTo")] = ModelBase::toJson(m_EmailTo);
    }
    if(m_ExtractToS3IsSet)
    {
        val[utility::conversions::to_string_t("extractToS3")] = ModelBase::toJson(m_ExtractToS3);
    }
    if(m_FeatureIdsIsSet)
    {
        val[utility::conversions::to_string_t("featureIds")] = ModelBase::toJson(m_FeatureIds);
    }
    if(m_FlattenIsSet)
    {
        val[utility::conversions::to_string_t("flatten")] = ModelBase::toJson(m_Flatten);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_Format);
    }
    if(m_FromUserIdIsSet)
    {
        val[utility::conversions::to_string_t("fromUserId")] = ModelBase::toJson(m_FromUserId);
    }
    if(m_GroupingIsSet)
    {
        val[utility::conversions::to_string_t("grouping")] = ModelBase::toJson(m_Grouping);
    }
    if(m_IncludeBendCenterlinesIsSet)
    {
        val[utility::conversions::to_string_t("includeBendCenterlines")] = ModelBase::toJson(m_IncludeBendCenterlines);
    }
    if(m_IncludeBendLinesIsSet)
    {
        val[utility::conversions::to_string_t("includeBendLines")] = ModelBase::toJson(m_IncludeBendLines);
    }
    if(m_IncludeCustomPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("includeCustomProperties")] = ModelBase::toJson(m_IncludeCustomProperties);
    }
    if(m_IncludeCustomPropertiesDataIsSet)
    {
        val[utility::conversions::to_string_t("includeCustomPropertiesData")] = ModelBase::toJson(m_IncludeCustomPropertiesData);
    }
    if(m_IncludeExportIdsIsSet)
    {
        val[utility::conversions::to_string_t("includeExportIds")] = ModelBase::toJson(m_IncludeExportIds);
    }
    if(m_IncludeForeignDataIsSet)
    {
        val[utility::conversions::to_string_t("includeForeignData")] = ModelBase::toJson(m_IncludeForeignData);
    }
    if(m_IncludeItemsDataIsSet)
    {
        val[utility::conversions::to_string_t("includeItemsData")] = ModelBase::toJson(m_IncludeItemsData);
    }
    if(m_IncludeLinkedDocumentsIsSet)
    {
        val[utility::conversions::to_string_t("includeLinkedDocuments")] = ModelBase::toJson(m_IncludeLinkedDocuments);
    }
    if(m_IncludeReleaseManagementDataIsSet)
    {
        val[utility::conversions::to_string_t("includeReleaseManagementData")] = ModelBase::toJson(m_IncludeReleaseManagementData);
    }
    if(m_IncludeSketchesIsSet)
    {
        val[utility::conversions::to_string_t("includeSketches")] = ModelBase::toJson(m_IncludeSketches);
    }
    if(m_IncludeStdIsSet)
    {
        val[utility::conversions::to_string_t("includeStd")] = ModelBase::toJson(m_IncludeStd);
    }
    if(m_IsPartingOutIsSet)
    {
        val[utility::conversions::to_string_t("isPartingOut")] = ModelBase::toJson(m_IsPartingOut);
    }
    if(m_LinkDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("linkDocumentId")] = ModelBase::toJson(m_LinkDocumentId);
    }
    if(m_LinkDocumentWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("linkDocumentWorkspaceId")] = ModelBase::toJson(m_LinkDocumentWorkspaceId);
    }
    if(m_MaxFacetWidthIsSet)
    {
        val[utility::conversions::to_string_t("maxFacetWidth")] = ModelBase::toJson(m_MaxFacetWidth);
    }
    if(m_MicroversionIsSet)
    {
        val[utility::conversions::to_string_t("microversion")] = ModelBase::toJson(m_Microversion);
    }
    if(m_MinFacetWidthIsSet)
    {
        val[utility::conversions::to_string_t("minFacetWidth")] = ModelBase::toJson(m_MinFacetWidth);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t("mode")] = ModelBase::toJson(m_Mode);
    }
    if(m_PartIdsIsSet)
    {
        val[utility::conversions::to_string_t("partIds")] = ModelBase::toJson(m_PartIds);
    }
    if(m_PartQueryIsSet)
    {
        val[utility::conversions::to_string_t("partQuery")] = ModelBase::toJson(m_PartQuery);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_PasswordRequiredIsSet)
    {
        val[utility::conversions::to_string_t("passwordRequired")] = ModelBase::toJson(m_PasswordRequired);
    }
    if(m_ResolutionIsSet)
    {
        val[utility::conversions::to_string_t("resolution")] = ModelBase::toJson(m_Resolution);
    }
    if(m_ScaleIsSet)
    {
        val[utility::conversions::to_string_t("scale")] = ModelBase::toJson(m_Scale);
    }
    if(m_SendCopyToMeIsSet)
    {
        val[utility::conversions::to_string_t("sendCopyToMe")] = ModelBase::toJson(m_SendCopyToMe);
    }
    if(m_SheetMetalFlatIsSet)
    {
        val[utility::conversions::to_string_t("sheetMetalFlat")] = ModelBase::toJson(m_SheetMetalFlat);
    }
    if(m_SplinesAsPolylinesIsSet)
    {
        val[utility::conversions::to_string_t("splinesAsPolylines")] = ModelBase::toJson(m_SplinesAsPolylines);
    }
    if(m_StoreInDocumentIsSet)
    {
        val[utility::conversions::to_string_t("storeInDocument")] = ModelBase::toJson(m_StoreInDocument);
    }
    if(m_TriggerAutoDownloadIsSet)
    {
        val[utility::conversions::to_string_t("triggerAutoDownload")] = ModelBase::toJson(m_TriggerAutoDownload);
    }
    if(m_UnitsIsSet)
    {
        val[utility::conversions::to_string_t("units")] = ModelBase::toJson(m_Units);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_ValidForDaysIsSet)
    {
        val[utility::conversions::to_string_t("validForDays")] = ModelBase::toJson(m_ValidForDays);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_ViewIsSet)
    {
        val[utility::conversions::to_string_t("view")] = ModelBase::toJson(m_View);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }
    if(m_ZipSingleFileOutputIsSet)
    {
        val[utility::conversions::to_string_t("zipSingleFileOutput")] = ModelBase::toJson(m_ZipSingleFileOutput);
    }

    return val;
}

bool BTExportModelParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("angleTolerance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("angleTolerance"));
        if(!fieldValue.is_null())
        {
            double refVal_angleTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_angleTolerance);
            setAngleTolerance(refVal_angleTolerance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("batchFlatPatterns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("batchFlatPatterns"));
        if(!fieldValue.is_null())
        {
            bool refVal_batchFlatPatterns;
            ok &= ModelBase::fromJson(fieldValue, refVal_batchFlatPatterns);
            setBatchFlatPatterns(refVal_batchFlatPatterns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("chordTolerance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("chordTolerance"));
        if(!fieldValue.is_null())
        {
            double refVal_chordTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_chordTolerance);
            setChordTolerance(refVal_chordTolerance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudObjectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudObjectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudObjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudObjectId);
            setCloudObjectId(refVal_cloudObjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageAccountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageAccountId);
            setCloudStorageAccountId(refVal_cloudStorageAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deepSearchForForeignData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deepSearchForForeignData"));
        if(!fieldValue.is_null())
        {
            bool refVal_deepSearchForForeignData;
            ok &= ModelBase::fromJson(fieldValue, refVal_deepSearchForForeignData);
            setDeepSearchForForeignData(refVal_deepSearchForForeignData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("destinationName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("destinationName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_destinationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_destinationName);
            setDestinationName(refVal_destinationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentVersionId);
            setDocumentVersionId(refVal_documentVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementIds"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementIds);
            setElementIds(refVal_elementIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailLink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailLink"));
        if(!fieldValue.is_null())
        {
            bool refVal_emailLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailLink);
            setEmailLink(refVal_emailLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailMessage);
            setEmailMessage(refVal_emailMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailSubject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailSubject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailSubject);
            setEmailSubject(refVal_emailSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailTo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailTo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailTo);
            setEmailTo(refVal_emailTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extractToS3")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("extractToS3"));
        if(!fieldValue.is_null())
        {
            bool refVal_extractToS3;
            ok &= ModelBase::fromJson(fieldValue, refVal_extractToS3);
            setExtractToS3(refVal_extractToS3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureIds"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureIds);
            setFeatureIds(refVal_featureIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flatten")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("flatten"));
        if(!fieldValue.is_null())
        {
            bool refVal_flatten;
            ok &= ModelBase::fromJson(fieldValue, refVal_flatten);
            setFlatten(refVal_flatten);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("format"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_format;
            ok &= ModelBase::fromJson(fieldValue, refVal_format);
            setFormat(refVal_format);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromUserId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromUserId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fromUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromUserId);
            setFromUserId(refVal_fromUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("grouping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("grouping"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_grouping;
            ok &= ModelBase::fromJson(fieldValue, refVal_grouping);
            setGrouping(refVal_grouping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeBendCenterlines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeBendCenterlines"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeBendCenterlines;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeBendCenterlines);
            setIncludeBendCenterlines(refVal_includeBendCenterlines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeBendLines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeBendLines"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeBendLines;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeBendLines);
            setIncludeBendLines(refVal_includeBendLines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeCustomProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeCustomProperties"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeCustomProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeCustomProperties);
            setIncludeCustomProperties(refVal_includeCustomProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeCustomPropertiesData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeCustomPropertiesData"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeCustomPropertiesData;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeCustomPropertiesData);
            setIncludeCustomPropertiesData(refVal_includeCustomPropertiesData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeExportIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeExportIds"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeExportIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeExportIds);
            setIncludeExportIds(refVal_includeExportIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeForeignData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeForeignData"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeForeignData;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeForeignData);
            setIncludeForeignData(refVal_includeForeignData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeItemsData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeItemsData"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeItemsData;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeItemsData);
            setIncludeItemsData(refVal_includeItemsData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeLinkedDocuments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeLinkedDocuments"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeLinkedDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeLinkedDocuments);
            setIncludeLinkedDocuments(refVal_includeLinkedDocuments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeReleaseManagementData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeReleaseManagementData"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeReleaseManagementData;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeReleaseManagementData);
            setIncludeReleaseManagementData(refVal_includeReleaseManagementData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeSketches")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeSketches"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeSketches;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeSketches);
            setIncludeSketches(refVal_includeSketches);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeStd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeStd"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeStd;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeStd);
            setIncludeStd(refVal_includeStd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPartingOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPartingOut"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPartingOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPartingOut);
            setIsPartingOut(refVal_isPartingOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkDocumentId);
            setLinkDocumentId(refVal_linkDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkDocumentWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkDocumentWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkDocumentWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkDocumentWorkspaceId);
            setLinkDocumentWorkspaceId(refVal_linkDocumentWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxFacetWidth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxFacetWidth"));
        if(!fieldValue.is_null())
        {
            double refVal_maxFacetWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxFacetWidth);
            setMaxFacetWidth(refVal_maxFacetWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversion);
            setMicroversion(refVal_microversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minFacetWidth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minFacetWidth"));
        if(!fieldValue.is_null())
        {
            double refVal_minFacetWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_minFacetWidth);
            setMinFacetWidth(refVal_minFacetWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode);
            setMode(refVal_mode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partIds"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_partIds);
            setPartIds(refVal_partIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_partQuery);
            setPartQuery(refVal_partQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordRequired")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("passwordRequired"));
        if(!fieldValue.is_null())
        {
            bool refVal_passwordRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_passwordRequired);
            setPasswordRequired(refVal_passwordRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resolution")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resolution"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resolution;
            ok &= ModelBase::fromJson(fieldValue, refVal_resolution);
            setResolution(refVal_resolution);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("scale"));
        if(!fieldValue.is_null())
        {
            double refVal_scale;
            ok &= ModelBase::fromJson(fieldValue, refVal_scale);
            setScale(refVal_scale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendCopyToMe")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sendCopyToMe"));
        if(!fieldValue.is_null())
        {
            bool refVal_sendCopyToMe;
            ok &= ModelBase::fromJson(fieldValue, refVal_sendCopyToMe);
            setSendCopyToMe(refVal_sendCopyToMe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sheetMetalFlat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sheetMetalFlat"));
        if(!fieldValue.is_null())
        {
            bool refVal_sheetMetalFlat;
            ok &= ModelBase::fromJson(fieldValue, refVal_sheetMetalFlat);
            setSheetMetalFlat(refVal_sheetMetalFlat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("splinesAsPolylines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("splinesAsPolylines"));
        if(!fieldValue.is_null())
        {
            bool refVal_splinesAsPolylines;
            ok &= ModelBase::fromJson(fieldValue, refVal_splinesAsPolylines);
            setSplinesAsPolylines(refVal_splinesAsPolylines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("storeInDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("storeInDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_storeInDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_storeInDocument);
            setStoreInDocument(refVal_storeInDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("triggerAutoDownload")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("triggerAutoDownload"));
        if(!fieldValue.is_null())
        {
            bool refVal_triggerAutoDownload;
            ok &= ModelBase::fromJson(fieldValue, refVal_triggerAutoDownload);
            setTriggerAutoDownload(refVal_triggerAutoDownload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("units")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("units"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_units;
            ok &= ModelBase::fromJson(fieldValue, refVal_units);
            setUnits(refVal_units);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validForDays")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validForDays"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_validForDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_validForDays);
            setValidForDays(refVal_validForDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("view")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("view"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_view;
            ok &= ModelBase::fromJson(fieldValue, refVal_view);
            setView(refVal_view);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zipSingleFileOutput")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zipSingleFileOutput"));
        if(!fieldValue.is_null())
        {
            bool refVal_zipSingleFileOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_zipSingleFileOutput);
            setZipSingleFileOutput(refVal_zipSingleFileOutput);
        }
    }
    return ok;
}

void BTExportModelParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AngleToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("angleTolerance"), m_AngleTolerance));
    }
    if(m_BatchFlatPatternsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("batchFlatPatterns"), m_BatchFlatPatterns));
    }
    if(m_ChordToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chordTolerance"), m_ChordTolerance));
    }
    if(m_CloudObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudObjectId"), m_CloudObjectId));
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageAccountId"), m_CloudStorageAccountId));
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_DeepSearchForForeignDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deepSearchForForeignData"), m_DeepSearchForForeignData));
    }
    if(m_DestinationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destinationName"), m_DestinationName));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentVersionId"), m_DocumentVersionId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementIds"), m_ElementIds));
    }
    if(m_EmailLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailLink"), m_EmailLink));
    }
    if(m_EmailMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailMessage"), m_EmailMessage));
    }
    if(m_EmailSubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailSubject"), m_EmailSubject));
    }
    if(m_EmailToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailTo"), m_EmailTo));
    }
    if(m_ExtractToS3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("extractToS3"), m_ExtractToS3));
    }
    if(m_FeatureIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureIds"), m_FeatureIds));
    }
    if(m_FlattenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("flatten"), m_Flatten));
    }
    if(m_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("format"), m_Format));
    }
    if(m_FromUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromUserId"), m_FromUserId));
    }
    if(m_GroupingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grouping"), m_Grouping));
    }
    if(m_IncludeBendCenterlinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeBendCenterlines"), m_IncludeBendCenterlines));
    }
    if(m_IncludeBendLinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeBendLines"), m_IncludeBendLines));
    }
    if(m_IncludeCustomPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeCustomProperties"), m_IncludeCustomProperties));
    }
    if(m_IncludeCustomPropertiesDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeCustomPropertiesData"), m_IncludeCustomPropertiesData));
    }
    if(m_IncludeExportIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeExportIds"), m_IncludeExportIds));
    }
    if(m_IncludeForeignDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeForeignData"), m_IncludeForeignData));
    }
    if(m_IncludeItemsDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeItemsData"), m_IncludeItemsData));
    }
    if(m_IncludeLinkedDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeLinkedDocuments"), m_IncludeLinkedDocuments));
    }
    if(m_IncludeReleaseManagementDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeReleaseManagementData"), m_IncludeReleaseManagementData));
    }
    if(m_IncludeSketchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeSketches"), m_IncludeSketches));
    }
    if(m_IncludeStdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeStd"), m_IncludeStd));
    }
    if(m_IsPartingOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPartingOut"), m_IsPartingOut));
    }
    if(m_LinkDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkDocumentId"), m_LinkDocumentId));
    }
    if(m_LinkDocumentWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkDocumentWorkspaceId"), m_LinkDocumentWorkspaceId));
    }
    if(m_MaxFacetWidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxFacetWidth"), m_MaxFacetWidth));
    }
    if(m_MicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversion"), m_Microversion));
    }
    if(m_MinFacetWidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minFacetWidth"), m_MinFacetWidth));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mode"), m_Mode));
    }
    if(m_PartIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partIds"), m_PartIds));
    }
    if(m_PartQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partQuery"), m_PartQuery));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    }
    if(m_PasswordRequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("passwordRequired"), m_PasswordRequired));
    }
    if(m_ResolutionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resolution"), m_Resolution));
    }
    if(m_ScaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scale"), m_Scale));
    }
    if(m_SendCopyToMeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendCopyToMe"), m_SendCopyToMe));
    }
    if(m_SheetMetalFlatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sheetMetalFlat"), m_SheetMetalFlat));
    }
    if(m_SplinesAsPolylinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("splinesAsPolylines"), m_SplinesAsPolylines));
    }
    if(m_StoreInDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("storeInDocument"), m_StoreInDocument));
    }
    if(m_TriggerAutoDownloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("triggerAutoDownload"), m_TriggerAutoDownload));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("units"), m_Units));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_ValidForDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validForDays"), m_ValidForDays));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_ViewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("view"), m_View));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
    if(m_ZipSingleFileOutputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zipSingleFileOutput"), m_ZipSingleFileOutput));
    }
}

bool BTExportModelParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("angleTolerance")))
    {
        double refVal_angleTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("angleTolerance")), refVal_angleTolerance );
        setAngleTolerance(refVal_angleTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("batchFlatPatterns")))
    {
        bool refVal_batchFlatPatterns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("batchFlatPatterns")), refVal_batchFlatPatterns );
        setBatchFlatPatterns(refVal_batchFlatPatterns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("chordTolerance")))
    {
        double refVal_chordTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("chordTolerance")), refVal_chordTolerance );
        setChordTolerance(refVal_chordTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudObjectId")))
    {
        utility::string_t refVal_cloudObjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudObjectId")), refVal_cloudObjectId );
        setCloudObjectId(refVal_cloudObjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        utility::string_t refVal_cloudStorageAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageAccountId")), refVal_cloudStorageAccountId );
        setCloudStorageAccountId(refVal_cloudStorageAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deepSearchForForeignData")))
    {
        bool refVal_deepSearchForForeignData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deepSearchForForeignData")), refVal_deepSearchForForeignData );
        setDeepSearchForForeignData(refVal_deepSearchForForeignData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("destinationName")))
    {
        utility::string_t refVal_destinationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("destinationName")), refVal_destinationName );
        setDestinationName(refVal_destinationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentVersionId")))
    {
        utility::string_t refVal_documentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentVersionId")), refVal_documentVersionId );
        setDocumentVersionId(refVal_documentVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementIds")))
    {
        utility::string_t refVal_elementIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementIds")), refVal_elementIds );
        setElementIds(refVal_elementIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailLink")))
    {
        bool refVal_emailLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailLink")), refVal_emailLink );
        setEmailLink(refVal_emailLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailMessage")))
    {
        utility::string_t refVal_emailMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailMessage")), refVal_emailMessage );
        setEmailMessage(refVal_emailMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailSubject")))
    {
        utility::string_t refVal_emailSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailSubject")), refVal_emailSubject );
        setEmailSubject(refVal_emailSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailTo")))
    {
        utility::string_t refVal_emailTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailTo")), refVal_emailTo );
        setEmailTo(refVal_emailTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extractToS3")))
    {
        bool refVal_extractToS3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("extractToS3")), refVal_extractToS3 );
        setExtractToS3(refVal_extractToS3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureIds")))
    {
        utility::string_t refVal_featureIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureIds")), refVal_featureIds );
        setFeatureIds(refVal_featureIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flatten")))
    {
        bool refVal_flatten;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("flatten")), refVal_flatten );
        setFlatten(refVal_flatten);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        utility::string_t refVal_format;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("format")), refVal_format );
        setFormat(refVal_format);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromUserId")))
    {
        utility::string_t refVal_fromUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromUserId")), refVal_fromUserId );
        setFromUserId(refVal_fromUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grouping")))
    {
        utility::string_t refVal_grouping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("grouping")), refVal_grouping );
        setGrouping(refVal_grouping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeBendCenterlines")))
    {
        bool refVal_includeBendCenterlines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeBendCenterlines")), refVal_includeBendCenterlines );
        setIncludeBendCenterlines(refVal_includeBendCenterlines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeBendLines")))
    {
        bool refVal_includeBendLines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeBendLines")), refVal_includeBendLines );
        setIncludeBendLines(refVal_includeBendLines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeCustomProperties")))
    {
        bool refVal_includeCustomProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeCustomProperties")), refVal_includeCustomProperties );
        setIncludeCustomProperties(refVal_includeCustomProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeCustomPropertiesData")))
    {
        bool refVal_includeCustomPropertiesData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeCustomPropertiesData")), refVal_includeCustomPropertiesData );
        setIncludeCustomPropertiesData(refVal_includeCustomPropertiesData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeExportIds")))
    {
        bool refVal_includeExportIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeExportIds")), refVal_includeExportIds );
        setIncludeExportIds(refVal_includeExportIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeForeignData")))
    {
        bool refVal_includeForeignData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeForeignData")), refVal_includeForeignData );
        setIncludeForeignData(refVal_includeForeignData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeItemsData")))
    {
        bool refVal_includeItemsData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeItemsData")), refVal_includeItemsData );
        setIncludeItemsData(refVal_includeItemsData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeLinkedDocuments")))
    {
        bool refVal_includeLinkedDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeLinkedDocuments")), refVal_includeLinkedDocuments );
        setIncludeLinkedDocuments(refVal_includeLinkedDocuments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeReleaseManagementData")))
    {
        bool refVal_includeReleaseManagementData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeReleaseManagementData")), refVal_includeReleaseManagementData );
        setIncludeReleaseManagementData(refVal_includeReleaseManagementData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeSketches")))
    {
        bool refVal_includeSketches;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeSketches")), refVal_includeSketches );
        setIncludeSketches(refVal_includeSketches);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeStd")))
    {
        bool refVal_includeStd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeStd")), refVal_includeStd );
        setIncludeStd(refVal_includeStd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPartingOut")))
    {
        bool refVal_isPartingOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPartingOut")), refVal_isPartingOut );
        setIsPartingOut(refVal_isPartingOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkDocumentId")))
    {
        utility::string_t refVal_linkDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkDocumentId")), refVal_linkDocumentId );
        setLinkDocumentId(refVal_linkDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkDocumentWorkspaceId")))
    {
        utility::string_t refVal_linkDocumentWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkDocumentWorkspaceId")), refVal_linkDocumentWorkspaceId );
        setLinkDocumentWorkspaceId(refVal_linkDocumentWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxFacetWidth")))
    {
        double refVal_maxFacetWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxFacetWidth")), refVal_maxFacetWidth );
        setMaxFacetWidth(refVal_maxFacetWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversion")))
    {
        utility::string_t refVal_microversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversion")), refVal_microversion );
        setMicroversion(refVal_microversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minFacetWidth")))
    {
        double refVal_minFacetWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minFacetWidth")), refVal_minFacetWidth );
        setMinFacetWidth(refVal_minFacetWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mode")))
    {
        utility::string_t refVal_mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mode")), refVal_mode );
        setMode(refVal_mode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partIds")))
    {
        utility::string_t refVal_partIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partIds")), refVal_partIds );
        setPartIds(refVal_partIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partQuery")))
    {
        utility::string_t refVal_partQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partQuery")), refVal_partQuery );
        setPartQuery(refVal_partQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("password")), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordRequired")))
    {
        bool refVal_passwordRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("passwordRequired")), refVal_passwordRequired );
        setPasswordRequired(refVal_passwordRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resolution")))
    {
        utility::string_t refVal_resolution;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resolution")), refVal_resolution );
        setResolution(refVal_resolution);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scale")))
    {
        double refVal_scale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("scale")), refVal_scale );
        setScale(refVal_scale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendCopyToMe")))
    {
        bool refVal_sendCopyToMe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendCopyToMe")), refVal_sendCopyToMe );
        setSendCopyToMe(refVal_sendCopyToMe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sheetMetalFlat")))
    {
        bool refVal_sheetMetalFlat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sheetMetalFlat")), refVal_sheetMetalFlat );
        setSheetMetalFlat(refVal_sheetMetalFlat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("splinesAsPolylines")))
    {
        bool refVal_splinesAsPolylines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("splinesAsPolylines")), refVal_splinesAsPolylines );
        setSplinesAsPolylines(refVal_splinesAsPolylines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("storeInDocument")))
    {
        bool refVal_storeInDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("storeInDocument")), refVal_storeInDocument );
        setStoreInDocument(refVal_storeInDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("triggerAutoDownload")))
    {
        bool refVal_triggerAutoDownload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("triggerAutoDownload")), refVal_triggerAutoDownload );
        setTriggerAutoDownload(refVal_triggerAutoDownload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("units")))
    {
        utility::string_t refVal_units;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("units")), refVal_units );
        setUnits(refVal_units);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validForDays")))
    {
        int32_t refVal_validForDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validForDays")), refVal_validForDays );
        setValidForDays(refVal_validForDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("view")))
    {
        utility::string_t refVal_view;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("view")), refVal_view );
        setView(refVal_view);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zipSingleFileOutput")))
    {
        bool refVal_zipSingleFileOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("zipSingleFileOutput")), refVal_zipSingleFileOutput );
        setZipSingleFileOutput(refVal_zipSingleFileOutput);
    }
    return ok;
}

double BTExportModelParams::getAngleTolerance() const
{
    return m_AngleTolerance;
}

void BTExportModelParams::setAngleTolerance(double value)
{
    m_AngleTolerance = value;
    m_AngleToleranceIsSet = true;
}

bool BTExportModelParams::angleToleranceIsSet() const
{
    return m_AngleToleranceIsSet;
}

void BTExportModelParams::unsetAngleTolerance()
{
    m_AngleToleranceIsSet = false;
}
bool BTExportModelParams::isBatchFlatPatterns() const
{
    return m_BatchFlatPatterns;
}

void BTExportModelParams::setBatchFlatPatterns(bool value)
{
    m_BatchFlatPatterns = value;
    m_BatchFlatPatternsIsSet = true;
}

bool BTExportModelParams::batchFlatPatternsIsSet() const
{
    return m_BatchFlatPatternsIsSet;
}

void BTExportModelParams::unsetBatchFlatPatterns()
{
    m_BatchFlatPatternsIsSet = false;
}
double BTExportModelParams::getChordTolerance() const
{
    return m_ChordTolerance;
}

void BTExportModelParams::setChordTolerance(double value)
{
    m_ChordTolerance = value;
    m_ChordToleranceIsSet = true;
}

bool BTExportModelParams::chordToleranceIsSet() const
{
    return m_ChordToleranceIsSet;
}

void BTExportModelParams::unsetChordTolerance()
{
    m_ChordToleranceIsSet = false;
}
utility::string_t BTExportModelParams::getCloudObjectId() const
{
    return m_CloudObjectId;
}

void BTExportModelParams::setCloudObjectId(const utility::string_t& value)
{
    m_CloudObjectId = value;
    m_CloudObjectIdIsSet = true;
}

bool BTExportModelParams::cloudObjectIdIsSet() const
{
    return m_CloudObjectIdIsSet;
}

void BTExportModelParams::unsetCloudObjectId()
{
    m_CloudObjectIdIsSet = false;
}
utility::string_t BTExportModelParams::getCloudStorageAccountId() const
{
    return m_CloudStorageAccountId;
}

void BTExportModelParams::setCloudStorageAccountId(const utility::string_t& value)
{
    m_CloudStorageAccountId = value;
    m_CloudStorageAccountIdIsSet = true;
}

bool BTExportModelParams::cloudStorageAccountIdIsSet() const
{
    return m_CloudStorageAccountIdIsSet;
}

void BTExportModelParams::unsetCloudStorageAccountId()
{
    m_CloudStorageAccountIdIsSet = false;
}
utility::string_t BTExportModelParams::getConfiguration() const
{
    return m_Configuration;
}

void BTExportModelParams::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTExportModelParams::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTExportModelParams::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
bool BTExportModelParams::isDeepSearchForForeignData() const
{
    return m_DeepSearchForForeignData;
}

void BTExportModelParams::setDeepSearchForForeignData(bool value)
{
    m_DeepSearchForForeignData = value;
    m_DeepSearchForForeignDataIsSet = true;
}

bool BTExportModelParams::deepSearchForForeignDataIsSet() const
{
    return m_DeepSearchForForeignDataIsSet;
}

void BTExportModelParams::unsetDeepSearchForForeignData()
{
    m_DeepSearchForForeignDataIsSet = false;
}
utility::string_t BTExportModelParams::getDestinationName() const
{
    return m_DestinationName;
}

void BTExportModelParams::setDestinationName(const utility::string_t& value)
{
    m_DestinationName = value;
    m_DestinationNameIsSet = true;
}

bool BTExportModelParams::destinationNameIsSet() const
{
    return m_DestinationNameIsSet;
}

void BTExportModelParams::unsetDestinationName()
{
    m_DestinationNameIsSet = false;
}
utility::string_t BTExportModelParams::getDocumentId() const
{
    return m_DocumentId;
}

void BTExportModelParams::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTExportModelParams::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTExportModelParams::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTExportModelParams::getDocumentVersionId() const
{
    return m_DocumentVersionId;
}

void BTExportModelParams::setDocumentVersionId(const utility::string_t& value)
{
    m_DocumentVersionId = value;
    m_DocumentVersionIdIsSet = true;
}

bool BTExportModelParams::documentVersionIdIsSet() const
{
    return m_DocumentVersionIdIsSet;
}

void BTExportModelParams::unsetDocumentVersionId()
{
    m_DocumentVersionIdIsSet = false;
}
utility::string_t BTExportModelParams::getElementId() const
{
    return m_ElementId;
}

void BTExportModelParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTExportModelParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTExportModelParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTExportModelParams::getElementIds() const
{
    return m_ElementIds;
}

void BTExportModelParams::setElementIds(const utility::string_t& value)
{
    m_ElementIds = value;
    m_ElementIdsIsSet = true;
}

bool BTExportModelParams::elementIdsIsSet() const
{
    return m_ElementIdsIsSet;
}

void BTExportModelParams::unsetElementIds()
{
    m_ElementIdsIsSet = false;
}
bool BTExportModelParams::isEmailLink() const
{
    return m_EmailLink;
}

void BTExportModelParams::setEmailLink(bool value)
{
    m_EmailLink = value;
    m_EmailLinkIsSet = true;
}

bool BTExportModelParams::emailLinkIsSet() const
{
    return m_EmailLinkIsSet;
}

void BTExportModelParams::unsetEmailLink()
{
    m_EmailLinkIsSet = false;
}
utility::string_t BTExportModelParams::getEmailMessage() const
{
    return m_EmailMessage;
}

void BTExportModelParams::setEmailMessage(const utility::string_t& value)
{
    m_EmailMessage = value;
    m_EmailMessageIsSet = true;
}

bool BTExportModelParams::emailMessageIsSet() const
{
    return m_EmailMessageIsSet;
}

void BTExportModelParams::unsetEmailMessage()
{
    m_EmailMessageIsSet = false;
}
utility::string_t BTExportModelParams::getEmailSubject() const
{
    return m_EmailSubject;
}

void BTExportModelParams::setEmailSubject(const utility::string_t& value)
{
    m_EmailSubject = value;
    m_EmailSubjectIsSet = true;
}

bool BTExportModelParams::emailSubjectIsSet() const
{
    return m_EmailSubjectIsSet;
}

void BTExportModelParams::unsetEmailSubject()
{
    m_EmailSubjectIsSet = false;
}
utility::string_t BTExportModelParams::getEmailTo() const
{
    return m_EmailTo;
}

void BTExportModelParams::setEmailTo(const utility::string_t& value)
{
    m_EmailTo = value;
    m_EmailToIsSet = true;
}

bool BTExportModelParams::emailToIsSet() const
{
    return m_EmailToIsSet;
}

void BTExportModelParams::unsetEmailTo()
{
    m_EmailToIsSet = false;
}
bool BTExportModelParams::isExtractToS3() const
{
    return m_ExtractToS3;
}

void BTExportModelParams::setExtractToS3(bool value)
{
    m_ExtractToS3 = value;
    m_ExtractToS3IsSet = true;
}

bool BTExportModelParams::extractToS3IsSet() const
{
    return m_ExtractToS3IsSet;
}

void BTExportModelParams::unsetExtractToS3()
{
    m_ExtractToS3IsSet = false;
}
utility::string_t BTExportModelParams::getFeatureIds() const
{
    return m_FeatureIds;
}

void BTExportModelParams::setFeatureIds(const utility::string_t& value)
{
    m_FeatureIds = value;
    m_FeatureIdsIsSet = true;
}

bool BTExportModelParams::featureIdsIsSet() const
{
    return m_FeatureIdsIsSet;
}

void BTExportModelParams::unsetFeatureIds()
{
    m_FeatureIdsIsSet = false;
}
bool BTExportModelParams::isFlatten() const
{
    return m_Flatten;
}

void BTExportModelParams::setFlatten(bool value)
{
    m_Flatten = value;
    m_FlattenIsSet = true;
}

bool BTExportModelParams::flattenIsSet() const
{
    return m_FlattenIsSet;
}

void BTExportModelParams::unsetFlatten()
{
    m_FlattenIsSet = false;
}
utility::string_t BTExportModelParams::getFormat() const
{
    return m_Format;
}

void BTExportModelParams::setFormat(const utility::string_t& value)
{
    m_Format = value;
    m_FormatIsSet = true;
}

bool BTExportModelParams::formatIsSet() const
{
    return m_FormatIsSet;
}

void BTExportModelParams::unsetFormat()
{
    m_FormatIsSet = false;
}
utility::string_t BTExportModelParams::getFromUserId() const
{
    return m_FromUserId;
}

void BTExportModelParams::setFromUserId(const utility::string_t& value)
{
    m_FromUserId = value;
    m_FromUserIdIsSet = true;
}

bool BTExportModelParams::fromUserIdIsSet() const
{
    return m_FromUserIdIsSet;
}

void BTExportModelParams::unsetFromUserId()
{
    m_FromUserIdIsSet = false;
}
utility::string_t BTExportModelParams::getGrouping() const
{
    return m_Grouping;
}

void BTExportModelParams::setGrouping(const utility::string_t& value)
{
    m_Grouping = value;
    m_GroupingIsSet = true;
}

bool BTExportModelParams::groupingIsSet() const
{
    return m_GroupingIsSet;
}

void BTExportModelParams::unsetGrouping()
{
    m_GroupingIsSet = false;
}
bool BTExportModelParams::isIncludeBendCenterlines() const
{
    return m_IncludeBendCenterlines;
}

void BTExportModelParams::setIncludeBendCenterlines(bool value)
{
    m_IncludeBendCenterlines = value;
    m_IncludeBendCenterlinesIsSet = true;
}

bool BTExportModelParams::includeBendCenterlinesIsSet() const
{
    return m_IncludeBendCenterlinesIsSet;
}

void BTExportModelParams::unsetIncludeBendCenterlines()
{
    m_IncludeBendCenterlinesIsSet = false;
}
bool BTExportModelParams::isIncludeBendLines() const
{
    return m_IncludeBendLines;
}

void BTExportModelParams::setIncludeBendLines(bool value)
{
    m_IncludeBendLines = value;
    m_IncludeBendLinesIsSet = true;
}

bool BTExportModelParams::includeBendLinesIsSet() const
{
    return m_IncludeBendLinesIsSet;
}

void BTExportModelParams::unsetIncludeBendLines()
{
    m_IncludeBendLinesIsSet = false;
}
bool BTExportModelParams::isIncludeCustomProperties() const
{
    return m_IncludeCustomProperties;
}

void BTExportModelParams::setIncludeCustomProperties(bool value)
{
    m_IncludeCustomProperties = value;
    m_IncludeCustomPropertiesIsSet = true;
}

bool BTExportModelParams::includeCustomPropertiesIsSet() const
{
    return m_IncludeCustomPropertiesIsSet;
}

void BTExportModelParams::unsetIncludeCustomProperties()
{
    m_IncludeCustomPropertiesIsSet = false;
}
bool BTExportModelParams::isIncludeCustomPropertiesData() const
{
    return m_IncludeCustomPropertiesData;
}

void BTExportModelParams::setIncludeCustomPropertiesData(bool value)
{
    m_IncludeCustomPropertiesData = value;
    m_IncludeCustomPropertiesDataIsSet = true;
}

bool BTExportModelParams::includeCustomPropertiesDataIsSet() const
{
    return m_IncludeCustomPropertiesDataIsSet;
}

void BTExportModelParams::unsetIncludeCustomPropertiesData()
{
    m_IncludeCustomPropertiesDataIsSet = false;
}
bool BTExportModelParams::isIncludeExportIds() const
{
    return m_IncludeExportIds;
}

void BTExportModelParams::setIncludeExportIds(bool value)
{
    m_IncludeExportIds = value;
    m_IncludeExportIdsIsSet = true;
}

bool BTExportModelParams::includeExportIdsIsSet() const
{
    return m_IncludeExportIdsIsSet;
}

void BTExportModelParams::unsetIncludeExportIds()
{
    m_IncludeExportIdsIsSet = false;
}
bool BTExportModelParams::isIncludeForeignData() const
{
    return m_IncludeForeignData;
}

void BTExportModelParams::setIncludeForeignData(bool value)
{
    m_IncludeForeignData = value;
    m_IncludeForeignDataIsSet = true;
}

bool BTExportModelParams::includeForeignDataIsSet() const
{
    return m_IncludeForeignDataIsSet;
}

void BTExportModelParams::unsetIncludeForeignData()
{
    m_IncludeForeignDataIsSet = false;
}
bool BTExportModelParams::isIncludeItemsData() const
{
    return m_IncludeItemsData;
}

void BTExportModelParams::setIncludeItemsData(bool value)
{
    m_IncludeItemsData = value;
    m_IncludeItemsDataIsSet = true;
}

bool BTExportModelParams::includeItemsDataIsSet() const
{
    return m_IncludeItemsDataIsSet;
}

void BTExportModelParams::unsetIncludeItemsData()
{
    m_IncludeItemsDataIsSet = false;
}
bool BTExportModelParams::isIncludeLinkedDocuments() const
{
    return m_IncludeLinkedDocuments;
}

void BTExportModelParams::setIncludeLinkedDocuments(bool value)
{
    m_IncludeLinkedDocuments = value;
    m_IncludeLinkedDocumentsIsSet = true;
}

bool BTExportModelParams::includeLinkedDocumentsIsSet() const
{
    return m_IncludeLinkedDocumentsIsSet;
}

void BTExportModelParams::unsetIncludeLinkedDocuments()
{
    m_IncludeLinkedDocumentsIsSet = false;
}
bool BTExportModelParams::isIncludeReleaseManagementData() const
{
    return m_IncludeReleaseManagementData;
}

void BTExportModelParams::setIncludeReleaseManagementData(bool value)
{
    m_IncludeReleaseManagementData = value;
    m_IncludeReleaseManagementDataIsSet = true;
}

bool BTExportModelParams::includeReleaseManagementDataIsSet() const
{
    return m_IncludeReleaseManagementDataIsSet;
}

void BTExportModelParams::unsetIncludeReleaseManagementData()
{
    m_IncludeReleaseManagementDataIsSet = false;
}
bool BTExportModelParams::isIncludeSketches() const
{
    return m_IncludeSketches;
}

void BTExportModelParams::setIncludeSketches(bool value)
{
    m_IncludeSketches = value;
    m_IncludeSketchesIsSet = true;
}

bool BTExportModelParams::includeSketchesIsSet() const
{
    return m_IncludeSketchesIsSet;
}

void BTExportModelParams::unsetIncludeSketches()
{
    m_IncludeSketchesIsSet = false;
}
bool BTExportModelParams::isIncludeStd() const
{
    return m_IncludeStd;
}

void BTExportModelParams::setIncludeStd(bool value)
{
    m_IncludeStd = value;
    m_IncludeStdIsSet = true;
}

bool BTExportModelParams::includeStdIsSet() const
{
    return m_IncludeStdIsSet;
}

void BTExportModelParams::unsetIncludeStd()
{
    m_IncludeStdIsSet = false;
}
bool BTExportModelParams::isIsPartingOut() const
{
    return m_IsPartingOut;
}

void BTExportModelParams::setIsPartingOut(bool value)
{
    m_IsPartingOut = value;
    m_IsPartingOutIsSet = true;
}

bool BTExportModelParams::isPartingOutIsSet() const
{
    return m_IsPartingOutIsSet;
}

void BTExportModelParams::unsetIsPartingOut()
{
    m_IsPartingOutIsSet = false;
}
utility::string_t BTExportModelParams::getLinkDocumentId() const
{
    return m_LinkDocumentId;
}

void BTExportModelParams::setLinkDocumentId(const utility::string_t& value)
{
    m_LinkDocumentId = value;
    m_LinkDocumentIdIsSet = true;
}

bool BTExportModelParams::linkDocumentIdIsSet() const
{
    return m_LinkDocumentIdIsSet;
}

void BTExportModelParams::unsetLinkDocumentId()
{
    m_LinkDocumentIdIsSet = false;
}
utility::string_t BTExportModelParams::getLinkDocumentWorkspaceId() const
{
    return m_LinkDocumentWorkspaceId;
}

void BTExportModelParams::setLinkDocumentWorkspaceId(const utility::string_t& value)
{
    m_LinkDocumentWorkspaceId = value;
    m_LinkDocumentWorkspaceIdIsSet = true;
}

bool BTExportModelParams::linkDocumentWorkspaceIdIsSet() const
{
    return m_LinkDocumentWorkspaceIdIsSet;
}

void BTExportModelParams::unsetLinkDocumentWorkspaceId()
{
    m_LinkDocumentWorkspaceIdIsSet = false;
}
double BTExportModelParams::getMaxFacetWidth() const
{
    return m_MaxFacetWidth;
}

void BTExportModelParams::setMaxFacetWidth(double value)
{
    m_MaxFacetWidth = value;
    m_MaxFacetWidthIsSet = true;
}

bool BTExportModelParams::maxFacetWidthIsSet() const
{
    return m_MaxFacetWidthIsSet;
}

void BTExportModelParams::unsetMaxFacetWidth()
{
    m_MaxFacetWidthIsSet = false;
}
utility::string_t BTExportModelParams::getMicroversion() const
{
    return m_Microversion;
}

void BTExportModelParams::setMicroversion(const utility::string_t& value)
{
    m_Microversion = value;
    m_MicroversionIsSet = true;
}

bool BTExportModelParams::microversionIsSet() const
{
    return m_MicroversionIsSet;
}

void BTExportModelParams::unsetMicroversion()
{
    m_MicroversionIsSet = false;
}
double BTExportModelParams::getMinFacetWidth() const
{
    return m_MinFacetWidth;
}

void BTExportModelParams::setMinFacetWidth(double value)
{
    m_MinFacetWidth = value;
    m_MinFacetWidthIsSet = true;
}

bool BTExportModelParams::minFacetWidthIsSet() const
{
    return m_MinFacetWidthIsSet;
}

void BTExportModelParams::unsetMinFacetWidth()
{
    m_MinFacetWidthIsSet = false;
}
utility::string_t BTExportModelParams::getMode() const
{
    return m_Mode;
}

void BTExportModelParams::setMode(const utility::string_t& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool BTExportModelParams::modeIsSet() const
{
    return m_ModeIsSet;
}

void BTExportModelParams::unsetMode()
{
    m_ModeIsSet = false;
}
utility::string_t BTExportModelParams::getPartIds() const
{
    return m_PartIds;
}

void BTExportModelParams::setPartIds(const utility::string_t& value)
{
    m_PartIds = value;
    m_PartIdsIsSet = true;
}

bool BTExportModelParams::partIdsIsSet() const
{
    return m_PartIdsIsSet;
}

void BTExportModelParams::unsetPartIds()
{
    m_PartIdsIsSet = false;
}
utility::string_t BTExportModelParams::getPartQuery() const
{
    return m_PartQuery;
}

void BTExportModelParams::setPartQuery(const utility::string_t& value)
{
    m_PartQuery = value;
    m_PartQueryIsSet = true;
}

bool BTExportModelParams::partQueryIsSet() const
{
    return m_PartQueryIsSet;
}

void BTExportModelParams::unsetPartQuery()
{
    m_PartQueryIsSet = false;
}
utility::string_t BTExportModelParams::getPassword() const
{
    return m_Password;
}

void BTExportModelParams::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool BTExportModelParams::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void BTExportModelParams::unsetPassword()
{
    m_PasswordIsSet = false;
}
bool BTExportModelParams::isPasswordRequired() const
{
    return m_PasswordRequired;
}

void BTExportModelParams::setPasswordRequired(bool value)
{
    m_PasswordRequired = value;
    m_PasswordRequiredIsSet = true;
}

bool BTExportModelParams::passwordRequiredIsSet() const
{
    return m_PasswordRequiredIsSet;
}

void BTExportModelParams::unsetPasswordRequired()
{
    m_PasswordRequiredIsSet = false;
}
utility::string_t BTExportModelParams::getResolution() const
{
    return m_Resolution;
}

void BTExportModelParams::setResolution(const utility::string_t& value)
{
    m_Resolution = value;
    m_ResolutionIsSet = true;
}

bool BTExportModelParams::resolutionIsSet() const
{
    return m_ResolutionIsSet;
}

void BTExportModelParams::unsetResolution()
{
    m_ResolutionIsSet = false;
}
double BTExportModelParams::getScale() const
{
    return m_Scale;
}

void BTExportModelParams::setScale(double value)
{
    m_Scale = value;
    m_ScaleIsSet = true;
}

bool BTExportModelParams::scaleIsSet() const
{
    return m_ScaleIsSet;
}

void BTExportModelParams::unsetScale()
{
    m_ScaleIsSet = false;
}
bool BTExportModelParams::isSendCopyToMe() const
{
    return m_SendCopyToMe;
}

void BTExportModelParams::setSendCopyToMe(bool value)
{
    m_SendCopyToMe = value;
    m_SendCopyToMeIsSet = true;
}

bool BTExportModelParams::sendCopyToMeIsSet() const
{
    return m_SendCopyToMeIsSet;
}

void BTExportModelParams::unsetSendCopyToMe()
{
    m_SendCopyToMeIsSet = false;
}
bool BTExportModelParams::isSheetMetalFlat() const
{
    return m_SheetMetalFlat;
}

void BTExportModelParams::setSheetMetalFlat(bool value)
{
    m_SheetMetalFlat = value;
    m_SheetMetalFlatIsSet = true;
}

bool BTExportModelParams::sheetMetalFlatIsSet() const
{
    return m_SheetMetalFlatIsSet;
}

void BTExportModelParams::unsetSheetMetalFlat()
{
    m_SheetMetalFlatIsSet = false;
}
bool BTExportModelParams::isSplinesAsPolylines() const
{
    return m_SplinesAsPolylines;
}

void BTExportModelParams::setSplinesAsPolylines(bool value)
{
    m_SplinesAsPolylines = value;
    m_SplinesAsPolylinesIsSet = true;
}

bool BTExportModelParams::splinesAsPolylinesIsSet() const
{
    return m_SplinesAsPolylinesIsSet;
}

void BTExportModelParams::unsetSplinesAsPolylines()
{
    m_SplinesAsPolylinesIsSet = false;
}
bool BTExportModelParams::isStoreInDocument() const
{
    return m_StoreInDocument;
}

void BTExportModelParams::setStoreInDocument(bool value)
{
    m_StoreInDocument = value;
    m_StoreInDocumentIsSet = true;
}

bool BTExportModelParams::storeInDocumentIsSet() const
{
    return m_StoreInDocumentIsSet;
}

void BTExportModelParams::unsetStoreInDocument()
{
    m_StoreInDocumentIsSet = false;
}
bool BTExportModelParams::isTriggerAutoDownload() const
{
    return m_TriggerAutoDownload;
}

void BTExportModelParams::setTriggerAutoDownload(bool value)
{
    m_TriggerAutoDownload = value;
    m_TriggerAutoDownloadIsSet = true;
}

bool BTExportModelParams::triggerAutoDownloadIsSet() const
{
    return m_TriggerAutoDownloadIsSet;
}

void BTExportModelParams::unsetTriggerAutoDownload()
{
    m_TriggerAutoDownloadIsSet = false;
}
utility::string_t BTExportModelParams::getUnits() const
{
    return m_Units;
}

void BTExportModelParams::setUnits(const utility::string_t& value)
{
    m_Units = value;
    m_UnitsIsSet = true;
}

bool BTExportModelParams::unitsIsSet() const
{
    return m_UnitsIsSet;
}

void BTExportModelParams::unsetUnits()
{
    m_UnitsIsSet = false;
}
utility::string_t BTExportModelParams::getUserId() const
{
    return m_UserId;
}

void BTExportModelParams::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool BTExportModelParams::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void BTExportModelParams::unsetUserId()
{
    m_UserIdIsSet = false;
}
int32_t BTExportModelParams::getValidForDays() const
{
    return m_ValidForDays;
}

void BTExportModelParams::setValidForDays(int32_t value)
{
    m_ValidForDays = value;
    m_ValidForDaysIsSet = true;
}

bool BTExportModelParams::validForDaysIsSet() const
{
    return m_ValidForDaysIsSet;
}

void BTExportModelParams::unsetValidForDays()
{
    m_ValidForDaysIsSet = false;
}
utility::string_t BTExportModelParams::getVersion() const
{
    return m_Version;
}

void BTExportModelParams::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTExportModelParams::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTExportModelParams::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t BTExportModelParams::getView() const
{
    return m_View;
}

void BTExportModelParams::setView(const utility::string_t& value)
{
    m_View = value;
    m_ViewIsSet = true;
}

bool BTExportModelParams::viewIsSet() const
{
    return m_ViewIsSet;
}

void BTExportModelParams::unsetView()
{
    m_ViewIsSet = false;
}
utility::string_t BTExportModelParams::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTExportModelParams::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTExportModelParams::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTExportModelParams::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
bool BTExportModelParams::isZipSingleFileOutput() const
{
    return m_ZipSingleFileOutput;
}

void BTExportModelParams::setZipSingleFileOutput(bool value)
{
    m_ZipSingleFileOutput = value;
    m_ZipSingleFileOutputIsSet = true;
}

bool BTExportModelParams::zipSingleFileOutputIsSet() const
{
    return m_ZipSingleFileOutputIsSet;
}

void BTExportModelParams::unsetZipSingleFileOutput()
{
    m_ZipSingleFileOutputIsSet = false;
}
}
}
}
}


