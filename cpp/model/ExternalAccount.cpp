/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExternalAccount.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ExternalAccount::ExternalAccount()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Customer = utility::conversions::to_string_t("");
    m_CustomerIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InstanceURL = utility::conversions::to_string_t("");
    m_InstanceURLIsSet = false;
    m_MetadataIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
}

ExternalAccount::~ExternalAccount()
{
}

void ExternalAccount::validate()
{
    // TODO: implement validation
}

web::json::value ExternalAccount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    }
    if(m_CustomerIsSet)
    {
        val[utility::conversions::to_string_t("customer")] = ModelBase::toJson(m_Customer);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InstanceURLIsSet)
    {
        val[utility::conversions::to_string_t("instanceURL")] = ModelBase::toJson(m_InstanceURL);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t("metadata")] = ModelBase::toJson(m_Metadata);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }

    return val;
}

bool ExternalAccount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("account")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("account"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_account;
            ok &= ModelBase::fromJson(fieldValue, refVal_account);
            setAccount(refVal_account);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customer;
            ok &= ModelBase::fromJson(fieldValue, refVal_customer);
            setCustomer(refVal_customer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instanceURL")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instanceURL"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_instanceURL;
            ok &= ModelBase::fromJson(fieldValue, refVal_instanceURL);
            setInstanceURL(refVal_instanceURL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadata")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadata"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_metadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadata);
            setMetadata(refVal_metadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    return ok;
}

void ExternalAccount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customer"), m_Customer));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_InstanceURLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instanceURL"), m_InstanceURL));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadata"), m_Metadata));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
}

bool ExternalAccount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("account")))
    {
        utility::string_t refVal_account;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("account")), refVal_account );
        setAccount(refVal_account);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customer")))
    {
        utility::string_t refVal_customer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customer")), refVal_customer );
        setCustomer(refVal_customer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instanceURL")))
    {
        utility::string_t refVal_instanceURL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instanceURL")), refVal_instanceURL );
        setInstanceURL(refVal_instanceURL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
    {
        std::map<utility::string_t, utility::string_t> refVal_metadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadata")), refVal_metadata );
        setMetadata(refVal_metadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    return ok;
}

utility::string_t ExternalAccount::getAccount() const
{
    return m_Account;
}

void ExternalAccount::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool ExternalAccount::accountIsSet() const
{
    return m_AccountIsSet;
}

void ExternalAccount::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t ExternalAccount::getCustomer() const
{
    return m_Customer;
}

void ExternalAccount::setCustomer(const utility::string_t& value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}

bool ExternalAccount::customerIsSet() const
{
    return m_CustomerIsSet;
}

void ExternalAccount::unsetCustomer()
{
    m_CustomerIsSet = false;
}
utility::string_t ExternalAccount::getId() const
{
    return m_Id;
}

void ExternalAccount::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ExternalAccount::idIsSet() const
{
    return m_IdIsSet;
}

void ExternalAccount::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ExternalAccount::getInstanceURL() const
{
    return m_InstanceURL;
}

void ExternalAccount::setInstanceURL(const utility::string_t& value)
{
    m_InstanceURL = value;
    m_InstanceURLIsSet = true;
}

bool ExternalAccount::instanceURLIsSet() const
{
    return m_InstanceURLIsSet;
}

void ExternalAccount::unsetInstanceURL()
{
    m_InstanceURLIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ExternalAccount::getMetadata()
{
    return m_Metadata;
}

void ExternalAccount::setMetadata(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool ExternalAccount::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void ExternalAccount::unsetMetadata()
{
    m_MetadataIsSet = false;
}
utility::string_t ExternalAccount::getObject() const
{
    return m_object;
}

void ExternalAccount::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool ExternalAccount::objectIsSet() const
{
    return m_objectIsSet;
}

void ExternalAccount::unsetobject()
{
    m_objectIsSet = false;
}
}
}
}
}


