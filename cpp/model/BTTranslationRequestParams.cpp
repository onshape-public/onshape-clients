/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTranslationRequestParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTranslationRequestParams::BTTranslationRequestParams()
{
    m_AllowFaultyParts = false;
    m_AllowFaultyPartsIsSet = false;
    m_CreateComposite = false;
    m_CreateCompositeIsSet = false;
    m_CreateDrawingIfPossible = false;
    m_CreateDrawingIfPossibleIsSet = false;
    m_EncodedFilename = utility::conversions::to_string_t("");
    m_EncodedFilenameIsSet = false;
    m_ExtractAssemblyHierarchy = false;
    m_ExtractAssemblyHierarchyIsSet = false;
    m_fileIsSet = false;
    m_FileBodyWithDetailsIsSet = false;
    m_FileContentLength = 0L;
    m_FileContentLengthIsSet = false;
    m_FileDetailIsSet = false;
    m_FlattenAssemblies = false;
    m_FlattenAssembliesIsSet = false;
    m_FormatName = utility::conversions::to_string_t("");
    m_FormatNameIsSet = false;
    m_IsyAxisIsUp = false;
    m_IsyAxisIsUpIsSet = false;
    m_JoinAdjacentSurfaces = false;
    m_JoinAdjacentSurfacesIsSet = false;
    m_LocationElementId = utility::conversions::to_string_t("");
    m_LocationElementIdIsSet = false;
    m_LocationGroupId = utility::conversions::to_string_t("");
    m_LocationGroupIdIsSet = false;
    m_LocationPosition = 0;
    m_LocationPositionIsSet = false;
    m_NotifyUser = false;
    m_NotifyUserIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = utility::conversions::to_string_t("");
    m_OwnerTypeIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_r_public = false;
    m_r_publicIsSet = false;
    m_SplitAssembliesIntoMultipleDocuments = false;
    m_SplitAssembliesIntoMultipleDocumentsIsSet = false;
    m_StoreInDocument = false;
    m_StoreInDocumentIsSet = false;
    m_Translate = false;
    m_TranslateIsSet = false;
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_UploadId = utility::conversions::to_string_t("");
    m_UploadIdIsSet = false;
    m_VersionString = utility::conversions::to_string_t("");
    m_VersionStringIsSet = false;
}

BTTranslationRequestParams::~BTTranslationRequestParams()
{
}

void BTTranslationRequestParams::validate()
{
    // TODO: implement validation
}

web::json::value BTTranslationRequestParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AllowFaultyPartsIsSet)
    {
        val[utility::conversions::to_string_t("allowFaultyParts")] = ModelBase::toJson(m_AllowFaultyParts);
    }
    if(m_CreateCompositeIsSet)
    {
        val[utility::conversions::to_string_t("createComposite")] = ModelBase::toJson(m_CreateComposite);
    }
    if(m_CreateDrawingIfPossibleIsSet)
    {
        val[utility::conversions::to_string_t("createDrawingIfPossible")] = ModelBase::toJson(m_CreateDrawingIfPossible);
    }
    if(m_EncodedFilenameIsSet)
    {
        val[utility::conversions::to_string_t("encodedFilename")] = ModelBase::toJson(m_EncodedFilename);
    }
    if(m_ExtractAssemblyHierarchyIsSet)
    {
        val[utility::conversions::to_string_t("extractAssemblyHierarchy")] = ModelBase::toJson(m_ExtractAssemblyHierarchy);
    }
    if(m_fileIsSet)
    {
        val[utility::conversions::to_string_t("file")] = ModelBase::toJson(m_file);
    }
    if(m_FileBodyWithDetailsIsSet)
    {
        val[utility::conversions::to_string_t("fileBodyWithDetails")] = ModelBase::toJson(m_FileBodyWithDetails);
    }
    if(m_FileContentLengthIsSet)
    {
        val[utility::conversions::to_string_t("fileContentLength")] = ModelBase::toJson(m_FileContentLength);
    }
    if(m_FileDetailIsSet)
    {
        val[utility::conversions::to_string_t("fileDetail")] = ModelBase::toJson(m_FileDetail);
    }
    if(m_FlattenAssembliesIsSet)
    {
        val[utility::conversions::to_string_t("flattenAssemblies")] = ModelBase::toJson(m_FlattenAssemblies);
    }
    if(m_FormatNameIsSet)
    {
        val[utility::conversions::to_string_t("formatName")] = ModelBase::toJson(m_FormatName);
    }
    if(m_IsyAxisIsUpIsSet)
    {
        val[utility::conversions::to_string_t("isyAxisIsUp")] = ModelBase::toJson(m_IsyAxisIsUp);
    }
    if(m_JoinAdjacentSurfacesIsSet)
    {
        val[utility::conversions::to_string_t("joinAdjacentSurfaces")] = ModelBase::toJson(m_JoinAdjacentSurfaces);
    }
    if(m_LocationElementIdIsSet)
    {
        val[utility::conversions::to_string_t("locationElementId")] = ModelBase::toJson(m_LocationElementId);
    }
    if(m_LocationGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("locationGroupId")] = ModelBase::toJson(m_LocationGroupId);
    }
    if(m_LocationPositionIsSet)
    {
        val[utility::conversions::to_string_t("locationPosition")] = ModelBase::toJson(m_LocationPosition);
    }
    if(m_NotifyUserIsSet)
    {
        val[utility::conversions::to_string_t("notifyUser")] = ModelBase::toJson(m_NotifyUser);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_r_publicIsSet)
    {
        val[utility::conversions::to_string_t("public")] = ModelBase::toJson(m_r_public);
    }
    if(m_SplitAssembliesIntoMultipleDocumentsIsSet)
    {
        val[utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")] = ModelBase::toJson(m_SplitAssembliesIntoMultipleDocuments);
    }
    if(m_StoreInDocumentIsSet)
    {
        val[utility::conversions::to_string_t("storeInDocument")] = ModelBase::toJson(m_StoreInDocument);
    }
    if(m_TranslateIsSet)
    {
        val[utility::conversions::to_string_t("translate")] = ModelBase::toJson(m_Translate);
    }
    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t("unit")] = ModelBase::toJson(m_Unit);
    }
    if(m_UploadIdIsSet)
    {
        val[utility::conversions::to_string_t("uploadId")] = ModelBase::toJson(m_UploadId);
    }
    if(m_VersionStringIsSet)
    {
        val[utility::conversions::to_string_t("versionString")] = ModelBase::toJson(m_VersionString);
    }

    return val;
}

bool BTTranslationRequestParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("allowFaultyParts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowFaultyParts"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowFaultyParts;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowFaultyParts);
            setAllowFaultyParts(refVal_allowFaultyParts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createComposite")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createComposite"));
        if(!fieldValue.is_null())
        {
            bool refVal_createComposite;
            ok &= ModelBase::fromJson(fieldValue, refVal_createComposite);
            setCreateComposite(refVal_createComposite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createDrawingIfPossible")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createDrawingIfPossible"));
        if(!fieldValue.is_null())
        {
            bool refVal_createDrawingIfPossible;
            ok &= ModelBase::fromJson(fieldValue, refVal_createDrawingIfPossible);
            setCreateDrawingIfPossible(refVal_createDrawingIfPossible);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("encodedFilename")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("encodedFilename"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_encodedFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_encodedFilename);
            setEncodedFilename(refVal_encodedFilename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extractAssemblyHierarchy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("extractAssemblyHierarchy"));
        if(!fieldValue.is_null())
        {
            bool refVal_extractAssemblyHierarchy;
            ok &= ModelBase::fromJson(fieldValue, refVal_extractAssemblyHierarchy);
            setExtractAssemblyHierarchy(refVal_extractAssemblyHierarchy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("file"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_file;
            ok &= ModelBase::fromJson(fieldValue, refVal_file);
            setFile(refVal_file);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileBodyWithDetails")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileBodyWithDetails"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FormDataBodyPart> refVal_fileBodyWithDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileBodyWithDetails);
            setFileBodyWithDetails(refVal_fileBodyWithDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileContentLength")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileContentLength"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_fileContentLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileContentLength);
            setFileContentLength(refVal_fileContentLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileDetail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileDetail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FormDataContentDisposition> refVal_fileDetail;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileDetail);
            setFileDetail(refVal_fileDetail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flattenAssemblies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("flattenAssemblies"));
        if(!fieldValue.is_null())
        {
            bool refVal_flattenAssemblies;
            ok &= ModelBase::fromJson(fieldValue, refVal_flattenAssemblies);
            setFlattenAssemblies(refVal_flattenAssemblies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("formatName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("formatName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_formatName;
            ok &= ModelBase::fromJson(fieldValue, refVal_formatName);
            setFormatName(refVal_formatName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isyAxisIsUp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isyAxisIsUp"));
        if(!fieldValue.is_null())
        {
            bool refVal_isyAxisIsUp;
            ok &= ModelBase::fromJson(fieldValue, refVal_isyAxisIsUp);
            setIsyAxisIsUp(refVal_isyAxisIsUp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("joinAdjacentSurfaces")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("joinAdjacentSurfaces"));
        if(!fieldValue.is_null())
        {
            bool refVal_joinAdjacentSurfaces;
            ok &= ModelBase::fromJson(fieldValue, refVal_joinAdjacentSurfaces);
            setJoinAdjacentSurfaces(refVal_joinAdjacentSurfaces);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_locationElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationElementId);
            setLocationElementId(refVal_locationElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationGroupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_locationGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationGroupId);
            setLocationGroupId(refVal_locationGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationPosition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationPosition"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_locationPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationPosition);
            setLocationPosition(refVal_locationPosition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifyUser")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notifyUser"));
        if(!fieldValue.is_null())
        {
            bool refVal_notifyUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_notifyUser);
            setNotifyUser(refVal_notifyUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("public")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("public"));
        if(!fieldValue.is_null())
        {
            bool refVal_public;
            ok &= ModelBase::fromJson(fieldValue, refVal_public);
            setRPublic(refVal_public);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments"));
        if(!fieldValue.is_null())
        {
            bool refVal_splitAssembliesIntoMultipleDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_splitAssembliesIntoMultipleDocuments);
            setSplitAssembliesIntoMultipleDocuments(refVal_splitAssembliesIntoMultipleDocuments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("storeInDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("storeInDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_storeInDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_storeInDocument);
            setStoreInDocument(refVal_storeInDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("translate"));
        if(!fieldValue.is_null())
        {
            bool refVal_translate;
            ok &= ModelBase::fromJson(fieldValue, refVal_translate);
            setTranslate(refVal_translate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unit"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unit;
            ok &= ModelBase::fromJson(fieldValue, refVal_unit);
            setUnit(refVal_unit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uploadId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uploadId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uploadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uploadId);
            setUploadId(refVal_uploadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionString;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionString);
            setVersionString(refVal_versionString);
        }
    }
    return ok;
}

void BTTranslationRequestParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AllowFaultyPartsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowFaultyParts"), m_AllowFaultyParts));
    }
    if(m_CreateCompositeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createComposite"), m_CreateComposite));
    }
    if(m_CreateDrawingIfPossibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createDrawingIfPossible"), m_CreateDrawingIfPossible));
    }
    if(m_EncodedFilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("encodedFilename"), m_EncodedFilename));
    }
    if(m_ExtractAssemblyHierarchyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("extractAssemblyHierarchy"), m_ExtractAssemblyHierarchy));
    }
    if(m_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("file"), m_file));
    }
    if(m_FileBodyWithDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileBodyWithDetails"), m_FileBodyWithDetails));
    }
    if(m_FileContentLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileContentLength"), m_FileContentLength));
    }
    if(m_FileDetailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileDetail"), m_FileDetail));
    }
    if(m_FlattenAssembliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("flattenAssemblies"), m_FlattenAssemblies));
    }
    if(m_FormatNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("formatName"), m_FormatName));
    }
    if(m_IsyAxisIsUpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isyAxisIsUp"), m_IsyAxisIsUp));
    }
    if(m_JoinAdjacentSurfacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("joinAdjacentSurfaces"), m_JoinAdjacentSurfaces));
    }
    if(m_LocationElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationElementId"), m_LocationElementId));
    }
    if(m_LocationGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationGroupId"), m_LocationGroupId));
    }
    if(m_LocationPositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationPosition"), m_LocationPosition));
    }
    if(m_NotifyUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notifyUser"), m_NotifyUser));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_r_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public"), m_r_public));
    }
    if(m_SplitAssembliesIntoMultipleDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments"), m_SplitAssembliesIntoMultipleDocuments));
    }
    if(m_StoreInDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("storeInDocument"), m_StoreInDocument));
    }
    if(m_TranslateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("translate"), m_Translate));
    }
    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit"), m_Unit));
    }
    if(m_UploadIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uploadId"), m_UploadId));
    }
    if(m_VersionStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionString"), m_VersionString));
    }
}

bool BTTranslationRequestParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allowFaultyParts")))
    {
        bool refVal_allowFaultyParts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowFaultyParts")), refVal_allowFaultyParts );
        setAllowFaultyParts(refVal_allowFaultyParts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createComposite")))
    {
        bool refVal_createComposite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createComposite")), refVal_createComposite );
        setCreateComposite(refVal_createComposite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createDrawingIfPossible")))
    {
        bool refVal_createDrawingIfPossible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createDrawingIfPossible")), refVal_createDrawingIfPossible );
        setCreateDrawingIfPossible(refVal_createDrawingIfPossible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("encodedFilename")))
    {
        utility::string_t refVal_encodedFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("encodedFilename")), refVal_encodedFilename );
        setEncodedFilename(refVal_encodedFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extractAssemblyHierarchy")))
    {
        bool refVal_extractAssemblyHierarchy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("extractAssemblyHierarchy")), refVal_extractAssemblyHierarchy );
        setExtractAssemblyHierarchy(refVal_extractAssemblyHierarchy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file")))
    {
        std::shared_ptr<HttpContent> refVal_file;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("file")), refVal_file );
        setFile(refVal_file);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileBodyWithDetails")))
    {
        std::shared_ptr<FormDataBodyPart> refVal_fileBodyWithDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileBodyWithDetails")), refVal_fileBodyWithDetails );
        setFileBodyWithDetails(refVal_fileBodyWithDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileContentLength")))
    {
        int64_t refVal_fileContentLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileContentLength")), refVal_fileContentLength );
        setFileContentLength(refVal_fileContentLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileDetail")))
    {
        std::shared_ptr<FormDataContentDisposition> refVal_fileDetail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileDetail")), refVal_fileDetail );
        setFileDetail(refVal_fileDetail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flattenAssemblies")))
    {
        bool refVal_flattenAssemblies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("flattenAssemblies")), refVal_flattenAssemblies );
        setFlattenAssemblies(refVal_flattenAssemblies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("formatName")))
    {
        utility::string_t refVal_formatName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("formatName")), refVal_formatName );
        setFormatName(refVal_formatName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isyAxisIsUp")))
    {
        bool refVal_isyAxisIsUp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isyAxisIsUp")), refVal_isyAxisIsUp );
        setIsyAxisIsUp(refVal_isyAxisIsUp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("joinAdjacentSurfaces")))
    {
        bool refVal_joinAdjacentSurfaces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("joinAdjacentSurfaces")), refVal_joinAdjacentSurfaces );
        setJoinAdjacentSurfaces(refVal_joinAdjacentSurfaces);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationElementId")))
    {
        utility::string_t refVal_locationElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationElementId")), refVal_locationElementId );
        setLocationElementId(refVal_locationElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationGroupId")))
    {
        utility::string_t refVal_locationGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationGroupId")), refVal_locationGroupId );
        setLocationGroupId(refVal_locationGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationPosition")))
    {
        int32_t refVal_locationPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationPosition")), refVal_locationPosition );
        setLocationPosition(refVal_locationPosition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifyUser")))
    {
        bool refVal_notifyUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notifyUser")), refVal_notifyUser );
        setNotifyUser(refVal_notifyUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        utility::string_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("public")))
    {
        bool refVal_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("public")), refVal_public );
        setRPublic(refVal_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")))
    {
        bool refVal_splitAssembliesIntoMultipleDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")), refVal_splitAssembliesIntoMultipleDocuments );
        setSplitAssembliesIntoMultipleDocuments(refVal_splitAssembliesIntoMultipleDocuments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("storeInDocument")))
    {
        bool refVal_storeInDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("storeInDocument")), refVal_storeInDocument );
        setStoreInDocument(refVal_storeInDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translate")))
    {
        bool refVal_translate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("translate")), refVal_translate );
        setTranslate(refVal_translate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unit")))
    {
        utility::string_t refVal_unit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit")), refVal_unit );
        setUnit(refVal_unit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uploadId")))
    {
        utility::string_t refVal_uploadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uploadId")), refVal_uploadId );
        setUploadId(refVal_uploadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionString")))
    {
        utility::string_t refVal_versionString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionString")), refVal_versionString );
        setVersionString(refVal_versionString);
    }
    return ok;
}

bool BTTranslationRequestParams::isAllowFaultyParts() const
{
    return m_AllowFaultyParts;
}

void BTTranslationRequestParams::setAllowFaultyParts(bool value)
{
    m_AllowFaultyParts = value;
    m_AllowFaultyPartsIsSet = true;
}

bool BTTranslationRequestParams::allowFaultyPartsIsSet() const
{
    return m_AllowFaultyPartsIsSet;
}

void BTTranslationRequestParams::unsetAllowFaultyParts()
{
    m_AllowFaultyPartsIsSet = false;
}
bool BTTranslationRequestParams::isCreateComposite() const
{
    return m_CreateComposite;
}

void BTTranslationRequestParams::setCreateComposite(bool value)
{
    m_CreateComposite = value;
    m_CreateCompositeIsSet = true;
}

bool BTTranslationRequestParams::createCompositeIsSet() const
{
    return m_CreateCompositeIsSet;
}

void BTTranslationRequestParams::unsetCreateComposite()
{
    m_CreateCompositeIsSet = false;
}
bool BTTranslationRequestParams::isCreateDrawingIfPossible() const
{
    return m_CreateDrawingIfPossible;
}

void BTTranslationRequestParams::setCreateDrawingIfPossible(bool value)
{
    m_CreateDrawingIfPossible = value;
    m_CreateDrawingIfPossibleIsSet = true;
}

bool BTTranslationRequestParams::createDrawingIfPossibleIsSet() const
{
    return m_CreateDrawingIfPossibleIsSet;
}

void BTTranslationRequestParams::unsetCreateDrawingIfPossible()
{
    m_CreateDrawingIfPossibleIsSet = false;
}
utility::string_t BTTranslationRequestParams::getEncodedFilename() const
{
    return m_EncodedFilename;
}

void BTTranslationRequestParams::setEncodedFilename(const utility::string_t& value)
{
    m_EncodedFilename = value;
    m_EncodedFilenameIsSet = true;
}

bool BTTranslationRequestParams::encodedFilenameIsSet() const
{
    return m_EncodedFilenameIsSet;
}

void BTTranslationRequestParams::unsetEncodedFilename()
{
    m_EncodedFilenameIsSet = false;
}
bool BTTranslationRequestParams::isExtractAssemblyHierarchy() const
{
    return m_ExtractAssemblyHierarchy;
}

void BTTranslationRequestParams::setExtractAssemblyHierarchy(bool value)
{
    m_ExtractAssemblyHierarchy = value;
    m_ExtractAssemblyHierarchyIsSet = true;
}

bool BTTranslationRequestParams::extractAssemblyHierarchyIsSet() const
{
    return m_ExtractAssemblyHierarchyIsSet;
}

void BTTranslationRequestParams::unsetExtractAssemblyHierarchy()
{
    m_ExtractAssemblyHierarchyIsSet = false;
}
std::shared_ptr<HttpContent> BTTranslationRequestParams::getFile() const
{
    return m_file;
}

void BTTranslationRequestParams::setFile(const std::shared_ptr<HttpContent>& value)
{
    m_file = value;
    m_fileIsSet = true;
}

bool BTTranslationRequestParams::fileIsSet() const
{
    return m_fileIsSet;
}

void BTTranslationRequestParams::unsetfile()
{
    m_fileIsSet = false;
}
std::shared_ptr<FormDataBodyPart> BTTranslationRequestParams::getFileBodyWithDetails() const
{
    return m_FileBodyWithDetails;
}

void BTTranslationRequestParams::setFileBodyWithDetails(const std::shared_ptr<FormDataBodyPart>& value)
{
    m_FileBodyWithDetails = value;
    m_FileBodyWithDetailsIsSet = true;
}

bool BTTranslationRequestParams::fileBodyWithDetailsIsSet() const
{
    return m_FileBodyWithDetailsIsSet;
}

void BTTranslationRequestParams::unsetFileBodyWithDetails()
{
    m_FileBodyWithDetailsIsSet = false;
}
int64_t BTTranslationRequestParams::getFileContentLength() const
{
    return m_FileContentLength;
}

void BTTranslationRequestParams::setFileContentLength(int64_t value)
{
    m_FileContentLength = value;
    m_FileContentLengthIsSet = true;
}

bool BTTranslationRequestParams::fileContentLengthIsSet() const
{
    return m_FileContentLengthIsSet;
}

void BTTranslationRequestParams::unsetFileContentLength()
{
    m_FileContentLengthIsSet = false;
}
std::shared_ptr<FormDataContentDisposition> BTTranslationRequestParams::getFileDetail() const
{
    return m_FileDetail;
}

void BTTranslationRequestParams::setFileDetail(const std::shared_ptr<FormDataContentDisposition>& value)
{
    m_FileDetail = value;
    m_FileDetailIsSet = true;
}

bool BTTranslationRequestParams::fileDetailIsSet() const
{
    return m_FileDetailIsSet;
}

void BTTranslationRequestParams::unsetFileDetail()
{
    m_FileDetailIsSet = false;
}
bool BTTranslationRequestParams::isFlattenAssemblies() const
{
    return m_FlattenAssemblies;
}

void BTTranslationRequestParams::setFlattenAssemblies(bool value)
{
    m_FlattenAssemblies = value;
    m_FlattenAssembliesIsSet = true;
}

bool BTTranslationRequestParams::flattenAssembliesIsSet() const
{
    return m_FlattenAssembliesIsSet;
}

void BTTranslationRequestParams::unsetFlattenAssemblies()
{
    m_FlattenAssembliesIsSet = false;
}
utility::string_t BTTranslationRequestParams::getFormatName() const
{
    return m_FormatName;
}

void BTTranslationRequestParams::setFormatName(const utility::string_t& value)
{
    m_FormatName = value;
    m_FormatNameIsSet = true;
}

bool BTTranslationRequestParams::formatNameIsSet() const
{
    return m_FormatNameIsSet;
}

void BTTranslationRequestParams::unsetFormatName()
{
    m_FormatNameIsSet = false;
}
bool BTTranslationRequestParams::isIsyAxisIsUp() const
{
    return m_IsyAxisIsUp;
}

void BTTranslationRequestParams::setIsyAxisIsUp(bool value)
{
    m_IsyAxisIsUp = value;
    m_IsyAxisIsUpIsSet = true;
}

bool BTTranslationRequestParams::isyAxisIsUpIsSet() const
{
    return m_IsyAxisIsUpIsSet;
}

void BTTranslationRequestParams::unsetIsyAxisIsUp()
{
    m_IsyAxisIsUpIsSet = false;
}
bool BTTranslationRequestParams::isJoinAdjacentSurfaces() const
{
    return m_JoinAdjacentSurfaces;
}

void BTTranslationRequestParams::setJoinAdjacentSurfaces(bool value)
{
    m_JoinAdjacentSurfaces = value;
    m_JoinAdjacentSurfacesIsSet = true;
}

bool BTTranslationRequestParams::joinAdjacentSurfacesIsSet() const
{
    return m_JoinAdjacentSurfacesIsSet;
}

void BTTranslationRequestParams::unsetJoinAdjacentSurfaces()
{
    m_JoinAdjacentSurfacesIsSet = false;
}
utility::string_t BTTranslationRequestParams::getLocationElementId() const
{
    return m_LocationElementId;
}

void BTTranslationRequestParams::setLocationElementId(const utility::string_t& value)
{
    m_LocationElementId = value;
    m_LocationElementIdIsSet = true;
}

bool BTTranslationRequestParams::locationElementIdIsSet() const
{
    return m_LocationElementIdIsSet;
}

void BTTranslationRequestParams::unsetLocationElementId()
{
    m_LocationElementIdIsSet = false;
}
utility::string_t BTTranslationRequestParams::getLocationGroupId() const
{
    return m_LocationGroupId;
}

void BTTranslationRequestParams::setLocationGroupId(const utility::string_t& value)
{
    m_LocationGroupId = value;
    m_LocationGroupIdIsSet = true;
}

bool BTTranslationRequestParams::locationGroupIdIsSet() const
{
    return m_LocationGroupIdIsSet;
}

void BTTranslationRequestParams::unsetLocationGroupId()
{
    m_LocationGroupIdIsSet = false;
}
int32_t BTTranslationRequestParams::getLocationPosition() const
{
    return m_LocationPosition;
}

void BTTranslationRequestParams::setLocationPosition(int32_t value)
{
    m_LocationPosition = value;
    m_LocationPositionIsSet = true;
}

bool BTTranslationRequestParams::locationPositionIsSet() const
{
    return m_LocationPositionIsSet;
}

void BTTranslationRequestParams::unsetLocationPosition()
{
    m_LocationPositionIsSet = false;
}
bool BTTranslationRequestParams::isNotifyUser() const
{
    return m_NotifyUser;
}

void BTTranslationRequestParams::setNotifyUser(bool value)
{
    m_NotifyUser = value;
    m_NotifyUserIsSet = true;
}

bool BTTranslationRequestParams::notifyUserIsSet() const
{
    return m_NotifyUserIsSet;
}

void BTTranslationRequestParams::unsetNotifyUser()
{
    m_NotifyUserIsSet = false;
}
utility::string_t BTTranslationRequestParams::getOwnerId() const
{
    return m_OwnerId;
}

void BTTranslationRequestParams::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTTranslationRequestParams::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTTranslationRequestParams::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
utility::string_t BTTranslationRequestParams::getOwnerType() const
{
    return m_OwnerType;
}

void BTTranslationRequestParams::setOwnerType(const utility::string_t& value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTTranslationRequestParams::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTTranslationRequestParams::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
utility::string_t BTTranslationRequestParams::getParentId() const
{
    return m_ParentId;
}

void BTTranslationRequestParams::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTTranslationRequestParams::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTTranslationRequestParams::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTTranslationRequestParams::getProjectId() const
{
    return m_ProjectId;
}

void BTTranslationRequestParams::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTTranslationRequestParams::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTTranslationRequestParams::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
bool BTTranslationRequestParams::isRPublic() const
{
    return m_r_public;
}

void BTTranslationRequestParams::setRPublic(bool value)
{
    m_r_public = value;
    m_r_publicIsSet = true;
}

bool BTTranslationRequestParams::rPublicIsSet() const
{
    return m_r_publicIsSet;
}

void BTTranslationRequestParams::unsetr_public()
{
    m_r_publicIsSet = false;
}
bool BTTranslationRequestParams::isSplitAssembliesIntoMultipleDocuments() const
{
    return m_SplitAssembliesIntoMultipleDocuments;
}

void BTTranslationRequestParams::setSplitAssembliesIntoMultipleDocuments(bool value)
{
    m_SplitAssembliesIntoMultipleDocuments = value;
    m_SplitAssembliesIntoMultipleDocumentsIsSet = true;
}

bool BTTranslationRequestParams::splitAssembliesIntoMultipleDocumentsIsSet() const
{
    return m_SplitAssembliesIntoMultipleDocumentsIsSet;
}

void BTTranslationRequestParams::unsetSplitAssembliesIntoMultipleDocuments()
{
    m_SplitAssembliesIntoMultipleDocumentsIsSet = false;
}
bool BTTranslationRequestParams::isStoreInDocument() const
{
    return m_StoreInDocument;
}

void BTTranslationRequestParams::setStoreInDocument(bool value)
{
    m_StoreInDocument = value;
    m_StoreInDocumentIsSet = true;
}

bool BTTranslationRequestParams::storeInDocumentIsSet() const
{
    return m_StoreInDocumentIsSet;
}

void BTTranslationRequestParams::unsetStoreInDocument()
{
    m_StoreInDocumentIsSet = false;
}
bool BTTranslationRequestParams::isTranslate() const
{
    return m_Translate;
}

void BTTranslationRequestParams::setTranslate(bool value)
{
    m_Translate = value;
    m_TranslateIsSet = true;
}

bool BTTranslationRequestParams::translateIsSet() const
{
    return m_TranslateIsSet;
}

void BTTranslationRequestParams::unsetTranslate()
{
    m_TranslateIsSet = false;
}
utility::string_t BTTranslationRequestParams::getUnit() const
{
    return m_Unit;
}

void BTTranslationRequestParams::setUnit(const utility::string_t& value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}

bool BTTranslationRequestParams::unitIsSet() const
{
    return m_UnitIsSet;
}

void BTTranslationRequestParams::unsetUnit()
{
    m_UnitIsSet = false;
}
utility::string_t BTTranslationRequestParams::getUploadId() const
{
    return m_UploadId;
}

void BTTranslationRequestParams::setUploadId(const utility::string_t& value)
{
    m_UploadId = value;
    m_UploadIdIsSet = true;
}

bool BTTranslationRequestParams::uploadIdIsSet() const
{
    return m_UploadIdIsSet;
}

void BTTranslationRequestParams::unsetUploadId()
{
    m_UploadIdIsSet = false;
}
utility::string_t BTTranslationRequestParams::getVersionString() const
{
    return m_VersionString;
}

void BTTranslationRequestParams::setVersionString(const utility::string_t& value)
{
    m_VersionString = value;
    m_VersionStringIsSet = true;
}

bool BTTranslationRequestParams::versionStringIsSet() const
{
    return m_VersionStringIsSet;
}

void BTTranslationRequestParams::unsetVersionString()
{
    m_VersionStringIsSet = false;
}
}
}
}
}


