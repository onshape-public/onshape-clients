/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTUnitsDisplayPrecision.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTUnitsDisplayPrecision_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTUnitsDisplayPrecision_H_


#include "../ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTUnitsDisplayPrecision
    : public ModelBase
{
public:
    BTUnitsDisplayPrecision();
    virtual ~BTUnitsDisplayPrecision();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTUnitsDisplayPrecision members

    /// <summary>
    /// 
    /// </summary>
    int32_t getCentimeter() const;
    bool centimeterIsSet() const;
    void unsetCentimeter();

    void setCentimeter(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDegree() const;
    bool degreeIsSet() const;
    void unsetDegree();

    void setDegree(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFoot() const;
    bool footIsSet() const;
    void unsetFoot();

    void setFoot(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getGram() const;
    bool gramIsSet() const;
    void unsetGram();

    void setGram(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getInch() const;
    bool inchIsSet() const;
    void unsetInch();

    void setInch(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getKilogram() const;
    bool kilogramIsSet() const;
    void unsetKilogram();

    void setKilogram(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMeter() const;
    bool meterIsSet() const;
    void unsetMeter();

    void setMeter(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMillimeter() const;
    bool millimeterIsSet() const;
    void unsetMillimeter();

    void setMillimeter(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOunce() const;
    bool ounceIsSet() const;
    void unsetOunce();

    void setOunce(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPound() const;
    bool poundIsSet() const;
    void unsetPound();

    void setPound(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRadian() const;
    bool radianIsSet() const;
    void unsetRadian();

    void setRadian(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getYard() const;
    bool yardIsSet() const;
    void unsetYard();

    void setYard(int32_t value);


protected:
    int32_t m_Centimeter;
    bool m_CentimeterIsSet;
    int32_t m_Degree;
    bool m_DegreeIsSet;
    int32_t m_Foot;
    bool m_FootIsSet;
    int32_t m_Gram;
    bool m_GramIsSet;
    int32_t m_Inch;
    bool m_InchIsSet;
    int32_t m_Kilogram;
    bool m_KilogramIsSet;
    int32_t m_Meter;
    bool m_MeterIsSet;
    int32_t m_Millimeter;
    bool m_MillimeterIsSet;
    int32_t m_Ounce;
    bool m_OunceIsSet;
    int32_t m_Pound;
    bool m_PoundIsSet;
    int32_t m_Radian;
    bool m_RadianIsSet;
    int32_t m_Yard;
    bool m_YardIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTUnitsDisplayPrecision_H_ */
