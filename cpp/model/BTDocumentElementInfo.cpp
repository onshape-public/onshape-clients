/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentElementInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentElementInfo::BTDocumentElementInfo()
{
    m_AngleUnits = utility::conversions::to_string_t("");
    m_AngleUnitsIsSet = false;
    m_DataType = utility::conversions::to_string_t("");
    m_DataTypeIsSet = false;
    m_ElementType = utility::conversions::to_string_t("");
    m_ElementTypeIsSet = false;
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_ForeignDataId = utility::conversions::to_string_t("");
    m_ForeignDataIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_LengthUnits = utility::conversions::to_string_t("");
    m_LengthUnitsIsSet = false;
    m_MassUnits = utility::conversions::to_string_t("");
    m_MassUnitsIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_SpecifiedUnit = utility::conversions::to_string_t("");
    m_SpecifiedUnitIsSet = false;
    m_ThumbnailInfoIsSet = false;
    m_Thumbnails = utility::conversions::to_string_t("");
    m_ThumbnailsIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Unupdatable = false;
    m_UnupdatableIsSet = false;
}

BTDocumentElementInfo::~BTDocumentElementInfo()
{
}

void BTDocumentElementInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentElementInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AngleUnitsIsSet)
    {
        val[utility::conversions::to_string_t("angleUnits")] = ModelBase::toJson(m_AngleUnits);
    }
    if(m_DataTypeIsSet)
    {
        val[utility::conversions::to_string_t("dataType")] = ModelBase::toJson(m_DataType);
    }
    if(m_ElementTypeIsSet)
    {
        val[utility::conversions::to_string_t("elementType")] = ModelBase::toJson(m_ElementType);
    }
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t("filename")] = ModelBase::toJson(m_Filename);
    }
    if(m_ForeignDataIdIsSet)
    {
        val[utility::conversions::to_string_t("foreignDataId")] = ModelBase::toJson(m_ForeignDataId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LengthUnitsIsSet)
    {
        val[utility::conversions::to_string_t("lengthUnits")] = ModelBase::toJson(m_LengthUnits);
    }
    if(m_MassUnitsIsSet)
    {
        val[utility::conversions::to_string_t("massUnits")] = ModelBase::toJson(m_MassUnits);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_SpecifiedUnitIsSet)
    {
        val[utility::conversions::to_string_t("specifiedUnit")] = ModelBase::toJson(m_SpecifiedUnit);
    }
    if(m_ThumbnailInfoIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailInfo")] = ModelBase::toJson(m_ThumbnailInfo);
    }
    if(m_ThumbnailsIsSet)
    {
        val[utility::conversions::to_string_t("thumbnails")] = ModelBase::toJson(m_Thumbnails);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_UnupdatableIsSet)
    {
        val[utility::conversions::to_string_t("unupdatable")] = ModelBase::toJson(m_Unupdatable);
    }

    return val;
}

bool BTDocumentElementInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("angleUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("angleUnits"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_angleUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_angleUnits);
            setAngleUnits(refVal_angleUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataType;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataType);
            setDataType(refVal_dataType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementType;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementType);
            setElementType(refVal_elementType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filename")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filename"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_filename;
            ok &= ModelBase::fromJson(fieldValue, refVal_filename);
            setFilename(refVal_filename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foreignDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foreignDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_foreignDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_foreignDataId);
            setForeignDataId(refVal_foreignDataId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lengthUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lengthUnits"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lengthUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_lengthUnits);
            setLengthUnits(refVal_lengthUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("massUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("massUnits"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_massUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_massUnits);
            setMassUnits(refVal_massUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("specifiedUnit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("specifiedUnit"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_specifiedUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_specifiedUnit);
            setSpecifiedUnit(refVal_specifiedUnit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailInfo);
            setThumbnailInfo(refVal_thumbnailInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnails")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnails"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_thumbnails;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnails);
            setThumbnails(refVal_thumbnails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unupdatable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unupdatable"));
        if(!fieldValue.is_null())
        {
            bool refVal_unupdatable;
            ok &= ModelBase::fromJson(fieldValue, refVal_unupdatable);
            setUnupdatable(refVal_unupdatable);
        }
    }
    return ok;
}

void BTDocumentElementInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AngleUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("angleUnits"), m_AngleUnits));
    }
    if(m_DataTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataType"), m_DataType));
    }
    if(m_ElementTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementType"), m_ElementType));
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filename"), m_Filename));
    }
    if(m_ForeignDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignDataId"), m_ForeignDataId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_LengthUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lengthUnits"), m_LengthUnits));
    }
    if(m_MassUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("massUnits"), m_MassUnits));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_SpecifiedUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("specifiedUnit"), m_SpecifiedUnit));
    }
    if(m_ThumbnailInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailInfo"), m_ThumbnailInfo));
    }
    if(m_ThumbnailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnails"), m_Thumbnails));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_UnupdatableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unupdatable"), m_Unupdatable));
    }
}

bool BTDocumentElementInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("angleUnits")))
    {
        utility::string_t refVal_angleUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("angleUnits")), refVal_angleUnits );
        setAngleUnits(refVal_angleUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataType")))
    {
        utility::string_t refVal_dataType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataType")), refVal_dataType );
        setDataType(refVal_dataType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementType")))
    {
        utility::string_t refVal_elementType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementType")), refVal_elementType );
        setElementType(refVal_elementType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filename")))
    {
        utility::string_t refVal_filename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filename")), refVal_filename );
        setFilename(refVal_filename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignDataId")))
    {
        utility::string_t refVal_foreignDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignDataId")), refVal_foreignDataId );
        setForeignDataId(refVal_foreignDataId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lengthUnits")))
    {
        utility::string_t refVal_lengthUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lengthUnits")), refVal_lengthUnits );
        setLengthUnits(refVal_lengthUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("massUnits")))
    {
        utility::string_t refVal_massUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("massUnits")), refVal_massUnits );
        setMassUnits(refVal_massUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("specifiedUnit")))
    {
        utility::string_t refVal_specifiedUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("specifiedUnit")), refVal_specifiedUnit );
        setSpecifiedUnit(refVal_specifiedUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailInfo")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnailInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailInfo")), refVal_thumbnailInfo );
        setThumbnailInfo(refVal_thumbnailInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnails")))
    {
        utility::string_t refVal_thumbnails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnails")), refVal_thumbnails );
        setThumbnails(refVal_thumbnails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unupdatable")))
    {
        bool refVal_unupdatable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unupdatable")), refVal_unupdatable );
        setUnupdatable(refVal_unupdatable);
    }
    return ok;
}

utility::string_t BTDocumentElementInfo::getAngleUnits() const
{
    return m_AngleUnits;
}

void BTDocumentElementInfo::setAngleUnits(const utility::string_t& value)
{
    m_AngleUnits = value;
    m_AngleUnitsIsSet = true;
}

bool BTDocumentElementInfo::angleUnitsIsSet() const
{
    return m_AngleUnitsIsSet;
}

void BTDocumentElementInfo::unsetAngleUnits()
{
    m_AngleUnitsIsSet = false;
}
utility::string_t BTDocumentElementInfo::getDataType() const
{
    return m_DataType;
}

void BTDocumentElementInfo::setDataType(const utility::string_t& value)
{
    m_DataType = value;
    m_DataTypeIsSet = true;
}

bool BTDocumentElementInfo::dataTypeIsSet() const
{
    return m_DataTypeIsSet;
}

void BTDocumentElementInfo::unsetDataType()
{
    m_DataTypeIsSet = false;
}
utility::string_t BTDocumentElementInfo::getElementType() const
{
    return m_ElementType;
}

void BTDocumentElementInfo::setElementType(const utility::string_t& value)
{
    m_ElementType = value;
    m_ElementTypeIsSet = true;
}

bool BTDocumentElementInfo::elementTypeIsSet() const
{
    return m_ElementTypeIsSet;
}

void BTDocumentElementInfo::unsetElementType()
{
    m_ElementTypeIsSet = false;
}
utility::string_t BTDocumentElementInfo::getFilename() const
{
    return m_Filename;
}

void BTDocumentElementInfo::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool BTDocumentElementInfo::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void BTDocumentElementInfo::unsetFilename()
{
    m_FilenameIsSet = false;
}
utility::string_t BTDocumentElementInfo::getForeignDataId() const
{
    return m_ForeignDataId;
}

void BTDocumentElementInfo::setForeignDataId(const utility::string_t& value)
{
    m_ForeignDataId = value;
    m_ForeignDataIdIsSet = true;
}

bool BTDocumentElementInfo::foreignDataIdIsSet() const
{
    return m_ForeignDataIdIsSet;
}

void BTDocumentElementInfo::unsetForeignDataId()
{
    m_ForeignDataIdIsSet = false;
}
utility::string_t BTDocumentElementInfo::getId() const
{
    return m_Id;
}

void BTDocumentElementInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTDocumentElementInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTDocumentElementInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTDocumentElementInfo::getLengthUnits() const
{
    return m_LengthUnits;
}

void BTDocumentElementInfo::setLengthUnits(const utility::string_t& value)
{
    m_LengthUnits = value;
    m_LengthUnitsIsSet = true;
}

bool BTDocumentElementInfo::lengthUnitsIsSet() const
{
    return m_LengthUnitsIsSet;
}

void BTDocumentElementInfo::unsetLengthUnits()
{
    m_LengthUnitsIsSet = false;
}
utility::string_t BTDocumentElementInfo::getMassUnits() const
{
    return m_MassUnits;
}

void BTDocumentElementInfo::setMassUnits(const utility::string_t& value)
{
    m_MassUnits = value;
    m_MassUnitsIsSet = true;
}

bool BTDocumentElementInfo::massUnitsIsSet() const
{
    return m_MassUnitsIsSet;
}

void BTDocumentElementInfo::unsetMassUnits()
{
    m_MassUnitsIsSet = false;
}
utility::string_t BTDocumentElementInfo::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTDocumentElementInfo::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTDocumentElementInfo::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTDocumentElementInfo::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTDocumentElementInfo::getName() const
{
    return m_Name;
}

void BTDocumentElementInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTDocumentElementInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTDocumentElementInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTDocumentElementInfo::getSpecifiedUnit() const
{
    return m_SpecifiedUnit;
}

void BTDocumentElementInfo::setSpecifiedUnit(const utility::string_t& value)
{
    m_SpecifiedUnit = value;
    m_SpecifiedUnitIsSet = true;
}

bool BTDocumentElementInfo::specifiedUnitIsSet() const
{
    return m_SpecifiedUnitIsSet;
}

void BTDocumentElementInfo::unsetSpecifiedUnit()
{
    m_SpecifiedUnitIsSet = false;
}
std::shared_ptr<BTThumbnailInfo> BTDocumentElementInfo::getThumbnailInfo() const
{
    return m_ThumbnailInfo;
}

void BTDocumentElementInfo::setThumbnailInfo(const std::shared_ptr<BTThumbnailInfo>& value)
{
    m_ThumbnailInfo = value;
    m_ThumbnailInfoIsSet = true;
}

bool BTDocumentElementInfo::thumbnailInfoIsSet() const
{
    return m_ThumbnailInfoIsSet;
}

void BTDocumentElementInfo::unsetThumbnailInfo()
{
    m_ThumbnailInfoIsSet = false;
}
utility::string_t BTDocumentElementInfo::getThumbnails() const
{
    return m_Thumbnails;
}

void BTDocumentElementInfo::setThumbnails(const utility::string_t& value)
{
    m_Thumbnails = value;
    m_ThumbnailsIsSet = true;
}

bool BTDocumentElementInfo::thumbnailsIsSet() const
{
    return m_ThumbnailsIsSet;
}

void BTDocumentElementInfo::unsetThumbnails()
{
    m_ThumbnailsIsSet = false;
}
utility::string_t BTDocumentElementInfo::getType() const
{
    return m_Type;
}

void BTDocumentElementInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTDocumentElementInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTDocumentElementInfo::unsetType()
{
    m_TypeIsSet = false;
}
bool BTDocumentElementInfo::isUnupdatable() const
{
    return m_Unupdatable;
}

void BTDocumentElementInfo::setUnupdatable(bool value)
{
    m_Unupdatable = value;
    m_UnupdatableIsSet = true;
}

bool BTDocumentElementInfo::unupdatableIsSet() const
{
    return m_UnupdatableIsSet;
}

void BTDocumentElementInfo::unsetUnupdatable()
{
    m_UnupdatableIsSet = false;
}
}
}
}
}


