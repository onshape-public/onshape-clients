/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTUserOAuth2SummaryInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserOAuth2SummaryInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserOAuth2SummaryInfo_H_


#include "../ModelBase.h"

#include "BTCompanySummaryInfo.h"
#include <cpprest/details/basic_types.h>
#include "GlobalPermissionInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTUserOAuth2SummaryInfo
    : public ModelBase
{
public:
    BTUserOAuth2SummaryInfo();
    virtual ~BTUserOAuth2SummaryInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTUserOAuth2SummaryInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClientId() const;
    bool clientIdIsSet() const;
    void unsetClientId();

    void setClientId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTCompanySummaryInfo> getCompany() const;
    bool companyIsSet() const;
    void unsetCompany();

    void setCompany(const std::shared_ptr<BTCompanySummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCompanyPlan() const;
    bool companyPlanIsSet() const;
    void unsetCompanyPlan();

    void setCompanyPlan(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();

    void setFirstName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GlobalPermissionInfo> getGlobalPermissions() const;
    bool globalPermissionsIsSet() const;
    void unsetGlobalPermissions();

    void setGlobalPermissions(const std::shared_ptr<GlobalPermissionInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsGuest() const;
    bool isGuestIsSet() const;
    void unsetIsGuest();

    void setIsGuest(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsLight() const;
    bool isLightIsSet() const;
    void unsetIsLight();

    void setIsLight(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getLastLoginTime() const;
    bool lastLoginTimeIsSet() const;
    void unsetLastLoginTime();

    void setLastLoginTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();

    void setLastName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getOauth2Scopes() const;
    bool oauth2ScopesIsSet() const;
    void unsetOauth2Scopes();

    void setOauth2Scopes(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPlanGroup() const;
    bool planGroupIsSet() const;
    void unsetPlanGroup();

    void setPlanGroup(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();

    void setRole(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRoles();
    bool rolesIsSet() const;
    void unsetRoles();

    void setRoles(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    utility::string_t m_ClientId;
    bool m_ClientIdIsSet;
    std::shared_ptr<BTCompanySummaryInfo> m_Company;
    bool m_CompanyIsSet;
    bool m_CompanyPlan;
    bool m_CompanyPlanIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_FirstName;
    bool m_FirstNameIsSet;
    std::shared_ptr<GlobalPermissionInfo> m_GlobalPermissions;
    bool m_GlobalPermissionsIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    bool m_IsGuest;
    bool m_IsGuestIsSet;
    bool m_IsLight;
    bool m_IsLightIsSet;
    utility::datetime m_LastLoginTime;
    bool m_LastLoginTimeIsSet;
    utility::string_t m_LastName;
    bool m_LastNameIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int64_t m_Oauth2Scopes;
    bool m_Oauth2ScopesIsSet;
    utility::string_t m_PlanGroup;
    bool m_PlanGroupIsSet;
    int32_t m_Role;
    bool m_RoleIsSet;
    std::vector<utility::string_t> m_Roles;
    bool m_RolesIsSet;
    int32_t m_Source;
    bool m_SourceIsSet;
    int32_t m_State;
    bool m_StateIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTUserOAuth2SummaryInfo_H_ */
