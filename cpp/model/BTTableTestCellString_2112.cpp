/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTableTestCellString_2112.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTableTestCellString_2112::BTTableTestCellString_2112()
{
    m_CellValue = utility::conversions::to_string_t("");
    m_CellValueIsSet = false;
}

BTTableTestCellString_2112::~BTTableTestCellString_2112()
{
}

void BTTableTestCellString_2112::validate()
{
    // TODO: implement validation
}

web::json::value BTTableTestCellString_2112::toJson() const
{
    web::json::value val = this->BTTableCell_1114::toJson();
    
    if(m_CellValueIsSet)
    {
        val[utility::conversions::to_string_t("cellValue")] = ModelBase::toJson(m_CellValue);
    }

    return val;
}

bool BTTableTestCellString_2112::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTTableCell_1114::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("cellValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cellValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cellValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_cellValue);
            setCellValue(refVal_cellValue);
        }
    }
    return ok;
}

void BTTableTestCellString_2112::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IsEverVisibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEverVisible"), m_IsEverVisible));
    }
    if(m_IsReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isReadOnly"), m_IsReadOnly));
    }
    if(m_CellValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cellValue"), m_CellValue));
    }
}

bool BTTableTestCellString_2112::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEverVisible")))
    {
        bool refVal_isEverVisible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEverVisible")), refVal_isEverVisible );
        setIsEverVisible(refVal_isEverVisible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isReadOnly")))
    {
        bool refVal_isReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isReadOnly")), refVal_isReadOnly );
        setIsReadOnly(refVal_isReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cellValue")))
    {
        utility::string_t refVal_cellValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cellValue")), refVal_cellValue );
        setCellValue(refVal_cellValue);
    }
    return ok;
}

utility::string_t BTTableTestCellString_2112::getCellValue() const
{
    return m_CellValue;
}

void BTTableTestCellString_2112::setCellValue(const utility::string_t& value)
{
    m_CellValue = value;
    m_CellValueIsSet = true;
}

bool BTTableTestCellString_2112::cellValueIsSet() const
{
    return m_CellValueIsSet;
}

void BTTableTestCellString_2112::unsetCellValue()
{
    m_CellValueIsSet = false;
}
}
}
}
}


