/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPartMaterial_1445.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMaterial_1445_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMaterial_1445_H_


#include "../ModelBase.h"

#include "BTPartMaterialProperty_1453.h"
#include "BTElementReference_725.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPartMaterial_1445
    : public ModelBase
{
public:
    BTPartMaterial_1445();
    virtual ~BTPartMaterial_1445();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPartMaterial_1445 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLibraryName() const;
    bool libraryNameIsSet() const;
    void unsetLibraryName();

    void setLibraryName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTElementReference_725> getLibraryReference() const;
    bool libraryReferenceIsSet() const;
    void unsetLibraryReference();

    void setLibraryReference(const std::shared_ptr<BTElementReference_725>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(int32_t value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_LibraryName;
    bool m_LibraryNameIsSet;
    std::shared_ptr<BTElementReference_725> m_LibraryReference;
    bool m_LibraryReferenceIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>> m_Properties;
    bool m_PropertiesIsSet;
    int32_t m_Version;
    bool m_VersionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMaterial_1445_H_ */
