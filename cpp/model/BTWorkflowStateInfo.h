/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTWorkflowStateInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowStateInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowStateInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTWorkflowStateInfo
    : public ModelBase
{
public:
    BTWorkflowStateInfo();
    virtual ~BTWorkflowStateInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTWorkflowStateInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApproverSourceProperty() const;
    bool approverSourcePropertyIsSet() const;
    void unsetApproverSourceProperty();

    void setApproverSourceProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();

    void setDisplayName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getEditableProperties();
    bool editablePropertiesIsSet() const;
    void unsetEditableProperties();

    void setEditableProperties(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNotifierSourceProperty() const;
    bool notifierSourcePropertyIsSet() const;
    void unsetNotifierSourceProperty();

    void setNotifierSourceProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRequiredItemProperties();
    bool requiredItemPropertiesIsSet() const;
    void unsetRequiredItemProperties();

    void setRequiredItemProperties(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRequiredProperties();
    bool requiredPropertiesIsSet() const;
    void unsetRequiredProperties();

    void setRequiredProperties(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_ApproverSourceProperty;
    bool m_ApproverSourcePropertyIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    std::vector<utility::string_t> m_EditableProperties;
    bool m_EditablePropertiesIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_NotifierSourceProperty;
    bool m_NotifierSourcePropertyIsSet;
    std::vector<utility::string_t> m_RequiredItemProperties;
    bool m_RequiredItemPropertiesIsSet;
    std::vector<utility::string_t> m_RequiredProperties;
    bool m_RequiredPropertiesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowStateInfo_H_ */
