/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterReferencePartStudio_3302.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterReferencePartStudio_3302::BTMParameterReferencePartStudio_3302()
{
    m_PartQueryIsSet = false;
    m_BlockBuildFunctionAccess = false;
    m_BlockBuildFunctionAccessIsSet = false;
    m_StandardContentParametersId = utility::conversions::to_string_t("");
    m_StandardContentParametersIdIsSet = false;
}

BTMParameterReferencePartStudio_3302::~BTMParameterReferencePartStudio_3302()
{
}

void BTMParameterReferencePartStudio_3302::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterReferencePartStudio_3302::toJson() const
{
    web::json::value val = this->BTMParameterReferenceWithConfiguration_3028::toJson();
    
    if(m_PartQueryIsSet)
    {
        val[utility::conversions::to_string_t("partQuery")] = ModelBase::toJson(m_PartQuery);
    }
    if(m_BlockBuildFunctionAccessIsSet)
    {
        val[utility::conversions::to_string_t("blockBuildFunctionAccess")] = ModelBase::toJson(m_BlockBuildFunctionAccess);
    }
    if(m_StandardContentParametersIdIsSet)
    {
        val[utility::conversions::to_string_t("standardContentParametersId")] = ModelBase::toJson(m_StandardContentParametersId);
    }

    return val;
}

bool BTMParameterReferencePartStudio_3302::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMParameterReferenceWithConfiguration_3028::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("partQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partQuery"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMParameterQueryList_148> refVal_partQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_partQuery);
            setPartQuery(refVal_partQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blockBuildFunctionAccess")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("blockBuildFunctionAccess"));
        if(!fieldValue.is_null())
        {
            bool refVal_blockBuildFunctionAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_blockBuildFunctionAccess);
            setBlockBuildFunctionAccess(refVal_blockBuildFunctionAccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardContentParametersId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardContentParametersId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardContentParametersId;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardContentParametersId);
            setStandardContentParametersId(refVal_standardContentParametersId);
        }
    }
    return ok;
}

void BTMParameterReferencePartStudio_3302::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_FeatureScriptTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureScriptType"), m_FeatureScriptType));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_PartQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partQuery"), m_PartQuery));
    }
    if(m_BlockBuildFunctionAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blockBuildFunctionAccess"), m_BlockBuildFunctionAccess));
    }
    if(m_StandardContentParametersIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardContentParametersId"), m_StandardContentParametersId));
    }
}

bool BTMParameterReferencePartStudio_3302::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureScriptType")))
    {
        utility::string_t refVal_featureScriptType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureScriptType")), refVal_featureScriptType );
        setFeatureScriptType(refVal_featureScriptType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partQuery")))
    {
        std::shared_ptr<BTMParameterQueryList_148> refVal_partQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partQuery")), refVal_partQuery );
        setPartQuery(refVal_partQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blockBuildFunctionAccess")))
    {
        bool refVal_blockBuildFunctionAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("blockBuildFunctionAccess")), refVal_blockBuildFunctionAccess );
        setBlockBuildFunctionAccess(refVal_blockBuildFunctionAccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardContentParametersId")))
    {
        utility::string_t refVal_standardContentParametersId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardContentParametersId")), refVal_standardContentParametersId );
        setStandardContentParametersId(refVal_standardContentParametersId);
    }
    return ok;
}

std::shared_ptr<BTMParameterQueryList_148> BTMParameterReferencePartStudio_3302::getPartQuery() const
{
    return m_PartQuery;
}

void BTMParameterReferencePartStudio_3302::setPartQuery(const std::shared_ptr<BTMParameterQueryList_148>& value)
{
    m_PartQuery = value;
    m_PartQueryIsSet = true;
}

bool BTMParameterReferencePartStudio_3302::partQueryIsSet() const
{
    return m_PartQueryIsSet;
}

void BTMParameterReferencePartStudio_3302::unsetPartQuery()
{
    m_PartQueryIsSet = false;
}
bool BTMParameterReferencePartStudio_3302::isBlockBuildFunctionAccess() const
{
    return m_BlockBuildFunctionAccess;
}

void BTMParameterReferencePartStudio_3302::setBlockBuildFunctionAccess(bool value)
{
    m_BlockBuildFunctionAccess = value;
    m_BlockBuildFunctionAccessIsSet = true;
}

bool BTMParameterReferencePartStudio_3302::blockBuildFunctionAccessIsSet() const
{
    return m_BlockBuildFunctionAccessIsSet;
}

void BTMParameterReferencePartStudio_3302::unsetBlockBuildFunctionAccess()
{
    m_BlockBuildFunctionAccessIsSet = false;
}
utility::string_t BTMParameterReferencePartStudio_3302::getStandardContentParametersId() const
{
    return m_StandardContentParametersId;
}

void BTMParameterReferencePartStudio_3302::setStandardContentParametersId(const utility::string_t& value)
{
    m_StandardContentParametersId = value;
    m_StandardContentParametersIdIsSet = true;
}

bool BTMParameterReferencePartStudio_3302::standardContentParametersIdIsSet() const
{
    return m_StandardContentParametersIdIsSet;
}

void BTMParameterReferencePartStudio_3302::unsetStandardContentParametersId()
{
    m_StandardContentParametersIdIsSet = false;
}
}
}
}
}


