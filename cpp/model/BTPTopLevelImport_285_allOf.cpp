/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPTopLevelImport_285_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPTopLevelImport_285_allOf::BTPTopLevelImport_285_allOf()
{
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_NamespaceString = utility::conversions::to_string_t("");
    m_NamespaceStringIsSet = false;
    m_CombinedNamespacePathAndVersion = utility::conversions::to_string_t("");
    m_CombinedNamespacePathAndVersionIsSet = false;
    m_ModuleIdIsSet = false;
    m_SpaceBeforeImportIsSet = false;
    m_r_namespaceIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPTopLevelImport_285_allOf::~BTPTopLevelImport_285_allOf()
{
}

void BTPTopLevelImport_285_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPTopLevelImport_285_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NamespaceStringIsSet)
    {
        val[utility::conversions::to_string_t("namespaceString")] = ModelBase::toJson(m_NamespaceString);
    }
    if(m_CombinedNamespacePathAndVersionIsSet)
    {
        val[utility::conversions::to_string_t("combinedNamespacePathAndVersion")] = ModelBase::toJson(m_CombinedNamespacePathAndVersion);
    }
    if(m_ModuleIdIsSet)
    {
        val[utility::conversions::to_string_t("moduleId")] = ModelBase::toJson(m_ModuleId);
    }
    if(m_SpaceBeforeImportIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeImport")] = ModelBase::toJson(m_SpaceBeforeImport);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPTopLevelImport_285_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespaceString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespaceString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespaceString;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespaceString);
            setNamespaceString(refVal_namespaceString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("combinedNamespacePathAndVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("combinedNamespacePathAndVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_combinedNamespacePathAndVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_combinedNamespacePathAndVersion);
            setCombinedNamespacePathAndVersion(refVal_combinedNamespacePathAndVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moduleId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moduleId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPModuleId_235> refVal_moduleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_moduleId);
            setModuleId(refVal_moduleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeImport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeImport"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeImport;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeImport);
            setSpaceBeforeImport(refVal_spaceBeforeImport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPTopLevelImport_285_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NamespaceStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceString"), m_NamespaceString));
    }
    if(m_CombinedNamespacePathAndVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("combinedNamespacePathAndVersion"), m_CombinedNamespacePathAndVersion));
    }
    if(m_ModuleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moduleId"), m_ModuleId));
    }
    if(m_SpaceBeforeImportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeImport"), m_SpaceBeforeImport));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPTopLevelImport_285_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceString")))
    {
        utility::string_t refVal_namespaceString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceString")), refVal_namespaceString );
        setNamespaceString(refVal_namespaceString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("combinedNamespacePathAndVersion")))
    {
        utility::string_t refVal_combinedNamespacePathAndVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("combinedNamespacePathAndVersion")), refVal_combinedNamespacePathAndVersion );
        setCombinedNamespacePathAndVersion(refVal_combinedNamespacePathAndVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moduleId")))
    {
        std::shared_ptr<BTPModuleId_235> refVal_moduleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moduleId")), refVal_moduleId );
        setModuleId(refVal_moduleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeImport")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeImport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeImport")), refVal_spaceBeforeImport );
        setSpaceBeforeImport(refVal_spaceBeforeImport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTPTopLevelImport_285_allOf::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTPTopLevelImport_285_allOf::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTPTopLevelImport_285_allOf::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTPTopLevelImport_285_allOf::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTPTopLevelImport_285_allOf::getNamespaceString() const
{
    return m_NamespaceString;
}

void BTPTopLevelImport_285_allOf::setNamespaceString(const utility::string_t& value)
{
    m_NamespaceString = value;
    m_NamespaceStringIsSet = true;
}

bool BTPTopLevelImport_285_allOf::namespaceStringIsSet() const
{
    return m_NamespaceStringIsSet;
}

void BTPTopLevelImport_285_allOf::unsetNamespaceString()
{
    m_NamespaceStringIsSet = false;
}
utility::string_t BTPTopLevelImport_285_allOf::getCombinedNamespacePathAndVersion() const
{
    return m_CombinedNamespacePathAndVersion;
}

void BTPTopLevelImport_285_allOf::setCombinedNamespacePathAndVersion(const utility::string_t& value)
{
    m_CombinedNamespacePathAndVersion = value;
    m_CombinedNamespacePathAndVersionIsSet = true;
}

bool BTPTopLevelImport_285_allOf::combinedNamespacePathAndVersionIsSet() const
{
    return m_CombinedNamespacePathAndVersionIsSet;
}

void BTPTopLevelImport_285_allOf::unsetCombinedNamespacePathAndVersion()
{
    m_CombinedNamespacePathAndVersionIsSet = false;
}
std::shared_ptr<BTPModuleId_235> BTPTopLevelImport_285_allOf::getModuleId() const
{
    return m_ModuleId;
}

void BTPTopLevelImport_285_allOf::setModuleId(const std::shared_ptr<BTPModuleId_235>& value)
{
    m_ModuleId = value;
    m_ModuleIdIsSet = true;
}

bool BTPTopLevelImport_285_allOf::moduleIdIsSet() const
{
    return m_ModuleIdIsSet;
}

void BTPTopLevelImport_285_allOf::unsetModuleId()
{
    m_ModuleIdIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPTopLevelImport_285_allOf::getSpaceBeforeImport() const
{
    return m_SpaceBeforeImport;
}

void BTPTopLevelImport_285_allOf::setSpaceBeforeImport(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeImport = value;
    m_SpaceBeforeImportIsSet = true;
}

bool BTPTopLevelImport_285_allOf::spaceBeforeImportIsSet() const
{
    return m_SpaceBeforeImportIsSet;
}

void BTPTopLevelImport_285_allOf::unsetSpaceBeforeImport()
{
    m_SpaceBeforeImportIsSet = false;
}
std::vector<std::shared_ptr<BTPIdentifier_8>>& BTPTopLevelImport_285_allOf::getRNamespace()
{
    return m_r_namespace;
}

void BTPTopLevelImport_285_allOf::setRNamespace(const std::vector<std::shared_ptr<BTPIdentifier_8>>& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTPTopLevelImport_285_allOf::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTPTopLevelImport_285_allOf::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTPTopLevelImport_285_allOf::getBtType() const
{
    return m_BtType;
}

void BTPTopLevelImport_285_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPTopLevelImport_285_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPTopLevelImport_285_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


