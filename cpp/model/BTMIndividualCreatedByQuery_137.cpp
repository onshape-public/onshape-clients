/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMIndividualCreatedByQuery_137.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMIndividualCreatedByQuery_137::BTMIndividualCreatedByQuery_137()
{
    m_BodyType = utility::conversions::to_string_t("");
    m_BodyTypeIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_FilterConstruction = false;
    m_FilterConstructionIsSet = false;
}

BTMIndividualCreatedByQuery_137::~BTMIndividualCreatedByQuery_137()
{
}

void BTMIndividualCreatedByQuery_137::validate()
{
    // TODO: implement validation
}

web::json::value BTMIndividualCreatedByQuery_137::toJson() const
{
    web::json::value val = this->BTMIndividualQuery_138::toJson();
    
    if(m_BodyTypeIsSet)
    {
        val[utility::conversions::to_string_t("bodyType")] = ModelBase::toJson(m_BodyType);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t("entityType")] = ModelBase::toJson(m_EntityType);
    }
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_FilterConstructionIsSet)
    {
        val[utility::conversions::to_string_t("filterConstruction")] = ModelBase::toJson(m_FilterConstruction);
    }

    return val;
}

bool BTMIndividualCreatedByQuery_137::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMIndividualQuery_138::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("bodyType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyType);
            setBodyType(refVal_bodyType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityType);
            setEntityType(refVal_entityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filterConstruction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filterConstruction"));
        if(!fieldValue.is_null())
        {
            bool refVal_filterConstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_filterConstruction);
            setFilterConstruction(refVal_filterConstruction);
        }
    }
    return ok;
}

void BTMIndividualCreatedByQuery_137::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DeterministicIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicIdList"), m_DeterministicIdList));
    }
    if(m_DeterministicIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicIds"), m_DeterministicIds));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_QueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("query"), m_Query));
    }
    if(m_QueryStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queryString"), m_QueryString));
    }
    if(m_PersistentQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("persistentQuery"), m_PersistentQuery));
    }
    if(m_VariableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("variableName"), m_VariableName));
    }
    if(m_QueryStatementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queryStatement"), m_QueryStatement));
    }
    if(m_BodyTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyType"), m_BodyType));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityType"), m_EntityType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_FilterConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filterConstruction"), m_FilterConstruction));
    }
}

bool BTMIndividualCreatedByQuery_137::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicIdList")))
    {
        std::shared_ptr<BTMIndividualQueryBase_139> refVal_deterministicIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicIdList")), refVal_deterministicIdList );
        setDeterministicIdList(refVal_deterministicIdList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicIds")))
    {
        std::vector<utility::string_t> refVal_deterministicIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicIds")), refVal_deterministicIds );
        setDeterministicIds(refVal_deterministicIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("query")))
    {
        std::shared_ptr<BTMIndividualQueryBase_139> refVal_query;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("query")), refVal_query );
        setQuery(refVal_query);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryString")))
    {
        utility::string_t refVal_queryString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("queryString")), refVal_queryString );
        setQueryString(refVal_queryString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("persistentQuery")))
    {
        std::shared_ptr<BTPStatement_269> refVal_persistentQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("persistentQuery")), refVal_persistentQuery );
        setPersistentQuery(refVal_persistentQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("variableName")))
    {
        std::shared_ptr<BTMIndividualQuery_138> refVal_variableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("variableName")), refVal_variableName );
        setVariableName(refVal_variableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryStatement")))
    {
        std::shared_ptr<BTPStatement_269> refVal_queryStatement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("queryStatement")), refVal_queryStatement );
        setQueryStatement(refVal_queryStatement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyType")))
    {
        utility::string_t refVal_bodyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyType")), refVal_bodyType );
        setBodyType(refVal_bodyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityType")))
    {
        utility::string_t refVal_entityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityType")), refVal_entityType );
        setEntityType(refVal_entityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filterConstruction")))
    {
        bool refVal_filterConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filterConstruction")), refVal_filterConstruction );
        setFilterConstruction(refVal_filterConstruction);
    }
    return ok;
}

utility::string_t BTMIndividualCreatedByQuery_137::getBodyType() const
{
    return m_BodyType;
}

void BTMIndividualCreatedByQuery_137::setBodyType(const utility::string_t& value)
{
    m_BodyType = value;
    m_BodyTypeIsSet = true;
}

bool BTMIndividualCreatedByQuery_137::bodyTypeIsSet() const
{
    return m_BodyTypeIsSet;
}

void BTMIndividualCreatedByQuery_137::unsetBodyType()
{
    m_BodyTypeIsSet = false;
}
utility::string_t BTMIndividualCreatedByQuery_137::getEntityType() const
{
    return m_EntityType;
}

void BTMIndividualCreatedByQuery_137::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool BTMIndividualCreatedByQuery_137::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void BTMIndividualCreatedByQuery_137::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
utility::string_t BTMIndividualCreatedByQuery_137::getFeatureId() const
{
    return m_FeatureId;
}

void BTMIndividualCreatedByQuery_137::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTMIndividualCreatedByQuery_137::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTMIndividualCreatedByQuery_137::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
bool BTMIndividualCreatedByQuery_137::isFilterConstruction() const
{
    return m_FilterConstruction;
}

void BTMIndividualCreatedByQuery_137::setFilterConstruction(bool value)
{
    m_FilterConstruction = value;
    m_FilterConstructionIsSet = true;
}

bool BTMIndividualCreatedByQuery_137::filterConstructionIsSet() const
{
    return m_FilterConstructionIsSet;
}

void BTMIndividualCreatedByQuery_137::unsetFilterConstruction()
{
    m_FilterConstructionIsSet = false;
}
}
}
}
}


