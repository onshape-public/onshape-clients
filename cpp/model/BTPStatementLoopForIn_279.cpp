/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementLoopForIn_279.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementLoopForIn_279::BTPStatementLoopForIn_279()
{
    m_StandardType = utility::conversions::to_string_t("");
    m_StandardTypeIsSet = false;
    m_NameIsSet = false;
    m_r_typeName = utility::conversions::to_string_t("");
    m_r_typeNameIsSet = false;
    m_ContainerIsSet = false;
    m_VarIsSet = false;
    m_IsVarDeclaredHere = false;
    m_IsVarDeclaredHereIsSet = false;
    m_SpaceBeforeVarIsSet = false;
}

BTPStatementLoopForIn_279::~BTPStatementLoopForIn_279()
{
}

void BTPStatementLoopForIn_279::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementLoopForIn_279::toJson() const
{
    web::json::value val = this->BTPStatementLoop_277::toJson();
    
    if(m_StandardTypeIsSet)
    {
        val[utility::conversions::to_string_t("standardType")] = ModelBase::toJson(m_StandardType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_r_typeNameIsSet)
    {
        val[utility::conversions::to_string_t("typeName")] = ModelBase::toJson(m_r_typeName);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t("container")] = ModelBase::toJson(m_Container);
    }
    if(m_VarIsSet)
    {
        val[utility::conversions::to_string_t("var")] = ModelBase::toJson(m_Var);
    }
    if(m_IsVarDeclaredHereIsSet)
    {
        val[utility::conversions::to_string_t("isVarDeclaredHere")] = ModelBase::toJson(m_IsVarDeclaredHere);
    }
    if(m_SpaceBeforeVarIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeVar")] = ModelBase::toJson(m_SpaceBeforeVar);
    }

    return val;
}

bool BTPStatementLoopForIn_279::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPStatementLoop_277::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("standardType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_standardType;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardType);
            setStandardType(refVal_standardType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("typeName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("typeName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_typeName;
            ok &= ModelBase::fromJson(fieldValue, refVal_typeName);
            setRTypeName(refVal_typeName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("container")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("container"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_container;
            ok &= ModelBase::fromJson(fieldValue, refVal_container);
            setContainer(refVal_container);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("var")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("var"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_var;
            ok &= ModelBase::fromJson(fieldValue, refVal_var);
            setVar(refVal_var);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isVarDeclaredHere")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isVarDeclaredHere"));
        if(!fieldValue.is_null())
        {
            bool refVal_isVarDeclaredHere;
            ok &= ModelBase::fromJson(fieldValue, refVal_isVarDeclaredHere);
            setIsVarDeclaredHere(refVal_isVarDeclaredHere);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeVar")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeVar"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeVar;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeVar);
            setSpaceBeforeVar(refVal_spaceBeforeVar);
        }
    }
    return ok;
}

void BTPStatementLoopForIn_279::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_SpaceAfterLoopTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterLoopType"), m_SpaceAfterLoopType));
    }
    if(m_StandardTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardType"), m_StandardType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_r_typeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("typeName"), m_r_typeName));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("container"), m_Container));
    }
    if(m_VarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("var"), m_Var));
    }
    if(m_IsVarDeclaredHereIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isVarDeclaredHere"), m_IsVarDeclaredHere));
    }
    if(m_SpaceBeforeVarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeVar"), m_SpaceBeforeVar));
    }
}

bool BTPStatementLoopForIn_279::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        std::shared_ptr<BTPStatement_269> refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterLoopType")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterLoopType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterLoopType")), refVal_spaceAfterLoopType );
        setSpaceAfterLoopType(refVal_spaceAfterLoopType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardType")))
    {
        utility::string_t refVal_standardType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardType")), refVal_standardType );
        setStandardType(refVal_standardType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("typeName")))
    {
        utility::string_t refVal_typeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("typeName")), refVal_typeName );
        setRTypeName(refVal_typeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("container")))
    {
        std::shared_ptr<BTPExpression_9> refVal_container;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("container")), refVal_container );
        setContainer(refVal_container);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("var")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_var;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("var")), refVal_var );
        setVar(refVal_var);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isVarDeclaredHere")))
    {
        bool refVal_isVarDeclaredHere;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isVarDeclaredHere")), refVal_isVarDeclaredHere );
        setIsVarDeclaredHere(refVal_isVarDeclaredHere);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeVar")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeVar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeVar")), refVal_spaceBeforeVar );
        setSpaceBeforeVar(refVal_spaceBeforeVar);
    }
    return ok;
}

utility::string_t BTPStatementLoopForIn_279::getStandardType() const
{
    return m_StandardType;
}

void BTPStatementLoopForIn_279::setStandardType(const utility::string_t& value)
{
    m_StandardType = value;
    m_StandardTypeIsSet = true;
}

bool BTPStatementLoopForIn_279::standardTypeIsSet() const
{
    return m_StandardTypeIsSet;
}

void BTPStatementLoopForIn_279::unsetStandardType()
{
    m_StandardTypeIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPStatementLoopForIn_279::getName() const
{
    return m_Name;
}

void BTPStatementLoopForIn_279::setName(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPStatementLoopForIn_279::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPStatementLoopForIn_279::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTPStatementLoopForIn_279::getRTypeName() const
{
    return m_r_typeName;
}

void BTPStatementLoopForIn_279::setRTypeName(const utility::string_t& value)
{
    m_r_typeName = value;
    m_r_typeNameIsSet = true;
}

bool BTPStatementLoopForIn_279::rTypeNameIsSet() const
{
    return m_r_typeNameIsSet;
}

void BTPStatementLoopForIn_279::unsetr_typeName()
{
    m_r_typeNameIsSet = false;
}
std::shared_ptr<BTPExpression_9> BTPStatementLoopForIn_279::getContainer() const
{
    return m_Container;
}

void BTPStatementLoopForIn_279::setContainer(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool BTPStatementLoopForIn_279::containerIsSet() const
{
    return m_ContainerIsSet;
}

void BTPStatementLoopForIn_279::unsetContainer()
{
    m_ContainerIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPStatementLoopForIn_279::getVar() const
{
    return m_Var;
}

void BTPStatementLoopForIn_279::setVar(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_Var = value;
    m_VarIsSet = true;
}

bool BTPStatementLoopForIn_279::varIsSet() const
{
    return m_VarIsSet;
}

void BTPStatementLoopForIn_279::unsetVar()
{
    m_VarIsSet = false;
}
bool BTPStatementLoopForIn_279::isIsVarDeclaredHere() const
{
    return m_IsVarDeclaredHere;
}

void BTPStatementLoopForIn_279::setIsVarDeclaredHere(bool value)
{
    m_IsVarDeclaredHere = value;
    m_IsVarDeclaredHereIsSet = true;
}

bool BTPStatementLoopForIn_279::isVarDeclaredHereIsSet() const
{
    return m_IsVarDeclaredHereIsSet;
}

void BTPStatementLoopForIn_279::unsetIsVarDeclaredHere()
{
    m_IsVarDeclaredHereIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopForIn_279::getSpaceBeforeVar() const
{
    return m_SpaceBeforeVar;
}

void BTPStatementLoopForIn_279::setSpaceBeforeVar(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeVar = value;
    m_SpaceBeforeVarIsSet = true;
}

bool BTPStatementLoopForIn_279::spaceBeforeVarIsSet() const
{
    return m_SpaceBeforeVarIsSet;
}

void BTPStatementLoopForIn_279::unsetSpaceBeforeVar()
{
    m_SpaceBeforeVarIsSet = false;
}
}
}
}
}


