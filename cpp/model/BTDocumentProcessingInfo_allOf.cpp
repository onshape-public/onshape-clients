/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentProcessingInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentProcessingInfo_allOf::BTDocumentProcessingInfo_allOf()
{
    m_TranslationId = utility::conversions::to_string_t("");
    m_TranslationIdIsSet = false;
    m_TranslationEventKey = utility::conversions::to_string_t("");
    m_TranslationEventKeyIsSet = false;
}

BTDocumentProcessingInfo_allOf::~BTDocumentProcessingInfo_allOf()
{
}

void BTDocumentProcessingInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentProcessingInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TranslationIdIsSet)
    {
        val[utility::conversions::to_string_t("translationId")] = ModelBase::toJson(m_TranslationId);
    }
    if(m_TranslationEventKeyIsSet)
    {
        val[utility::conversions::to_string_t("translationEventKey")] = ModelBase::toJson(m_TranslationEventKey);
    }

    return val;
}

bool BTDocumentProcessingInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("translationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("translationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_translationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_translationId);
            setTranslationId(refVal_translationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("translationEventKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("translationEventKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_translationEventKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_translationEventKey);
            setTranslationEventKey(refVal_translationEventKey);
        }
    }
    return ok;
}

void BTDocumentProcessingInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TranslationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("translationId"), m_TranslationId));
    }
    if(m_TranslationEventKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("translationEventKey"), m_TranslationEventKey));
    }
}

bool BTDocumentProcessingInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("translationId")))
    {
        utility::string_t refVal_translationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("translationId")), refVal_translationId );
        setTranslationId(refVal_translationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("translationEventKey")))
    {
        utility::string_t refVal_translationEventKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("translationEventKey")), refVal_translationEventKey );
        setTranslationEventKey(refVal_translationEventKey);
    }
    return ok;
}

utility::string_t BTDocumentProcessingInfo_allOf::getTranslationId() const
{
    return m_TranslationId;
}

void BTDocumentProcessingInfo_allOf::setTranslationId(const utility::string_t& value)
{
    m_TranslationId = value;
    m_TranslationIdIsSet = true;
}

bool BTDocumentProcessingInfo_allOf::translationIdIsSet() const
{
    return m_TranslationIdIsSet;
}

void BTDocumentProcessingInfo_allOf::unsetTranslationId()
{
    m_TranslationIdIsSet = false;
}
utility::string_t BTDocumentProcessingInfo_allOf::getTranslationEventKey() const
{
    return m_TranslationEventKey;
}

void BTDocumentProcessingInfo_allOf::setTranslationEventKey(const utility::string_t& value)
{
    m_TranslationEventKey = value;
    m_TranslationEventKeyIsSet = true;
}

bool BTDocumentProcessingInfo_allOf::translationEventKeyIsSet() const
{
    return m_TranslationEventKeyIsSet;
}

void BTDocumentProcessingInfo_allOf::unsetTranslationEventKey()
{
    m_TranslationEventKeyIsSet = false;
}
}
}
}
}


