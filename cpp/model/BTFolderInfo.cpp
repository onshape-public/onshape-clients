/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFolderInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFolderInfo::BTFolderInfo()
{
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_PermissionSetIsSet = false;
    m_Trash = false;
    m_TrashIsSet = false;
    m_CanUnshare = false;
    m_CanUnshareIsSet = false;
    m_Active = false;
    m_ActiveIsSet = false;
    m_TrashedAt = utility::datetime();
    m_TrashedAtIsSet = false;
    m_IsOrphaned = false;
    m_IsOrphanedIsSet = false;
}

BTFolderInfo::~BTFolderInfo()
{
}

void BTFolderInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTFolderInfo::toJson() const
{
    web::json::value val = this->BTGlobalTreeNodeInfo::toJson();
    
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_PermissionSetIsSet)
    {
        val[utility::conversions::to_string_t("permissionSet")] = ModelBase::toJson(m_PermissionSet);
    }
    if(m_TrashIsSet)
    {
        val[utility::conversions::to_string_t("trash")] = ModelBase::toJson(m_Trash);
    }
    if(m_CanUnshareIsSet)
    {
        val[utility::conversions::to_string_t("canUnshare")] = ModelBase::toJson(m_CanUnshare);
    }
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t("active")] = ModelBase::toJson(m_Active);
    }
    if(m_TrashedAtIsSet)
    {
        val[utility::conversions::to_string_t("trashedAt")] = ModelBase::toJson(m_TrashedAt);
    }
    if(m_IsOrphanedIsSet)
    {
        val[utility::conversions::to_string_t("isOrphaned")] = ModelBase::toJson(m_IsOrphaned);
    }

    return val;
}

bool BTFolderInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTGlobalTreeNodeInfo::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permissionSet")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permissionSet"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_permissionSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_permissionSet);
            setPermissionSet(refVal_permissionSet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trash"));
        if(!fieldValue.is_null())
        {
            bool refVal_trash;
            ok &= ModelBase::fromJson(fieldValue, refVal_trash);
            setTrash(refVal_trash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canUnshare")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canUnshare"));
        if(!fieldValue.is_null())
        {
            bool refVal_canUnshare;
            ok &= ModelBase::fromJson(fieldValue, refVal_canUnshare);
            setCanUnshare(refVal_canUnshare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("active"));
        if(!fieldValue.is_null())
        {
            bool refVal_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_active);
            setActive(refVal_active);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trashedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trashedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_trashedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_trashedAt);
            setTrashedAt(refVal_trashedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isOrphaned")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isOrphaned"));
        if(!fieldValue.is_null())
        {
            bool refVal_isOrphaned;
            ok &= ModelBase::fromJson(fieldValue, refVal_isOrphaned);
            setIsOrphaned(refVal_isOrphaned);
        }
    }
    return ok;
}

void BTFolderInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CanMoveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canMove"), m_CanMove));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isContainer"), m_IsContainer));
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwned"), m_IsEnterpriseOwned));
    }
    if(m_IsMutableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMutable"), m_IsMutable));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_ModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedBy"), m_ModifiedBy));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceType"), m_ResourceType));
    }
    if(m_TreeHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treeHref"), m_TreeHref));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PermissionSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissionSet"), m_PermissionSet));
    }
    if(m_TrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trash"), m_Trash));
    }
    if(m_CanUnshareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canUnshare"), m_CanUnshare));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("active"), m_Active));
    }
    if(m_TrashedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trashedAt"), m_TrashedAt));
    }
    if(m_IsOrphanedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOrphaned"), m_IsOrphaned));
    }
}

bool BTFolderInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("canMove")))
    {
        bool refVal_canMove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canMove")), refVal_canMove );
        setCanMove(refVal_canMove);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isContainer")))
    {
        bool refVal_isContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isContainer")), refVal_isContainer );
        setIsContainer(refVal_isContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        bool refVal_isEnterpriseOwned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwned")), refVal_isEnterpriseOwned );
        setIsEnterpriseOwned(refVal_isEnterpriseOwned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMutable")))
    {
        bool refVal_isMutable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMutable")), refVal_isMutable );
        setIsMutable(refVal_isMutable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedBy")), refVal_modifiedBy );
        setModifiedBy(refVal_modifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourceType")))
    {
        utility::string_t refVal_resourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceType")), refVal_resourceType );
        setResourceType(refVal_resourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treeHref")))
    {
        utility::string_t refVal_treeHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treeHref")), refVal_treeHref );
        setTreeHref(refVal_treeHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissionSet")))
    {
        std::shared_ptr<Object> refVal_permissionSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissionSet")), refVal_permissionSet );
        setPermissionSet(refVal_permissionSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trash")))
    {
        bool refVal_trash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trash")), refVal_trash );
        setTrash(refVal_trash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canUnshare")))
    {
        bool refVal_canUnshare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canUnshare")), refVal_canUnshare );
        setCanUnshare(refVal_canUnshare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("active")))
    {
        bool refVal_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("active")), refVal_active );
        setActive(refVal_active);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trashedAt")))
    {
        utility::datetime refVal_trashedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trashedAt")), refVal_trashedAt );
        setTrashedAt(refVal_trashedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOrphaned")))
    {
        bool refVal_isOrphaned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOrphaned")), refVal_isOrphaned );
        setIsOrphaned(refVal_isOrphaned);
    }
    return ok;
}

utility::string_t BTFolderInfo::getParentId() const
{
    return m_ParentId;
}

void BTFolderInfo::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTFolderInfo::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTFolderInfo::unsetParentId()
{
    m_ParentIdIsSet = false;
}
std::shared_ptr<Object> BTFolderInfo::getPermissionSet() const
{
    return m_PermissionSet;
}

void BTFolderInfo::setPermissionSet(const std::shared_ptr<Object>& value)
{
    m_PermissionSet = value;
    m_PermissionSetIsSet = true;
}

bool BTFolderInfo::permissionSetIsSet() const
{
    return m_PermissionSetIsSet;
}

void BTFolderInfo::unsetPermissionSet()
{
    m_PermissionSetIsSet = false;
}
bool BTFolderInfo::isTrash() const
{
    return m_Trash;
}

void BTFolderInfo::setTrash(bool value)
{
    m_Trash = value;
    m_TrashIsSet = true;
}

bool BTFolderInfo::trashIsSet() const
{
    return m_TrashIsSet;
}

void BTFolderInfo::unsetTrash()
{
    m_TrashIsSet = false;
}
bool BTFolderInfo::isCanUnshare() const
{
    return m_CanUnshare;
}

void BTFolderInfo::setCanUnshare(bool value)
{
    m_CanUnshare = value;
    m_CanUnshareIsSet = true;
}

bool BTFolderInfo::canUnshareIsSet() const
{
    return m_CanUnshareIsSet;
}

void BTFolderInfo::unsetCanUnshare()
{
    m_CanUnshareIsSet = false;
}
bool BTFolderInfo::isActive() const
{
    return m_Active;
}

void BTFolderInfo::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool BTFolderInfo::activeIsSet() const
{
    return m_ActiveIsSet;
}

void BTFolderInfo::unsetActive()
{
    m_ActiveIsSet = false;
}
utility::datetime BTFolderInfo::getTrashedAt() const
{
    return m_TrashedAt;
}

void BTFolderInfo::setTrashedAt(const utility::datetime& value)
{
    m_TrashedAt = value;
    m_TrashedAtIsSet = true;
}

bool BTFolderInfo::trashedAtIsSet() const
{
    return m_TrashedAtIsSet;
}

void BTFolderInfo::unsetTrashedAt()
{
    m_TrashedAtIsSet = false;
}
bool BTFolderInfo::isIsOrphaned() const
{
    return m_IsOrphaned;
}

void BTFolderInfo::setIsOrphaned(bool value)
{
    m_IsOrphaned = value;
    m_IsOrphanedIsSet = true;
}

bool BTFolderInfo::isOrphanedIsSet() const
{
    return m_IsOrphanedIsSet;
}

void BTFolderInfo::unsetIsOrphaned()
{
    m_IsOrphanedIsSet = false;
}
}
}
}
}


