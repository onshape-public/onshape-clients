/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelArcEdgeGeometry_1257.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelArcEdgeGeometry_1257::BTExportModelArcEdgeGeometry_1257()
{
    m_ArcIsClockwise = false;
    m_ArcIsClockwiseIsSet = false;
    m_ArcSweep = 0.0;
    m_ArcSweepIsSet = false;
}

BTExportModelArcEdgeGeometry_1257::~BTExportModelArcEdgeGeometry_1257()
{
}

void BTExportModelArcEdgeGeometry_1257::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelArcEdgeGeometry_1257::toJson() const
{
    web::json::value val = this->BTExportModelEdgeGeometry_1125::toJson();
    
    if(m_ArcIsClockwiseIsSet)
    {
        val[utility::conversions::to_string_t("arcIsClockwise")] = ModelBase::toJson(m_ArcIsClockwise);
    }
    if(m_ArcSweepIsSet)
    {
        val[utility::conversions::to_string_t("arcSweep")] = ModelBase::toJson(m_ArcSweep);
    }

    return val;
}

bool BTExportModelArcEdgeGeometry_1257::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTExportModelEdgeGeometry_1125::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("arcIsClockwise")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arcIsClockwise"));
        if(!fieldValue.is_null())
        {
            bool refVal_arcIsClockwise;
            ok &= ModelBase::fromJson(fieldValue, refVal_arcIsClockwise);
            setArcIsClockwise(refVal_arcIsClockwise);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arcSweep")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arcSweep"));
        if(!fieldValue.is_null())
        {
            double refVal_arcSweep;
            ok &= ModelBase::fromJson(fieldValue, refVal_arcSweep);
            setArcSweep(refVal_arcSweep);
        }
    }
    return ok;
}

void BTExportModelArcEdgeGeometry_1257::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_EndPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endPoint"), m_EndPoint));
    }
    if(m_EndVectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endVector"), m_EndVector));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("length"), m_Length));
    }
    if(m_MidPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("midPoint"), m_MidPoint));
    }
    if(m_QuarterPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quarterPoint"), m_QuarterPoint));
    }
    if(m_StartPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startPoint"), m_StartPoint));
    }
    if(m_StartVectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startVector"), m_StartVector));
    }
    if(m_ArcIsClockwiseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arcIsClockwise"), m_ArcIsClockwise));
    }
    if(m_ArcSweepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arcSweep"), m_ArcSweep));
    }
}

bool BTExportModelArcEdgeGeometry_1257::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_endPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endPoint")), refVal_endPoint );
        setEndPoint(refVal_endPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endVector")))
    {
        std::shared_ptr<BTVector3d_389> refVal_endVector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endVector")), refVal_endVector );
        setEndVector(refVal_endVector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("length")))
    {
        double refVal_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("length")), refVal_length );
        setLength(refVal_length);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("midPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_midPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("midPoint")), refVal_midPoint );
        setMidPoint(refVal_midPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quarterPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_quarterPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quarterPoint")), refVal_quarterPoint );
        setQuarterPoint(refVal_quarterPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_startPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startPoint")), refVal_startPoint );
        setStartPoint(refVal_startPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startVector")))
    {
        std::shared_ptr<BTVector3d_389> refVal_startVector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startVector")), refVal_startVector );
        setStartVector(refVal_startVector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arcIsClockwise")))
    {
        bool refVal_arcIsClockwise;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arcIsClockwise")), refVal_arcIsClockwise );
        setArcIsClockwise(refVal_arcIsClockwise);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arcSweep")))
    {
        double refVal_arcSweep;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("arcSweep")), refVal_arcSweep );
        setArcSweep(refVal_arcSweep);
    }
    return ok;
}

bool BTExportModelArcEdgeGeometry_1257::isArcIsClockwise() const
{
    return m_ArcIsClockwise;
}

void BTExportModelArcEdgeGeometry_1257::setArcIsClockwise(bool value)
{
    m_ArcIsClockwise = value;
    m_ArcIsClockwiseIsSet = true;
}

bool BTExportModelArcEdgeGeometry_1257::arcIsClockwiseIsSet() const
{
    return m_ArcIsClockwiseIsSet;
}

void BTExportModelArcEdgeGeometry_1257::unsetArcIsClockwise()
{
    m_ArcIsClockwiseIsSet = false;
}
double BTExportModelArcEdgeGeometry_1257::getArcSweep() const
{
    return m_ArcSweep;
}

void BTExportModelArcEdgeGeometry_1257::setArcSweep(double value)
{
    m_ArcSweep = value;
    m_ArcSweepIsSet = true;
}

bool BTExportModelArcEdgeGeometry_1257::arcSweepIsSet() const
{
    return m_ArcSweepIsSet;
}

void BTExportModelArcEdgeGeometry_1257::unsetArcSweep()
{
    m_ArcSweepIsSet = false;
}
}
}
}
}


