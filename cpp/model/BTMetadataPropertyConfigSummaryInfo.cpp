/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMetadataPropertyConfigSummaryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMetadataPropertyConfigSummaryInfo::BTMetadataPropertyConfigSummaryInfo()
{
    m_CategoryId = utility::conversions::to_string_t("");
    m_CategoryIdIsSet = false;
    m_CategorySummaryInfoIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_ObjectType = 0;
    m_ObjectTypeIsSet = false;
    m_PropertyId = utility::conversions::to_string_t("");
    m_PropertyIdIsSet = false;
    m_PublishState = 0;
    m_PublishStateIsSet = false;
    m_SchemaId = utility::conversions::to_string_t("");
    m_SchemaIdIsSet = false;
}

BTMetadataPropertyConfigSummaryInfo::~BTMetadataPropertyConfigSummaryInfo()
{
}

void BTMetadataPropertyConfigSummaryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMetadataPropertyConfigSummaryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CategoryIdIsSet)
    {
        val[utility::conversions::to_string_t("categoryId")] = ModelBase::toJson(m_CategoryId);
    }
    if(m_CategorySummaryInfoIsSet)
    {
        val[utility::conversions::to_string_t("categorySummaryInfo")] = ModelBase::toJson(m_CategorySummaryInfo);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_ObjectTypeIsSet)
    {
        val[utility::conversions::to_string_t("objectType")] = ModelBase::toJson(m_ObjectType);
    }
    if(m_PropertyIdIsSet)
    {
        val[utility::conversions::to_string_t("propertyId")] = ModelBase::toJson(m_PropertyId);
    }
    if(m_PublishStateIsSet)
    {
        val[utility::conversions::to_string_t("publishState")] = ModelBase::toJson(m_PublishState);
    }
    if(m_SchemaIdIsSet)
    {
        val[utility::conversions::to_string_t("schemaId")] = ModelBase::toJson(m_SchemaId);
    }

    return val;
}

bool BTMetadataPropertyConfigSummaryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("categoryId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("categoryId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_categoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_categoryId);
            setCategoryId(refVal_categoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("categorySummaryInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("categorySummaryInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMetadataCategorySummaryInfo> refVal_categorySummaryInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_categorySummaryInfo);
            setCategorySummaryInfo(refVal_categorySummaryInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objectType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_objectType;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectType);
            setObjectType(refVal_objectType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propertyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("propertyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_propertyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_propertyId);
            setPropertyId(refVal_propertyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("publishState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("publishState"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_publishState;
            ok &= ModelBase::fromJson(fieldValue, refVal_publishState);
            setPublishState(refVal_publishState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("schemaId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("schemaId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_schemaId;
            ok &= ModelBase::fromJson(fieldValue, refVal_schemaId);
            setSchemaId(refVal_schemaId);
        }
    }
    return ok;
}

void BTMetadataPropertyConfigSummaryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("categoryId"), m_CategoryId));
    }
    if(m_CategorySummaryInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("categorySummaryInfo"), m_CategorySummaryInfo));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_ObjectTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectType"), m_ObjectType));
    }
    if(m_PropertyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("propertyId"), m_PropertyId));
    }
    if(m_PublishStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publishState"), m_PublishState));
    }
    if(m_SchemaIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("schemaId"), m_SchemaId));
    }
}

bool BTMetadataPropertyConfigSummaryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("categoryId")))
    {
        utility::string_t refVal_categoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("categoryId")), refVal_categoryId );
        setCategoryId(refVal_categoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("categorySummaryInfo")))
    {
        std::shared_ptr<BTMetadataCategorySummaryInfo> refVal_categorySummaryInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("categorySummaryInfo")), refVal_categorySummaryInfo );
        setCategorySummaryInfo(refVal_categorySummaryInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectType")))
    {
        int32_t refVal_objectType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectType")), refVal_objectType );
        setObjectType(refVal_objectType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propertyId")))
    {
        utility::string_t refVal_propertyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("propertyId")), refVal_propertyId );
        setPropertyId(refVal_propertyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("publishState")))
    {
        int32_t refVal_publishState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("publishState")), refVal_publishState );
        setPublishState(refVal_publishState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("schemaId")))
    {
        utility::string_t refVal_schemaId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("schemaId")), refVal_schemaId );
        setSchemaId(refVal_schemaId);
    }
    return ok;
}

utility::string_t BTMetadataPropertyConfigSummaryInfo::getCategoryId() const
{
    return m_CategoryId;
}

void BTMetadataPropertyConfigSummaryInfo::setCategoryId(const utility::string_t& value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}
std::shared_ptr<BTMetadataCategorySummaryInfo> BTMetadataPropertyConfigSummaryInfo::getCategorySummaryInfo() const
{
    return m_CategorySummaryInfo;
}

void BTMetadataPropertyConfigSummaryInfo::setCategorySummaryInfo(const std::shared_ptr<BTMetadataCategorySummaryInfo>& value)
{
    m_CategorySummaryInfo = value;
    m_CategorySummaryInfoIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::categorySummaryInfoIsSet() const
{
    return m_CategorySummaryInfoIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetCategorySummaryInfo()
{
    m_CategorySummaryInfoIsSet = false;
}
utility::string_t BTMetadataPropertyConfigSummaryInfo::getDisplayName() const
{
    return m_DisplayName;
}

void BTMetadataPropertyConfigSummaryInfo::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t BTMetadataPropertyConfigSummaryInfo::getObjectType() const
{
    return m_ObjectType;
}

void BTMetadataPropertyConfigSummaryInfo::setObjectType(int32_t value)
{
    m_ObjectType = value;
    m_ObjectTypeIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::objectTypeIsSet() const
{
    return m_ObjectTypeIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetObjectType()
{
    m_ObjectTypeIsSet = false;
}
utility::string_t BTMetadataPropertyConfigSummaryInfo::getPropertyId() const
{
    return m_PropertyId;
}

void BTMetadataPropertyConfigSummaryInfo::setPropertyId(const utility::string_t& value)
{
    m_PropertyId = value;
    m_PropertyIdIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::propertyIdIsSet() const
{
    return m_PropertyIdIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetPropertyId()
{
    m_PropertyIdIsSet = false;
}
int32_t BTMetadataPropertyConfigSummaryInfo::getPublishState() const
{
    return m_PublishState;
}

void BTMetadataPropertyConfigSummaryInfo::setPublishState(int32_t value)
{
    m_PublishState = value;
    m_PublishStateIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::publishStateIsSet() const
{
    return m_PublishStateIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetPublishState()
{
    m_PublishStateIsSet = false;
}
utility::string_t BTMetadataPropertyConfigSummaryInfo::getSchemaId() const
{
    return m_SchemaId;
}

void BTMetadataPropertyConfigSummaryInfo::setSchemaId(const utility::string_t& value)
{
    m_SchemaId = value;
    m_SchemaIdIsSet = true;
}

bool BTMetadataPropertyConfigSummaryInfo::schemaIdIsSet() const
{
    return m_SchemaIdIsSet;
}

void BTMetadataPropertyConfigSummaryInfo::unsetSchemaId()
{
    m_SchemaIdIsSet = false;
}
}
}
}
}


