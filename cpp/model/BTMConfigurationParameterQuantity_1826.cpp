/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMConfigurationParameterQuantity_1826.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMConfigurationParameterQuantity_1826::BTMConfigurationParameterQuantity_1826()
{
    m_QuantityType = utility::conversions::to_string_t("");
    m_QuantityTypeIsSet = false;
    m_RangeAndDefaultIsSet = false;
}

BTMConfigurationParameterQuantity_1826::~BTMConfigurationParameterQuantity_1826()
{
}

void BTMConfigurationParameterQuantity_1826::validate()
{
    // TODO: implement validation
}

web::json::value BTMConfigurationParameterQuantity_1826::toJson() const
{
    web::json::value val = this->BTMConfigurationParameter_819::toJson();
    
    if(m_QuantityTypeIsSet)
    {
        val[utility::conversions::to_string_t("quantityType")] = ModelBase::toJson(m_QuantityType);
    }
    if(m_RangeAndDefaultIsSet)
    {
        val[utility::conversions::to_string_t("rangeAndDefault")] = ModelBase::toJson(m_RangeAndDefault);
    }

    return val;
}

bool BTMConfigurationParameterQuantity_1826::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMConfigurationParameter_819::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("quantityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quantityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_quantityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_quantityType);
            setQuantityType(refVal_quantityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rangeAndDefault")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rangeAndDefault"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTQuantityRange_181> refVal_rangeAndDefault;
            ok &= ModelBase::fromJson(fieldValue, refVal_rangeAndDefault);
            setRangeAndDefault(refVal_rangeAndDefault);
        }
    }
    return ok;
}

void BTMConfigurationParameterQuantity_1826::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_GeneratedParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("generatedParameterId"), m_GeneratedParameterId));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_ParameterTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterType"), m_ParameterType));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valid"), m_Valid));
    }
    if(m_QuantityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantityType"), m_QuantityType));
    }
    if(m_RangeAndDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rangeAndDefault"), m_RangeAndDefault));
    }
}

bool BTMConfigurationParameterQuantity_1826::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("generatedParameterId")))
    {
        std::shared_ptr<BTTreeNode_20> refVal_generatedParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("generatedParameterId")), refVal_generatedParameterId );
        setGeneratedParameterId(refVal_generatedParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterType")))
    {
        utility::string_t refVal_parameterType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterType")), refVal_parameterType );
        setParameterType(refVal_parameterType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valid")))
    {
        bool refVal_valid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valid")), refVal_valid );
        setValid(refVal_valid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quantityType")))
    {
        utility::string_t refVal_quantityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantityType")), refVal_quantityType );
        setQuantityType(refVal_quantityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rangeAndDefault")))
    {
        std::shared_ptr<BTQuantityRange_181> refVal_rangeAndDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rangeAndDefault")), refVal_rangeAndDefault );
        setRangeAndDefault(refVal_rangeAndDefault);
    }
    return ok;
}

utility::string_t BTMConfigurationParameterQuantity_1826::getQuantityType() const
{
    return m_QuantityType;
}

void BTMConfigurationParameterQuantity_1826::setQuantityType(const utility::string_t& value)
{
    m_QuantityType = value;
    m_QuantityTypeIsSet = true;
}

bool BTMConfigurationParameterQuantity_1826::quantityTypeIsSet() const
{
    return m_QuantityTypeIsSet;
}

void BTMConfigurationParameterQuantity_1826::unsetQuantityType()
{
    m_QuantityTypeIsSet = false;
}
std::shared_ptr<BTQuantityRange_181> BTMConfigurationParameterQuantity_1826::getRangeAndDefault() const
{
    return m_RangeAndDefault;
}

void BTMConfigurationParameterQuantity_1826::setRangeAndDefault(const std::shared_ptr<BTQuantityRange_181>& value)
{
    m_RangeAndDefault = value;
    m_RangeAndDefaultIsSet = true;
}

bool BTMConfigurationParameterQuantity_1826::rangeAndDefaultIsSet() const
{
    return m_RangeAndDefaultIsSet;
}

void BTMConfigurationParameterQuantity_1826::unsetRangeAndDefault()
{
    m_RangeAndDefaultIsSet = false;
}
}
}
}
}


