/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMicroversionIdAndConfiguration_2338.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMicroversionIdAndConfiguration_2338::BTMicroversionIdAndConfiguration_2338()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_CacheKey = utility::conversions::to_string_t("");
    m_CacheKeyIsSet = false;
    m_ConfigurationParameterIdToValueIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_MicroversionIsSet = false;
}

BTMicroversionIdAndConfiguration_2338::~BTMicroversionIdAndConfiguration_2338()
{
}

void BTMicroversionIdAndConfiguration_2338::validate()
{
    // TODO: implement validation
}

web::json::value BTMicroversionIdAndConfiguration_2338::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_CacheKeyIsSet)
    {
        val[utility::conversions::to_string_t("cacheKey")] = ModelBase::toJson(m_CacheKey);
    }
    if(m_ConfigurationParameterIdToValueIsSet)
    {
        val[utility::conversions::to_string_t("configurationParameterIdToValue")] = ModelBase::toJson(m_ConfigurationParameterIdToValue);
    }
    if(m_DeletedIsSet)
    {
        val[utility::conversions::to_string_t("deleted")] = ModelBase::toJson(m_Deleted);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_MicroversionIsSet)
    {
        val[utility::conversions::to_string_t("microversion")] = ModelBase::toJson(m_Microversion);
    }

    return val;
}

bool BTMicroversionIdAndConfiguration_2338::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cacheKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cacheKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cacheKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_cacheKey);
            setCacheKey(refVal_cacheKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationParameterIdToValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationParameterIdToValue"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> refVal_configurationParameterIdToValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationParameterIdToValue);
            setConfigurationParameterIdToValue(refVal_configurationParameterIdToValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deleted")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deleted"));
        if(!fieldValue.is_null())
        {
            bool refVal_deleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_deleted);
            setDeleted(refVal_deleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMicroversionId_366> refVal_microversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversion);
            setMicroversion(refVal_microversion);
        }
    }
    return ok;
}

void BTMicroversionIdAndConfiguration_2338::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_CacheKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cacheKey"), m_CacheKey));
    }
    if(m_ConfigurationParameterIdToValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationParameterIdToValue"), m_ConfigurationParameterIdToValue));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleted"), m_Deleted));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_MicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversion"), m_Microversion));
    }
}

bool BTMicroversionIdAndConfiguration_2338::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cacheKey")))
    {
        utility::string_t refVal_cacheKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cacheKey")), refVal_cacheKey );
        setCacheKey(refVal_cacheKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationParameterIdToValue")))
    {
        std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>> refVal_configurationParameterIdToValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationParameterIdToValue")), refVal_configurationParameterIdToValue );
        setConfigurationParameterIdToValue(refVal_configurationParameterIdToValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleted")))
    {
        bool refVal_deleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleted")), refVal_deleted );
        setDeleted(refVal_deleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversion")))
    {
        std::shared_ptr<BTMicroversionId_366> refVal_microversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversion")), refVal_microversion );
        setMicroversion(refVal_microversion);
    }
    return ok;
}

utility::string_t BTMicroversionIdAndConfiguration_2338::getBtType() const
{
    return m_BtType;
}

void BTMicroversionIdAndConfiguration_2338::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTMicroversionIdAndConfiguration_2338::getCacheKey() const
{
    return m_CacheKey;
}

void BTMicroversionIdAndConfiguration_2338::setCacheKey(const utility::string_t& value)
{
    m_CacheKey = value;
    m_CacheKeyIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::cacheKeyIsSet() const
{
    return m_CacheKeyIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetCacheKey()
{
    m_CacheKeyIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& BTMicroversionIdAndConfiguration_2338::getConfigurationParameterIdToValue()
{
    return m_ConfigurationParameterIdToValue;
}

void BTMicroversionIdAndConfiguration_2338::setConfigurationParameterIdToValue(const std::map<utility::string_t, std::shared_ptr<BTFSValue_1888>>& value)
{
    m_ConfigurationParameterIdToValue = value;
    m_ConfigurationParameterIdToValueIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::configurationParameterIdToValueIsSet() const
{
    return m_ConfigurationParameterIdToValueIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetConfigurationParameterIdToValue()
{
    m_ConfigurationParameterIdToValueIsSet = false;
}
bool BTMicroversionIdAndConfiguration_2338::isDeleted() const
{
    return m_Deleted;
}

void BTMicroversionIdAndConfiguration_2338::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t BTMicroversionIdAndConfiguration_2338::getDescription() const
{
    return m_Description;
}

void BTMicroversionIdAndConfiguration_2338::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<BTMicroversionId_366> BTMicroversionIdAndConfiguration_2338::getMicroversion() const
{
    return m_Microversion;
}

void BTMicroversionIdAndConfiguration_2338::setMicroversion(const std::shared_ptr<BTMicroversionId_366>& value)
{
    m_Microversion = value;
    m_MicroversionIsSet = true;
}

bool BTMicroversionIdAndConfiguration_2338::microversionIsSet() const
{
    return m_MicroversionIsSet;
}

void BTMicroversionIdAndConfiguration_2338::unsetMicroversion()
{
    m_MicroversionIsSet = false;
}
}
}
}
}


