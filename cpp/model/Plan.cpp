/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Plan.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Plan::Plan()
{
    m_Amount = 0L;
    m_AmountIsSet = false;
    m_Created = 0L;
    m_CreatedIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Interval = utility::conversions::to_string_t("");
    m_IntervalIsSet = false;
    m_IntervalCount = 0;
    m_IntervalCountIsSet = false;
    m_Livemode = false;
    m_LivemodeIsSet = false;
    m_MetadataIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_StatementDescription = utility::conversions::to_string_t("");
    m_StatementDescriptionIsSet = false;
    m_StatementDescriptor = utility::conversions::to_string_t("");
    m_StatementDescriptorIsSet = false;
    m_TrialPeriodDays = 0;
    m_TrialPeriodDaysIsSet = false;
}

Plan::~Plan()
{
}

void Plan::validate()
{
    // TODO: implement validation
}

web::json::value Plan::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IntervalIsSet)
    {
        val[utility::conversions::to_string_t("interval")] = ModelBase::toJson(m_Interval);
    }
    if(m_IntervalCountIsSet)
    {
        val[utility::conversions::to_string_t("intervalCount")] = ModelBase::toJson(m_IntervalCount);
    }
    if(m_LivemodeIsSet)
    {
        val[utility::conversions::to_string_t("livemode")] = ModelBase::toJson(m_Livemode);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t("metadata")] = ModelBase::toJson(m_Metadata);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_StatementDescriptionIsSet)
    {
        val[utility::conversions::to_string_t("statementDescription")] = ModelBase::toJson(m_StatementDescription);
    }
    if(m_StatementDescriptorIsSet)
    {
        val[utility::conversions::to_string_t("statementDescriptor")] = ModelBase::toJson(m_StatementDescriptor);
    }
    if(m_TrialPeriodDaysIsSet)
    {
        val[utility::conversions::to_string_t("trialPeriodDays")] = ModelBase::toJson(m_TrialPeriodDays);
    }

    return val;
}

bool Plan::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amount"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_amount;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount);
            setAmount(refVal_amount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currency"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_currency;
            ok &= ModelBase::fromJson(fieldValue, refVal_currency);
            setCurrency(refVal_currency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interval")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("interval"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_interval;
            ok &= ModelBase::fromJson(fieldValue, refVal_interval);
            setInterval(refVal_interval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("intervalCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("intervalCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_intervalCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_intervalCount);
            setIntervalCount(refVal_intervalCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("livemode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("livemode"));
        if(!fieldValue.is_null())
        {
            bool refVal_livemode;
            ok &= ModelBase::fromJson(fieldValue, refVal_livemode);
            setLivemode(refVal_livemode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metadata")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadata"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_metadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadata);
            setMetadata(refVal_metadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("statementDescription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("statementDescription"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_statementDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_statementDescription);
            setStatementDescription(refVal_statementDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("statementDescriptor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("statementDescriptor"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_statementDescriptor;
            ok &= ModelBase::fromJson(fieldValue, refVal_statementDescriptor);
            setStatementDescriptor(refVal_statementDescriptor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trialPeriodDays")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trialPeriodDays"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_trialPeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_trialPeriodDays);
            setTrialPeriodDays(refVal_trialPeriodDays);
        }
    }
    return ok;
}

void Plan::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("interval"), m_Interval));
    }
    if(m_IntervalCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("intervalCount"), m_IntervalCount));
    }
    if(m_LivemodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("livemode"), m_Livemode));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadata"), m_Metadata));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_StatementDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("statementDescription"), m_StatementDescription));
    }
    if(m_StatementDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("statementDescriptor"), m_StatementDescriptor));
    }
    if(m_TrialPeriodDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trialPeriodDays"), m_TrialPeriodDays));
    }
}

bool Plan::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        int64_t refVal_amount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount")), refVal_amount );
        setAmount(refVal_amount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        int64_t refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        utility::string_t refVal_currency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency")), refVal_currency );
        setCurrency(refVal_currency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interval")))
    {
        utility::string_t refVal_interval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("interval")), refVal_interval );
        setInterval(refVal_interval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("intervalCount")))
    {
        int32_t refVal_intervalCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("intervalCount")), refVal_intervalCount );
        setIntervalCount(refVal_intervalCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("livemode")))
    {
        bool refVal_livemode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("livemode")), refVal_livemode );
        setLivemode(refVal_livemode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
    {
        std::map<utility::string_t, utility::string_t> refVal_metadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadata")), refVal_metadata );
        setMetadata(refVal_metadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("statementDescription")))
    {
        utility::string_t refVal_statementDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("statementDescription")), refVal_statementDescription );
        setStatementDescription(refVal_statementDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("statementDescriptor")))
    {
        utility::string_t refVal_statementDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("statementDescriptor")), refVal_statementDescriptor );
        setStatementDescriptor(refVal_statementDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trialPeriodDays")))
    {
        int32_t refVal_trialPeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trialPeriodDays")), refVal_trialPeriodDays );
        setTrialPeriodDays(refVal_trialPeriodDays);
    }
    return ok;
}

int64_t Plan::getAmount() const
{
    return m_Amount;
}

void Plan::setAmount(int64_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool Plan::amountIsSet() const
{
    return m_AmountIsSet;
}

void Plan::unsetAmount()
{
    m_AmountIsSet = false;
}
int64_t Plan::getCreated() const
{
    return m_Created;
}

void Plan::setCreated(int64_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool Plan::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Plan::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t Plan::getCurrency() const
{
    return m_Currency;
}

void Plan::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool Plan::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Plan::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t Plan::getId() const
{
    return m_Id;
}

void Plan::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Plan::idIsSet() const
{
    return m_IdIsSet;
}

void Plan::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Plan::getInterval() const
{
    return m_Interval;
}

void Plan::setInterval(const utility::string_t& value)
{
    m_Interval = value;
    m_IntervalIsSet = true;
}

bool Plan::intervalIsSet() const
{
    return m_IntervalIsSet;
}

void Plan::unsetInterval()
{
    m_IntervalIsSet = false;
}
int32_t Plan::getIntervalCount() const
{
    return m_IntervalCount;
}

void Plan::setIntervalCount(int32_t value)
{
    m_IntervalCount = value;
    m_IntervalCountIsSet = true;
}

bool Plan::intervalCountIsSet() const
{
    return m_IntervalCountIsSet;
}

void Plan::unsetIntervalCount()
{
    m_IntervalCountIsSet = false;
}
bool Plan::isLivemode() const
{
    return m_Livemode;
}

void Plan::setLivemode(bool value)
{
    m_Livemode = value;
    m_LivemodeIsSet = true;
}

bool Plan::livemodeIsSet() const
{
    return m_LivemodeIsSet;
}

void Plan::unsetLivemode()
{
    m_LivemodeIsSet = false;
}
std::map<utility::string_t, utility::string_t>& Plan::getMetadata()
{
    return m_Metadata;
}

void Plan::setMetadata(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool Plan::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void Plan::unsetMetadata()
{
    m_MetadataIsSet = false;
}
utility::string_t Plan::getName() const
{
    return m_Name;
}

void Plan::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Plan::nameIsSet() const
{
    return m_NameIsSet;
}

void Plan::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Plan::getObject() const
{
    return m_object;
}

void Plan::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool Plan::objectIsSet() const
{
    return m_objectIsSet;
}

void Plan::unsetobject()
{
    m_objectIsSet = false;
}
utility::string_t Plan::getStatementDescription() const
{
    return m_StatementDescription;
}

void Plan::setStatementDescription(const utility::string_t& value)
{
    m_StatementDescription = value;
    m_StatementDescriptionIsSet = true;
}

bool Plan::statementDescriptionIsSet() const
{
    return m_StatementDescriptionIsSet;
}

void Plan::unsetStatementDescription()
{
    m_StatementDescriptionIsSet = false;
}
utility::string_t Plan::getStatementDescriptor() const
{
    return m_StatementDescriptor;
}

void Plan::setStatementDescriptor(const utility::string_t& value)
{
    m_StatementDescriptor = value;
    m_StatementDescriptorIsSet = true;
}

bool Plan::statementDescriptorIsSet() const
{
    return m_StatementDescriptorIsSet;
}

void Plan::unsetStatementDescriptor()
{
    m_StatementDescriptorIsSet = false;
}
int32_t Plan::getTrialPeriodDays() const
{
    return m_TrialPeriodDays;
}

void Plan::setTrialPeriodDays(int32_t value)
{
    m_TrialPeriodDays = value;
    m_TrialPeriodDaysIsSet = true;
}

bool Plan::trialPeriodDaysIsSet() const
{
    return m_TrialPeriodDaysIsSet;
}

void Plan::unsetTrialPeriodDays()
{
    m_TrialPeriodDaysIsSet = false;
}
}
}
}
}


