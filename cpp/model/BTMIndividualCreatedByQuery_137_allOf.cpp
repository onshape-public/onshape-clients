/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMIndividualCreatedByQuery_137_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMIndividualCreatedByQuery_137_allOf::BTMIndividualCreatedByQuery_137_allOf()
{
    m_BodyType = utility::conversions::to_string_t("");
    m_BodyTypeIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_FilterConstruction = false;
    m_FilterConstructionIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMIndividualCreatedByQuery_137_allOf::~BTMIndividualCreatedByQuery_137_allOf()
{
}

void BTMIndividualCreatedByQuery_137_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMIndividualCreatedByQuery_137_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodyTypeIsSet)
    {
        val[utility::conversions::to_string_t("bodyType")] = ModelBase::toJson(m_BodyType);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t("entityType")] = ModelBase::toJson(m_EntityType);
    }
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_FilterConstructionIsSet)
    {
        val[utility::conversions::to_string_t("filterConstruction")] = ModelBase::toJson(m_FilterConstruction);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMIndividualCreatedByQuery_137_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bodyType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyType);
            setBodyType(refVal_bodyType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entityType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entityType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_entityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_entityType);
            setEntityType(refVal_entityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filterConstruction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filterConstruction"));
        if(!fieldValue.is_null())
        {
            bool refVal_filterConstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_filterConstruction);
            setFilterConstruction(refVal_filterConstruction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMIndividualCreatedByQuery_137_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BodyTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyType"), m_BodyType));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityType"), m_EntityType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_FilterConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filterConstruction"), m_FilterConstruction));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMIndividualCreatedByQuery_137_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bodyType")))
    {
        utility::string_t refVal_bodyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyType")), refVal_bodyType );
        setBodyType(refVal_bodyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityType")))
    {
        utility::string_t refVal_entityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityType")), refVal_entityType );
        setEntityType(refVal_entityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filterConstruction")))
    {
        bool refVal_filterConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filterConstruction")), refVal_filterConstruction );
        setFilterConstruction(refVal_filterConstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTMIndividualCreatedByQuery_137_allOf::getBodyType() const
{
    return m_BodyType;
}

void BTMIndividualCreatedByQuery_137_allOf::setBodyType(const utility::string_t& value)
{
    m_BodyType = value;
    m_BodyTypeIsSet = true;
}

bool BTMIndividualCreatedByQuery_137_allOf::bodyTypeIsSet() const
{
    return m_BodyTypeIsSet;
}

void BTMIndividualCreatedByQuery_137_allOf::unsetBodyType()
{
    m_BodyTypeIsSet = false;
}
utility::string_t BTMIndividualCreatedByQuery_137_allOf::getEntityType() const
{
    return m_EntityType;
}

void BTMIndividualCreatedByQuery_137_allOf::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool BTMIndividualCreatedByQuery_137_allOf::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void BTMIndividualCreatedByQuery_137_allOf::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
utility::string_t BTMIndividualCreatedByQuery_137_allOf::getFeatureId() const
{
    return m_FeatureId;
}

void BTMIndividualCreatedByQuery_137_allOf::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTMIndividualCreatedByQuery_137_allOf::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTMIndividualCreatedByQuery_137_allOf::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
bool BTMIndividualCreatedByQuery_137_allOf::isFilterConstruction() const
{
    return m_FilterConstruction;
}

void BTMIndividualCreatedByQuery_137_allOf::setFilterConstruction(bool value)
{
    m_FilterConstruction = value;
    m_FilterConstructionIsSet = true;
}

bool BTMIndividualCreatedByQuery_137_allOf::filterConstructionIsSet() const
{
    return m_FilterConstructionIsSet;
}

void BTMIndividualCreatedByQuery_137_allOf::unsetFilterConstruction()
{
    m_FilterConstructionIsSet = false;
}
utility::string_t BTMIndividualCreatedByQuery_137_allOf::getBtType() const
{
    return m_BtType;
}

void BTMIndividualCreatedByQuery_137_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMIndividualCreatedByQuery_137_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMIndividualCreatedByQuery_137_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


