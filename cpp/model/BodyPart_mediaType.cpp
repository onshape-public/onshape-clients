/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BodyPart_mediaType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BodyPart_mediaType::BodyPart_mediaType()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Subtype = utility::conversions::to_string_t("");
    m_SubtypeIsSet = false;
    m_ParametersIsSet = false;
    m_WildcardType = false;
    m_WildcardTypeIsSet = false;
    m_WildcardSubtype = false;
    m_WildcardSubtypeIsSet = false;
}

BodyPart_mediaType::~BodyPart_mediaType()
{
}

void BodyPart_mediaType::validate()
{
    // TODO: implement validation
}

web::json::value BodyPart_mediaType::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_SubtypeIsSet)
    {
        val[utility::conversions::to_string_t("subtype")] = ModelBase::toJson(m_Subtype);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_WildcardTypeIsSet)
    {
        val[utility::conversions::to_string_t("wildcardType")] = ModelBase::toJson(m_WildcardType);
    }
    if(m_WildcardSubtypeIsSet)
    {
        val[utility::conversions::to_string_t("wildcardSubtype")] = ModelBase::toJson(m_WildcardSubtype);
    }

    return val;
}

bool BodyPart_mediaType::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subtype")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subtype"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subtype;
            ok &= ModelBase::fromJson(fieldValue, refVal_subtype);
            setSubtype(refVal_subtype);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wildcardType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wildcardType"));
        if(!fieldValue.is_null())
        {
            bool refVal_wildcardType;
            ok &= ModelBase::fromJson(fieldValue, refVal_wildcardType);
            setWildcardType(refVal_wildcardType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wildcardSubtype")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wildcardSubtype"));
        if(!fieldValue.is_null())
        {
            bool refVal_wildcardSubtype;
            ok &= ModelBase::fromJson(fieldValue, refVal_wildcardSubtype);
            setWildcardSubtype(refVal_wildcardSubtype);
        }
    }
    return ok;
}

void BodyPart_mediaType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_SubtypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subtype"), m_Subtype));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_WildcardTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wildcardType"), m_WildcardType));
    }
    if(m_WildcardSubtypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wildcardSubtype"), m_WildcardSubtype));
    }
}

bool BodyPart_mediaType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subtype")))
    {
        utility::string_t refVal_subtype;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subtype")), refVal_subtype );
        setSubtype(refVal_subtype);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::map<utility::string_t, utility::string_t> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wildcardType")))
    {
        bool refVal_wildcardType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wildcardType")), refVal_wildcardType );
        setWildcardType(refVal_wildcardType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wildcardSubtype")))
    {
        bool refVal_wildcardSubtype;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wildcardSubtype")), refVal_wildcardSubtype );
        setWildcardSubtype(refVal_wildcardSubtype);
    }
    return ok;
}

utility::string_t BodyPart_mediaType::getType() const
{
    return m_Type;
}

void BodyPart_mediaType::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BodyPart_mediaType::typeIsSet() const
{
    return m_TypeIsSet;
}

void BodyPart_mediaType::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BodyPart_mediaType::getSubtype() const
{
    return m_Subtype;
}

void BodyPart_mediaType::setSubtype(const utility::string_t& value)
{
    m_Subtype = value;
    m_SubtypeIsSet = true;
}

bool BodyPart_mediaType::subtypeIsSet() const
{
    return m_SubtypeIsSet;
}

void BodyPart_mediaType::unsetSubtype()
{
    m_SubtypeIsSet = false;
}
std::map<utility::string_t, utility::string_t>& BodyPart_mediaType::getParameters()
{
    return m_Parameters;
}

void BodyPart_mediaType::setParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool BodyPart_mediaType::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BodyPart_mediaType::unsetParameters()
{
    m_ParametersIsSet = false;
}
bool BodyPart_mediaType::isWildcardType() const
{
    return m_WildcardType;
}

void BodyPart_mediaType::setWildcardType(bool value)
{
    m_WildcardType = value;
    m_WildcardTypeIsSet = true;
}

bool BodyPart_mediaType::wildcardTypeIsSet() const
{
    return m_WildcardTypeIsSet;
}

void BodyPart_mediaType::unsetWildcardType()
{
    m_WildcardTypeIsSet = false;
}
bool BodyPart_mediaType::isWildcardSubtype() const
{
    return m_WildcardSubtype;
}

void BodyPart_mediaType::setWildcardSubtype(bool value)
{
    m_WildcardSubtype = value;
    m_WildcardSubtypeIsSet = true;
}

bool BodyPart_mediaType::wildcardSubtypeIsSet() const
{
    return m_WildcardSubtypeIsSet;
}

void BodyPart_mediaType::unsetWildcardSubtype()
{
    m_WildcardSubtypeIsSet = false;
}
}
}
}
}


