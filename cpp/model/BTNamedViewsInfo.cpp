/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTNamedViewsInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTNamedViewsInfo::BTNamedViewsInfo()
{
    m_NamedViewsIsSet = false;
}

BTNamedViewsInfo::~BTNamedViewsInfo()
{
}

void BTNamedViewsInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTNamedViewsInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NamedViewsIsSet)
    {
        val[utility::conversions::to_string_t("namedViews")] = ModelBase::toJson(m_NamedViews);
    }

    return val;
}

bool BTNamedViewsInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("namedViews")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namedViews"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTNamedViewInfo>> refVal_namedViews;
            ok &= ModelBase::fromJson(fieldValue, refVal_namedViews);
            setNamedViews(refVal_namedViews);
        }
    }
    return ok;
}

void BTNamedViewsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NamedViewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namedViews"), m_NamedViews));
    }
}

bool BTNamedViewsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("namedViews")))
    {
        std::map<utility::string_t, std::shared_ptr<BTNamedViewInfo>> refVal_namedViews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namedViews")), refVal_namedViews );
        setNamedViews(refVal_namedViews);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<BTNamedViewInfo>>& BTNamedViewsInfo::getNamedViews()
{
    return m_NamedViews;
}

void BTNamedViewsInfo::setNamedViews(const std::map<utility::string_t, std::shared_ptr<BTNamedViewInfo>>& value)
{
    m_NamedViews = value;
    m_NamedViewsIsSet = true;
}

bool BTNamedViewsInfo::namedViewsIsSet() const
{
    return m_NamedViewsIsSet;
}

void BTNamedViewsInfo::unsetNamedViews()
{
    m_NamedViewsIsSet = false;
}
}
}
}
}


