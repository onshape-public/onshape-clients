/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentWithVersionId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentWithVersionId::BTDocumentWithVersionId()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentVersionId = utility::conversions::to_string_t("");
    m_DocumentVersionIdIsSet = false;
}

BTDocumentWithVersionId::~BTDocumentWithVersionId()
{
}

void BTDocumentWithVersionId::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentWithVersionId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("documentVersionId")] = ModelBase::toJson(m_DocumentVersionId);
    }

    return val;
}

bool BTDocumentWithVersionId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentVersionId);
            setDocumentVersionId(refVal_documentVersionId);
        }
    }
    return ok;
}

void BTDocumentWithVersionId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentVersionId"), m_DocumentVersionId));
    }
}

bool BTDocumentWithVersionId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentVersionId")))
    {
        utility::string_t refVal_documentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentVersionId")), refVal_documentVersionId );
        setDocumentVersionId(refVal_documentVersionId);
    }
    return ok;
}

utility::string_t BTDocumentWithVersionId::getDocumentId() const
{
    return m_DocumentId;
}

void BTDocumentWithVersionId::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTDocumentWithVersionId::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTDocumentWithVersionId::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTDocumentWithVersionId::getDocumentVersionId() const
{
    return m_DocumentVersionId;
}

void BTDocumentWithVersionId::setDocumentVersionId(const utility::string_t& value)
{
    m_DocumentVersionId = value;
    m_DocumentVersionIdIsSet = true;
}

bool BTDocumentWithVersionId::documentVersionIdIsSet() const
{
    return m_DocumentVersionIdIsSet;
}

void BTDocumentWithVersionId::unsetDocumentVersionId()
{
    m_DocumentVersionIdIsSet = false;
}
}
}
}
}


