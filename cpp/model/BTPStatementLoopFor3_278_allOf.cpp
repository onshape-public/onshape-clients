/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementLoopFor3_278_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementLoopFor3_278_allOf::BTPStatementLoopFor3_278_allOf()
{
    m_ConditionIsSet = false;
    m_InitializationIsSet = false;
    m_SpaceAfterInitializationIsSet = false;
    m_SpaceBeforeConditionIsSet = false;
    m_SpaceBeforeIncrementIsSet = false;
    m_IncrementIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPStatementLoopFor3_278_allOf::~BTPStatementLoopFor3_278_allOf()
{
}

void BTPStatementLoopFor3_278_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementLoopFor3_278_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t("condition")] = ModelBase::toJson(m_Condition);
    }
    if(m_InitializationIsSet)
    {
        val[utility::conversions::to_string_t("initialization")] = ModelBase::toJson(m_Initialization);
    }
    if(m_SpaceAfterInitializationIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterInitialization")] = ModelBase::toJson(m_SpaceAfterInitialization);
    }
    if(m_SpaceBeforeConditionIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeCondition")] = ModelBase::toJson(m_SpaceBeforeCondition);
    }
    if(m_SpaceBeforeIncrementIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeIncrement")] = ModelBase::toJson(m_SpaceBeforeIncrement);
    }
    if(m_IncrementIsSet)
    {
        val[utility::conversions::to_string_t("increment")] = ModelBase::toJson(m_Increment);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPStatementLoopFor3_278_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("condition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("condition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_condition;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition);
            setCondition(refVal_condition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initialization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("initialization"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_initialization;
            ok &= ModelBase::fromJson(fieldValue, refVal_initialization);
            setInitialization(refVal_initialization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterInitialization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterInitialization"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterInitialization;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterInitialization);
            setSpaceAfterInitialization(refVal_spaceAfterInitialization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeCondition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeCondition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeCondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeCondition);
            setSpaceBeforeCondition(refVal_spaceBeforeCondition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeIncrement")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeIncrement"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeIncrement;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeIncrement);
            setSpaceBeforeIncrement(refVal_spaceBeforeIncrement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("increment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("increment"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_increment;
            ok &= ModelBase::fromJson(fieldValue, refVal_increment);
            setIncrement(refVal_increment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPStatementLoopFor3_278_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("condition"), m_Condition));
    }
    if(m_InitializationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initialization"), m_Initialization));
    }
    if(m_SpaceAfterInitializationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterInitialization"), m_SpaceAfterInitialization));
    }
    if(m_SpaceBeforeConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeCondition"), m_SpaceBeforeCondition));
    }
    if(m_SpaceBeforeIncrementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeIncrement"), m_SpaceBeforeIncrement));
    }
    if(m_IncrementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("increment"), m_Increment));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPStatementLoopFor3_278_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("condition")))
    {
        std::shared_ptr<BTPExpression_9> refVal_condition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("condition")), refVal_condition );
        setCondition(refVal_condition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initialization")))
    {
        std::shared_ptr<BTPStatement_269> refVal_initialization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("initialization")), refVal_initialization );
        setInitialization(refVal_initialization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterInitialization")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterInitialization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterInitialization")), refVal_spaceAfterInitialization );
        setSpaceAfterInitialization(refVal_spaceAfterInitialization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeCondition")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeCondition")), refVal_spaceBeforeCondition );
        setSpaceBeforeCondition(refVal_spaceBeforeCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeIncrement")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeIncrement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeIncrement")), refVal_spaceBeforeIncrement );
        setSpaceBeforeIncrement(refVal_spaceBeforeIncrement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("increment")))
    {
        std::shared_ptr<BTPStatement_269> refVal_increment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("increment")), refVal_increment );
        setIncrement(refVal_increment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTPExpression_9> BTPStatementLoopFor3_278_allOf::getCondition() const
{
    return m_Condition;
}

void BTPStatementLoopFor3_278_allOf::setCondition(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetCondition()
{
    m_ConditionIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementLoopFor3_278_allOf::getInitialization() const
{
    return m_Initialization;
}

void BTPStatementLoopFor3_278_allOf::setInitialization(const std::shared_ptr<BTPStatement_269>& value)
{
    m_Initialization = value;
    m_InitializationIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::initializationIsSet() const
{
    return m_InitializationIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetInitialization()
{
    m_InitializationIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278_allOf::getSpaceAfterInitialization() const
{
    return m_SpaceAfterInitialization;
}

void BTPStatementLoopFor3_278_allOf::setSpaceAfterInitialization(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterInitialization = value;
    m_SpaceAfterInitializationIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::spaceAfterInitializationIsSet() const
{
    return m_SpaceAfterInitializationIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetSpaceAfterInitialization()
{
    m_SpaceAfterInitializationIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278_allOf::getSpaceBeforeCondition() const
{
    return m_SpaceBeforeCondition;
}

void BTPStatementLoopFor3_278_allOf::setSpaceBeforeCondition(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeCondition = value;
    m_SpaceBeforeConditionIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::spaceBeforeConditionIsSet() const
{
    return m_SpaceBeforeConditionIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetSpaceBeforeCondition()
{
    m_SpaceBeforeConditionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278_allOf::getSpaceBeforeIncrement() const
{
    return m_SpaceBeforeIncrement;
}

void BTPStatementLoopFor3_278_allOf::setSpaceBeforeIncrement(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeIncrement = value;
    m_SpaceBeforeIncrementIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::spaceBeforeIncrementIsSet() const
{
    return m_SpaceBeforeIncrementIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetSpaceBeforeIncrement()
{
    m_SpaceBeforeIncrementIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementLoopFor3_278_allOf::getIncrement() const
{
    return m_Increment;
}

void BTPStatementLoopFor3_278_allOf::setIncrement(const std::shared_ptr<BTPStatement_269>& value)
{
    m_Increment = value;
    m_IncrementIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::incrementIsSet() const
{
    return m_IncrementIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetIncrement()
{
    m_IncrementIsSet = false;
}
utility::string_t BTPStatementLoopFor3_278_allOf::getBtType() const
{
    return m_BtType;
}

void BTPStatementLoopFor3_278_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPStatementLoopFor3_278_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPStatementLoopFor3_278_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


