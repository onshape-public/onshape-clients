/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWebhookInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWebhookInfo::BTWebhookInfo()
{
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
    m_DroppedEventCount = 0;
    m_DroppedEventCountIsSet = false;
    m_EventsIsSet = false;
    m_Filter = utility::conversions::to_string_t("");
    m_FilterIsSet = false;
    m_FolderId = utility::conversions::to_string_t("");
    m_FolderIdIsSet = false;
    m_GetprojectId = utility::conversions::to_string_t("");
    m_GetprojectIdIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OptionsIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTWebhookInfo::~BTWebhookInfo()
{
}

void BTWebhookInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTWebhookInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }
    if(m_DroppedEventCountIsSet)
    {
        val[utility::conversions::to_string_t("droppedEventCount")] = ModelBase::toJson(m_DroppedEventCount);
    }
    if(m_EventsIsSet)
    {
        val[utility::conversions::to_string_t("events")] = ModelBase::toJson(m_Events);
    }
    if(m_FilterIsSet)
    {
        val[utility::conversions::to_string_t("filter")] = ModelBase::toJson(m_Filter);
    }
    if(m_FolderIdIsSet)
    {
        val[utility::conversions::to_string_t("folderId")] = ModelBase::toJson(m_FolderId);
    }
    if(m_GetprojectIdIsSet)
    {
        val[utility::conversions::to_string_t("getprojectId")] = ModelBase::toJson(m_GetprojectId);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OptionsIsSet)
    {
        val[utility::conversions::to_string_t("options")] = ModelBase::toJson(m_Options);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTWebhookInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("droppedEventCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("droppedEventCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_droppedEventCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_droppedEventCount);
            setDroppedEventCount(refVal_droppedEventCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("events")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("events"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_events;
            ok &= ModelBase::fromJson(fieldValue, refVal_events);
            setEvents(refVal_events);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filter"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_filter;
            ok &= ModelBase::fromJson(fieldValue, refVal_filter);
            setFilter(refVal_filter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("folderId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("folderId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_folderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_folderId);
            setFolderId(refVal_folderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("getprojectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("getprojectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_getprojectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_getprojectId);
            setGetprojectId(refVal_getprojectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("options")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("options"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTWebhookOptions> refVal_options;
            ok &= ModelBase::fromJson(fieldValue, refVal_options);
            setOptions(refVal_options);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTWebhookInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
    if(m_DroppedEventCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("droppedEventCount"), m_DroppedEventCount));
    }
    if(m_EventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("events"), m_Events));
    }
    if(m_FilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filter"), m_Filter));
    }
    if(m_FolderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("folderId"), m_FolderId));
    }
    if(m_GetprojectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("getprojectId"), m_GetprojectId));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("options"), m_Options));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTWebhookInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        utility::string_t refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("droppedEventCount")))
    {
        int32_t refVal_droppedEventCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("droppedEventCount")), refVal_droppedEventCount );
        setDroppedEventCount(refVal_droppedEventCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("events")))
    {
        std::vector<utility::string_t> refVal_events;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("events")), refVal_events );
        setEvents(refVal_events);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter")))
    {
        utility::string_t refVal_filter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filter")), refVal_filter );
        setFilter(refVal_filter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("folderId")))
    {
        utility::string_t refVal_folderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("folderId")), refVal_folderId );
        setFolderId(refVal_folderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("getprojectId")))
    {
        utility::string_t refVal_getprojectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("getprojectId")), refVal_getprojectId );
        setGetprojectId(refVal_getprojectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("options")))
    {
        std::shared_ptr<BTWebhookOptions> refVal_options;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("options")), refVal_options );
        setOptions(refVal_options);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("url")), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTWebhookInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTWebhookInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTWebhookInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTWebhookInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTWebhookInfo::getData() const
{
    return m_Data;
}

void BTWebhookInfo::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool BTWebhookInfo::dataIsSet() const
{
    return m_DataIsSet;
}

void BTWebhookInfo::unsetData()
{
    m_DataIsSet = false;
}
int32_t BTWebhookInfo::getDroppedEventCount() const
{
    return m_DroppedEventCount;
}

void BTWebhookInfo::setDroppedEventCount(int32_t value)
{
    m_DroppedEventCount = value;
    m_DroppedEventCountIsSet = true;
}

bool BTWebhookInfo::droppedEventCountIsSet() const
{
    return m_DroppedEventCountIsSet;
}

void BTWebhookInfo::unsetDroppedEventCount()
{
    m_DroppedEventCountIsSet = false;
}
std::vector<utility::string_t>& BTWebhookInfo::getEvents()
{
    return m_Events;
}

void BTWebhookInfo::setEvents(const std::vector<utility::string_t>& value)
{
    m_Events = value;
    m_EventsIsSet = true;
}

bool BTWebhookInfo::eventsIsSet() const
{
    return m_EventsIsSet;
}

void BTWebhookInfo::unsetEvents()
{
    m_EventsIsSet = false;
}
utility::string_t BTWebhookInfo::getFilter() const
{
    return m_Filter;
}

void BTWebhookInfo::setFilter(const utility::string_t& value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}

bool BTWebhookInfo::filterIsSet() const
{
    return m_FilterIsSet;
}

void BTWebhookInfo::unsetFilter()
{
    m_FilterIsSet = false;
}
utility::string_t BTWebhookInfo::getFolderId() const
{
    return m_FolderId;
}

void BTWebhookInfo::setFolderId(const utility::string_t& value)
{
    m_FolderId = value;
    m_FolderIdIsSet = true;
}

bool BTWebhookInfo::folderIdIsSet() const
{
    return m_FolderIdIsSet;
}

void BTWebhookInfo::unsetFolderId()
{
    m_FolderIdIsSet = false;
}
utility::string_t BTWebhookInfo::getGetprojectId() const
{
    return m_GetprojectId;
}

void BTWebhookInfo::setGetprojectId(const utility::string_t& value)
{
    m_GetprojectId = value;
    m_GetprojectIdIsSet = true;
}

bool BTWebhookInfo::getprojectIdIsSet() const
{
    return m_GetprojectIdIsSet;
}

void BTWebhookInfo::unsetGetprojectId()
{
    m_GetprojectIdIsSet = false;
}
utility::string_t BTWebhookInfo::getHref() const
{
    return m_Href;
}

void BTWebhookInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTWebhookInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTWebhookInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTWebhookInfo::getId() const
{
    return m_Id;
}

void BTWebhookInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTWebhookInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTWebhookInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTWebhookInfo::getName() const
{
    return m_Name;
}

void BTWebhookInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTWebhookInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTWebhookInfo::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<BTWebhookOptions> BTWebhookInfo::getOptions() const
{
    return m_Options;
}

void BTWebhookInfo::setOptions(const std::shared_ptr<BTWebhookOptions>& value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}

bool BTWebhookInfo::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void BTWebhookInfo::unsetOptions()
{
    m_OptionsIsSet = false;
}
utility::string_t BTWebhookInfo::getUrl() const
{
    return m_Url;
}

void BTWebhookInfo::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool BTWebhookInfo::urlIsSet() const
{
    return m_UrlIsSet;
}

void BTWebhookInfo::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t BTWebhookInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTWebhookInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTWebhookInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTWebhookInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


