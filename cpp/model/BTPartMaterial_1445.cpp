/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPartMaterial_1445.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPartMaterial_1445::BTPartMaterial_1445()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_LibraryName = utility::conversions::to_string_t("");
    m_LibraryNameIsSet = false;
    m_LibraryReferenceIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PropertiesIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
}

BTPartMaterial_1445::~BTPartMaterial_1445()
{
}

void BTPartMaterial_1445::validate()
{
    // TODO: implement validation
}

web::json::value BTPartMaterial_1445::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LibraryNameIsSet)
    {
        val[utility::conversions::to_string_t("libraryName")] = ModelBase::toJson(m_LibraryName);
    }
    if(m_LibraryReferenceIsSet)
    {
        val[utility::conversions::to_string_t("libraryReference")] = ModelBase::toJson(m_LibraryReference);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }

    return val;
}

bool BTPartMaterial_1445::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("libraryName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraryName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_libraryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraryName);
            setLibraryName(refVal_libraryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("libraryReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraryReference"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTElementReference_725> refVal_libraryReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraryReference);
            setLibraryReference(refVal_libraryReference);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    return ok;
}

void BTPartMaterial_1445::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_LibraryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryName"), m_LibraryName));
    }
    if(m_LibraryReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryReference"), m_LibraryReference));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
}

bool BTPartMaterial_1445::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryName")))
    {
        utility::string_t refVal_libraryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryName")), refVal_libraryName );
        setLibraryName(refVal_libraryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryReference")))
    {
        std::shared_ptr<BTElementReference_725> refVal_libraryReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryReference")), refVal_libraryReference );
        setLibraryReference(refVal_libraryReference);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        int32_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    return ok;
}

utility::string_t BTPartMaterial_1445::getBtType() const
{
    return m_BtType;
}

void BTPartMaterial_1445::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPartMaterial_1445::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPartMaterial_1445::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTPartMaterial_1445::getId() const
{
    return m_Id;
}

void BTPartMaterial_1445::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTPartMaterial_1445::idIsSet() const
{
    return m_IdIsSet;
}

void BTPartMaterial_1445::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTPartMaterial_1445::getLibraryName() const
{
    return m_LibraryName;
}

void BTPartMaterial_1445::setLibraryName(const utility::string_t& value)
{
    m_LibraryName = value;
    m_LibraryNameIsSet = true;
}

bool BTPartMaterial_1445::libraryNameIsSet() const
{
    return m_LibraryNameIsSet;
}

void BTPartMaterial_1445::unsetLibraryName()
{
    m_LibraryNameIsSet = false;
}
std::shared_ptr<BTElementReference_725> BTPartMaterial_1445::getLibraryReference() const
{
    return m_LibraryReference;
}

void BTPartMaterial_1445::setLibraryReference(const std::shared_ptr<BTElementReference_725>& value)
{
    m_LibraryReference = value;
    m_LibraryReferenceIsSet = true;
}

bool BTPartMaterial_1445::libraryReferenceIsSet() const
{
    return m_LibraryReferenceIsSet;
}

void BTPartMaterial_1445::unsetLibraryReference()
{
    m_LibraryReferenceIsSet = false;
}
utility::string_t BTPartMaterial_1445::getName() const
{
    return m_Name;
}

void BTPartMaterial_1445::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTPartMaterial_1445::nameIsSet() const
{
    return m_NameIsSet;
}

void BTPartMaterial_1445::unsetName()
{
    m_NameIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>>& BTPartMaterial_1445::getProperties()
{
    return m_Properties;
}

void BTPartMaterial_1445::setProperties(const std::map<utility::string_t, std::shared_ptr<BTPartMaterialProperty_1453>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool BTPartMaterial_1445::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void BTPartMaterial_1445::unsetProperties()
{
    m_PropertiesIsSet = false;
}
int32_t BTPartMaterial_1445::getVersion() const
{
    return m_Version;
}

void BTPartMaterial_1445::setVersion(int32_t value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTPartMaterial_1445::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTPartMaterial_1445::unsetVersion()
{
    m_VersionIsSet = false;
}
}
}
}
}


