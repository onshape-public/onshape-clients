/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTOccurrenceFilter_166_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTOccurrenceFilter_166_allOf::BTOccurrenceFilter_166_allOf()
{
    m_TopLevelOnly = false;
    m_TopLevelOnlyIsSet = false;
    m_ExcludeSketch = false;
    m_ExcludeSketchIsSet = false;
    m_SolidOrCompositeBodyOnly = false;
    m_SolidOrCompositeBodyOnlyIsSet = false;
    m_ExcludeSubAssemblies = false;
    m_ExcludeSubAssembliesIsSet = false;
    m_ExcludeSuppressed = false;
    m_ExcludeSuppressedIsSet = false;
    m_ExcludeFlattenedParts = false;
    m_ExcludeFlattenedPartsIsSet = false;
    m_ExcludePatternInstances = false;
    m_ExcludePatternInstancesIsSet = false;
    m_IncludePatternOccurrence = false;
    m_IncludePatternOccurrenceIsSet = false;
    m_ExcludeStudioInserts = false;
    m_ExcludeStudioInsertsIsSet = false;
    m_ExcludeStandardContent = false;
    m_ExcludeStandardContentIsSet = false;
    m_IncludeAssemblyRoot = false;
    m_IncludeAssemblyRootIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTOccurrenceFilter_166_allOf::~BTOccurrenceFilter_166_allOf()
{
}

void BTOccurrenceFilter_166_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTOccurrenceFilter_166_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TopLevelOnlyIsSet)
    {
        val[utility::conversions::to_string_t("topLevelOnly")] = ModelBase::toJson(m_TopLevelOnly);
    }
    if(m_ExcludeSketchIsSet)
    {
        val[utility::conversions::to_string_t("excludeSketch")] = ModelBase::toJson(m_ExcludeSketch);
    }
    if(m_SolidOrCompositeBodyOnlyIsSet)
    {
        val[utility::conversions::to_string_t("solidOrCompositeBodyOnly")] = ModelBase::toJson(m_SolidOrCompositeBodyOnly);
    }
    if(m_ExcludeSubAssembliesIsSet)
    {
        val[utility::conversions::to_string_t("excludeSubAssemblies")] = ModelBase::toJson(m_ExcludeSubAssemblies);
    }
    if(m_ExcludeSuppressedIsSet)
    {
        val[utility::conversions::to_string_t("excludeSuppressed")] = ModelBase::toJson(m_ExcludeSuppressed);
    }
    if(m_ExcludeFlattenedPartsIsSet)
    {
        val[utility::conversions::to_string_t("excludeFlattenedParts")] = ModelBase::toJson(m_ExcludeFlattenedParts);
    }
    if(m_ExcludePatternInstancesIsSet)
    {
        val[utility::conversions::to_string_t("excludePatternInstances")] = ModelBase::toJson(m_ExcludePatternInstances);
    }
    if(m_IncludePatternOccurrenceIsSet)
    {
        val[utility::conversions::to_string_t("includePatternOccurrence")] = ModelBase::toJson(m_IncludePatternOccurrence);
    }
    if(m_ExcludeStudioInsertsIsSet)
    {
        val[utility::conversions::to_string_t("excludeStudioInserts")] = ModelBase::toJson(m_ExcludeStudioInserts);
    }
    if(m_ExcludeStandardContentIsSet)
    {
        val[utility::conversions::to_string_t("excludeStandardContent")] = ModelBase::toJson(m_ExcludeStandardContent);
    }
    if(m_IncludeAssemblyRootIsSet)
    {
        val[utility::conversions::to_string_t("includeAssemblyRoot")] = ModelBase::toJson(m_IncludeAssemblyRoot);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTOccurrenceFilter_166_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("topLevelOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topLevelOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_topLevelOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_topLevelOnly);
            setTopLevelOnly(refVal_topLevelOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeSketch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeSketch"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeSketch;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeSketch);
            setExcludeSketch(refVal_excludeSketch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("solidOrCompositeBodyOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("solidOrCompositeBodyOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_solidOrCompositeBodyOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_solidOrCompositeBodyOnly);
            setSolidOrCompositeBodyOnly(refVal_solidOrCompositeBodyOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeSubAssemblies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeSubAssemblies"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeSubAssemblies;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeSubAssemblies);
            setExcludeSubAssemblies(refVal_excludeSubAssemblies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeSuppressed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeSuppressed"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeSuppressed;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeSuppressed);
            setExcludeSuppressed(refVal_excludeSuppressed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeFlattenedParts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeFlattenedParts"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeFlattenedParts;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeFlattenedParts);
            setExcludeFlattenedParts(refVal_excludeFlattenedParts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludePatternInstances")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludePatternInstances"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludePatternInstances;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludePatternInstances);
            setExcludePatternInstances(refVal_excludePatternInstances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includePatternOccurrence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includePatternOccurrence"));
        if(!fieldValue.is_null())
        {
            bool refVal_includePatternOccurrence;
            ok &= ModelBase::fromJson(fieldValue, refVal_includePatternOccurrence);
            setIncludePatternOccurrence(refVal_includePatternOccurrence);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeStudioInserts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeStudioInserts"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeStudioInserts;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeStudioInserts);
            setExcludeStudioInserts(refVal_excludeStudioInserts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("excludeStandardContent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("excludeStandardContent"));
        if(!fieldValue.is_null())
        {
            bool refVal_excludeStandardContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_excludeStandardContent);
            setExcludeStandardContent(refVal_excludeStandardContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeAssemblyRoot")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeAssemblyRoot"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeAssemblyRoot;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeAssemblyRoot);
            setIncludeAssemblyRoot(refVal_includeAssemblyRoot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTOccurrenceFilter_166_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TopLevelOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topLevelOnly"), m_TopLevelOnly));
    }
    if(m_ExcludeSketchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeSketch"), m_ExcludeSketch));
    }
    if(m_SolidOrCompositeBodyOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("solidOrCompositeBodyOnly"), m_SolidOrCompositeBodyOnly));
    }
    if(m_ExcludeSubAssembliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeSubAssemblies"), m_ExcludeSubAssemblies));
    }
    if(m_ExcludeSuppressedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeSuppressed"), m_ExcludeSuppressed));
    }
    if(m_ExcludeFlattenedPartsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeFlattenedParts"), m_ExcludeFlattenedParts));
    }
    if(m_ExcludePatternInstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludePatternInstances"), m_ExcludePatternInstances));
    }
    if(m_IncludePatternOccurrenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includePatternOccurrence"), m_IncludePatternOccurrence));
    }
    if(m_ExcludeStudioInsertsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeStudioInserts"), m_ExcludeStudioInserts));
    }
    if(m_ExcludeStandardContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("excludeStandardContent"), m_ExcludeStandardContent));
    }
    if(m_IncludeAssemblyRootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeAssemblyRoot"), m_IncludeAssemblyRoot));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTOccurrenceFilter_166_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("topLevelOnly")))
    {
        bool refVal_topLevelOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topLevelOnly")), refVal_topLevelOnly );
        setTopLevelOnly(refVal_topLevelOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeSketch")))
    {
        bool refVal_excludeSketch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeSketch")), refVal_excludeSketch );
        setExcludeSketch(refVal_excludeSketch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("solidOrCompositeBodyOnly")))
    {
        bool refVal_solidOrCompositeBodyOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("solidOrCompositeBodyOnly")), refVal_solidOrCompositeBodyOnly );
        setSolidOrCompositeBodyOnly(refVal_solidOrCompositeBodyOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeSubAssemblies")))
    {
        bool refVal_excludeSubAssemblies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeSubAssemblies")), refVal_excludeSubAssemblies );
        setExcludeSubAssemblies(refVal_excludeSubAssemblies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeSuppressed")))
    {
        bool refVal_excludeSuppressed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeSuppressed")), refVal_excludeSuppressed );
        setExcludeSuppressed(refVal_excludeSuppressed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeFlattenedParts")))
    {
        bool refVal_excludeFlattenedParts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeFlattenedParts")), refVal_excludeFlattenedParts );
        setExcludeFlattenedParts(refVal_excludeFlattenedParts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludePatternInstances")))
    {
        bool refVal_excludePatternInstances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludePatternInstances")), refVal_excludePatternInstances );
        setExcludePatternInstances(refVal_excludePatternInstances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includePatternOccurrence")))
    {
        bool refVal_includePatternOccurrence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includePatternOccurrence")), refVal_includePatternOccurrence );
        setIncludePatternOccurrence(refVal_includePatternOccurrence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeStudioInserts")))
    {
        bool refVal_excludeStudioInserts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeStudioInserts")), refVal_excludeStudioInserts );
        setExcludeStudioInserts(refVal_excludeStudioInserts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("excludeStandardContent")))
    {
        bool refVal_excludeStandardContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("excludeStandardContent")), refVal_excludeStandardContent );
        setExcludeStandardContent(refVal_excludeStandardContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeAssemblyRoot")))
    {
        bool refVal_includeAssemblyRoot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeAssemblyRoot")), refVal_includeAssemblyRoot );
        setIncludeAssemblyRoot(refVal_includeAssemblyRoot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

bool BTOccurrenceFilter_166_allOf::isTopLevelOnly() const
{
    return m_TopLevelOnly;
}

void BTOccurrenceFilter_166_allOf::setTopLevelOnly(bool value)
{
    m_TopLevelOnly = value;
    m_TopLevelOnlyIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::topLevelOnlyIsSet() const
{
    return m_TopLevelOnlyIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetTopLevelOnly()
{
    m_TopLevelOnlyIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeSketch() const
{
    return m_ExcludeSketch;
}

void BTOccurrenceFilter_166_allOf::setExcludeSketch(bool value)
{
    m_ExcludeSketch = value;
    m_ExcludeSketchIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeSketchIsSet() const
{
    return m_ExcludeSketchIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeSketch()
{
    m_ExcludeSketchIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isSolidOrCompositeBodyOnly() const
{
    return m_SolidOrCompositeBodyOnly;
}

void BTOccurrenceFilter_166_allOf::setSolidOrCompositeBodyOnly(bool value)
{
    m_SolidOrCompositeBodyOnly = value;
    m_SolidOrCompositeBodyOnlyIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::solidOrCompositeBodyOnlyIsSet() const
{
    return m_SolidOrCompositeBodyOnlyIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetSolidOrCompositeBodyOnly()
{
    m_SolidOrCompositeBodyOnlyIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeSubAssemblies() const
{
    return m_ExcludeSubAssemblies;
}

void BTOccurrenceFilter_166_allOf::setExcludeSubAssemblies(bool value)
{
    m_ExcludeSubAssemblies = value;
    m_ExcludeSubAssembliesIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeSubAssembliesIsSet() const
{
    return m_ExcludeSubAssembliesIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeSubAssemblies()
{
    m_ExcludeSubAssembliesIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeSuppressed() const
{
    return m_ExcludeSuppressed;
}

void BTOccurrenceFilter_166_allOf::setExcludeSuppressed(bool value)
{
    m_ExcludeSuppressed = value;
    m_ExcludeSuppressedIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeSuppressedIsSet() const
{
    return m_ExcludeSuppressedIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeSuppressed()
{
    m_ExcludeSuppressedIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeFlattenedParts() const
{
    return m_ExcludeFlattenedParts;
}

void BTOccurrenceFilter_166_allOf::setExcludeFlattenedParts(bool value)
{
    m_ExcludeFlattenedParts = value;
    m_ExcludeFlattenedPartsIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeFlattenedPartsIsSet() const
{
    return m_ExcludeFlattenedPartsIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeFlattenedParts()
{
    m_ExcludeFlattenedPartsIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludePatternInstances() const
{
    return m_ExcludePatternInstances;
}

void BTOccurrenceFilter_166_allOf::setExcludePatternInstances(bool value)
{
    m_ExcludePatternInstances = value;
    m_ExcludePatternInstancesIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludePatternInstancesIsSet() const
{
    return m_ExcludePatternInstancesIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludePatternInstances()
{
    m_ExcludePatternInstancesIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isIncludePatternOccurrence() const
{
    return m_IncludePatternOccurrence;
}

void BTOccurrenceFilter_166_allOf::setIncludePatternOccurrence(bool value)
{
    m_IncludePatternOccurrence = value;
    m_IncludePatternOccurrenceIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::includePatternOccurrenceIsSet() const
{
    return m_IncludePatternOccurrenceIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetIncludePatternOccurrence()
{
    m_IncludePatternOccurrenceIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeStudioInserts() const
{
    return m_ExcludeStudioInserts;
}

void BTOccurrenceFilter_166_allOf::setExcludeStudioInserts(bool value)
{
    m_ExcludeStudioInserts = value;
    m_ExcludeStudioInsertsIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeStudioInsertsIsSet() const
{
    return m_ExcludeStudioInsertsIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeStudioInserts()
{
    m_ExcludeStudioInsertsIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isExcludeStandardContent() const
{
    return m_ExcludeStandardContent;
}

void BTOccurrenceFilter_166_allOf::setExcludeStandardContent(bool value)
{
    m_ExcludeStandardContent = value;
    m_ExcludeStandardContentIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::excludeStandardContentIsSet() const
{
    return m_ExcludeStandardContentIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetExcludeStandardContent()
{
    m_ExcludeStandardContentIsSet = false;
}
bool BTOccurrenceFilter_166_allOf::isIncludeAssemblyRoot() const
{
    return m_IncludeAssemblyRoot;
}

void BTOccurrenceFilter_166_allOf::setIncludeAssemblyRoot(bool value)
{
    m_IncludeAssemblyRoot = value;
    m_IncludeAssemblyRootIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::includeAssemblyRootIsSet() const
{
    return m_IncludeAssemblyRootIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetIncludeAssemblyRoot()
{
    m_IncludeAssemblyRootIsSet = false;
}
utility::string_t BTOccurrenceFilter_166_allOf::getBtType() const
{
    return m_BtType;
}

void BTOccurrenceFilter_166_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTOccurrenceFilter_166_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTOccurrenceFilter_166_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


