/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestOptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestOptions::RequestOptions()
{
    m_ApiKey = utility::conversions::to_string_t("");
    m_ApiKeyIsSet = false;
    m_ConnectTimeout = 0;
    m_ConnectTimeoutIsSet = false;
    m_IdempotencyKey = utility::conversions::to_string_t("");
    m_IdempotencyKeyIsSet = false;
    m_ReadTimeout = 0;
    m_ReadTimeoutIsSet = false;
    m_StripeAccount = utility::conversions::to_string_t("");
    m_StripeAccountIsSet = false;
    m_StripeVersion = utility::conversions::to_string_t("");
    m_StripeVersionIsSet = false;
}

RequestOptions::~RequestOptions()
{
}

void RequestOptions::validate()
{
    // TODO: implement validation
}

web::json::value RequestOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApiKeyIsSet)
    {
        val[utility::conversions::to_string_t("apiKey")] = ModelBase::toJson(m_ApiKey);
    }
    if(m_ConnectTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("connectTimeout")] = ModelBase::toJson(m_ConnectTimeout);
    }
    if(m_IdempotencyKeyIsSet)
    {
        val[utility::conversions::to_string_t("idempotencyKey")] = ModelBase::toJson(m_IdempotencyKey);
    }
    if(m_ReadTimeoutIsSet)
    {
        val[utility::conversions::to_string_t("readTimeout")] = ModelBase::toJson(m_ReadTimeout);
    }
    if(m_StripeAccountIsSet)
    {
        val[utility::conversions::to_string_t("stripeAccount")] = ModelBase::toJson(m_StripeAccount);
    }
    if(m_StripeVersionIsSet)
    {
        val[utility::conversions::to_string_t("stripeVersion")] = ModelBase::toJson(m_StripeVersion);
    }

    return val;
}

bool RequestOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("apiKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("apiKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apiKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_apiKey);
            setApiKey(refVal_apiKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectTimeout")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connectTimeout"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_connectTimeout;
            ok &= ModelBase::fromJson(fieldValue, refVal_connectTimeout);
            setConnectTimeout(refVal_connectTimeout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idempotencyKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("idempotencyKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_idempotencyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_idempotencyKey);
            setIdempotencyKey(refVal_idempotencyKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readTimeout")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("readTimeout"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_readTimeout;
            ok &= ModelBase::fromJson(fieldValue, refVal_readTimeout);
            setReadTimeout(refVal_readTimeout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stripeAccount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stripeAccount"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stripeAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_stripeAccount);
            setStripeAccount(refVal_stripeAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stripeVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stripeVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stripeVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_stripeVersion);
            setStripeVersion(refVal_stripeVersion);
        }
    }
    return ok;
}

void RequestOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ApiKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("apiKey"), m_ApiKey));
    }
    if(m_ConnectTimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connectTimeout"), m_ConnectTimeout));
    }
    if(m_IdempotencyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idempotencyKey"), m_IdempotencyKey));
    }
    if(m_ReadTimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readTimeout"), m_ReadTimeout));
    }
    if(m_StripeAccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stripeAccount"), m_StripeAccount));
    }
    if(m_StripeVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stripeVersion"), m_StripeVersion));
    }
}

bool RequestOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("apiKey")))
    {
        utility::string_t refVal_apiKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("apiKey")), refVal_apiKey );
        setApiKey(refVal_apiKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectTimeout")))
    {
        int32_t refVal_connectTimeout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connectTimeout")), refVal_connectTimeout );
        setConnectTimeout(refVal_connectTimeout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idempotencyKey")))
    {
        utility::string_t refVal_idempotencyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("idempotencyKey")), refVal_idempotencyKey );
        setIdempotencyKey(refVal_idempotencyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readTimeout")))
    {
        int32_t refVal_readTimeout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readTimeout")), refVal_readTimeout );
        setReadTimeout(refVal_readTimeout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stripeAccount")))
    {
        utility::string_t refVal_stripeAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stripeAccount")), refVal_stripeAccount );
        setStripeAccount(refVal_stripeAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stripeVersion")))
    {
        utility::string_t refVal_stripeVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stripeVersion")), refVal_stripeVersion );
        setStripeVersion(refVal_stripeVersion);
    }
    return ok;
}

utility::string_t RequestOptions::getApiKey() const
{
    return m_ApiKey;
}

void RequestOptions::setApiKey(const utility::string_t& value)
{
    m_ApiKey = value;
    m_ApiKeyIsSet = true;
}

bool RequestOptions::apiKeyIsSet() const
{
    return m_ApiKeyIsSet;
}

void RequestOptions::unsetApiKey()
{
    m_ApiKeyIsSet = false;
}
int32_t RequestOptions::getConnectTimeout() const
{
    return m_ConnectTimeout;
}

void RequestOptions::setConnectTimeout(int32_t value)
{
    m_ConnectTimeout = value;
    m_ConnectTimeoutIsSet = true;
}

bool RequestOptions::connectTimeoutIsSet() const
{
    return m_ConnectTimeoutIsSet;
}

void RequestOptions::unsetConnectTimeout()
{
    m_ConnectTimeoutIsSet = false;
}
utility::string_t RequestOptions::getIdempotencyKey() const
{
    return m_IdempotencyKey;
}

void RequestOptions::setIdempotencyKey(const utility::string_t& value)
{
    m_IdempotencyKey = value;
    m_IdempotencyKeyIsSet = true;
}

bool RequestOptions::idempotencyKeyIsSet() const
{
    return m_IdempotencyKeyIsSet;
}

void RequestOptions::unsetIdempotencyKey()
{
    m_IdempotencyKeyIsSet = false;
}
int32_t RequestOptions::getReadTimeout() const
{
    return m_ReadTimeout;
}

void RequestOptions::setReadTimeout(int32_t value)
{
    m_ReadTimeout = value;
    m_ReadTimeoutIsSet = true;
}

bool RequestOptions::readTimeoutIsSet() const
{
    return m_ReadTimeoutIsSet;
}

void RequestOptions::unsetReadTimeout()
{
    m_ReadTimeoutIsSet = false;
}
utility::string_t RequestOptions::getStripeAccount() const
{
    return m_StripeAccount;
}

void RequestOptions::setStripeAccount(const utility::string_t& value)
{
    m_StripeAccount = value;
    m_StripeAccountIsSet = true;
}

bool RequestOptions::stripeAccountIsSet() const
{
    return m_StripeAccountIsSet;
}

void RequestOptions::unsetStripeAccount()
{
    m_StripeAccountIsSet = false;
}
utility::string_t RequestOptions::getStripeVersion() const
{
    return m_StripeVersion;
}

void RequestOptions::setStripeVersion(const utility::string_t& value)
{
    m_StripeVersion = value;
    m_StripeVersionIsSet = true;
}

bool RequestOptions::stripeVersionIsSet() const
{
    return m_StripeVersionIsSet;
}

void RequestOptions::unsetStripeVersion()
{
    m_StripeVersionIsSet = false;
}
}
}
}
}


