/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterSpecReferenceWithConfiguration_2950.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterSpecReferenceWithConfiguration_2950::BTParameterSpecReferenceWithConfiguration_2950()
{
    m_MaxNumberOfPicks = 0;
    m_MaxNumberOfPicksIsSet = false;
    m_AllowedInsertableTypesIsSet = false;
    m_AllowAssemblies = false;
    m_AllowAssembliesIsSet = false;
}

BTParameterSpecReferenceWithConfiguration_2950::~BTParameterSpecReferenceWithConfiguration_2950()
{
}

void BTParameterSpecReferenceWithConfiguration_2950::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterSpecReferenceWithConfiguration_2950::toJson() const
{
    web::json::value val = this->BTParameterSpecReference_2789::toJson();
    
    if(m_MaxNumberOfPicksIsSet)
    {
        val[utility::conversions::to_string_t("maxNumberOfPicks")] = ModelBase::toJson(m_MaxNumberOfPicks);
    }
    if(m_AllowedInsertableTypesIsSet)
    {
        val[utility::conversions::to_string_t("allowedInsertableTypes")] = ModelBase::toJson(m_AllowedInsertableTypes);
    }
    if(m_AllowAssembliesIsSet)
    {
        val[utility::conversions::to_string_t("allowAssemblies")] = ModelBase::toJson(m_AllowAssemblies);
    }

    return val;
}

bool BTParameterSpecReferenceWithConfiguration_2950::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTParameterSpecReference_2789::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maxNumberOfPicks"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_maxNumberOfPicks;
            ok &= ModelBase::fromJson(fieldValue, refVal_maxNumberOfPicks);
            setMaxNumberOfPicks(refVal_maxNumberOfPicks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedInsertableTypes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowedInsertableTypes"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_allowedInsertableTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowedInsertableTypes);
            setAllowedInsertableTypes(refVal_allowedInsertableTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowAssemblies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowAssemblies"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowAssemblies;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowAssemblies);
            setAllowAssemblies(refVal_allowAssemblies);
        }
    }
    return ok;
}

void BTParameterSpecReferenceWithConfiguration_2950::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnName"), m_ColumnName));
    }
    if(m_DefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultValue"), m_DefaultValue));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_UiHintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHint"), m_UiHint));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
    if(m_VisibilityConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visibilityCondition"), m_VisibilityCondition));
    }
    if(m_MaxNumberOfPicksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maxNumberOfPicks"), m_MaxNumberOfPicks));
    }
    if(m_AllowedInsertableTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowedInsertableTypes"), m_AllowedInsertableTypes));
    }
    if(m_AllowAssembliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowAssemblies"), m_AllowAssemblies));
    }
}

bool BTParameterSpecReferenceWithConfiguration_2950::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnName")))
    {
        utility::string_t refVal_columnName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnName")), refVal_columnName );
        setColumnName(refVal_columnName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultValue")))
    {
        std::shared_ptr<BTMParameter_1> refVal_defaultValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultValue")), refVal_defaultValue );
        setDefaultValue(refVal_defaultValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHint")))
    {
        utility::string_t refVal_uiHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHint")), refVal_uiHint );
        setUiHint(refVal_uiHint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visibilityCondition")))
    {
        std::shared_ptr<BTParameterVisibilityCondition_177> refVal_visibilityCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visibilityCondition")), refVal_visibilityCondition );
        setVisibilityCondition(refVal_visibilityCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxNumberOfPicks")))
    {
        int32_t refVal_maxNumberOfPicks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maxNumberOfPicks")), refVal_maxNumberOfPicks );
        setMaxNumberOfPicks(refVal_maxNumberOfPicks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedInsertableTypes")))
    {
        std::vector<utility::string_t> refVal_allowedInsertableTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowedInsertableTypes")), refVal_allowedInsertableTypes );
        setAllowedInsertableTypes(refVal_allowedInsertableTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowAssemblies")))
    {
        bool refVal_allowAssemblies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowAssemblies")), refVal_allowAssemblies );
        setAllowAssemblies(refVal_allowAssemblies);
    }
    return ok;
}

int32_t BTParameterSpecReferenceWithConfiguration_2950::getMaxNumberOfPicks() const
{
    return m_MaxNumberOfPicks;
}

void BTParameterSpecReferenceWithConfiguration_2950::setMaxNumberOfPicks(int32_t value)
{
    m_MaxNumberOfPicks = value;
    m_MaxNumberOfPicksIsSet = true;
}

bool BTParameterSpecReferenceWithConfiguration_2950::maxNumberOfPicksIsSet() const
{
    return m_MaxNumberOfPicksIsSet;
}

void BTParameterSpecReferenceWithConfiguration_2950::unsetMaxNumberOfPicks()
{
    m_MaxNumberOfPicksIsSet = false;
}
std::vector<utility::string_t>& BTParameterSpecReferenceWithConfiguration_2950::getAllowedInsertableTypes()
{
    return m_AllowedInsertableTypes;
}

void BTParameterSpecReferenceWithConfiguration_2950::setAllowedInsertableTypes(const std::vector<utility::string_t>& value)
{
    m_AllowedInsertableTypes = value;
    m_AllowedInsertableTypesIsSet = true;
}

bool BTParameterSpecReferenceWithConfiguration_2950::allowedInsertableTypesIsSet() const
{
    return m_AllowedInsertableTypesIsSet;
}

void BTParameterSpecReferenceWithConfiguration_2950::unsetAllowedInsertableTypes()
{
    m_AllowedInsertableTypesIsSet = false;
}
bool BTParameterSpecReferenceWithConfiguration_2950::isAllowAssemblies() const
{
    return m_AllowAssemblies;
}

void BTParameterSpecReferenceWithConfiguration_2950::setAllowAssemblies(bool value)
{
    m_AllowAssemblies = value;
    m_AllowAssembliesIsSet = true;
}

bool BTParameterSpecReferenceWithConfiguration_2950::allowAssembliesIsSet() const
{
    return m_AllowAssembliesIsSet;
}

void BTParameterSpecReferenceWithConfiguration_2950::unsetAllowAssemblies()
{
    m_AllowAssembliesIsSet = false;
}
}
}
}
}


