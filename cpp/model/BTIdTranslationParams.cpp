/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTIdTranslationParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTIdTranslationParams::BTIdTranslationParams()
{
    m_IdsIsSet = false;
    m_LinkDocumentId = utility::conversions::to_string_t("");
    m_LinkDocumentIdIsSet = false;
    m_SourceConfiguration = utility::conversions::to_string_t("");
    m_SourceConfigurationIsSet = false;
    m_SourceDocumentMicroversion = utility::conversions::to_string_t("");
    m_SourceDocumentMicroversionIsSet = false;
    m_TargetConfiguration = utility::conversions::to_string_t("");
    m_TargetConfigurationIsSet = false;
}

BTIdTranslationParams::~BTIdTranslationParams()
{
}

void BTIdTranslationParams::validate()
{
    // TODO: implement validation
}

web::json::value BTIdTranslationParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdsIsSet)
    {
        val[utility::conversions::to_string_t("ids")] = ModelBase::toJson(m_Ids);
    }
    if(m_LinkDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("linkDocumentId")] = ModelBase::toJson(m_LinkDocumentId);
    }
    if(m_SourceConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("sourceConfiguration")] = ModelBase::toJson(m_SourceConfiguration);
    }
    if(m_SourceDocumentMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("sourceDocumentMicroversion")] = ModelBase::toJson(m_SourceDocumentMicroversion);
    }
    if(m_TargetConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("targetConfiguration")] = ModelBase::toJson(m_TargetConfiguration);
    }

    return val;
}

bool BTIdTranslationParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("ids")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ids"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_ids);
            setIds(refVal_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkDocumentId);
            setLinkDocumentId(refVal_linkDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceConfiguration);
            setSourceConfiguration(refVal_sourceConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceDocumentMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceDocumentMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceDocumentMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceDocumentMicroversion);
            setSourceDocumentMicroversion(refVal_sourceDocumentMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("targetConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("targetConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_targetConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_targetConfiguration);
            setTargetConfiguration(refVal_targetConfiguration);
        }
    }
    return ok;
}

void BTIdTranslationParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ids"), m_Ids));
    }
    if(m_LinkDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkDocumentId"), m_LinkDocumentId));
    }
    if(m_SourceConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceConfiguration"), m_SourceConfiguration));
    }
    if(m_SourceDocumentMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceDocumentMicroversion"), m_SourceDocumentMicroversion));
    }
    if(m_TargetConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("targetConfiguration"), m_TargetConfiguration));
    }
}

bool BTIdTranslationParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ids")))
    {
        std::vector<utility::string_t> refVal_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ids")), refVal_ids );
        setIds(refVal_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkDocumentId")))
    {
        utility::string_t refVal_linkDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkDocumentId")), refVal_linkDocumentId );
        setLinkDocumentId(refVal_linkDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceConfiguration")))
    {
        utility::string_t refVal_sourceConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceConfiguration")), refVal_sourceConfiguration );
        setSourceConfiguration(refVal_sourceConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceDocumentMicroversion")))
    {
        utility::string_t refVal_sourceDocumentMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceDocumentMicroversion")), refVal_sourceDocumentMicroversion );
        setSourceDocumentMicroversion(refVal_sourceDocumentMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("targetConfiguration")))
    {
        utility::string_t refVal_targetConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("targetConfiguration")), refVal_targetConfiguration );
        setTargetConfiguration(refVal_targetConfiguration);
    }
    return ok;
}

std::vector<utility::string_t>& BTIdTranslationParams::getIds()
{
    return m_Ids;
}

void BTIdTranslationParams::setIds(const std::vector<utility::string_t>& value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}

bool BTIdTranslationParams::idsIsSet() const
{
    return m_IdsIsSet;
}

void BTIdTranslationParams::unsetIds()
{
    m_IdsIsSet = false;
}
utility::string_t BTIdTranslationParams::getLinkDocumentId() const
{
    return m_LinkDocumentId;
}

void BTIdTranslationParams::setLinkDocumentId(const utility::string_t& value)
{
    m_LinkDocumentId = value;
    m_LinkDocumentIdIsSet = true;
}

bool BTIdTranslationParams::linkDocumentIdIsSet() const
{
    return m_LinkDocumentIdIsSet;
}

void BTIdTranslationParams::unsetLinkDocumentId()
{
    m_LinkDocumentIdIsSet = false;
}
utility::string_t BTIdTranslationParams::getSourceConfiguration() const
{
    return m_SourceConfiguration;
}

void BTIdTranslationParams::setSourceConfiguration(const utility::string_t& value)
{
    m_SourceConfiguration = value;
    m_SourceConfigurationIsSet = true;
}

bool BTIdTranslationParams::sourceConfigurationIsSet() const
{
    return m_SourceConfigurationIsSet;
}

void BTIdTranslationParams::unsetSourceConfiguration()
{
    m_SourceConfigurationIsSet = false;
}
utility::string_t BTIdTranslationParams::getSourceDocumentMicroversion() const
{
    return m_SourceDocumentMicroversion;
}

void BTIdTranslationParams::setSourceDocumentMicroversion(const utility::string_t& value)
{
    m_SourceDocumentMicroversion = value;
    m_SourceDocumentMicroversionIsSet = true;
}

bool BTIdTranslationParams::sourceDocumentMicroversionIsSet() const
{
    return m_SourceDocumentMicroversionIsSet;
}

void BTIdTranslationParams::unsetSourceDocumentMicroversion()
{
    m_SourceDocumentMicroversionIsSet = false;
}
utility::string_t BTIdTranslationParams::getTargetConfiguration() const
{
    return m_TargetConfiguration;
}

void BTIdTranslationParams::setTargetConfiguration(const utility::string_t& value)
{
    m_TargetConfiguration = value;
    m_TargetConfigurationIsSet = true;
}

bool BTIdTranslationParams::targetConfigurationIsSet() const
{
    return m_TargetConfigurationIsSet;
}

void BTIdTranslationParams::unsetTargetConfiguration()
{
    m_TargetConfigurationIsSet = false;
}
}
}
}
}


