/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterLookupTableListEntry_1916.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterLookupTableListEntry_1916::BTParameterLookupTableListEntry_1916()
{
    m_AdditionalLocalizedStrings = 0;
    m_AdditionalLocalizedStringsIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_DefaultIndex = 0;
    m_DefaultIndexIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_EntriesIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_LocalizableName = utility::conversions::to_string_t("");
    m_LocalizableNameIsSet = false;
    m_LocalizedLabel = utility::conversions::to_string_t("");
    m_LocalizedLabelIsSet = false;
    m_LocalizedName = utility::conversions::to_string_t("");
    m_LocalizedNameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_StringsToLocalizeIsSet = false;
}

BTParameterLookupTableListEntry_1916::~BTParameterLookupTableListEntry_1916()
{
}

void BTParameterLookupTableListEntry_1916::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterLookupTableListEntry_1916::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdditionalLocalizedStringsIsSet)
    {
        val[utility::conversions::to_string_t("additionalLocalizedStrings")] = ModelBase::toJson(m_AdditionalLocalizedStrings);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_DefaultIndexIsSet)
    {
        val[utility::conversions::to_string_t("defaultIndex")] = ModelBase::toJson(m_DefaultIndex);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EntriesIsSet)
    {
        val[utility::conversions::to_string_t("entries")] = ModelBase::toJson(m_Entries);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_LocalizableNameIsSet)
    {
        val[utility::conversions::to_string_t("localizableName")] = ModelBase::toJson(m_LocalizableName);
    }
    if(m_LocalizedLabelIsSet)
    {
        val[utility::conversions::to_string_t("localizedLabel")] = ModelBase::toJson(m_LocalizedLabel);
    }
    if(m_LocalizedNameIsSet)
    {
        val[utility::conversions::to_string_t("localizedName")] = ModelBase::toJson(m_LocalizedName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_StringsToLocalizeIsSet)
    {
        val[utility::conversions::to_string_t("stringsToLocalize")] = ModelBase::toJson(m_StringsToLocalize);
    }

    return val;
}

bool BTParameterLookupTableListEntry_1916::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("additionalLocalizedStrings"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_additionalLocalizedStrings;
            ok &= ModelBase::fromJson(fieldValue, refVal_additionalLocalizedStrings);
            setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultIndex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultIndex"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_defaultIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultIndex);
            setDefaultIndex(refVal_defaultIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entries")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entries"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTParameterLookupTableEntry_1667>> refVal_entries;
            ok &= ModelBase::fromJson(fieldValue, refVal_entries);
            setEntries(refVal_entries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("label"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_label;
            ok &= ModelBase::fromJson(fieldValue, refVal_label);
            setLabel(refVal_label);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizableName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizableName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizableName);
            setLocalizableName(refVal_localizableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizedLabel")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizedLabel"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizedLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizedLabel);
            setLocalizedLabel(refVal_localizedLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("localizedName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("localizedName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_localizedName;
            ok &= ModelBase::fromJson(fieldValue, refVal_localizedName);
            setLocalizedName(refVal_localizedName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stringsToLocalize")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stringsToLocalize"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_stringsToLocalize;
            ok &= ModelBase::fromJson(fieldValue, refVal_stringsToLocalize);
            setStringsToLocalize(refVal_stringsToLocalize);
        }
    }
    return ok;
}

void BTParameterLookupTableListEntry_1916::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DefaultIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultIndex"), m_DefaultIndex));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_EntriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entries"), m_Entries));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedLabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedLabel"), m_LocalizedLabel));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
}

bool BTParameterLookupTableListEntry_1916::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultIndex")))
    {
        int32_t refVal_defaultIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultIndex")), refVal_defaultIndex );
        setDefaultIndex(refVal_defaultIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entries")))
    {
        std::vector<std::shared_ptr<BTParameterLookupTableEntry_1667>> refVal_entries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entries")), refVal_entries );
        setEntries(refVal_entries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        utility::string_t refVal_label;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("label")), refVal_label );
        setLabel(refVal_label);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedLabel")))
    {
        utility::string_t refVal_localizedLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedLabel")), refVal_localizedLabel );
        setLocalizedLabel(refVal_localizedLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    return ok;
}

int32_t BTParameterLookupTableListEntry_1916::getAdditionalLocalizedStrings() const
{
    return m_AdditionalLocalizedStrings;
}

void BTParameterLookupTableListEntry_1916::setAdditionalLocalizedStrings(int32_t value)
{
    m_AdditionalLocalizedStrings = value;
    m_AdditionalLocalizedStringsIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::additionalLocalizedStringsIsSet() const
{
    return m_AdditionalLocalizedStringsIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetAdditionalLocalizedStrings()
{
    m_AdditionalLocalizedStringsIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getBtType() const
{
    return m_BtType;
}

void BTParameterLookupTableListEntry_1916::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetBtType()
{
    m_BtTypeIsSet = false;
}
int32_t BTParameterLookupTableListEntry_1916::getDefaultIndex() const
{
    return m_DefaultIndex;
}

void BTParameterLookupTableListEntry_1916::setDefaultIndex(int32_t value)
{
    m_DefaultIndex = value;
    m_DefaultIndexIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::defaultIndexIsSet() const
{
    return m_DefaultIndexIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetDefaultIndex()
{
    m_DefaultIndexIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getDisplayName() const
{
    return m_DisplayName;
}

void BTParameterLookupTableListEntry_1916::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
std::vector<std::shared_ptr<BTParameterLookupTableEntry_1667>>& BTParameterLookupTableListEntry_1916::getEntries()
{
    return m_Entries;
}

void BTParameterLookupTableListEntry_1916::setEntries(const std::vector<std::shared_ptr<BTParameterLookupTableEntry_1667>>& value)
{
    m_Entries = value;
    m_EntriesIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::entriesIsSet() const
{
    return m_EntriesIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetEntries()
{
    m_EntriesIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getLabel() const
{
    return m_Label;
}

void BTParameterLookupTableListEntry_1916::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::labelIsSet() const
{
    return m_LabelIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getLocalizableName() const
{
    return m_LocalizableName;
}

void BTParameterLookupTableListEntry_1916::setLocalizableName(const utility::string_t& value)
{
    m_LocalizableName = value;
    m_LocalizableNameIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::localizableNameIsSet() const
{
    return m_LocalizableNameIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetLocalizableName()
{
    m_LocalizableNameIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getLocalizedLabel() const
{
    return m_LocalizedLabel;
}

void BTParameterLookupTableListEntry_1916::setLocalizedLabel(const utility::string_t& value)
{
    m_LocalizedLabel = value;
    m_LocalizedLabelIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::localizedLabelIsSet() const
{
    return m_LocalizedLabelIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetLocalizedLabel()
{
    m_LocalizedLabelIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getLocalizedName() const
{
    return m_LocalizedName;
}

void BTParameterLookupTableListEntry_1916::setLocalizedName(const utility::string_t& value)
{
    m_LocalizedName = value;
    m_LocalizedNameIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::localizedNameIsSet() const
{
    return m_LocalizedNameIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetLocalizedName()
{
    m_LocalizedNameIsSet = false;
}
utility::string_t BTParameterLookupTableListEntry_1916::getName() const
{
    return m_Name;
}

void BTParameterLookupTableListEntry_1916::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::nameIsSet() const
{
    return m_NameIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetName()
{
    m_NameIsSet = false;
}
std::vector<utility::string_t>& BTParameterLookupTableListEntry_1916::getStringsToLocalize()
{
    return m_StringsToLocalize;
}

void BTParameterLookupTableListEntry_1916::setStringsToLocalize(const std::vector<utility::string_t>& value)
{
    m_StringsToLocalize = value;
    m_StringsToLocalizeIsSet = true;
}

bool BTParameterLookupTableListEntry_1916::stringsToLocalizeIsSet() const
{
    return m_StringsToLocalizeIsSet;
}

void BTParameterLookupTableListEntry_1916::unsetStringsToLocalize()
{
    m_StringsToLocalizeIsSet = false;
}
}
}
}
}


