/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTLinkToLatestDocumentInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTLinkToLatestDocumentInfo::BTLinkToLatestDocumentInfo()
{
    m_ChangedElementsIsSet = false;
}

BTLinkToLatestDocumentInfo::~BTLinkToLatestDocumentInfo()
{
}

void BTLinkToLatestDocumentInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTLinkToLatestDocumentInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangedElementsIsSet)
    {
        val[utility::conversions::to_string_t("changedElements")] = ModelBase::toJson(m_ChangedElements);
    }

    return val;
}

bool BTLinkToLatestDocumentInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changedElements")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changedElements"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_changedElements;
            ok &= ModelBase::fromJson(fieldValue, refVal_changedElements);
            setChangedElements(refVal_changedElements);
        }
    }
    return ok;
}

void BTLinkToLatestDocumentInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangedElementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changedElements"), m_ChangedElements));
    }
}

bool BTLinkToLatestDocumentInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changedElements")))
    {
        std::vector<utility::string_t> refVal_changedElements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changedElements")), refVal_changedElements );
        setChangedElements(refVal_changedElements);
    }
    return ok;
}

std::vector<utility::string_t>& BTLinkToLatestDocumentInfo::getChangedElements()
{
    return m_ChangedElements;
}

void BTLinkToLatestDocumentInfo::setChangedElements(const std::vector<utility::string_t>& value)
{
    m_ChangedElements = value;
    m_ChangedElementsIsSet = true;
}

bool BTLinkToLatestDocumentInfo::changedElementsIsSet() const
{
    return m_ChangedElementsIsSet;
}

void BTLinkToLatestDocumentInfo::unsetChangedElements()
{
    m_ChangedElementsIsSet = false;
}
}
}
}
}


