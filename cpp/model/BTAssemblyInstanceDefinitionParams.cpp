/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyInstanceDefinitionParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyInstanceDefinitionParams::BTAssemblyInstanceDefinitionParams()
{
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_IsAssembly = false;
    m_IsAssemblyIsSet = false;
    m_IsHidden = false;
    m_IsHiddenIsSet = false;
    m_IsSuppressed = false;
    m_IsSuppressedIsSet = false;
    m_IsWholePartStudio = false;
    m_IsWholePartStudioIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
}

BTAssemblyInstanceDefinitionParams::~BTAssemblyInstanceDefinitionParams()
{
}

void BTAssemblyInstanceDefinitionParams::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyInstanceDefinitionParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_IsAssemblyIsSet)
    {
        val[utility::conversions::to_string_t("isAssembly")] = ModelBase::toJson(m_IsAssembly);
    }
    if(m_IsHiddenIsSet)
    {
        val[utility::conversions::to_string_t("isHidden")] = ModelBase::toJson(m_IsHidden);
    }
    if(m_IsSuppressedIsSet)
    {
        val[utility::conversions::to_string_t("isSuppressed")] = ModelBase::toJson(m_IsSuppressed);
    }
    if(m_IsWholePartStudioIsSet)
    {
        val[utility::conversions::to_string_t("isWholePartStudio")] = ModelBase::toJson(m_IsWholePartStudio);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }

    return val;
}

bool BTAssemblyInstanceDefinitionParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isAssembly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isAssembly"));
        if(!fieldValue.is_null())
        {
            bool refVal_isAssembly;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAssembly);
            setIsAssembly(refVal_isAssembly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isHidden")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isHidden"));
        if(!fieldValue.is_null())
        {
            bool refVal_isHidden;
            ok &= ModelBase::fromJson(fieldValue, refVal_isHidden);
            setIsHidden(refVal_isHidden);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isSuppressed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isSuppressed"));
        if(!fieldValue.is_null())
        {
            bool refVal_isSuppressed;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSuppressed);
            setIsSuppressed(refVal_isSuppressed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isWholePartStudio")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isWholePartStudio"));
        if(!fieldValue.is_null())
        {
            bool refVal_isWholePartStudio;
            ok &= ModelBase::fromJson(fieldValue, refVal_isWholePartStudio);
            setIsWholePartStudio(refVal_isWholePartStudio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    return ok;
}

void BTAssemblyInstanceDefinitionParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_IsAssemblyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isAssembly"), m_IsAssembly));
    }
    if(m_IsHiddenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isHidden"), m_IsHidden));
    }
    if(m_IsSuppressedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSuppressed"), m_IsSuppressed));
    }
    if(m_IsWholePartStudioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isWholePartStudio"), m_IsWholePartStudio));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
}

bool BTAssemblyInstanceDefinitionParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isAssembly")))
    {
        bool refVal_isAssembly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isAssembly")), refVal_isAssembly );
        setIsAssembly(refVal_isAssembly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isHidden")))
    {
        bool refVal_isHidden;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isHidden")), refVal_isHidden );
        setIsHidden(refVal_isHidden);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isSuppressed")))
    {
        bool refVal_isSuppressed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSuppressed")), refVal_isSuppressed );
        setIsSuppressed(refVal_isSuppressed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isWholePartStudio")))
    {
        bool refVal_isWholePartStudio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isWholePartStudio")), refVal_isWholePartStudio );
        setIsWholePartStudio(refVal_isWholePartStudio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    return ok;
}

utility::string_t BTAssemblyInstanceDefinitionParams::getConfiguration() const
{
    return m_Configuration;
}

void BTAssemblyInstanceDefinitionParams::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getDocumentId() const
{
    return m_DocumentId;
}

void BTAssemblyInstanceDefinitionParams::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getElementId() const
{
    return m_ElementId;
}

void BTAssemblyInstanceDefinitionParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getFeatureId() const
{
    return m_FeatureId;
}

void BTAssemblyInstanceDefinitionParams::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
bool BTAssemblyInstanceDefinitionParams::isIsAssembly() const
{
    return m_IsAssembly;
}

void BTAssemblyInstanceDefinitionParams::setIsAssembly(bool value)
{
    m_IsAssembly = value;
    m_IsAssemblyIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::isAssemblyIsSet() const
{
    return m_IsAssemblyIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetIsAssembly()
{
    m_IsAssemblyIsSet = false;
}
bool BTAssemblyInstanceDefinitionParams::isIsHidden() const
{
    return m_IsHidden;
}

void BTAssemblyInstanceDefinitionParams::setIsHidden(bool value)
{
    m_IsHidden = value;
    m_IsHiddenIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::isHiddenIsSet() const
{
    return m_IsHiddenIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetIsHidden()
{
    m_IsHiddenIsSet = false;
}
bool BTAssemblyInstanceDefinitionParams::isIsSuppressed() const
{
    return m_IsSuppressed;
}

void BTAssemblyInstanceDefinitionParams::setIsSuppressed(bool value)
{
    m_IsSuppressed = value;
    m_IsSuppressedIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::isSuppressedIsSet() const
{
    return m_IsSuppressedIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetIsSuppressed()
{
    m_IsSuppressedIsSet = false;
}
bool BTAssemblyInstanceDefinitionParams::isIsWholePartStudio() const
{
    return m_IsWholePartStudio;
}

void BTAssemblyInstanceDefinitionParams::setIsWholePartStudio(bool value)
{
    m_IsWholePartStudio = value;
    m_IsWholePartStudioIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::isWholePartStudioIsSet() const
{
    return m_IsWholePartStudioIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetIsWholePartStudio()
{
    m_IsWholePartStudioIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTAssemblyInstanceDefinitionParams::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getPartId() const
{
    return m_PartId;
}

void BTAssemblyInstanceDefinitionParams::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getPartNumber() const
{
    return m_PartNumber;
}

void BTAssemblyInstanceDefinitionParams::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getRevision() const
{
    return m_Revision;
}

void BTAssemblyInstanceDefinitionParams::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTAssemblyInstanceDefinitionParams::getVersionId() const
{
    return m_VersionId;
}

void BTAssemblyInstanceDefinitionParams::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTAssemblyInstanceDefinitionParams::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTAssemblyInstanceDefinitionParams::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
}
}
}
}


