/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchCurveSegment_155.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchCurveSegment_155::BTMSketchCurveSegment_155()
{
    m_StartPointId = utility::conversions::to_string_t("");
    m_StartPointIdIsSet = false;
    m_EndPointId = utility::conversions::to_string_t("");
    m_EndPointIdIsSet = false;
    m_StartParam = 0.0;
    m_StartParamIsSet = false;
    m_EndParam = 0.0;
    m_EndParamIsSet = false;
}

BTMSketchCurveSegment_155::~BTMSketchCurveSegment_155()
{
}

void BTMSketchCurveSegment_155::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchCurveSegment_155::toJson() const
{
    web::json::value val = this->BTMSketchCurve_4::toJson();
    
    if(m_StartPointIdIsSet)
    {
        val[utility::conversions::to_string_t("startPointId")] = ModelBase::toJson(m_StartPointId);
    }
    if(m_EndPointIdIsSet)
    {
        val[utility::conversions::to_string_t("endPointId")] = ModelBase::toJson(m_EndPointId);
    }
    if(m_StartParamIsSet)
    {
        val[utility::conversions::to_string_t("startParam")] = ModelBase::toJson(m_StartParam);
    }
    if(m_EndParamIsSet)
    {
        val[utility::conversions::to_string_t("endParam")] = ModelBase::toJson(m_EndParam);
    }

    return val;
}

bool BTMSketchCurveSegment_155::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMSketchCurve_4::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("startPointId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startPointId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_startPointId;
            ok &= ModelBase::fromJson(fieldValue, refVal_startPointId);
            setStartPointId(refVal_startPointId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endPointId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endPointId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_endPointId;
            ok &= ModelBase::fromJson(fieldValue, refVal_endPointId);
            setEndPointId(refVal_endPointId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startParam")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startParam"));
        if(!fieldValue.is_null())
        {
            double refVal_startParam;
            ok &= ModelBase::fromJson(fieldValue, refVal_startParam);
            setStartParam(refVal_startParam);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endParam")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endParam"));
        if(!fieldValue.is_null())
        {
            double refVal_endParam;
            ok &= ModelBase::fromJson(fieldValue, refVal_endParam);
            setEndParam(refVal_endParam);
        }
    }
    return ok;
}

void BTMSketchCurveSegment_155::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ControlBoxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("controlBoxIds"), m_ControlBoxIds));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityId"), m_EntityId));
    }
    if(m_EntityIdAndReplaceInDependentFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entityIdAndReplaceInDependentFields"), m_EntityIdAndReplaceInDependentFields));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_IsConstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isConstruction"), m_IsConstruction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_CenterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("centerId"), m_CenterId));
    }
    if(m_InternalIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalIds"), m_InternalIds));
    }
    if(m_GeometryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geometry"), m_Geometry));
    }
    if(m_StartPointIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startPointId"), m_StartPointId));
    }
    if(m_EndPointIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endPointId"), m_EndPointId));
    }
    if(m_StartParamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startParam"), m_StartParam));
    }
    if(m_EndParamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endParam"), m_EndParam));
    }
}

bool BTMSketchCurveSegment_155::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("controlBoxIds")))
    {
        std::vector<utility::string_t> refVal_controlBoxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("controlBoxIds")), refVal_controlBoxIds );
        setControlBoxIds(refVal_controlBoxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityId")))
    {
        utility::string_t refVal_entityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityId")), refVal_entityId );
        setEntityId(refVal_entityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")))
    {
        utility::string_t refVal_entityIdAndReplaceInDependentFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entityIdAndReplaceInDependentFields")), refVal_entityIdAndReplaceInDependentFields );
        setEntityIdAndReplaceInDependentFields(refVal_entityIdAndReplaceInDependentFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isConstruction")))
    {
        bool refVal_isConstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isConstruction")), refVal_isConstruction );
        setIsConstruction(refVal_isConstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("centerId")))
    {
        utility::string_t refVal_centerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("centerId")), refVal_centerId );
        setCenterId(refVal_centerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalIds")))
    {
        std::vector<utility::string_t> refVal_internalIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalIds")), refVal_internalIds );
        setInternalIds(refVal_internalIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("geometry")))
    {
        std::shared_ptr<BTCurveGeometry_114> refVal_geometry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geometry")), refVal_geometry );
        setGeometry(refVal_geometry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startPointId")))
    {
        utility::string_t refVal_startPointId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startPointId")), refVal_startPointId );
        setStartPointId(refVal_startPointId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endPointId")))
    {
        utility::string_t refVal_endPointId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endPointId")), refVal_endPointId );
        setEndPointId(refVal_endPointId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startParam")))
    {
        double refVal_startParam;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startParam")), refVal_startParam );
        setStartParam(refVal_startParam);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endParam")))
    {
        double refVal_endParam;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endParam")), refVal_endParam );
        setEndParam(refVal_endParam);
    }
    return ok;
}

utility::string_t BTMSketchCurveSegment_155::getStartPointId() const
{
    return m_StartPointId;
}

void BTMSketchCurveSegment_155::setStartPointId(const utility::string_t& value)
{
    m_StartPointId = value;
    m_StartPointIdIsSet = true;
}

bool BTMSketchCurveSegment_155::startPointIdIsSet() const
{
    return m_StartPointIdIsSet;
}

void BTMSketchCurveSegment_155::unsetStartPointId()
{
    m_StartPointIdIsSet = false;
}
utility::string_t BTMSketchCurveSegment_155::getEndPointId() const
{
    return m_EndPointId;
}

void BTMSketchCurveSegment_155::setEndPointId(const utility::string_t& value)
{
    m_EndPointId = value;
    m_EndPointIdIsSet = true;
}

bool BTMSketchCurveSegment_155::endPointIdIsSet() const
{
    return m_EndPointIdIsSet;
}

void BTMSketchCurveSegment_155::unsetEndPointId()
{
    m_EndPointIdIsSet = false;
}
double BTMSketchCurveSegment_155::getStartParam() const
{
    return m_StartParam;
}

void BTMSketchCurveSegment_155::setStartParam(double value)
{
    m_StartParam = value;
    m_StartParamIsSet = true;
}

bool BTMSketchCurveSegment_155::startParamIsSet() const
{
    return m_StartParamIsSet;
}

void BTMSketchCurveSegment_155::unsetStartParam()
{
    m_StartParamIsSet = false;
}
double BTMSketchCurveSegment_155::getEndParam() const
{
    return m_EndParam;
}

void BTMSketchCurveSegment_155::setEndParam(double value)
{
    m_EndParam = value;
    m_EndParamIsSet = true;
}

bool BTMSketchCurveSegment_155::endParamIsSet() const
{
    return m_EndParamIsSet;
}

void BTMSketchCurveSegment_155::unsetEndParam()
{
    m_EndParamIsSet = false;
}
}
}
}
}


