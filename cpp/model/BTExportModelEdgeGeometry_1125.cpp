/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelEdgeGeometry_1125.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelEdgeGeometry_1125::BTExportModelEdgeGeometry_1125()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_EndPointIsSet = false;
    m_EndVectorIsSet = false;
    m_Length = 0.0;
    m_LengthIsSet = false;
    m_MidPointIsSet = false;
    m_QuarterPointIsSet = false;
    m_StartPointIsSet = false;
    m_StartVectorIsSet = false;
}

BTExportModelEdgeGeometry_1125::~BTExportModelEdgeGeometry_1125()
{
}

void BTExportModelEdgeGeometry_1125::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelEdgeGeometry_1125::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_EndPointIsSet)
    {
        val[utility::conversions::to_string_t("endPoint")] = ModelBase::toJson(m_EndPoint);
    }
    if(m_EndVectorIsSet)
    {
        val[utility::conversions::to_string_t("endVector")] = ModelBase::toJson(m_EndVector);
    }
    if(m_LengthIsSet)
    {
        val[utility::conversions::to_string_t("length")] = ModelBase::toJson(m_Length);
    }
    if(m_MidPointIsSet)
    {
        val[utility::conversions::to_string_t("midPoint")] = ModelBase::toJson(m_MidPoint);
    }
    if(m_QuarterPointIsSet)
    {
        val[utility::conversions::to_string_t("quarterPoint")] = ModelBase::toJson(m_QuarterPoint);
    }
    if(m_StartPointIsSet)
    {
        val[utility::conversions::to_string_t("startPoint")] = ModelBase::toJson(m_StartPoint);
    }
    if(m_StartVectorIsSet)
    {
        val[utility::conversions::to_string_t("startVector")] = ModelBase::toJson(m_StartVector);
    }

    return val;
}

bool BTExportModelEdgeGeometry_1125::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endPoint"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_endPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_endPoint);
            setEndPoint(refVal_endPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endVector")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endVector"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_endVector;
            ok &= ModelBase::fromJson(fieldValue, refVal_endVector);
            setEndVector(refVal_endVector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("length")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("length"));
        if(!fieldValue.is_null())
        {
            double refVal_length;
            ok &= ModelBase::fromJson(fieldValue, refVal_length);
            setLength(refVal_length);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("midPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("midPoint"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_midPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_midPoint);
            setMidPoint(refVal_midPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quarterPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quarterPoint"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_quarterPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_quarterPoint);
            setQuarterPoint(refVal_quarterPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startPoint"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_startPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_startPoint);
            setStartPoint(refVal_startPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startVector")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startVector"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_startVector;
            ok &= ModelBase::fromJson(fieldValue, refVal_startVector);
            setStartVector(refVal_startVector);
        }
    }
    return ok;
}

void BTExportModelEdgeGeometry_1125::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_EndPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endPoint"), m_EndPoint));
    }
    if(m_EndVectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endVector"), m_EndVector));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("length"), m_Length));
    }
    if(m_MidPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("midPoint"), m_MidPoint));
    }
    if(m_QuarterPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quarterPoint"), m_QuarterPoint));
    }
    if(m_StartPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startPoint"), m_StartPoint));
    }
    if(m_StartVectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startVector"), m_StartVector));
    }
}

bool BTExportModelEdgeGeometry_1125::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_endPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endPoint")), refVal_endPoint );
        setEndPoint(refVal_endPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endVector")))
    {
        std::shared_ptr<BTVector3d_389> refVal_endVector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endVector")), refVal_endVector );
        setEndVector(refVal_endVector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("length")))
    {
        double refVal_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("length")), refVal_length );
        setLength(refVal_length);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("midPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_midPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("midPoint")), refVal_midPoint );
        setMidPoint(refVal_midPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quarterPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_quarterPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quarterPoint")), refVal_quarterPoint );
        setQuarterPoint(refVal_quarterPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startPoint")))
    {
        std::shared_ptr<BTVector3d_389> refVal_startPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startPoint")), refVal_startPoint );
        setStartPoint(refVal_startPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startVector")))
    {
        std::shared_ptr<BTVector3d_389> refVal_startVector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startVector")), refVal_startVector );
        setStartVector(refVal_startVector);
    }
    return ok;
}

utility::string_t BTExportModelEdgeGeometry_1125::getBtType() const
{
    return m_BtType;
}

void BTExportModelEdgeGeometry_1125::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getEndPoint() const
{
    return m_EndPoint;
}

void BTExportModelEdgeGeometry_1125::setEndPoint(const std::shared_ptr<BTVector3d_389>& value)
{
    m_EndPoint = value;
    m_EndPointIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::endPointIsSet() const
{
    return m_EndPointIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetEndPoint()
{
    m_EndPointIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getEndVector() const
{
    return m_EndVector;
}

void BTExportModelEdgeGeometry_1125::setEndVector(const std::shared_ptr<BTVector3d_389>& value)
{
    m_EndVector = value;
    m_EndVectorIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::endVectorIsSet() const
{
    return m_EndVectorIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetEndVector()
{
    m_EndVectorIsSet = false;
}
double BTExportModelEdgeGeometry_1125::getLength() const
{
    return m_Length;
}

void BTExportModelEdgeGeometry_1125::setLength(double value)
{
    m_Length = value;
    m_LengthIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::lengthIsSet() const
{
    return m_LengthIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetLength()
{
    m_LengthIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getMidPoint() const
{
    return m_MidPoint;
}

void BTExportModelEdgeGeometry_1125::setMidPoint(const std::shared_ptr<BTVector3d_389>& value)
{
    m_MidPoint = value;
    m_MidPointIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::midPointIsSet() const
{
    return m_MidPointIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetMidPoint()
{
    m_MidPointIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getQuarterPoint() const
{
    return m_QuarterPoint;
}

void BTExportModelEdgeGeometry_1125::setQuarterPoint(const std::shared_ptr<BTVector3d_389>& value)
{
    m_QuarterPoint = value;
    m_QuarterPointIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::quarterPointIsSet() const
{
    return m_QuarterPointIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetQuarterPoint()
{
    m_QuarterPointIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getStartPoint() const
{
    return m_StartPoint;
}

void BTExportModelEdgeGeometry_1125::setStartPoint(const std::shared_ptr<BTVector3d_389>& value)
{
    m_StartPoint = value;
    m_StartPointIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::startPointIsSet() const
{
    return m_StartPointIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetStartPoint()
{
    m_StartPointIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTExportModelEdgeGeometry_1125::getStartVector() const
{
    return m_StartVector;
}

void BTExportModelEdgeGeometry_1125::setStartVector(const std::shared_ptr<BTVector3d_389>& value)
{
    m_StartVector = value;
    m_StartVectorIsSet = true;
}

bool BTExportModelEdgeGeometry_1125::startVectorIsSet() const
{
    return m_StartVectorIsSet;
}

void BTExportModelEdgeGeometry_1125::unsetStartVector()
{
    m_StartVectorIsSet = false;
}
}
}
}
}


