/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ShippingDetails.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ShippingDetails::ShippingDetails()
{
    m_AddressIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
}

ShippingDetails::~ShippingDetails()
{
}

void ShippingDetails::validate()
{
    // TODO: implement validation
}

web::json::value ShippingDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t("address")] = ModelBase::toJson(m_Address);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }

    return val;
}

bool ShippingDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("address")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("address"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Address> refVal_address;
            ok &= ModelBase::fromJson(fieldValue, refVal_address);
            setAddress(refVal_address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phone"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phone;
            ok &= ModelBase::fromJson(fieldValue, refVal_phone);
            setPhone(refVal_phone);
        }
    }
    return ok;
}

void ShippingDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address"), m_Address));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    }
}

bool ShippingDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("address")))
    {
        std::shared_ptr<Address> refVal_address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("address")), refVal_address );
        setAddress(refVal_address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        utility::string_t refVal_phone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone")), refVal_phone );
        setPhone(refVal_phone);
    }
    return ok;
}

std::shared_ptr<Address> ShippingDetails::getAddress() const
{
    return m_Address;
}

void ShippingDetails::setAddress(const std::shared_ptr<Address>& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool ShippingDetails::addressIsSet() const
{
    return m_AddressIsSet;
}

void ShippingDetails::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t ShippingDetails::getName() const
{
    return m_Name;
}

void ShippingDetails::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ShippingDetails::nameIsSet() const
{
    return m_NameIsSet;
}

void ShippingDetails::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ShippingDetails::getPhone() const
{
    return m_Phone;
}

void ShippingDetails::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool ShippingDetails::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void ShippingDetails::unsetPhone()
{
    m_PhoneIsSet = false;
}
}
}
}
}


