/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTWorkflowStateInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTWorkflowStateInfo::BTWorkflowStateInfo()
{
    m_ApproverSourceProperty = utility::conversions::to_string_t("");
    m_ApproverSourcePropertyIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_EditablePropertiesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NotifierSourceProperty = utility::conversions::to_string_t("");
    m_NotifierSourcePropertyIsSet = false;
    m_RequiredItemPropertiesIsSet = false;
    m_RequiredPropertiesIsSet = false;
}

BTWorkflowStateInfo::~BTWorkflowStateInfo()
{
}

void BTWorkflowStateInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTWorkflowStateInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApproverSourcePropertyIsSet)
    {
        val[utility::conversions::to_string_t("approverSourceProperty")] = ModelBase::toJson(m_ApproverSourceProperty);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EditablePropertiesIsSet)
    {
        val[utility::conversions::to_string_t("editableProperties")] = ModelBase::toJson(m_EditableProperties);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NotifierSourcePropertyIsSet)
    {
        val[utility::conversions::to_string_t("notifierSourceProperty")] = ModelBase::toJson(m_NotifierSourceProperty);
    }
    if(m_RequiredItemPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("requiredItemProperties")] = ModelBase::toJson(m_RequiredItemProperties);
    }
    if(m_RequiredPropertiesIsSet)
    {
        val[utility::conversions::to_string_t("requiredProperties")] = ModelBase::toJson(m_RequiredProperties);
    }

    return val;
}

bool BTWorkflowStateInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("approverSourceProperty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("approverSourceProperty"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_approverSourceProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_approverSourceProperty);
            setApproverSourceProperty(refVal_approverSourceProperty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editableProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editableProperties"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_editableProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_editableProperties);
            setEditableProperties(refVal_editableProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifierSourceProperty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notifierSourceProperty"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_notifierSourceProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_notifierSourceProperty);
            setNotifierSourceProperty(refVal_notifierSourceProperty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requiredItemProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requiredItemProperties"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_requiredItemProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_requiredItemProperties);
            setRequiredItemProperties(refVal_requiredItemProperties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("requiredProperties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requiredProperties"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_requiredProperties;
            ok &= ModelBase::fromJson(fieldValue, refVal_requiredProperties);
            setRequiredProperties(refVal_requiredProperties);
        }
    }
    return ok;
}

void BTWorkflowStateInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ApproverSourcePropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("approverSourceProperty"), m_ApproverSourceProperty));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_EditablePropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editableProperties"), m_EditableProperties));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NotifierSourcePropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notifierSourceProperty"), m_NotifierSourceProperty));
    }
    if(m_RequiredItemPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requiredItemProperties"), m_RequiredItemProperties));
    }
    if(m_RequiredPropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requiredProperties"), m_RequiredProperties));
    }
}

bool BTWorkflowStateInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("approverSourceProperty")))
    {
        utility::string_t refVal_approverSourceProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("approverSourceProperty")), refVal_approverSourceProperty );
        setApproverSourceProperty(refVal_approverSourceProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editableProperties")))
    {
        std::vector<utility::string_t> refVal_editableProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editableProperties")), refVal_editableProperties );
        setEditableProperties(refVal_editableProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifierSourceProperty")))
    {
        utility::string_t refVal_notifierSourceProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notifierSourceProperty")), refVal_notifierSourceProperty );
        setNotifierSourceProperty(refVal_notifierSourceProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requiredItemProperties")))
    {
        std::vector<utility::string_t> refVal_requiredItemProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requiredItemProperties")), refVal_requiredItemProperties );
        setRequiredItemProperties(refVal_requiredItemProperties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("requiredProperties")))
    {
        std::vector<utility::string_t> refVal_requiredProperties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requiredProperties")), refVal_requiredProperties );
        setRequiredProperties(refVal_requiredProperties);
    }
    return ok;
}

utility::string_t BTWorkflowStateInfo::getApproverSourceProperty() const
{
    return m_ApproverSourceProperty;
}

void BTWorkflowStateInfo::setApproverSourceProperty(const utility::string_t& value)
{
    m_ApproverSourceProperty = value;
    m_ApproverSourcePropertyIsSet = true;
}

bool BTWorkflowStateInfo::approverSourcePropertyIsSet() const
{
    return m_ApproverSourcePropertyIsSet;
}

void BTWorkflowStateInfo::unsetApproverSourceProperty()
{
    m_ApproverSourcePropertyIsSet = false;
}
utility::string_t BTWorkflowStateInfo::getDisplayName() const
{
    return m_DisplayName;
}

void BTWorkflowStateInfo::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool BTWorkflowStateInfo::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void BTWorkflowStateInfo::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowStateInfo::getEditableProperties()
{
    return m_EditableProperties;
}

void BTWorkflowStateInfo::setEditableProperties(const std::vector<utility::string_t>& value)
{
    m_EditableProperties = value;
    m_EditablePropertiesIsSet = true;
}

bool BTWorkflowStateInfo::editablePropertiesIsSet() const
{
    return m_EditablePropertiesIsSet;
}

void BTWorkflowStateInfo::unsetEditableProperties()
{
    m_EditablePropertiesIsSet = false;
}
utility::string_t BTWorkflowStateInfo::getName() const
{
    return m_Name;
}

void BTWorkflowStateInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTWorkflowStateInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTWorkflowStateInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTWorkflowStateInfo::getNotifierSourceProperty() const
{
    return m_NotifierSourceProperty;
}

void BTWorkflowStateInfo::setNotifierSourceProperty(const utility::string_t& value)
{
    m_NotifierSourceProperty = value;
    m_NotifierSourcePropertyIsSet = true;
}

bool BTWorkflowStateInfo::notifierSourcePropertyIsSet() const
{
    return m_NotifierSourcePropertyIsSet;
}

void BTWorkflowStateInfo::unsetNotifierSourceProperty()
{
    m_NotifierSourcePropertyIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowStateInfo::getRequiredItemProperties()
{
    return m_RequiredItemProperties;
}

void BTWorkflowStateInfo::setRequiredItemProperties(const std::vector<utility::string_t>& value)
{
    m_RequiredItemProperties = value;
    m_RequiredItemPropertiesIsSet = true;
}

bool BTWorkflowStateInfo::requiredItemPropertiesIsSet() const
{
    return m_RequiredItemPropertiesIsSet;
}

void BTWorkflowStateInfo::unsetRequiredItemProperties()
{
    m_RequiredItemPropertiesIsSet = false;
}
std::vector<utility::string_t>& BTWorkflowStateInfo::getRequiredProperties()
{
    return m_RequiredProperties;
}

void BTWorkflowStateInfo::setRequiredProperties(const std::vector<utility::string_t>& value)
{
    m_RequiredProperties = value;
    m_RequiredPropertiesIsSet = true;
}

bool BTWorkflowStateInfo::requiredPropertiesIsSet() const
{
    return m_RequiredPropertiesIsSet;
}

void BTWorkflowStateInfo::unsetRequiredProperties()
{
    m_RequiredPropertiesIsSet = false;
}
}
}
}
}


