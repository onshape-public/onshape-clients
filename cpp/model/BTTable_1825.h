/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTTable_1825.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTTable_1825_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTTable_1825_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTTableRow_1054.h"
#include <vector>
#include "BTTableColumnInfo_1222.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTTable_1825
    : public ModelBase
{
public:
    BTTable_1825();
    virtual ~BTTable_1825();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTTable_1825 members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::vector<utility::string_t>>& getAllRowValues();
    bool allRowValuesIsSet() const;
    void unsetAllRowValues();

    void setAllRowValues(const std::vector<std::vector<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getColumnCount() const;
    bool columnCountIsSet() const;
    void unsetColumnCount();

    void setColumnCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFrozenColumns() const;
    bool frozenColumnsIsSet() const;
    void unsetFrozenColumns();

    void setFrozenColumns(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isReadOnly() const;
    bool readOnlyIsSet() const;
    void unsetReadOnly();

    void setReadOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRowCount() const;
    bool rowCountIsSet() const;
    void unsetRowCount();

    void setRowCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTTableColumnInfo_1222>>& getTableColumns();
    bool tableColumnsIsSet() const;
    void unsetTableColumns();

    void setTableColumns(const std::vector<std::shared_ptr<BTTableColumnInfo_1222>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTableId() const;
    bool tableIdIsSet() const;
    void unsetTableId();

    void setTableId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTTableRow_1054>>& getTableRows();
    bool tableRowsIsSet() const;
    void unsetTableRows();

    void setTableRows(const std::vector<std::shared_ptr<BTTableRow_1054>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);


protected:
    std::vector<std::vector<utility::string_t>> m_AllRowValues;
    bool m_AllRowValuesIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    int32_t m_ColumnCount;
    bool m_ColumnCountIsSet;
    int32_t m_FrozenColumns;
    bool m_FrozenColumnsIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    bool m_ReadOnly;
    bool m_ReadOnlyIsSet;
    int32_t m_RowCount;
    bool m_RowCountIsSet;
    std::vector<std::shared_ptr<BTTableColumnInfo_1222>> m_TableColumns;
    bool m_TableColumnsIsSet;
    utility::string_t m_TableId;
    bool m_TableIdIsSet;
    std::vector<std::shared_ptr<BTTableRow_1054>> m_TableRows;
    bool m_TableRowsIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTTable_1825_H_ */
