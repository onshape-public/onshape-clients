/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMaterialLibrarySettingsInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMaterialLibrarySettingsInfo::BTMaterialLibrarySettingsInfo()
{
    m_CompanyLibrariesIsSet = false;
    m_LibrariesIsSet = false;
}

BTMaterialLibrarySettingsInfo::~BTMaterialLibrarySettingsInfo()
{
}

void BTMaterialLibrarySettingsInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMaterialLibrarySettingsInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CompanyLibrariesIsSet)
    {
        val[utility::conversions::to_string_t("companyLibraries")] = ModelBase::toJson(m_CompanyLibraries);
    }
    if(m_LibrariesIsSet)
    {
        val[utility::conversions::to_string_t("libraries")] = ModelBase::toJson(m_Libraries);
    }

    return val;
}

bool BTMaterialLibrarySettingsInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("companyLibraries")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyLibraries"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>> refVal_companyLibraries;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyLibraries);
            setCompanyLibraries(refVal_companyLibraries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("libraries")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraries"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>> refVal_libraries;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraries);
            setLibraries(refVal_libraries);
        }
    }
    return ok;
}

void BTMaterialLibrarySettingsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CompanyLibrariesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyLibraries"), m_CompanyLibraries));
    }
    if(m_LibrariesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraries"), m_Libraries));
    }
}

bool BTMaterialLibrarySettingsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("companyLibraries")))
    {
        std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>> refVal_companyLibraries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyLibraries")), refVal_companyLibraries );
        setCompanyLibraries(refVal_companyLibraries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraries")))
    {
        std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>> refVal_libraries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraries")), refVal_libraries );
        setLibraries(refVal_libraries);
    }
    return ok;
}

std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>>& BTMaterialLibrarySettingsInfo::getCompanyLibraries()
{
    return m_CompanyLibraries;
}

void BTMaterialLibrarySettingsInfo::setCompanyLibraries(const std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>>& value)
{
    m_CompanyLibraries = value;
    m_CompanyLibrariesIsSet = true;
}

bool BTMaterialLibrarySettingsInfo::companyLibrariesIsSet() const
{
    return m_CompanyLibrariesIsSet;
}

void BTMaterialLibrarySettingsInfo::unsetCompanyLibraries()
{
    m_CompanyLibrariesIsSet = false;
}
std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>>& BTMaterialLibrarySettingsInfo::getLibraries()
{
    return m_Libraries;
}

void BTMaterialLibrarySettingsInfo::setLibraries(const std::vector<std::shared_ptr<BTMaterialLibraryMetadataInfo>>& value)
{
    m_Libraries = value;
    m_LibrariesIsSet = true;
}

bool BTMaterialLibrarySettingsInfo::librariesIsSet() const
{
    return m_LibrariesIsSet;
}

void BTMaterialLibrarySettingsInfo::unsetLibraries()
{
    m_LibrariesIsSet = false;
}
}
}
}
}


