/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMSketchPoint_158_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMSketchPoint_158_allOf::BTMSketchPoint_158_allOf()
{
    m_y = 0.0;
    m_yIsSet = false;
    m_x = 0.0;
    m_xIsSet = false;
    m_IsUserPoint = false;
    m_IsUserPointIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMSketchPoint_158_allOf::~BTMSketchPoint_158_allOf()
{
}

void BTMSketchPoint_158_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMSketchPoint_158_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t("y")] = ModelBase::toJson(m_y);
    }
    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t("x")] = ModelBase::toJson(m_x);
    }
    if(m_IsUserPointIsSet)
    {
        val[utility::conversions::to_string_t("isUserPoint")] = ModelBase::toJson(m_IsUserPoint);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMSketchPoint_158_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("y")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("y"));
        if(!fieldValue.is_null())
        {
            double refVal_y;
            ok &= ModelBase::fromJson(fieldValue, refVal_y);
            setY(refVal_y);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("x")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("x"));
        if(!fieldValue.is_null())
        {
            double refVal_x;
            ok &= ModelBase::fromJson(fieldValue, refVal_x);
            setX(refVal_x);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isUserPoint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUserPoint"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUserPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUserPoint);
            setIsUserPoint(refVal_isUserPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMSketchPoint_158_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("y"), m_y));
    }
    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("x"), m_x));
    }
    if(m_IsUserPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUserPoint"), m_IsUserPoint));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMSketchPoint_158_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("y")))
    {
        double refVal_y;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("y")), refVal_y );
        setY(refVal_y);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("x")))
    {
        double refVal_x;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("x")), refVal_x );
        setX(refVal_x);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUserPoint")))
    {
        bool refVal_isUserPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUserPoint")), refVal_isUserPoint );
        setIsUserPoint(refVal_isUserPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

double BTMSketchPoint_158_allOf::getY() const
{
    return m_y;
}

void BTMSketchPoint_158_allOf::setY(double value)
{
    m_y = value;
    m_yIsSet = true;
}

bool BTMSketchPoint_158_allOf::YIsSet() const
{
    return m_yIsSet;
}

void BTMSketchPoint_158_allOf::unsety()
{
    m_yIsSet = false;
}
double BTMSketchPoint_158_allOf::getX() const
{
    return m_x;
}

void BTMSketchPoint_158_allOf::setX(double value)
{
    m_x = value;
    m_xIsSet = true;
}

bool BTMSketchPoint_158_allOf::XIsSet() const
{
    return m_xIsSet;
}

void BTMSketchPoint_158_allOf::unsetx()
{
    m_xIsSet = false;
}
bool BTMSketchPoint_158_allOf::isIsUserPoint() const
{
    return m_IsUserPoint;
}

void BTMSketchPoint_158_allOf::setIsUserPoint(bool value)
{
    m_IsUserPoint = value;
    m_IsUserPointIsSet = true;
}

bool BTMSketchPoint_158_allOf::isUserPointIsSet() const
{
    return m_IsUserPointIsSet;
}

void BTMSketchPoint_158_allOf::unsetIsUserPoint()
{
    m_IsUserPointIsSet = false;
}
utility::string_t BTMSketchPoint_158_allOf::getBtType() const
{
    return m_BtType;
}

void BTMSketchPoint_158_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMSketchPoint_158_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMSketchPoint_158_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


