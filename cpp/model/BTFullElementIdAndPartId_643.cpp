/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFullElementIdAndPartId_643.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFullElementIdAndPartId_643::BTFullElementIdAndPartId_643()
{
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
}

BTFullElementIdAndPartId_643::~BTFullElementIdAndPartId_643()
{
}

void BTFullElementIdAndPartId_643::validate()
{
    // TODO: implement validation
}

web::json::value BTFullElementIdAndPartId_643::toJson() const
{
    web::json::value val = this->BTFullElementIdWithDocument_1729::toJson();
    
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }

    return val;
}

bool BTFullElementIdAndPartId_643::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTFullElementIdWithDocument_1729::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    return ok;
}

void BTFullElementIdAndPartId_643::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ConfiguredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configured"), m_Configured));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_MicroversionIdAndConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionIdAndConfiguration"), m_MicroversionIdAndConfiguration));
    }
    if(m_TargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("target"), m_Target));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
}

bool BTFullElementIdAndPartId_643::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configured")))
    {
        bool refVal_configured;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configured")), refVal_configured );
        setConfigured(refVal_configured);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        std::shared_ptr<BTMicroversionId_366> refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionIdAndConfiguration")))
    {
        std::shared_ptr<BTMicroversionIdAndConfiguration_2338> refVal_microversionIdAndConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionIdAndConfiguration")), refVal_microversionIdAndConfiguration );
        setMicroversionIdAndConfiguration(refVal_microversionIdAndConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("target")))
    {
        std::shared_ptr<BTMicroversionIdAndConfiguration_2338> refVal_target;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("target")), refVal_target );
        setTarget(refVal_target);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    return ok;
}

utility::string_t BTFullElementIdAndPartId_643::getPartId() const
{
    return m_PartId;
}

void BTFullElementIdAndPartId_643::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTFullElementIdAndPartId_643::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTFullElementIdAndPartId_643::unsetPartId()
{
    m_PartIdIsSet = false;
}
}
}
}
}


