/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentInfo::BTDocumentInfo()
{
    m_AnonymousAccessAllowed = false;
    m_AnonymousAccessAllowedIsSet = false;
    m_AnonymousAllowsExport = false;
    m_AnonymousAllowsExportIsSet = false;
    m_BetaCapabilityIdsIsSet = false;
    m_CanMove = false;
    m_CanMoveIsSet = false;
    m_CanUnshare = false;
    m_CanUnshareIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_CreatedByIsSet = false;
    m_CreatedWithEducationPlan = false;
    m_CreatedWithEducationPlanIsSet = false;
    m_DefaultElementId = utility::conversions::to_string_t("");
    m_DefaultElementIdIsSet = false;
    m_DefaultWorkspaceIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DocumentLabelsIsSet = false;
    m_DocumentThumbnailElementId = utility::conversions::to_string_t("");
    m_DocumentThumbnailElementIdIsSet = false;
    m_DuplicateNameViolationError = utility::conversions::to_string_t("");
    m_DuplicateNameViolationErrorIsSet = false;
    m_HasReleaseRevisionableObjects = false;
    m_HasReleaseRevisionableObjectsIsSet = false;
    m_HasRelevantInsertables = false;
    m_HasRelevantInsertablesIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IsContainer = false;
    m_IsContainerIsSet = false;
    m_IsEnterpriseOwned = false;
    m_IsEnterpriseOwnedIsSet = false;
    m_IsMutable = false;
    m_IsMutableIsSet = false;
    m_IsOrphaned = false;
    m_IsOrphanedIsSet = false;
    m_IsUpgradedToLatestVersion = false;
    m_IsUpgradedToLatestVersionIsSet = false;
    m_IsUsingManagedWorkflow = false;
    m_IsUsingManagedWorkflowIsSet = false;
    m_JsonType = utility::conversions::to_string_t("");
    m_JsonTypeIsSet = false;
    m_LikedByCurrentUser = false;
    m_LikedByCurrentUserIsSet = false;
    m_Likes = 0L;
    m_LikesIsSet = false;
    m_ModifiedAt = utility::datetime();
    m_ModifiedAtIsSet = false;
    m_ModifiedByIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NotRevisionManaged = false;
    m_NotRevisionManagedIsSet = false;
    m_NumberOfTimesCopied = 0L;
    m_NumberOfTimesCopiedIsSet = false;
    m_NumberOfTimesReferenced = 0L;
    m_NumberOfTimesReferencedIsSet = false;
    m_OwnerIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_Permission = utility::conversions::to_string_t("");
    m_PermissionIsSet = false;
    m_PermissionSetIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_r_public = false;
    m_r_publicIsSet = false;
    m_RecentVersionIsSet = false;
    m_ResourceType = utility::conversions::to_string_t("");
    m_ResourceTypeIsSet = false;
    m_SupportTeamUserAndShared = false;
    m_SupportTeamUserAndSharedIsSet = false;
    m_TagsIsSet = false;
    m_ThumbnailIsSet = false;
    m_TotalWorkspacesScheduledForUpdate = 0;
    m_TotalWorkspacesScheduledForUpdateIsSet = false;
    m_TotalWorkspacesUpdating = 0;
    m_TotalWorkspacesUpdatingIsSet = false;
    m_Trash = false;
    m_TrashIsSet = false;
    m_TrashedAt = utility::datetime();
    m_TrashedAtIsSet = false;
    m_TreeHref = utility::conversions::to_string_t("");
    m_TreeHrefIsSet = false;
    m_UserAccountLimitsBreached = false;
    m_UserAccountLimitsBreachedIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTDocumentInfo::~BTDocumentInfo()
{
}

void BTDocumentInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AnonymousAccessAllowedIsSet)
    {
        val[utility::conversions::to_string_t("anonymousAccessAllowed")] = ModelBase::toJson(m_AnonymousAccessAllowed);
    }
    if(m_AnonymousAllowsExportIsSet)
    {
        val[utility::conversions::to_string_t("anonymousAllowsExport")] = ModelBase::toJson(m_AnonymousAllowsExport);
    }
    if(m_BetaCapabilityIdsIsSet)
    {
        val[utility::conversions::to_string_t("betaCapabilityIds")] = ModelBase::toJson(m_BetaCapabilityIds);
    }
    if(m_CanMoveIsSet)
    {
        val[utility::conversions::to_string_t("canMove")] = ModelBase::toJson(m_CanMove);
    }
    if(m_CanUnshareIsSet)
    {
        val[utility::conversions::to_string_t("canUnshare")] = ModelBase::toJson(m_CanUnshare);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_CreatedByIsSet)
    {
        val[utility::conversions::to_string_t("createdBy")] = ModelBase::toJson(m_CreatedBy);
    }
    if(m_CreatedWithEducationPlanIsSet)
    {
        val[utility::conversions::to_string_t("createdWithEducationPlan")] = ModelBase::toJson(m_CreatedWithEducationPlan);
    }
    if(m_DefaultElementIdIsSet)
    {
        val[utility::conversions::to_string_t("defaultElementId")] = ModelBase::toJson(m_DefaultElementId);
    }
    if(m_DefaultWorkspaceIsSet)
    {
        val[utility::conversions::to_string_t("defaultWorkspace")] = ModelBase::toJson(m_DefaultWorkspace);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DocumentLabelsIsSet)
    {
        val[utility::conversions::to_string_t("documentLabels")] = ModelBase::toJson(m_DocumentLabels);
    }
    if(m_DocumentThumbnailElementIdIsSet)
    {
        val[utility::conversions::to_string_t("documentThumbnailElementId")] = ModelBase::toJson(m_DocumentThumbnailElementId);
    }
    if(m_DuplicateNameViolationErrorIsSet)
    {
        val[utility::conversions::to_string_t("duplicateNameViolationError")] = ModelBase::toJson(m_DuplicateNameViolationError);
    }
    if(m_HasReleaseRevisionableObjectsIsSet)
    {
        val[utility::conversions::to_string_t("hasReleaseRevisionableObjects")] = ModelBase::toJson(m_HasReleaseRevisionableObjects);
    }
    if(m_HasRelevantInsertablesIsSet)
    {
        val[utility::conversions::to_string_t("hasRelevantInsertables")] = ModelBase::toJson(m_HasRelevantInsertables);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IsContainerIsSet)
    {
        val[utility::conversions::to_string_t("isContainer")] = ModelBase::toJson(m_IsContainer);
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        val[utility::conversions::to_string_t("isEnterpriseOwned")] = ModelBase::toJson(m_IsEnterpriseOwned);
    }
    if(m_IsMutableIsSet)
    {
        val[utility::conversions::to_string_t("isMutable")] = ModelBase::toJson(m_IsMutable);
    }
    if(m_IsOrphanedIsSet)
    {
        val[utility::conversions::to_string_t("isOrphaned")] = ModelBase::toJson(m_IsOrphaned);
    }
    if(m_IsUpgradedToLatestVersionIsSet)
    {
        val[utility::conversions::to_string_t("isUpgradedToLatestVersion")] = ModelBase::toJson(m_IsUpgradedToLatestVersion);
    }
    if(m_IsUsingManagedWorkflowIsSet)
    {
        val[utility::conversions::to_string_t("isUsingManagedWorkflow")] = ModelBase::toJson(m_IsUsingManagedWorkflow);
    }
    if(m_JsonTypeIsSet)
    {
        val[utility::conversions::to_string_t("jsonType")] = ModelBase::toJson(m_JsonType);
    }
    if(m_LikedByCurrentUserIsSet)
    {
        val[utility::conversions::to_string_t("likedByCurrentUser")] = ModelBase::toJson(m_LikedByCurrentUser);
    }
    if(m_LikesIsSet)
    {
        val[utility::conversions::to_string_t("likes")] = ModelBase::toJson(m_Likes);
    }
    if(m_ModifiedAtIsSet)
    {
        val[utility::conversions::to_string_t("modifiedAt")] = ModelBase::toJson(m_ModifiedAt);
    }
    if(m_ModifiedByIsSet)
    {
        val[utility::conversions::to_string_t("modifiedBy")] = ModelBase::toJson(m_ModifiedBy);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NotRevisionManagedIsSet)
    {
        val[utility::conversions::to_string_t("notRevisionManaged")] = ModelBase::toJson(m_NotRevisionManaged);
    }
    if(m_NumberOfTimesCopiedIsSet)
    {
        val[utility::conversions::to_string_t("numberOfTimesCopied")] = ModelBase::toJson(m_NumberOfTimesCopied);
    }
    if(m_NumberOfTimesReferencedIsSet)
    {
        val[utility::conversions::to_string_t("numberOfTimesReferenced")] = ModelBase::toJson(m_NumberOfTimesReferenced);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t("owner")] = ModelBase::toJson(m_Owner);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_PermissionIsSet)
    {
        val[utility::conversions::to_string_t("permission")] = ModelBase::toJson(m_Permission);
    }
    if(m_PermissionSetIsSet)
    {
        val[utility::conversions::to_string_t("permissionSet")] = ModelBase::toJson(m_PermissionSet);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_r_publicIsSet)
    {
        val[utility::conversions::to_string_t("public")] = ModelBase::toJson(m_r_public);
    }
    if(m_RecentVersionIsSet)
    {
        val[utility::conversions::to_string_t("recentVersion")] = ModelBase::toJson(m_RecentVersion);
    }
    if(m_ResourceTypeIsSet)
    {
        val[utility::conversions::to_string_t("resourceType")] = ModelBase::toJson(m_ResourceType);
    }
    if(m_SupportTeamUserAndSharedIsSet)
    {
        val[utility::conversions::to_string_t("supportTeamUserAndShared")] = ModelBase::toJson(m_SupportTeamUserAndShared);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }
    if(m_ThumbnailIsSet)
    {
        val[utility::conversions::to_string_t("thumbnail")] = ModelBase::toJson(m_Thumbnail);
    }
    if(m_TotalWorkspacesScheduledForUpdateIsSet)
    {
        val[utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")] = ModelBase::toJson(m_TotalWorkspacesScheduledForUpdate);
    }
    if(m_TotalWorkspacesUpdatingIsSet)
    {
        val[utility::conversions::to_string_t("totalWorkspacesUpdating")] = ModelBase::toJson(m_TotalWorkspacesUpdating);
    }
    if(m_TrashIsSet)
    {
        val[utility::conversions::to_string_t("trash")] = ModelBase::toJson(m_Trash);
    }
    if(m_TrashedAtIsSet)
    {
        val[utility::conversions::to_string_t("trashedAt")] = ModelBase::toJson(m_TrashedAt);
    }
    if(m_TreeHrefIsSet)
    {
        val[utility::conversions::to_string_t("treeHref")] = ModelBase::toJson(m_TreeHref);
    }
    if(m_UserAccountLimitsBreachedIsSet)
    {
        val[utility::conversions::to_string_t("userAccountLimitsBreached")] = ModelBase::toJson(m_UserAccountLimitsBreached);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTDocumentInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("anonymousAccessAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("anonymousAccessAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_anonymousAccessAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_anonymousAccessAllowed);
            setAnonymousAccessAllowed(refVal_anonymousAccessAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("anonymousAllowsExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("anonymousAllowsExport"));
        if(!fieldValue.is_null())
        {
            bool refVal_anonymousAllowsExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_anonymousAllowsExport);
            setAnonymousAllowsExport(refVal_anonymousAllowsExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("betaCapabilityIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("betaCapabilityIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_betaCapabilityIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_betaCapabilityIds);
            setBetaCapabilityIds(refVal_betaCapabilityIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canMove")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canMove"));
        if(!fieldValue.is_null())
        {
            bool refVal_canMove;
            ok &= ModelBase::fromJson(fieldValue, refVal_canMove);
            setCanMove(refVal_canMove);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canUnshare")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canUnshare"));
        if(!fieldValue.is_null())
        {
            bool refVal_canUnshare;
            ok &= ModelBase::fromJson(fieldValue, refVal_canUnshare);
            setCanUnshare(refVal_canUnshare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdBy);
            setCreatedBy(refVal_createdBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdWithEducationPlan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdWithEducationPlan"));
        if(!fieldValue.is_null())
        {
            bool refVal_createdWithEducationPlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdWithEducationPlan);
            setCreatedWithEducationPlan(refVal_createdWithEducationPlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_defaultElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultElementId);
            setDefaultElementId(refVal_defaultElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultWorkspace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultWorkspace"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTWorkspaceInfo> refVal_defaultWorkspace;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultWorkspace);
            setDefaultWorkspace(refVal_defaultWorkspace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentLabels")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentLabels"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTDocumentLabelInfo>> refVal_documentLabels;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentLabels);
            setDocumentLabels(refVal_documentLabels);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentThumbnailElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentThumbnailElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentThumbnailElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentThumbnailElementId);
            setDocumentThumbnailElementId(refVal_documentThumbnailElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("duplicateNameViolationError")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("duplicateNameViolationError"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_duplicateNameViolationError;
            ok &= ModelBase::fromJson(fieldValue, refVal_duplicateNameViolationError);
            setDuplicateNameViolationError(refVal_duplicateNameViolationError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasReleaseRevisionableObjects")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasReleaseRevisionableObjects"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasReleaseRevisionableObjects;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasReleaseRevisionableObjects);
            setHasReleaseRevisionableObjects(refVal_hasReleaseRevisionableObjects);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasRelevantInsertables")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasRelevantInsertables"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasRelevantInsertables;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasRelevantInsertables);
            setHasRelevantInsertables(refVal_hasRelevantInsertables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isContainer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isContainer"));
        if(!fieldValue.is_null())
        {
            bool refVal_isContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_isContainer);
            setIsContainer(refVal_isContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEnterpriseOwned"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEnterpriseOwned;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEnterpriseOwned);
            setIsEnterpriseOwned(refVal_isEnterpriseOwned);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isMutable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isMutable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isMutable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMutable);
            setIsMutable(refVal_isMutable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isOrphaned")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isOrphaned"));
        if(!fieldValue.is_null())
        {
            bool refVal_isOrphaned;
            ok &= ModelBase::fromJson(fieldValue, refVal_isOrphaned);
            setIsOrphaned(refVal_isOrphaned);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isUpgradedToLatestVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUpgradedToLatestVersion"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUpgradedToLatestVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUpgradedToLatestVersion);
            setIsUpgradedToLatestVersion(refVal_isUpgradedToLatestVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isUsingManagedWorkflow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUsingManagedWorkflow"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUsingManagedWorkflow;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUsingManagedWorkflow);
            setIsUsingManagedWorkflow(refVal_isUsingManagedWorkflow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jsonType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("jsonType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_jsonType;
            ok &= ModelBase::fromJson(fieldValue, refVal_jsonType);
            setJsonType(refVal_jsonType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("likedByCurrentUser")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("likedByCurrentUser"));
        if(!fieldValue.is_null())
        {
            bool refVal_likedByCurrentUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_likedByCurrentUser);
            setLikedByCurrentUser(refVal_likedByCurrentUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("likes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("likes"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_likes;
            ok &= ModelBase::fromJson(fieldValue, refVal_likes);
            setLikes(refVal_likes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_modifiedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedAt);
            setModifiedAt(refVal_modifiedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modifiedBy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modifiedBy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_modifiedBy);
            setModifiedBy(refVal_modifiedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notRevisionManaged")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notRevisionManaged"));
        if(!fieldValue.is_null())
        {
            bool refVal_notRevisionManaged;
            ok &= ModelBase::fromJson(fieldValue, refVal_notRevisionManaged);
            setNotRevisionManaged(refVal_notRevisionManaged);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numberOfTimesCopied")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("numberOfTimesCopied"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_numberOfTimesCopied;
            ok &= ModelBase::fromJson(fieldValue, refVal_numberOfTimesCopied);
            setNumberOfTimesCopied(refVal_numberOfTimesCopied);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numberOfTimesReferenced")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("numberOfTimesReferenced"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_numberOfTimesReferenced;
            ok &= ModelBase::fromJson(fieldValue, refVal_numberOfTimesReferenced);
            setNumberOfTimesReferenced(refVal_numberOfTimesReferenced);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOwnerInfo> refVal_owner;
            ok &= ModelBase::fromJson(fieldValue, refVal_owner);
            setOwner(refVal_owner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permission")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permission"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_permission;
            ok &= ModelBase::fromJson(fieldValue, refVal_permission);
            setPermission(refVal_permission);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("permissionSet")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("permissionSet"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_permissionSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_permissionSet);
            setPermissionSet(refVal_permissionSet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("public")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("public"));
        if(!fieldValue.is_null())
        {
            bool refVal_public;
            ok &= ModelBase::fromJson(fieldValue, refVal_public);
            setRPublic(refVal_public);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recentVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recentVersion"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTBaseInfo> refVal_recentVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_recentVersion);
            setRecentVersion(refVal_recentVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resourceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resourceType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resourceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_resourceType);
            setResourceType(refVal_resourceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportTeamUserAndShared")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportTeamUserAndShared"));
        if(!fieldValue.is_null())
        {
            bool refVal_supportTeamUserAndShared;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportTeamUserAndShared);
            setSupportTeamUserAndShared(refVal_supportTeamUserAndShared);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnail"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnail);
            setThumbnail(refVal_thumbnail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_totalWorkspacesScheduledForUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_totalWorkspacesScheduledForUpdate);
            setTotalWorkspacesScheduledForUpdate(refVal_totalWorkspacesScheduledForUpdate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("totalWorkspacesUpdating")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("totalWorkspacesUpdating"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_totalWorkspacesUpdating;
            ok &= ModelBase::fromJson(fieldValue, refVal_totalWorkspacesUpdating);
            setTotalWorkspacesUpdating(refVal_totalWorkspacesUpdating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trash"));
        if(!fieldValue.is_null())
        {
            bool refVal_trash;
            ok &= ModelBase::fromJson(fieldValue, refVal_trash);
            setTrash(refVal_trash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trashedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trashedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_trashedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_trashedAt);
            setTrashedAt(refVal_trashedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("treeHref")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("treeHref"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_treeHref;
            ok &= ModelBase::fromJson(fieldValue, refVal_treeHref);
            setTreeHref(refVal_treeHref);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userAccountLimitsBreached")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userAccountLimitsBreached"));
        if(!fieldValue.is_null())
        {
            bool refVal_userAccountLimitsBreached;
            ok &= ModelBase::fromJson(fieldValue, refVal_userAccountLimitsBreached);
            setUserAccountLimitsBreached(refVal_userAccountLimitsBreached);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTDocumentInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AnonymousAccessAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anonymousAccessAllowed"), m_AnonymousAccessAllowed));
    }
    if(m_AnonymousAllowsExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anonymousAllowsExport"), m_AnonymousAllowsExport));
    }
    if(m_BetaCapabilityIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("betaCapabilityIds"), m_BetaCapabilityIds));
    }
    if(m_CanMoveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canMove"), m_CanMove));
    }
    if(m_CanUnshareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canUnshare"), m_CanUnshare));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_CreatedWithEducationPlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdWithEducationPlan"), m_CreatedWithEducationPlan));
    }
    if(m_DefaultElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultElementId"), m_DefaultElementId));
    }
    if(m_DefaultWorkspaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultWorkspace"), m_DefaultWorkspace));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DocumentLabelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentLabels"), m_DocumentLabels));
    }
    if(m_DocumentThumbnailElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentThumbnailElementId"), m_DocumentThumbnailElementId));
    }
    if(m_DuplicateNameViolationErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("duplicateNameViolationError"), m_DuplicateNameViolationError));
    }
    if(m_HasReleaseRevisionableObjectsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasReleaseRevisionableObjects"), m_HasReleaseRevisionableObjects));
    }
    if(m_HasRelevantInsertablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasRelevantInsertables"), m_HasRelevantInsertables));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isContainer"), m_IsContainer));
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwned"), m_IsEnterpriseOwned));
    }
    if(m_IsMutableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMutable"), m_IsMutable));
    }
    if(m_IsOrphanedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOrphaned"), m_IsOrphaned));
    }
    if(m_IsUpgradedToLatestVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUpgradedToLatestVersion"), m_IsUpgradedToLatestVersion));
    }
    if(m_IsUsingManagedWorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUsingManagedWorkflow"), m_IsUsingManagedWorkflow));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_LikedByCurrentUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("likedByCurrentUser"), m_LikedByCurrentUser));
    }
    if(m_LikesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("likes"), m_Likes));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_ModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedBy"), m_ModifiedBy));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NotRevisionManagedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notRevisionManaged"), m_NotRevisionManaged));
    }
    if(m_NumberOfTimesCopiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberOfTimesCopied"), m_NumberOfTimesCopied));
    }
    if(m_NumberOfTimesReferencedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numberOfTimesReferenced"), m_NumberOfTimesReferenced));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PermissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permission"), m_Permission));
    }
    if(m_PermissionSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("permissionSet"), m_PermissionSet));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_r_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public"), m_r_public));
    }
    if(m_RecentVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recentVersion"), m_RecentVersion));
    }
    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceType"), m_ResourceType));
    }
    if(m_SupportTeamUserAndSharedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportTeamUserAndShared"), m_SupportTeamUserAndShared));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_ThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnail"), m_Thumbnail));
    }
    if(m_TotalWorkspacesScheduledForUpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate"), m_TotalWorkspacesScheduledForUpdate));
    }
    if(m_TotalWorkspacesUpdatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalWorkspacesUpdating"), m_TotalWorkspacesUpdating));
    }
    if(m_TrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trash"), m_Trash));
    }
    if(m_TrashedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trashedAt"), m_TrashedAt));
    }
    if(m_TreeHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treeHref"), m_TreeHref));
    }
    if(m_UserAccountLimitsBreachedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userAccountLimitsBreached"), m_UserAccountLimitsBreached));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTDocumentInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("anonymousAccessAllowed")))
    {
        bool refVal_anonymousAccessAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anonymousAccessAllowed")), refVal_anonymousAccessAllowed );
        setAnonymousAccessAllowed(refVal_anonymousAccessAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("anonymousAllowsExport")))
    {
        bool refVal_anonymousAllowsExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anonymousAllowsExport")), refVal_anonymousAllowsExport );
        setAnonymousAllowsExport(refVal_anonymousAllowsExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("betaCapabilityIds")))
    {
        std::vector<utility::string_t> refVal_betaCapabilityIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("betaCapabilityIds")), refVal_betaCapabilityIds );
        setBetaCapabilityIds(refVal_betaCapabilityIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canMove")))
    {
        bool refVal_canMove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canMove")), refVal_canMove );
        setCanMove(refVal_canMove);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canUnshare")))
    {
        bool refVal_canUnshare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canUnshare")), refVal_canUnshare );
        setCanUnshare(refVal_canUnshare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdWithEducationPlan")))
    {
        bool refVal_createdWithEducationPlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdWithEducationPlan")), refVal_createdWithEducationPlan );
        setCreatedWithEducationPlan(refVal_createdWithEducationPlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultElementId")))
    {
        utility::string_t refVal_defaultElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultElementId")), refVal_defaultElementId );
        setDefaultElementId(refVal_defaultElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultWorkspace")))
    {
        std::shared_ptr<BTWorkspaceInfo> refVal_defaultWorkspace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultWorkspace")), refVal_defaultWorkspace );
        setDefaultWorkspace(refVal_defaultWorkspace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentLabels")))
    {
        std::vector<std::shared_ptr<BTDocumentLabelInfo>> refVal_documentLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentLabels")), refVal_documentLabels );
        setDocumentLabels(refVal_documentLabels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentThumbnailElementId")))
    {
        utility::string_t refVal_documentThumbnailElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentThumbnailElementId")), refVal_documentThumbnailElementId );
        setDocumentThumbnailElementId(refVal_documentThumbnailElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("duplicateNameViolationError")))
    {
        utility::string_t refVal_duplicateNameViolationError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("duplicateNameViolationError")), refVal_duplicateNameViolationError );
        setDuplicateNameViolationError(refVal_duplicateNameViolationError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasReleaseRevisionableObjects")))
    {
        bool refVal_hasReleaseRevisionableObjects;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasReleaseRevisionableObjects")), refVal_hasReleaseRevisionableObjects );
        setHasReleaseRevisionableObjects(refVal_hasReleaseRevisionableObjects);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasRelevantInsertables")))
    {
        bool refVal_hasRelevantInsertables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasRelevantInsertables")), refVal_hasRelevantInsertables );
        setHasRelevantInsertables(refVal_hasRelevantInsertables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isContainer")))
    {
        bool refVal_isContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isContainer")), refVal_isContainer );
        setIsContainer(refVal_isContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        bool refVal_isEnterpriseOwned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwned")), refVal_isEnterpriseOwned );
        setIsEnterpriseOwned(refVal_isEnterpriseOwned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMutable")))
    {
        bool refVal_isMutable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMutable")), refVal_isMutable );
        setIsMutable(refVal_isMutable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOrphaned")))
    {
        bool refVal_isOrphaned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOrphaned")), refVal_isOrphaned );
        setIsOrphaned(refVal_isOrphaned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUpgradedToLatestVersion")))
    {
        bool refVal_isUpgradedToLatestVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUpgradedToLatestVersion")), refVal_isUpgradedToLatestVersion );
        setIsUpgradedToLatestVersion(refVal_isUpgradedToLatestVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUsingManagedWorkflow")))
    {
        bool refVal_isUsingManagedWorkflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUsingManagedWorkflow")), refVal_isUsingManagedWorkflow );
        setIsUsingManagedWorkflow(refVal_isUsingManagedWorkflow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("likedByCurrentUser")))
    {
        bool refVal_likedByCurrentUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("likedByCurrentUser")), refVal_likedByCurrentUser );
        setLikedByCurrentUser(refVal_likedByCurrentUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("likes")))
    {
        int64_t refVal_likes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("likes")), refVal_likes );
        setLikes(refVal_likes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedBy")), refVal_modifiedBy );
        setModifiedBy(refVal_modifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notRevisionManaged")))
    {
        bool refVal_notRevisionManaged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notRevisionManaged")), refVal_notRevisionManaged );
        setNotRevisionManaged(refVal_notRevisionManaged);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfTimesCopied")))
    {
        int64_t refVal_numberOfTimesCopied;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberOfTimesCopied")), refVal_numberOfTimesCopied );
        setNumberOfTimesCopied(refVal_numberOfTimesCopied);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numberOfTimesReferenced")))
    {
        int64_t refVal_numberOfTimesReferenced;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("numberOfTimesReferenced")), refVal_numberOfTimesReferenced );
        setNumberOfTimesReferenced(refVal_numberOfTimesReferenced);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permission")))
    {
        utility::string_t refVal_permission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permission")), refVal_permission );
        setPermission(refVal_permission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissionSet")))
    {
        std::shared_ptr<Object> refVal_permissionSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("permissionSet")), refVal_permissionSet );
        setPermissionSet(refVal_permissionSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("public")))
    {
        bool refVal_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("public")), refVal_public );
        setRPublic(refVal_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recentVersion")))
    {
        std::shared_ptr<BTBaseInfo> refVal_recentVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recentVersion")), refVal_recentVersion );
        setRecentVersion(refVal_recentVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourceType")))
    {
        utility::string_t refVal_resourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceType")), refVal_resourceType );
        setResourceType(refVal_resourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportTeamUserAndShared")))
    {
        bool refVal_supportTeamUserAndShared;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportTeamUserAndShared")), refVal_supportTeamUserAndShared );
        setSupportTeamUserAndShared(refVal_supportTeamUserAndShared);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnail")))
    {
        std::shared_ptr<BTThumbnailInfo> refVal_thumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnail")), refVal_thumbnail );
        setThumbnail(refVal_thumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")))
    {
        int32_t refVal_totalWorkspacesScheduledForUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalWorkspacesScheduledForUpdate")), refVal_totalWorkspacesScheduledForUpdate );
        setTotalWorkspacesScheduledForUpdate(refVal_totalWorkspacesScheduledForUpdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalWorkspacesUpdating")))
    {
        int32_t refVal_totalWorkspacesUpdating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalWorkspacesUpdating")), refVal_totalWorkspacesUpdating );
        setTotalWorkspacesUpdating(refVal_totalWorkspacesUpdating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trash")))
    {
        bool refVal_trash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trash")), refVal_trash );
        setTrash(refVal_trash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trashedAt")))
    {
        utility::datetime refVal_trashedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trashedAt")), refVal_trashedAt );
        setTrashedAt(refVal_trashedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treeHref")))
    {
        utility::string_t refVal_treeHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treeHref")), refVal_treeHref );
        setTreeHref(refVal_treeHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userAccountLimitsBreached")))
    {
        bool refVal_userAccountLimitsBreached;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userAccountLimitsBreached")), refVal_userAccountLimitsBreached );
        setUserAccountLimitsBreached(refVal_userAccountLimitsBreached);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

bool BTDocumentInfo::isAnonymousAccessAllowed() const
{
    return m_AnonymousAccessAllowed;
}

void BTDocumentInfo::setAnonymousAccessAllowed(bool value)
{
    m_AnonymousAccessAllowed = value;
    m_AnonymousAccessAllowedIsSet = true;
}

bool BTDocumentInfo::anonymousAccessAllowedIsSet() const
{
    return m_AnonymousAccessAllowedIsSet;
}

void BTDocumentInfo::unsetAnonymousAccessAllowed()
{
    m_AnonymousAccessAllowedIsSet = false;
}
bool BTDocumentInfo::isAnonymousAllowsExport() const
{
    return m_AnonymousAllowsExport;
}

void BTDocumentInfo::setAnonymousAllowsExport(bool value)
{
    m_AnonymousAllowsExport = value;
    m_AnonymousAllowsExportIsSet = true;
}

bool BTDocumentInfo::anonymousAllowsExportIsSet() const
{
    return m_AnonymousAllowsExportIsSet;
}

void BTDocumentInfo::unsetAnonymousAllowsExport()
{
    m_AnonymousAllowsExportIsSet = false;
}
std::vector<utility::string_t>& BTDocumentInfo::getBetaCapabilityIds()
{
    return m_BetaCapabilityIds;
}

void BTDocumentInfo::setBetaCapabilityIds(const std::vector<utility::string_t>& value)
{
    m_BetaCapabilityIds = value;
    m_BetaCapabilityIdsIsSet = true;
}

bool BTDocumentInfo::betaCapabilityIdsIsSet() const
{
    return m_BetaCapabilityIdsIsSet;
}

void BTDocumentInfo::unsetBetaCapabilityIds()
{
    m_BetaCapabilityIdsIsSet = false;
}
bool BTDocumentInfo::isCanMove() const
{
    return m_CanMove;
}

void BTDocumentInfo::setCanMove(bool value)
{
    m_CanMove = value;
    m_CanMoveIsSet = true;
}

bool BTDocumentInfo::canMoveIsSet() const
{
    return m_CanMoveIsSet;
}

void BTDocumentInfo::unsetCanMove()
{
    m_CanMoveIsSet = false;
}
bool BTDocumentInfo::isCanUnshare() const
{
    return m_CanUnshare;
}

void BTDocumentInfo::setCanUnshare(bool value)
{
    m_CanUnshare = value;
    m_CanUnshareIsSet = true;
}

bool BTDocumentInfo::canUnshareIsSet() const
{
    return m_CanUnshareIsSet;
}

void BTDocumentInfo::unsetCanUnshare()
{
    m_CanUnshareIsSet = false;
}
utility::datetime BTDocumentInfo::getCreatedAt() const
{
    return m_CreatedAt;
}

void BTDocumentInfo::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BTDocumentInfo::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BTDocumentInfo::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTDocumentInfo::getCreatedBy() const
{
    return m_CreatedBy;
}

void BTDocumentInfo::setCreatedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_CreatedBy = value;
    m_CreatedByIsSet = true;
}

bool BTDocumentInfo::createdByIsSet() const
{
    return m_CreatedByIsSet;
}

void BTDocumentInfo::unsetCreatedBy()
{
    m_CreatedByIsSet = false;
}
bool BTDocumentInfo::isCreatedWithEducationPlan() const
{
    return m_CreatedWithEducationPlan;
}

void BTDocumentInfo::setCreatedWithEducationPlan(bool value)
{
    m_CreatedWithEducationPlan = value;
    m_CreatedWithEducationPlanIsSet = true;
}

bool BTDocumentInfo::createdWithEducationPlanIsSet() const
{
    return m_CreatedWithEducationPlanIsSet;
}

void BTDocumentInfo::unsetCreatedWithEducationPlan()
{
    m_CreatedWithEducationPlanIsSet = false;
}
utility::string_t BTDocumentInfo::getDefaultElementId() const
{
    return m_DefaultElementId;
}

void BTDocumentInfo::setDefaultElementId(const utility::string_t& value)
{
    m_DefaultElementId = value;
    m_DefaultElementIdIsSet = true;
}

bool BTDocumentInfo::defaultElementIdIsSet() const
{
    return m_DefaultElementIdIsSet;
}

void BTDocumentInfo::unsetDefaultElementId()
{
    m_DefaultElementIdIsSet = false;
}
std::shared_ptr<BTWorkspaceInfo> BTDocumentInfo::getDefaultWorkspace() const
{
    return m_DefaultWorkspace;
}

void BTDocumentInfo::setDefaultWorkspace(const std::shared_ptr<BTWorkspaceInfo>& value)
{
    m_DefaultWorkspace = value;
    m_DefaultWorkspaceIsSet = true;
}

bool BTDocumentInfo::defaultWorkspaceIsSet() const
{
    return m_DefaultWorkspaceIsSet;
}

void BTDocumentInfo::unsetDefaultWorkspace()
{
    m_DefaultWorkspaceIsSet = false;
}
utility::string_t BTDocumentInfo::getDescription() const
{
    return m_Description;
}

void BTDocumentInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTDocumentInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTDocumentInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::shared_ptr<BTDocumentLabelInfo>>& BTDocumentInfo::getDocumentLabels()
{
    return m_DocumentLabels;
}

void BTDocumentInfo::setDocumentLabels(const std::vector<std::shared_ptr<BTDocumentLabelInfo>>& value)
{
    m_DocumentLabels = value;
    m_DocumentLabelsIsSet = true;
}

bool BTDocumentInfo::documentLabelsIsSet() const
{
    return m_DocumentLabelsIsSet;
}

void BTDocumentInfo::unsetDocumentLabels()
{
    m_DocumentLabelsIsSet = false;
}
utility::string_t BTDocumentInfo::getDocumentThumbnailElementId() const
{
    return m_DocumentThumbnailElementId;
}

void BTDocumentInfo::setDocumentThumbnailElementId(const utility::string_t& value)
{
    m_DocumentThumbnailElementId = value;
    m_DocumentThumbnailElementIdIsSet = true;
}

bool BTDocumentInfo::documentThumbnailElementIdIsSet() const
{
    return m_DocumentThumbnailElementIdIsSet;
}

void BTDocumentInfo::unsetDocumentThumbnailElementId()
{
    m_DocumentThumbnailElementIdIsSet = false;
}
utility::string_t BTDocumentInfo::getDuplicateNameViolationError() const
{
    return m_DuplicateNameViolationError;
}

void BTDocumentInfo::setDuplicateNameViolationError(const utility::string_t& value)
{
    m_DuplicateNameViolationError = value;
    m_DuplicateNameViolationErrorIsSet = true;
}

bool BTDocumentInfo::duplicateNameViolationErrorIsSet() const
{
    return m_DuplicateNameViolationErrorIsSet;
}

void BTDocumentInfo::unsetDuplicateNameViolationError()
{
    m_DuplicateNameViolationErrorIsSet = false;
}
bool BTDocumentInfo::isHasReleaseRevisionableObjects() const
{
    return m_HasReleaseRevisionableObjects;
}

void BTDocumentInfo::setHasReleaseRevisionableObjects(bool value)
{
    m_HasReleaseRevisionableObjects = value;
    m_HasReleaseRevisionableObjectsIsSet = true;
}

bool BTDocumentInfo::hasReleaseRevisionableObjectsIsSet() const
{
    return m_HasReleaseRevisionableObjectsIsSet;
}

void BTDocumentInfo::unsetHasReleaseRevisionableObjects()
{
    m_HasReleaseRevisionableObjectsIsSet = false;
}
bool BTDocumentInfo::isHasRelevantInsertables() const
{
    return m_HasRelevantInsertables;
}

void BTDocumentInfo::setHasRelevantInsertables(bool value)
{
    m_HasRelevantInsertables = value;
    m_HasRelevantInsertablesIsSet = true;
}

bool BTDocumentInfo::hasRelevantInsertablesIsSet() const
{
    return m_HasRelevantInsertablesIsSet;
}

void BTDocumentInfo::unsetHasRelevantInsertables()
{
    m_HasRelevantInsertablesIsSet = false;
}
utility::string_t BTDocumentInfo::getHref() const
{
    return m_Href;
}

void BTDocumentInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTDocumentInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTDocumentInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTDocumentInfo::getId() const
{
    return m_Id;
}

void BTDocumentInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTDocumentInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTDocumentInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTDocumentInfo::isIsContainer() const
{
    return m_IsContainer;
}

void BTDocumentInfo::setIsContainer(bool value)
{
    m_IsContainer = value;
    m_IsContainerIsSet = true;
}

bool BTDocumentInfo::isContainerIsSet() const
{
    return m_IsContainerIsSet;
}

void BTDocumentInfo::unsetIsContainer()
{
    m_IsContainerIsSet = false;
}
bool BTDocumentInfo::isIsEnterpriseOwned() const
{
    return m_IsEnterpriseOwned;
}

void BTDocumentInfo::setIsEnterpriseOwned(bool value)
{
    m_IsEnterpriseOwned = value;
    m_IsEnterpriseOwnedIsSet = true;
}

bool BTDocumentInfo::isEnterpriseOwnedIsSet() const
{
    return m_IsEnterpriseOwnedIsSet;
}

void BTDocumentInfo::unsetIsEnterpriseOwned()
{
    m_IsEnterpriseOwnedIsSet = false;
}
bool BTDocumentInfo::isIsMutable() const
{
    return m_IsMutable;
}

void BTDocumentInfo::setIsMutable(bool value)
{
    m_IsMutable = value;
    m_IsMutableIsSet = true;
}

bool BTDocumentInfo::isMutableIsSet() const
{
    return m_IsMutableIsSet;
}

void BTDocumentInfo::unsetIsMutable()
{
    m_IsMutableIsSet = false;
}
bool BTDocumentInfo::isIsOrphaned() const
{
    return m_IsOrphaned;
}

void BTDocumentInfo::setIsOrphaned(bool value)
{
    m_IsOrphaned = value;
    m_IsOrphanedIsSet = true;
}

bool BTDocumentInfo::isOrphanedIsSet() const
{
    return m_IsOrphanedIsSet;
}

void BTDocumentInfo::unsetIsOrphaned()
{
    m_IsOrphanedIsSet = false;
}
bool BTDocumentInfo::isIsUpgradedToLatestVersion() const
{
    return m_IsUpgradedToLatestVersion;
}

void BTDocumentInfo::setIsUpgradedToLatestVersion(bool value)
{
    m_IsUpgradedToLatestVersion = value;
    m_IsUpgradedToLatestVersionIsSet = true;
}

bool BTDocumentInfo::isUpgradedToLatestVersionIsSet() const
{
    return m_IsUpgradedToLatestVersionIsSet;
}

void BTDocumentInfo::unsetIsUpgradedToLatestVersion()
{
    m_IsUpgradedToLatestVersionIsSet = false;
}
bool BTDocumentInfo::isIsUsingManagedWorkflow() const
{
    return m_IsUsingManagedWorkflow;
}

void BTDocumentInfo::setIsUsingManagedWorkflow(bool value)
{
    m_IsUsingManagedWorkflow = value;
    m_IsUsingManagedWorkflowIsSet = true;
}

bool BTDocumentInfo::isUsingManagedWorkflowIsSet() const
{
    return m_IsUsingManagedWorkflowIsSet;
}

void BTDocumentInfo::unsetIsUsingManagedWorkflow()
{
    m_IsUsingManagedWorkflowIsSet = false;
}
utility::string_t BTDocumentInfo::getJsonType() const
{
    return m_JsonType;
}

void BTDocumentInfo::setJsonType(const utility::string_t& value)
{
    m_JsonType = value;
    m_JsonTypeIsSet = true;
}

bool BTDocumentInfo::jsonTypeIsSet() const
{
    return m_JsonTypeIsSet;
}

void BTDocumentInfo::unsetJsonType()
{
    m_JsonTypeIsSet = false;
}
bool BTDocumentInfo::isLikedByCurrentUser() const
{
    return m_LikedByCurrentUser;
}

void BTDocumentInfo::setLikedByCurrentUser(bool value)
{
    m_LikedByCurrentUser = value;
    m_LikedByCurrentUserIsSet = true;
}

bool BTDocumentInfo::likedByCurrentUserIsSet() const
{
    return m_LikedByCurrentUserIsSet;
}

void BTDocumentInfo::unsetLikedByCurrentUser()
{
    m_LikedByCurrentUserIsSet = false;
}
int64_t BTDocumentInfo::getLikes() const
{
    return m_Likes;
}

void BTDocumentInfo::setLikes(int64_t value)
{
    m_Likes = value;
    m_LikesIsSet = true;
}

bool BTDocumentInfo::likesIsSet() const
{
    return m_LikesIsSet;
}

void BTDocumentInfo::unsetLikes()
{
    m_LikesIsSet = false;
}
utility::datetime BTDocumentInfo::getModifiedAt() const
{
    return m_ModifiedAt;
}

void BTDocumentInfo::setModifiedAt(const utility::datetime& value)
{
    m_ModifiedAt = value;
    m_ModifiedAtIsSet = true;
}

bool BTDocumentInfo::modifiedAtIsSet() const
{
    return m_ModifiedAtIsSet;
}

void BTDocumentInfo::unsetModifiedAt()
{
    m_ModifiedAtIsSet = false;
}
std::shared_ptr<BTUserBasicSummaryInfo> BTDocumentInfo::getModifiedBy() const
{
    return m_ModifiedBy;
}

void BTDocumentInfo::setModifiedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value)
{
    m_ModifiedBy = value;
    m_ModifiedByIsSet = true;
}

bool BTDocumentInfo::modifiedByIsSet() const
{
    return m_ModifiedByIsSet;
}

void BTDocumentInfo::unsetModifiedBy()
{
    m_ModifiedByIsSet = false;
}
utility::string_t BTDocumentInfo::getName() const
{
    return m_Name;
}

void BTDocumentInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTDocumentInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTDocumentInfo::unsetName()
{
    m_NameIsSet = false;
}
bool BTDocumentInfo::isNotRevisionManaged() const
{
    return m_NotRevisionManaged;
}

void BTDocumentInfo::setNotRevisionManaged(bool value)
{
    m_NotRevisionManaged = value;
    m_NotRevisionManagedIsSet = true;
}

bool BTDocumentInfo::notRevisionManagedIsSet() const
{
    return m_NotRevisionManagedIsSet;
}

void BTDocumentInfo::unsetNotRevisionManaged()
{
    m_NotRevisionManagedIsSet = false;
}
int64_t BTDocumentInfo::getNumberOfTimesCopied() const
{
    return m_NumberOfTimesCopied;
}

void BTDocumentInfo::setNumberOfTimesCopied(int64_t value)
{
    m_NumberOfTimesCopied = value;
    m_NumberOfTimesCopiedIsSet = true;
}

bool BTDocumentInfo::numberOfTimesCopiedIsSet() const
{
    return m_NumberOfTimesCopiedIsSet;
}

void BTDocumentInfo::unsetNumberOfTimesCopied()
{
    m_NumberOfTimesCopiedIsSet = false;
}
int64_t BTDocumentInfo::getNumberOfTimesReferenced() const
{
    return m_NumberOfTimesReferenced;
}

void BTDocumentInfo::setNumberOfTimesReferenced(int64_t value)
{
    m_NumberOfTimesReferenced = value;
    m_NumberOfTimesReferencedIsSet = true;
}

bool BTDocumentInfo::numberOfTimesReferencedIsSet() const
{
    return m_NumberOfTimesReferencedIsSet;
}

void BTDocumentInfo::unsetNumberOfTimesReferenced()
{
    m_NumberOfTimesReferencedIsSet = false;
}
std::shared_ptr<BTOwnerInfo> BTDocumentInfo::getOwner() const
{
    return m_Owner;
}

void BTDocumentInfo::setOwner(const std::shared_ptr<BTOwnerInfo>& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool BTDocumentInfo::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void BTDocumentInfo::unsetOwner()
{
    m_OwnerIsSet = false;
}
utility::string_t BTDocumentInfo::getParentId() const
{
    return m_ParentId;
}

void BTDocumentInfo::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTDocumentInfo::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTDocumentInfo::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTDocumentInfo::getPermission() const
{
    return m_Permission;
}

void BTDocumentInfo::setPermission(const utility::string_t& value)
{
    m_Permission = value;
    m_PermissionIsSet = true;
}

bool BTDocumentInfo::permissionIsSet() const
{
    return m_PermissionIsSet;
}

void BTDocumentInfo::unsetPermission()
{
    m_PermissionIsSet = false;
}
std::shared_ptr<Object> BTDocumentInfo::getPermissionSet() const
{
    return m_PermissionSet;
}

void BTDocumentInfo::setPermissionSet(const std::shared_ptr<Object>& value)
{
    m_PermissionSet = value;
    m_PermissionSetIsSet = true;
}

bool BTDocumentInfo::permissionSetIsSet() const
{
    return m_PermissionSetIsSet;
}

void BTDocumentInfo::unsetPermissionSet()
{
    m_PermissionSetIsSet = false;
}
utility::string_t BTDocumentInfo::getProjectId() const
{
    return m_ProjectId;
}

void BTDocumentInfo::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTDocumentInfo::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTDocumentInfo::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
bool BTDocumentInfo::isRPublic() const
{
    return m_r_public;
}

void BTDocumentInfo::setRPublic(bool value)
{
    m_r_public = value;
    m_r_publicIsSet = true;
}

bool BTDocumentInfo::rPublicIsSet() const
{
    return m_r_publicIsSet;
}

void BTDocumentInfo::unsetr_public()
{
    m_r_publicIsSet = false;
}
std::shared_ptr<BTBaseInfo> BTDocumentInfo::getRecentVersion() const
{
    return m_RecentVersion;
}

void BTDocumentInfo::setRecentVersion(const std::shared_ptr<BTBaseInfo>& value)
{
    m_RecentVersion = value;
    m_RecentVersionIsSet = true;
}

bool BTDocumentInfo::recentVersionIsSet() const
{
    return m_RecentVersionIsSet;
}

void BTDocumentInfo::unsetRecentVersion()
{
    m_RecentVersionIsSet = false;
}
utility::string_t BTDocumentInfo::getResourceType() const
{
    return m_ResourceType;
}

void BTDocumentInfo::setResourceType(const utility::string_t& value)
{
    m_ResourceType = value;
    m_ResourceTypeIsSet = true;
}

bool BTDocumentInfo::resourceTypeIsSet() const
{
    return m_ResourceTypeIsSet;
}

void BTDocumentInfo::unsetResourceType()
{
    m_ResourceTypeIsSet = false;
}
bool BTDocumentInfo::isSupportTeamUserAndShared() const
{
    return m_SupportTeamUserAndShared;
}

void BTDocumentInfo::setSupportTeamUserAndShared(bool value)
{
    m_SupportTeamUserAndShared = value;
    m_SupportTeamUserAndSharedIsSet = true;
}

bool BTDocumentInfo::supportTeamUserAndSharedIsSet() const
{
    return m_SupportTeamUserAndSharedIsSet;
}

void BTDocumentInfo::unsetSupportTeamUserAndShared()
{
    m_SupportTeamUserAndSharedIsSet = false;
}
std::vector<utility::string_t>& BTDocumentInfo::getTags()
{
    return m_Tags;
}

void BTDocumentInfo::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool BTDocumentInfo::tagsIsSet() const
{
    return m_TagsIsSet;
}

void BTDocumentInfo::unsetTags()
{
    m_TagsIsSet = false;
}
std::shared_ptr<BTThumbnailInfo> BTDocumentInfo::getThumbnail() const
{
    return m_Thumbnail;
}

void BTDocumentInfo::setThumbnail(const std::shared_ptr<BTThumbnailInfo>& value)
{
    m_Thumbnail = value;
    m_ThumbnailIsSet = true;
}

bool BTDocumentInfo::thumbnailIsSet() const
{
    return m_ThumbnailIsSet;
}

void BTDocumentInfo::unsetThumbnail()
{
    m_ThumbnailIsSet = false;
}
int32_t BTDocumentInfo::getTotalWorkspacesScheduledForUpdate() const
{
    return m_TotalWorkspacesScheduledForUpdate;
}

void BTDocumentInfo::setTotalWorkspacesScheduledForUpdate(int32_t value)
{
    m_TotalWorkspacesScheduledForUpdate = value;
    m_TotalWorkspacesScheduledForUpdateIsSet = true;
}

bool BTDocumentInfo::totalWorkspacesScheduledForUpdateIsSet() const
{
    return m_TotalWorkspacesScheduledForUpdateIsSet;
}

void BTDocumentInfo::unsetTotalWorkspacesScheduledForUpdate()
{
    m_TotalWorkspacesScheduledForUpdateIsSet = false;
}
int32_t BTDocumentInfo::getTotalWorkspacesUpdating() const
{
    return m_TotalWorkspacesUpdating;
}

void BTDocumentInfo::setTotalWorkspacesUpdating(int32_t value)
{
    m_TotalWorkspacesUpdating = value;
    m_TotalWorkspacesUpdatingIsSet = true;
}

bool BTDocumentInfo::totalWorkspacesUpdatingIsSet() const
{
    return m_TotalWorkspacesUpdatingIsSet;
}

void BTDocumentInfo::unsetTotalWorkspacesUpdating()
{
    m_TotalWorkspacesUpdatingIsSet = false;
}
bool BTDocumentInfo::isTrash() const
{
    return m_Trash;
}

void BTDocumentInfo::setTrash(bool value)
{
    m_Trash = value;
    m_TrashIsSet = true;
}

bool BTDocumentInfo::trashIsSet() const
{
    return m_TrashIsSet;
}

void BTDocumentInfo::unsetTrash()
{
    m_TrashIsSet = false;
}
utility::datetime BTDocumentInfo::getTrashedAt() const
{
    return m_TrashedAt;
}

void BTDocumentInfo::setTrashedAt(const utility::datetime& value)
{
    m_TrashedAt = value;
    m_TrashedAtIsSet = true;
}

bool BTDocumentInfo::trashedAtIsSet() const
{
    return m_TrashedAtIsSet;
}

void BTDocumentInfo::unsetTrashedAt()
{
    m_TrashedAtIsSet = false;
}
utility::string_t BTDocumentInfo::getTreeHref() const
{
    return m_TreeHref;
}

void BTDocumentInfo::setTreeHref(const utility::string_t& value)
{
    m_TreeHref = value;
    m_TreeHrefIsSet = true;
}

bool BTDocumentInfo::treeHrefIsSet() const
{
    return m_TreeHrefIsSet;
}

void BTDocumentInfo::unsetTreeHref()
{
    m_TreeHrefIsSet = false;
}
bool BTDocumentInfo::isUserAccountLimitsBreached() const
{
    return m_UserAccountLimitsBreached;
}

void BTDocumentInfo::setUserAccountLimitsBreached(bool value)
{
    m_UserAccountLimitsBreached = value;
    m_UserAccountLimitsBreachedIsSet = true;
}

bool BTDocumentInfo::userAccountLimitsBreachedIsSet() const
{
    return m_UserAccountLimitsBreachedIsSet;
}

void BTDocumentInfo::unsetUserAccountLimitsBreached()
{
    m_UserAccountLimitsBreachedIsSet = false;
}
utility::string_t BTDocumentInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTDocumentInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTDocumentInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTDocumentInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


