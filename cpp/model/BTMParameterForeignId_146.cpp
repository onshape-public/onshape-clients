/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterForeignId_146.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterForeignId_146::BTMParameterForeignId_146()
{
    m_ForeignId = utility::conversions::to_string_t("");
    m_ForeignIdIsSet = false;
    m_LocationInfoIsSet = false;
    m_ForeignName = utility::conversions::to_string_t("");
    m_ForeignNameIsSet = false;
}

BTMParameterForeignId_146::~BTMParameterForeignId_146()
{
}

void BTMParameterForeignId_146::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterForeignId_146::toJson() const
{
    web::json::value val = this->BTMParameter_1::toJson();
    
    if(m_ForeignIdIsSet)
    {
        val[utility::conversions::to_string_t("foreignId")] = ModelBase::toJson(m_ForeignId);
    }
    if(m_LocationInfoIsSet)
    {
        val[utility::conversions::to_string_t("locationInfo")] = ModelBase::toJson(m_LocationInfo);
    }
    if(m_ForeignNameIsSet)
    {
        val[utility::conversions::to_string_t("foreignName")] = ModelBase::toJson(m_ForeignName);
    }

    return val;
}

bool BTMParameterForeignId_146::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMParameter_1::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("foreignId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foreignId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_foreignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_foreignId);
            setForeignId(refVal_foreignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locationInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTForeignDataResponse_1070> refVal_locationInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationInfo);
            setLocationInfo(refVal_locationInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foreignName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foreignName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_foreignName;
            ok &= ModelBase::fromJson(fieldValue, refVal_foreignName);
            setForeignName(refVal_foreignName);
        }
    }
    return ok;
}

void BTMParameterForeignId_146::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ForeignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignId"), m_ForeignId));
    }
    if(m_LocationInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationInfo"), m_LocationInfo));
    }
    if(m_ForeignNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignName"), m_ForeignName));
    }
}

bool BTMParameterForeignId_146::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignId")))
    {
        utility::string_t refVal_foreignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignId")), refVal_foreignId );
        setForeignId(refVal_foreignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationInfo")))
    {
        std::shared_ptr<BTForeignDataResponse_1070> refVal_locationInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationInfo")), refVal_locationInfo );
        setLocationInfo(refVal_locationInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignName")))
    {
        utility::string_t refVal_foreignName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignName")), refVal_foreignName );
        setForeignName(refVal_foreignName);
    }
    return ok;
}

utility::string_t BTMParameterForeignId_146::getForeignId() const
{
    return m_ForeignId;
}

void BTMParameterForeignId_146::setForeignId(const utility::string_t& value)
{
    m_ForeignId = value;
    m_ForeignIdIsSet = true;
}

bool BTMParameterForeignId_146::foreignIdIsSet() const
{
    return m_ForeignIdIsSet;
}

void BTMParameterForeignId_146::unsetForeignId()
{
    m_ForeignIdIsSet = false;
}
std::shared_ptr<BTForeignDataResponse_1070> BTMParameterForeignId_146::getLocationInfo() const
{
    return m_LocationInfo;
}

void BTMParameterForeignId_146::setLocationInfo(const std::shared_ptr<BTForeignDataResponse_1070>& value)
{
    m_LocationInfo = value;
    m_LocationInfoIsSet = true;
}

bool BTMParameterForeignId_146::locationInfoIsSet() const
{
    return m_LocationInfoIsSet;
}

void BTMParameterForeignId_146::unsetLocationInfo()
{
    m_LocationInfoIsSet = false;
}
utility::string_t BTMParameterForeignId_146::getForeignName() const
{
    return m_ForeignName;
}

void BTMParameterForeignId_146::setForeignName(const utility::string_t& value)
{
    m_ForeignName = value;
    m_ForeignNameIsSet = true;
}

bool BTMParameterForeignId_146::foreignNameIsSet() const
{
    return m_ForeignNameIsSet;
}

void BTMParameterForeignId_146::unsetForeignName()
{
    m_ForeignNameIsSet = false;
}
}
}
}
}


