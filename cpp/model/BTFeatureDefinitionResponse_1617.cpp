/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureDefinitionResponse_1617.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureDefinitionResponse_1617::BTFeatureDefinitionResponse_1617()
{
    m_FeatureStateIsSet = false;
    m_FeatureIsSet = false;
}

BTFeatureDefinitionResponse_1617::~BTFeatureDefinitionResponse_1617()
{
}

void BTFeatureDefinitionResponse_1617::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureDefinitionResponse_1617::toJson() const
{
    web::json::value val = this->BTFeatureApiBase_1430::toJson();
    
    if(m_FeatureStateIsSet)
    {
        val[utility::conversions::to_string_t("featureState")] = ModelBase::toJson(m_FeatureState);
    }
    if(m_FeatureIsSet)
    {
        val[utility::conversions::to_string_t("feature")] = ModelBase::toJson(m_Feature);
    }

    return val;
}

bool BTFeatureDefinitionResponse_1617::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTFeatureApiBase_1430::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("featureState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureState"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTFeatureState_1688> refVal_featureState;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureState);
            setFeatureState(refVal_featureState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("feature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("feature"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMFeature_134> refVal_feature;
            ok &= ModelBase::fromJson(fieldValue, refVal_feature);
            setFeature(refVal_feature);
        }
    }
    return ok;
}

void BTFeatureDefinitionResponse_1617::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_LibraryVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryVersion"), m_LibraryVersion));
    }
    if(m_MicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionSkew"), m_MicroversionSkew));
    }
    if(m_RejectMicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rejectMicroversionSkew"), m_RejectMicroversionSkew));
    }
    if(m_SerializationVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serializationVersion"), m_SerializationVersion));
    }
    if(m_SourceMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversion"), m_SourceMicroversion));
    }
    if(m_FeatureStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureState"), m_FeatureState));
    }
    if(m_FeatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("feature"), m_Feature));
    }
}

bool BTFeatureDefinitionResponse_1617::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryVersion")))
    {
        int32_t refVal_libraryVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryVersion")), refVal_libraryVersion );
        setLibraryVersion(refVal_libraryVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionSkew")))
    {
        bool refVal_microversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionSkew")), refVal_microversionSkew );
        setMicroversionSkew(refVal_microversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rejectMicroversionSkew")))
    {
        bool refVal_rejectMicroversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rejectMicroversionSkew")), refVal_rejectMicroversionSkew );
        setRejectMicroversionSkew(refVal_rejectMicroversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serializationVersion")))
    {
        utility::string_t refVal_serializationVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serializationVersion")), refVal_serializationVersion );
        setSerializationVersion(refVal_serializationVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversion")))
    {
        utility::string_t refVal_sourceMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversion")), refVal_sourceMicroversion );
        setSourceMicroversion(refVal_sourceMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureState")))
    {
        std::shared_ptr<BTFeatureState_1688> refVal_featureState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureState")), refVal_featureState );
        setFeatureState(refVal_featureState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("feature")))
    {
        std::shared_ptr<BTMFeature_134> refVal_feature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("feature")), refVal_feature );
        setFeature(refVal_feature);
    }
    return ok;
}

std::shared_ptr<BTFeatureState_1688> BTFeatureDefinitionResponse_1617::getFeatureState() const
{
    return m_FeatureState;
}

void BTFeatureDefinitionResponse_1617::setFeatureState(const std::shared_ptr<BTFeatureState_1688>& value)
{
    m_FeatureState = value;
    m_FeatureStateIsSet = true;
}

bool BTFeatureDefinitionResponse_1617::featureStateIsSet() const
{
    return m_FeatureStateIsSet;
}

void BTFeatureDefinitionResponse_1617::unsetFeatureState()
{
    m_FeatureStateIsSet = false;
}
std::shared_ptr<BTMFeature_134> BTFeatureDefinitionResponse_1617::getFeature() const
{
    return m_Feature;
}

void BTFeatureDefinitionResponse_1617::setFeature(const std::shared_ptr<BTMFeature_134>& value)
{
    m_Feature = value;
    m_FeatureIsSet = true;
}

bool BTFeatureDefinitionResponse_1617::featureIsSet() const
{
    return m_FeatureIsSet;
}

void BTFeatureDefinitionResponse_1617::unsetFeature()
{
    m_FeatureIsSet = false;
}
}
}
}
}


