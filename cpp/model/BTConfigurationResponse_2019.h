/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTConfigurationResponse_2019.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTConfigurationResponse_2019_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTConfigurationResponse_2019_H_


#include "../ModelBase.h"

#include "BTMParameter_1.h"
#include <cpprest/details/basic_types.h>
#include "BTMConfigurationParameter_819.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTConfigurationResponse_2019
    : public ModelBase
{
public:
    BTConfigurationResponse_2019();
    virtual ~BTConfigurationResponse_2019();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTConfigurationResponse_2019 members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMConfigurationParameter_819>>& getConfigurationParameters();
    bool configurationParametersIsSet() const;
    void unsetConfigurationParameters();

    void setConfigurationParameters(const std::vector<std::shared_ptr<BTMConfigurationParameter_819>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMParameter_1>>& getCurrentConfiguration();
    bool currentConfigurationIsSet() const;
    void unsetCurrentConfiguration();

    void setCurrentConfiguration(const std::vector<std::shared_ptr<BTMParameter_1>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLibraryVersion() const;
    bool libraryVersionIsSet() const;
    void unsetLibraryVersion();

    void setLibraryVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isMicroversionSkew() const;
    bool microversionSkewIsSet() const;
    void unsetMicroversionSkew();

    void setMicroversionSkew(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isRejectMicroversionSkew() const;
    bool rejectMicroversionSkewIsSet() const;
    void unsetRejectMicroversionSkew();

    void setRejectMicroversionSkew(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSerializationVersion() const;
    bool serializationVersionIsSet() const;
    void unsetSerializationVersion();

    void setSerializationVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceMicroversion() const;
    bool sourceMicroversionIsSet() const;
    void unsetSourceMicroversion();

    void setSourceMicroversion(const utility::string_t& value);


protected:
    std::vector<std::shared_ptr<BTMConfigurationParameter_819>> m_ConfigurationParameters;
    bool m_ConfigurationParametersIsSet;
    std::vector<std::shared_ptr<BTMParameter_1>> m_CurrentConfiguration;
    bool m_CurrentConfigurationIsSet;
    int32_t m_LibraryVersion;
    bool m_LibraryVersionIsSet;
    bool m_MicroversionSkew;
    bool m_MicroversionSkewIsSet;
    bool m_RejectMicroversionSkew;
    bool m_RejectMicroversionSkewIsSet;
    utility::string_t m_SerializationVersion;
    bool m_SerializationVersionIsSet;
    utility::string_t m_SourceMicroversion;
    bool m_SourceMicroversionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTConfigurationResponse_2019_H_ */
