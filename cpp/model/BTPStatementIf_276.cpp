/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementIf_276.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementIf_276::BTPStatementIf_276()
{
    m_ConditionIsSet = false;
    m_SpaceAfterIfIsSet = false;
    m_ThenBodyIsSet = false;
    m_ElseBodyIsSet = false;
}

BTPStatementIf_276::~BTPStatementIf_276()
{
}

void BTPStatementIf_276::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementIf_276::toJson() const
{
    web::json::value val = this->BTPStatement_269::toJson();
    
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t("condition")] = ModelBase::toJson(m_Condition);
    }
    if(m_SpaceAfterIfIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterIf")] = ModelBase::toJson(m_SpaceAfterIf);
    }
    if(m_ThenBodyIsSet)
    {
        val[utility::conversions::to_string_t("thenBody")] = ModelBase::toJson(m_ThenBody);
    }
    if(m_ElseBodyIsSet)
    {
        val[utility::conversions::to_string_t("elseBody")] = ModelBase::toJson(m_ElseBody);
    }

    return val;
}

bool BTPStatementIf_276::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPStatement_269::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("condition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("condition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_condition;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition);
            setCondition(refVal_condition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterIf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterIf"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterIf;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterIf);
            setSpaceAfterIf(refVal_spaceAfterIf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thenBody")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thenBody"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_thenBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_thenBody);
            setThenBody(refVal_thenBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elseBody")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elseBody"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_elseBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_elseBody);
            setElseBody(refVal_elseBody);
        }
    }
    return ok;
}

void BTPStatementIf_276::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("condition"), m_Condition));
    }
    if(m_SpaceAfterIfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterIf"), m_SpaceAfterIf));
    }
    if(m_ThenBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thenBody"), m_ThenBody));
    }
    if(m_ElseBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elseBody"), m_ElseBody));
    }
}

bool BTPStatementIf_276::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("condition")))
    {
        std::shared_ptr<BTPExpression_9> refVal_condition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("condition")), refVal_condition );
        setCondition(refVal_condition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterIf")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterIf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterIf")), refVal_spaceAfterIf );
        setSpaceAfterIf(refVal_spaceAfterIf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thenBody")))
    {
        std::shared_ptr<BTPStatement_269> refVal_thenBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thenBody")), refVal_thenBody );
        setThenBody(refVal_thenBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elseBody")))
    {
        std::shared_ptr<BTPStatement_269> refVal_elseBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elseBody")), refVal_elseBody );
        setElseBody(refVal_elseBody);
    }
    return ok;
}

std::shared_ptr<BTPExpression_9> BTPStatementIf_276::getCondition() const
{
    return m_Condition;
}

void BTPStatementIf_276::setCondition(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool BTPStatementIf_276::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void BTPStatementIf_276::unsetCondition()
{
    m_ConditionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementIf_276::getSpaceAfterIf() const
{
    return m_SpaceAfterIf;
}

void BTPStatementIf_276::setSpaceAfterIf(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterIf = value;
    m_SpaceAfterIfIsSet = true;
}

bool BTPStatementIf_276::spaceAfterIfIsSet() const
{
    return m_SpaceAfterIfIsSet;
}

void BTPStatementIf_276::unsetSpaceAfterIf()
{
    m_SpaceAfterIfIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementIf_276::getThenBody() const
{
    return m_ThenBody;
}

void BTPStatementIf_276::setThenBody(const std::shared_ptr<BTPStatement_269>& value)
{
    m_ThenBody = value;
    m_ThenBodyIsSet = true;
}

bool BTPStatementIf_276::thenBodyIsSet() const
{
    return m_ThenBodyIsSet;
}

void BTPStatementIf_276::unsetThenBody()
{
    m_ThenBodyIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementIf_276::getElseBody() const
{
    return m_ElseBody;
}

void BTPStatementIf_276::setElseBody(const std::shared_ptr<BTPStatement_269>& value)
{
    m_ElseBody = value;
    m_ElseBodyIsSet = true;
}

bool BTPStatementIf_276::elseBodyIsSet() const
{
    return m_ElseBodyIsSet;
}

void BTPStatementIf_276::unsetElseBody()
{
    m_ElseBodyIsSet = false;
}
}
}
}
}


