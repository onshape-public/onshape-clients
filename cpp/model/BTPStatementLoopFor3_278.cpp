/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPStatementLoopFor3_278.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPStatementLoopFor3_278::BTPStatementLoopFor3_278()
{
    m_ConditionIsSet = false;
    m_InitializationIsSet = false;
    m_SpaceAfterInitializationIsSet = false;
    m_SpaceBeforeConditionIsSet = false;
    m_SpaceBeforeIncrementIsSet = false;
    m_IncrementIsSet = false;
}

BTPStatementLoopFor3_278::~BTPStatementLoopFor3_278()
{
}

void BTPStatementLoopFor3_278::validate()
{
    // TODO: implement validation
}

web::json::value BTPStatementLoopFor3_278::toJson() const
{
    web::json::value val = this->BTPStatementLoop_277::toJson();
    
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t("condition")] = ModelBase::toJson(m_Condition);
    }
    if(m_InitializationIsSet)
    {
        val[utility::conversions::to_string_t("initialization")] = ModelBase::toJson(m_Initialization);
    }
    if(m_SpaceAfterInitializationIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterInitialization")] = ModelBase::toJson(m_SpaceAfterInitialization);
    }
    if(m_SpaceBeforeConditionIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeCondition")] = ModelBase::toJson(m_SpaceBeforeCondition);
    }
    if(m_SpaceBeforeIncrementIsSet)
    {
        val[utility::conversions::to_string_t("spaceBeforeIncrement")] = ModelBase::toJson(m_SpaceBeforeIncrement);
    }
    if(m_IncrementIsSet)
    {
        val[utility::conversions::to_string_t("increment")] = ModelBase::toJson(m_Increment);
    }

    return val;
}

bool BTPStatementLoopFor3_278::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPStatementLoop_277::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("condition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("condition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_condition;
            ok &= ModelBase::fromJson(fieldValue, refVal_condition);
            setCondition(refVal_condition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initialization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("initialization"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_initialization;
            ok &= ModelBase::fromJson(fieldValue, refVal_initialization);
            setInitialization(refVal_initialization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterInitialization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterInitialization"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterInitialization;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterInitialization);
            setSpaceAfterInitialization(refVal_spaceAfterInitialization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeCondition")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeCondition"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeCondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeCondition);
            setSpaceBeforeCondition(refVal_spaceBeforeCondition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceBeforeIncrement")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceBeforeIncrement"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceBeforeIncrement;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceBeforeIncrement);
            setSpaceBeforeIncrement(refVal_spaceBeforeIncrement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("increment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("increment"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_increment;
            ok &= ModelBase::fromJson(fieldValue, refVal_increment);
            setIncrement(refVal_increment);
        }
    }
    return ok;
}

void BTPStatementLoopFor3_278::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_SpaceAfterLoopTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterLoopType"), m_SpaceAfterLoopType));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("condition"), m_Condition));
    }
    if(m_InitializationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initialization"), m_Initialization));
    }
    if(m_SpaceAfterInitializationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterInitialization"), m_SpaceAfterInitialization));
    }
    if(m_SpaceBeforeConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeCondition"), m_SpaceBeforeCondition));
    }
    if(m_SpaceBeforeIncrementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBeforeIncrement"), m_SpaceBeforeIncrement));
    }
    if(m_IncrementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("increment"), m_Increment));
    }
}

bool BTPStatementLoopFor3_278::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        std::shared_ptr<BTPStatement_269> refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterLoopType")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterLoopType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterLoopType")), refVal_spaceAfterLoopType );
        setSpaceAfterLoopType(refVal_spaceAfterLoopType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("condition")))
    {
        std::shared_ptr<BTPExpression_9> refVal_condition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("condition")), refVal_condition );
        setCondition(refVal_condition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initialization")))
    {
        std::shared_ptr<BTPStatement_269> refVal_initialization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("initialization")), refVal_initialization );
        setInitialization(refVal_initialization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterInitialization")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterInitialization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterInitialization")), refVal_spaceAfterInitialization );
        setSpaceAfterInitialization(refVal_spaceAfterInitialization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeCondition")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeCondition")), refVal_spaceBeforeCondition );
        setSpaceBeforeCondition(refVal_spaceBeforeCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBeforeIncrement")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBeforeIncrement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBeforeIncrement")), refVal_spaceBeforeIncrement );
        setSpaceBeforeIncrement(refVal_spaceBeforeIncrement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("increment")))
    {
        std::shared_ptr<BTPStatement_269> refVal_increment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("increment")), refVal_increment );
        setIncrement(refVal_increment);
    }
    return ok;
}

std::shared_ptr<BTPExpression_9> BTPStatementLoopFor3_278::getCondition() const
{
    return m_Condition;
}

void BTPStatementLoopFor3_278::setCondition(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool BTPStatementLoopFor3_278::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void BTPStatementLoopFor3_278::unsetCondition()
{
    m_ConditionIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementLoopFor3_278::getInitialization() const
{
    return m_Initialization;
}

void BTPStatementLoopFor3_278::setInitialization(const std::shared_ptr<BTPStatement_269>& value)
{
    m_Initialization = value;
    m_InitializationIsSet = true;
}

bool BTPStatementLoopFor3_278::initializationIsSet() const
{
    return m_InitializationIsSet;
}

void BTPStatementLoopFor3_278::unsetInitialization()
{
    m_InitializationIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278::getSpaceAfterInitialization() const
{
    return m_SpaceAfterInitialization;
}

void BTPStatementLoopFor3_278::setSpaceAfterInitialization(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterInitialization = value;
    m_SpaceAfterInitializationIsSet = true;
}

bool BTPStatementLoopFor3_278::spaceAfterInitializationIsSet() const
{
    return m_SpaceAfterInitializationIsSet;
}

void BTPStatementLoopFor3_278::unsetSpaceAfterInitialization()
{
    m_SpaceAfterInitializationIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278::getSpaceBeforeCondition() const
{
    return m_SpaceBeforeCondition;
}

void BTPStatementLoopFor3_278::setSpaceBeforeCondition(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeCondition = value;
    m_SpaceBeforeConditionIsSet = true;
}

bool BTPStatementLoopFor3_278::spaceBeforeConditionIsSet() const
{
    return m_SpaceBeforeConditionIsSet;
}

void BTPStatementLoopFor3_278::unsetSpaceBeforeCondition()
{
    m_SpaceBeforeConditionIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPStatementLoopFor3_278::getSpaceBeforeIncrement() const
{
    return m_SpaceBeforeIncrement;
}

void BTPStatementLoopFor3_278::setSpaceBeforeIncrement(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceBeforeIncrement = value;
    m_SpaceBeforeIncrementIsSet = true;
}

bool BTPStatementLoopFor3_278::spaceBeforeIncrementIsSet() const
{
    return m_SpaceBeforeIncrementIsSet;
}

void BTPStatementLoopFor3_278::unsetSpaceBeforeIncrement()
{
    m_SpaceBeforeIncrementIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTPStatementLoopFor3_278::getIncrement() const
{
    return m_Increment;
}

void BTPStatementLoopFor3_278::setIncrement(const std::shared_ptr<BTPStatement_269>& value)
{
    m_Increment = value;
    m_IncrementIsSet = true;
}

bool BTPStatementLoopFor3_278::incrementIsSet() const
{
    return m_IncrementIsSet;
}

void BTPStatementLoopFor3_278::unsetIncrement()
{
    m_IncrementIsSet = false;
}
}
}
}
}


