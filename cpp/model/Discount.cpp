/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Discount.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Discount::Discount()
{
    m_CouponIsSet = false;
    m_Customer = utility::conversions::to_string_t("");
    m_CustomerIsSet = false;
    m_End = 0L;
    m_EndIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_Start = 0L;
    m_StartIsSet = false;
    m_Subscription = utility::conversions::to_string_t("");
    m_SubscriptionIsSet = false;
}

Discount::~Discount()
{
}

void Discount::validate()
{
    // TODO: implement validation
}

web::json::value Discount::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CouponIsSet)
    {
        val[utility::conversions::to_string_t("coupon")] = ModelBase::toJson(m_Coupon);
    }
    if(m_CustomerIsSet)
    {
        val[utility::conversions::to_string_t("customer")] = ModelBase::toJson(m_Customer);
    }
    if(m_EndIsSet)
    {
        val[utility::conversions::to_string_t("end")] = ModelBase::toJson(m_End);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t("start")] = ModelBase::toJson(m_Start);
    }
    if(m_SubscriptionIsSet)
    {
        val[utility::conversions::to_string_t("subscription")] = ModelBase::toJson(m_Subscription);
    }

    return val;
}

bool Discount::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("coupon")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coupon"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Coupon> refVal_coupon;
            ok &= ModelBase::fromJson(fieldValue, refVal_coupon);
            setCoupon(refVal_coupon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customer;
            ok &= ModelBase::fromJson(fieldValue, refVal_customer);
            setCustomer(refVal_customer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("end")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("end"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_end;
            ok &= ModelBase::fromJson(fieldValue, refVal_end);
            setEnd(refVal_end);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("start")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("start"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_start;
            ok &= ModelBase::fromJson(fieldValue, refVal_start);
            setStart(refVal_start);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscription"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscription;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscription);
            setSubscription(refVal_subscription);
        }
    }
    return ok;
}

void Discount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CouponIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coupon"), m_Coupon));
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customer"), m_Customer));
    }
    if(m_EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("end"), m_End));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("start"), m_Start));
    }
    if(m_SubscriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscription"), m_Subscription));
    }
}

bool Discount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("coupon")))
    {
        std::shared_ptr<Coupon> refVal_coupon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("coupon")), refVal_coupon );
        setCoupon(refVal_coupon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customer")))
    {
        utility::string_t refVal_customer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customer")), refVal_customer );
        setCustomer(refVal_customer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("end")))
    {
        int64_t refVal_end;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("end")), refVal_end );
        setEnd(refVal_end);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("start")))
    {
        int64_t refVal_start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("start")), refVal_start );
        setStart(refVal_start);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscription")))
    {
        utility::string_t refVal_subscription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscription")), refVal_subscription );
        setSubscription(refVal_subscription);
    }
    return ok;
}

std::shared_ptr<Coupon> Discount::getCoupon() const
{
    return m_Coupon;
}

void Discount::setCoupon(const std::shared_ptr<Coupon>& value)
{
    m_Coupon = value;
    m_CouponIsSet = true;
}

bool Discount::couponIsSet() const
{
    return m_CouponIsSet;
}

void Discount::unsetCoupon()
{
    m_CouponIsSet = false;
}
utility::string_t Discount::getCustomer() const
{
    return m_Customer;
}

void Discount::setCustomer(const utility::string_t& value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}

bool Discount::customerIsSet() const
{
    return m_CustomerIsSet;
}

void Discount::unsetCustomer()
{
    m_CustomerIsSet = false;
}
int64_t Discount::getEnd() const
{
    return m_End;
}

void Discount::setEnd(int64_t value)
{
    m_End = value;
    m_EndIsSet = true;
}

bool Discount::endIsSet() const
{
    return m_EndIsSet;
}

void Discount::unsetEnd()
{
    m_EndIsSet = false;
}
utility::string_t Discount::getId() const
{
    return m_Id;
}

void Discount::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Discount::idIsSet() const
{
    return m_IdIsSet;
}

void Discount::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Discount::getObject() const
{
    return m_object;
}

void Discount::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool Discount::objectIsSet() const
{
    return m_objectIsSet;
}

void Discount::unsetobject()
{
    m_objectIsSet = false;
}
int64_t Discount::getStart() const
{
    return m_Start;
}

void Discount::setStart(int64_t value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool Discount::startIsSet() const
{
    return m_StartIsSet;
}

void Discount::unsetStart()
{
    m_StartIsSet = false;
}
utility::string_t Discount::getSubscription() const
{
    return m_Subscription;
}

void Discount::setSubscription(const utility::string_t& value)
{
    m_Subscription = value;
    m_SubscriptionIsSet = true;
}

bool Discount::subscriptionIsSet() const
{
    return m_SubscriptionIsSet;
}

void Discount::unsetSubscription()
{
    m_SubscriptionIsSet = false;
}
}
}
}
}


