/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMImport_136.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMImport_136_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMImport_136_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMImport_136
    : public ModelBase
{
public:
    BTMImport_136();
    virtual ~BTMImport_136();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMImport_136 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isElementImport() const;
    bool elementImportIsSet() const;
    void unsetElementImport();

    void setElementImport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportMicroversion() const;
    bool importMicroversionIsSet() const;
    void unsetImportMicroversion();

    void setImportMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImportedExternalDocumentId() const;
    bool importedExternalDocumentIdIsSet() const;
    void unsetImportedExternalDocumentId();

    void setImportedExternalDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodeId() const;
    bool nodeIdIsSet() const;
    void unsetNodeId();

    void setNodeId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPath() const;
    bool pathIsSet() const;
    void unsetPath();

    void setPath(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    bool m_ElementImport;
    bool m_ElementImportIsSet;
    utility::string_t m_ImportMicroversion;
    bool m_ImportMicroversionIsSet;
    utility::string_t m_ImportedExternalDocumentId;
    bool m_ImportedExternalDocumentIdIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_NodeId;
    bool m_NodeIdIsSet;
    utility::string_t m_Path;
    bool m_PathIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMImport_136_H_ */
