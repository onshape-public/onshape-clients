/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportTessellatedFacesFace_1192.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportTessellatedFacesFace_1192::BTExportTessellatedFacesFace_1192()
{
    m_AppearanceIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ErrorMessage = utility::conversions::to_string_t("");
    m_ErrorMessageIsSet = false;
    m_FacetsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

BTExportTessellatedFacesFace_1192::~BTExportTessellatedFacesFace_1192()
{
}

void BTExportTessellatedFacesFace_1192::validate()
{
    // TODO: implement validation
}

web::json::value BTExportTessellatedFacesFace_1192::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AppearanceIsSet)
    {
        val[utility::conversions::to_string_t("appearance")] = ModelBase::toJson(m_Appearance);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ErrorMessageIsSet)
    {
        val[utility::conversions::to_string_t("errorMessage")] = ModelBase::toJson(m_ErrorMessage);
    }
    if(m_FacetsIsSet)
    {
        val[utility::conversions::to_string_t("facets")] = ModelBase::toJson(m_Facets);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool BTExportTessellatedFacesFace_1192::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("appearance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appearance"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTGraphicsAppearance_1152> refVal_appearance;
            ok &= ModelBase::fromJson(fieldValue, refVal_appearance);
            setAppearance(refVal_appearance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorMessage);
            setErrorMessage(refVal_errorMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("facets")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("facets"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportTessellatedFacesFacet_1417>> refVal_facets;
            ok &= ModelBase::fromJson(fieldValue, refVal_facets);
            setFacets(refVal_facets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    return ok;
}

void BTExportTessellatedFacesFace_1192::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AppearanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appearance"), m_Appearance));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ErrorMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorMessage"), m_ErrorMessage));
    }
    if(m_FacetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("facets"), m_Facets));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
}

bool BTExportTessellatedFacesFace_1192::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("appearance")))
    {
        std::shared_ptr<BTGraphicsAppearance_1152> refVal_appearance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appearance")), refVal_appearance );
        setAppearance(refVal_appearance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorMessage")))
    {
        utility::string_t refVal_errorMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorMessage")), refVal_errorMessage );
        setErrorMessage(refVal_errorMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("facets")))
    {
        std::vector<std::shared_ptr<BTExportTessellatedFacesFacet_1417>> refVal_facets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("facets")), refVal_facets );
        setFacets(refVal_facets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    return ok;
}

std::shared_ptr<BTGraphicsAppearance_1152> BTExportTessellatedFacesFace_1192::getAppearance() const
{
    return m_Appearance;
}

void BTExportTessellatedFacesFace_1192::setAppearance(const std::shared_ptr<BTGraphicsAppearance_1152>& value)
{
    m_Appearance = value;
    m_AppearanceIsSet = true;
}

bool BTExportTessellatedFacesFace_1192::appearanceIsSet() const
{
    return m_AppearanceIsSet;
}

void BTExportTessellatedFacesFace_1192::unsetAppearance()
{
    m_AppearanceIsSet = false;
}
utility::string_t BTExportTessellatedFacesFace_1192::getBtType() const
{
    return m_BtType;
}

void BTExportTessellatedFacesFace_1192::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTExportTessellatedFacesFace_1192::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTExportTessellatedFacesFace_1192::unsetBtType()
{
    m_BtTypeIsSet = false;
}
utility::string_t BTExportTessellatedFacesFace_1192::getErrorMessage() const
{
    return m_ErrorMessage;
}

void BTExportTessellatedFacesFace_1192::setErrorMessage(const utility::string_t& value)
{
    m_ErrorMessage = value;
    m_ErrorMessageIsSet = true;
}

bool BTExportTessellatedFacesFace_1192::errorMessageIsSet() const
{
    return m_ErrorMessageIsSet;
}

void BTExportTessellatedFacesFace_1192::unsetErrorMessage()
{
    m_ErrorMessageIsSet = false;
}
std::vector<std::shared_ptr<BTExportTessellatedFacesFacet_1417>>& BTExportTessellatedFacesFace_1192::getFacets()
{
    return m_Facets;
}

void BTExportTessellatedFacesFace_1192::setFacets(const std::vector<std::shared_ptr<BTExportTessellatedFacesFacet_1417>>& value)
{
    m_Facets = value;
    m_FacetsIsSet = true;
}

bool BTExportTessellatedFacesFace_1192::facetsIsSet() const
{
    return m_FacetsIsSet;
}

void BTExportTessellatedFacesFace_1192::unsetFacets()
{
    m_FacetsIsSet = false;
}
utility::string_t BTExportTessellatedFacesFace_1192::getId() const
{
    return m_Id;
}

void BTExportTessellatedFacesFace_1192::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTExportTessellatedFacesFace_1192::idIsSet() const
{
    return m_IdIsSet;
}

void BTExportTessellatedFacesFace_1192::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


