/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTNullableQuantityRange_1340_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTNullableQuantityRange_1340_allOf::BTNullableQuantityRange_1340_allOf()
{
    m_HasMinValue = false;
    m_HasMinValueIsSet = false;
    m_HasDefaultValue = false;
    m_HasDefaultValueIsSet = false;
    m_HasMaxValue = false;
    m_HasMaxValueIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTNullableQuantityRange_1340_allOf::~BTNullableQuantityRange_1340_allOf()
{
}

void BTNullableQuantityRange_1340_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTNullableQuantityRange_1340_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HasMinValueIsSet)
    {
        val[utility::conversions::to_string_t("hasMinValue")] = ModelBase::toJson(m_HasMinValue);
    }
    if(m_HasDefaultValueIsSet)
    {
        val[utility::conversions::to_string_t("hasDefaultValue")] = ModelBase::toJson(m_HasDefaultValue);
    }
    if(m_HasMaxValueIsSet)
    {
        val[utility::conversions::to_string_t("hasMaxValue")] = ModelBase::toJson(m_HasMaxValue);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTNullableQuantityRange_1340_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("hasMinValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasMinValue"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasMinValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasMinValue);
            setHasMinValue(refVal_hasMinValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasDefaultValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasDefaultValue"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasDefaultValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasDefaultValue);
            setHasDefaultValue(refVal_hasDefaultValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasMaxValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasMaxValue"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasMaxValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasMaxValue);
            setHasMaxValue(refVal_hasMaxValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTNullableQuantityRange_1340_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HasMinValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasMinValue"), m_HasMinValue));
    }
    if(m_HasDefaultValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasDefaultValue"), m_HasDefaultValue));
    }
    if(m_HasMaxValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasMaxValue"), m_HasMaxValue));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTNullableQuantityRange_1340_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hasMinValue")))
    {
        bool refVal_hasMinValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasMinValue")), refVal_hasMinValue );
        setHasMinValue(refVal_hasMinValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasDefaultValue")))
    {
        bool refVal_hasDefaultValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasDefaultValue")), refVal_hasDefaultValue );
        setHasDefaultValue(refVal_hasDefaultValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasMaxValue")))
    {
        bool refVal_hasMaxValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasMaxValue")), refVal_hasMaxValue );
        setHasMaxValue(refVal_hasMaxValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

bool BTNullableQuantityRange_1340_allOf::isHasMinValue() const
{
    return m_HasMinValue;
}

void BTNullableQuantityRange_1340_allOf::setHasMinValue(bool value)
{
    m_HasMinValue = value;
    m_HasMinValueIsSet = true;
}

bool BTNullableQuantityRange_1340_allOf::hasMinValueIsSet() const
{
    return m_HasMinValueIsSet;
}

void BTNullableQuantityRange_1340_allOf::unsetHasMinValue()
{
    m_HasMinValueIsSet = false;
}
bool BTNullableQuantityRange_1340_allOf::isHasDefaultValue() const
{
    return m_HasDefaultValue;
}

void BTNullableQuantityRange_1340_allOf::setHasDefaultValue(bool value)
{
    m_HasDefaultValue = value;
    m_HasDefaultValueIsSet = true;
}

bool BTNullableQuantityRange_1340_allOf::hasDefaultValueIsSet() const
{
    return m_HasDefaultValueIsSet;
}

void BTNullableQuantityRange_1340_allOf::unsetHasDefaultValue()
{
    m_HasDefaultValueIsSet = false;
}
bool BTNullableQuantityRange_1340_allOf::isHasMaxValue() const
{
    return m_HasMaxValue;
}

void BTNullableQuantityRange_1340_allOf::setHasMaxValue(bool value)
{
    m_HasMaxValue = value;
    m_HasMaxValueIsSet = true;
}

bool BTNullableQuantityRange_1340_allOf::hasMaxValueIsSet() const
{
    return m_HasMaxValueIsSet;
}

void BTNullableQuantityRange_1340_allOf::unsetHasMaxValue()
{
    m_HasMaxValueIsSet = false;
}
utility::string_t BTNullableQuantityRange_1340_allOf::getBtType() const
{
    return m_BtType;
}

void BTNullableQuantityRange_1340_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTNullableQuantityRange_1340_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTNullableQuantityRange_1340_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


