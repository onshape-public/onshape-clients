/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTDrawingParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTDrawingParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTDrawingParams_H_


#include "../ModelBase.h"

#include "BTElementLocationParams.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTDrawingParams
    : public ModelBase
{
public:
    BTDrawingParams();
    virtual ~BTDrawingParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTDrawingParams members

    /// <summary>
    /// 
    /// </summary>
    bool isBorder() const;
    bool borderIsSet() const;
    void unsetBorder();

    void setBorder(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isComputeIntersection() const;
    bool computeIntersectionIsSet() const;
    void unsetComputeIntersection();

    void setComputeIntersection(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDecimalSeparator() const;
    bool decimalSeparatorIsSet() const;
    void unsetDecimalSeparator();

    void setDecimalSeparator(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentMicroversionId() const;
    bool documentMicroversionIdIsSet() const;
    void unsetDocumentMicroversionId();

    void setDocumentMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDrawingName() const;
    bool drawingNameIsSet() const;
    void unsetDrawingName();

    void setDrawingName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementConfiguration() const;
    bool elementConfigurationIsSet() const;
    void unsetElementConfiguration();

    void setElementConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementMicroversionId() const;
    bool elementMicroversionIdIsSet() const;
    void unsetElementMicroversionId();

    void setElementMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExternalDocumentId() const;
    bool externalDocumentIdIsSet() const;
    void unsetExternalDocumentId();

    void setExternalDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExternalDocumentVersionId() const;
    bool externalDocumentVersionIdIsSet() const;
    void unsetExternalDocumentVersionId();

    void setExternalDocumentVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHiddenLines() const;
    bool hiddenLinesIsSet() const;
    void unsetHiddenLines();

    void setHiddenLines(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIncludeSurfaces() const;
    bool includeSurfacesIsSet() const;
    void unsetIncludeSurfaces();

    void setIncludeSurfaces(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFlattenedPart() const;
    bool isFlattenedPartIsSet() const;
    void unsetIsFlattenedPart();

    void setIsFlattenedPart(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSketchOnly() const;
    bool isSketchOnlyIsSet() const;
    void unsetIsSketchOnly();

    void setIsSketchOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsSurface() const;
    bool isSurfaceIsSet() const;
    void unsetIsSurface();

    void setIsSurface(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTElementLocationParams> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const std::shared_ptr<BTElementLocationParams>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getModelType() const;
    bool modelTypeIsSet() const;
    void unsetModelType();

    void setModelType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumberHorizontalZones() const;
    bool numberHorizontalZonesIsSet() const;
    void unsetNumberHorizontalZones();

    void setNumberHorizontalZones(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumberVerticalZones() const;
    bool numberVerticalZonesIsSet() const;
    void unsetNumberVerticalZones();

    void setNumberVerticalZones(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPartNumber();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartQuery() const;
    bool partQueryIsSet() const;
    void unsetPartQuery();

    void setPartQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjection() const;
    bool projectionIsSet() const;
    void unsetProjection();

    void setProjection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isPureSketch() const;
    bool pureSketchIsSet() const;
    void unsetPureSketch();

    void setPureSketch(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQualityOption() const;
    bool qualityOptionIsSet() const;
    void unsetQualityOption();

    void setQualityOption(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getReferenceType() const;
    bool referenceTypeIsSet() const;
    void unsetReferenceType();

    void setReferenceType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReferenceTypeEnum() const;
    bool referenceTypeEnumIsSet() const;
    void unsetReferenceTypeEnum();

    void setReferenceTypeEnum(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isShowCutGeomOnly() const;
    bool showCutGeomOnlyIsSet() const;
    void unsetShowCutGeomOnly();

    void setShowCutGeomOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSimplificationOption() const;
    bool simplificationOptionIsSet() const;
    void unsetSimplificationOption();

    void setSimplificationOption(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getSimplificationThreshold() const;
    bool simplificationThresholdIsSet() const;
    void unsetSimplificationThreshold();

    void setSimplificationThreshold(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();

    void setSize(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSketchIds();
    bool sketchIdsIsSet() const;
    void unsetSketchIds();

    void setSketchIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandard() const;
    bool standardIsSet() const;
    void unsetStandard();

    void setStandard(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStartZones() const;
    bool startZonesIsSet() const;
    void unsetStartZones();

    void setStartZones(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTemplateArgs();
    bool templateArgsIsSet() const;
    void unsetTemplateArgs();

    void setTemplateArgs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateDocumentId() const;
    bool templateDocumentIdIsSet() const;
    void unsetTemplateDocumentId();

    void setTemplateDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateElementId() const;
    bool templateElementIdIsSet() const;
    void unsetTemplateElementId();

    void setTemplateElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateName() const;
    bool templateNameIsSet() const;
    void unsetTemplateName();

    void setTemplateName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateVersionId() const;
    bool templateVersionIdIsSet() const;
    void unsetTemplateVersionId();

    void setTemplateVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplateWorkspaceId() const;
    bool templateWorkspaceIdIsSet() const;
    void unsetTemplateWorkspaceId();

    void setTemplateWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTitleblock() const;
    bool titleblockIsSet() const;
    void unsetTitleblock();

    void setTitleblock(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnits() const;
    bool unitsIsSet() const;
    void unsetUnits();

    void setUnits(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViews() const;
    bool viewsIsSet() const;
    void unsetViews();

    void setViews(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWorkspaceId() const;
    bool workspaceIdIsSet() const;
    void unsetWorkspaceId();

    void setWorkspaceId(const utility::string_t& value);


protected:
    bool m_Border;
    bool m_BorderIsSet;
    bool m_ComputeIntersection;
    bool m_ComputeIntersectionIsSet;
    utility::string_t m_DecimalSeparator;
    bool m_DecimalSeparatorIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_DocumentMicroversionId;
    bool m_DocumentMicroversionIdIsSet;
    utility::string_t m_DrawingName;
    bool m_DrawingNameIsSet;
    utility::string_t m_ElementConfiguration;
    bool m_ElementConfigurationIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    utility::string_t m_ElementMicroversionId;
    bool m_ElementMicroversionIdIsSet;
    utility::string_t m_ExternalDocumentId;
    bool m_ExternalDocumentIdIsSet;
    utility::string_t m_ExternalDocumentVersionId;
    bool m_ExternalDocumentVersionIdIsSet;
    utility::string_t m_HiddenLines;
    bool m_HiddenLinesIsSet;
    bool m_IncludeSurfaces;
    bool m_IncludeSurfacesIsSet;
    bool m_IsFlattenedPart;
    bool m_IsFlattenedPartIsSet;
    bool m_IsSketchOnly;
    bool m_IsSketchOnlyIsSet;
    bool m_IsSurface;
    bool m_IsSurfaceIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
    std::shared_ptr<BTElementLocationParams> m_Location;
    bool m_LocationIsSet;
    utility::string_t m_ModelType;
    bool m_ModelTypeIsSet;
    int32_t m_NumberHorizontalZones;
    bool m_NumberHorizontalZonesIsSet;
    int32_t m_NumberVerticalZones;
    bool m_NumberVerticalZonesIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    utility::string_t m_PartNumber;
    bool m_PartNumberIsSet;
    utility::string_t m_PartQuery;
    bool m_PartQueryIsSet;
    utility::string_t m_Projection;
    bool m_ProjectionIsSet;
    bool m_PureSketch;
    bool m_PureSketchIsSet;
    utility::string_t m_QualityOption;
    bool m_QualityOptionIsSet;
    int32_t m_ReferenceType;
    bool m_ReferenceTypeIsSet;
    utility::string_t m_ReferenceTypeEnum;
    bool m_ReferenceTypeEnumIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
    bool m_ShowCutGeomOnly;
    bool m_ShowCutGeomOnlyIsSet;
    utility::string_t m_SimplificationOption;
    bool m_SimplificationOptionIsSet;
    double m_SimplificationThreshold;
    bool m_SimplificationThresholdIsSet;
    utility::string_t m_Size;
    bool m_SizeIsSet;
    std::vector<utility::string_t> m_SketchIds;
    bool m_SketchIdsIsSet;
    utility::string_t m_Standard;
    bool m_StandardIsSet;
    utility::string_t m_StartZones;
    bool m_StartZonesIsSet;
    std::vector<utility::string_t> m_TemplateArgs;
    bool m_TemplateArgsIsSet;
    utility::string_t m_TemplateDocumentId;
    bool m_TemplateDocumentIdIsSet;
    utility::string_t m_TemplateElementId;
    bool m_TemplateElementIdIsSet;
    utility::string_t m_TemplateName;
    bool m_TemplateNameIsSet;
    utility::string_t m_TemplateVersionId;
    bool m_TemplateVersionIdIsSet;
    utility::string_t m_TemplateWorkspaceId;
    bool m_TemplateWorkspaceIdIsSet;
    bool m_Titleblock;
    bool m_TitleblockIsSet;
    utility::string_t m_Units;
    bool m_UnitsIsSet;
    utility::string_t m_Views;
    bool m_ViewsIsSet;
    utility::string_t m_WorkspaceId;
    bool m_WorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTDrawingParams_H_ */
