/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTAppElementReferencesResolveInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferencesResolveInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferencesResolveInfo_H_


#include "../ModelBase.h"

#include "BTAppElementReferenceResolveInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTAppElementReferencesResolveInfo
    : public ModelBase
{
public:
    BTAppElementReferencesResolveInfo();
    virtual ~BTAppElementReferencesResolveInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTAppElementReferencesResolveInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>>& getResolvedReferences();
    bool resolvedReferencesIsSet() const;
    void unsetResolvedReferences();

    void setResolvedReferences(const std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getUnresolvedReferenceIds();
    bool unresolvedReferenceIdsIsSet() const;
    void unsetUnresolvedReferenceIds();

    void setUnresolvedReferenceIds(const std::vector<utility::string_t>& value);


protected:
    std::vector<std::shared_ptr<BTAppElementReferenceResolveInfo>> m_ResolvedReferences;
    bool m_ResolvedReferencesIsSet;
    std::vector<utility::string_t> m_UnresolvedReferenceIds;
    bool m_UnresolvedReferenceIdsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTAppElementReferencesResolveInfo_H_ */
