/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMMate_64.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMMate_64::BTMMate_64()
{
    m_MateConnectorQueryListIsSet = false;
    m_PrimaryAxisAlignment = false;
    m_PrimaryAxisAlignmentIsSet = false;
    m_SecondaryAxisAlignment = utility::conversions::to_string_t("");
    m_SecondaryAxisAlignmentIsSet = false;
    m_MateOffsetIsSet = false;
    m_MateConnectorsIsSet = false;
}

BTMMate_64::~BTMMate_64()
{
}

void BTMMate_64::validate()
{
    // TODO: implement validation
}

web::json::value BTMMate_64::toJson() const
{
    web::json::value val = this->BTMAssemblyFeature_887::toJson();
    
    if(m_MateConnectorQueryListIsSet)
    {
        val[utility::conversions::to_string_t("mateConnectorQueryList")] = ModelBase::toJson(m_MateConnectorQueryList);
    }
    if(m_PrimaryAxisAlignmentIsSet)
    {
        val[utility::conversions::to_string_t("primaryAxisAlignment")] = ModelBase::toJson(m_PrimaryAxisAlignment);
    }
    if(m_SecondaryAxisAlignmentIsSet)
    {
        val[utility::conversions::to_string_t("secondaryAxisAlignment")] = ModelBase::toJson(m_SecondaryAxisAlignment);
    }
    if(m_MateOffsetIsSet)
    {
        val[utility::conversions::to_string_t("mateOffset")] = ModelBase::toJson(m_MateOffset);
    }
    if(m_MateConnectorsIsSet)
    {
        val[utility::conversions::to_string_t("mateConnectors")] = ModelBase::toJson(m_MateConnectors);
    }

    return val;
}

bool BTMMate_64::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMAssemblyFeature_887::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("mateConnectorQueryList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mateConnectorQueryList"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMParameterQueryWithOccurrenceList_67> refVal_mateConnectorQueryList;
            ok &= ModelBase::fromJson(fieldValue, refVal_mateConnectorQueryList);
            setMateConnectorQueryList(refVal_mateConnectorQueryList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("primaryAxisAlignment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("primaryAxisAlignment"));
        if(!fieldValue.is_null())
        {
            bool refVal_primaryAxisAlignment;
            ok &= ModelBase::fromJson(fieldValue, refVal_primaryAxisAlignment);
            setPrimaryAxisAlignment(refVal_primaryAxisAlignment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondaryAxisAlignment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondaryAxisAlignment"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_secondaryAxisAlignment;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondaryAxisAlignment);
            setSecondaryAxisAlignment(refVal_secondaryAxisAlignment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mateOffset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mateOffset"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_mateOffset;
            ok &= ModelBase::fromJson(fieldValue, refVal_mateOffset);
            setMateOffset(refVal_mateOffset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mateConnectors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mateConnectors"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMMateConnector_66>> refVal_mateConnectors;
            ok &= ModelBase::fromJson(fieldValue, refVal_mateConnectors);
            setMateConnectors(refVal_mateConnectors);
        }
    }
    return ok;
}

void BTMMate_64::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_ReturnAfterSubfeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnAfterSubfeatures"), m_ReturnAfterSubfeatures));
    }
    if(m_SubFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subFeatures"), m_SubFeatures));
    }
    if(m_SuppressedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suppressed"), m_Suppressed));
    }
    if(m_AuxiliaryAssemblyFeatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("auxiliaryAssemblyFeature"), m_AuxiliaryAssemblyFeature));
    }
    if(m_FeatureListFieldIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureListFieldIndex"), m_FeatureListFieldIndex));
    }
    if(m_OccurrenceQueriesFromAllConfigurationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occurrenceQueriesFromAllConfigurations"), m_OccurrenceQueriesFromAllConfigurations));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_MateConnectorQueryListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mateConnectorQueryList"), m_MateConnectorQueryList));
    }
    if(m_PrimaryAxisAlignmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("primaryAxisAlignment"), m_PrimaryAxisAlignment));
    }
    if(m_SecondaryAxisAlignmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondaryAxisAlignment"), m_SecondaryAxisAlignment));
    }
    if(m_MateOffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mateOffset"), m_MateOffset));
    }
    if(m_MateConnectorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mateConnectors"), m_MateConnectors));
    }
}

bool BTMMate_64::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTMParameter_1>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnAfterSubfeatures")))
    {
        bool refVal_returnAfterSubfeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnAfterSubfeatures")), refVal_returnAfterSubfeatures );
        setReturnAfterSubfeatures(refVal_returnAfterSubfeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subFeatures")))
    {
        std::vector<std::shared_ptr<BTMFeature_134>> refVal_subFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subFeatures")), refVal_subFeatures );
        setSubFeatures(refVal_subFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suppressed")))
    {
        bool refVal_suppressed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suppressed")), refVal_suppressed );
        setSuppressed(refVal_suppressed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("auxiliaryAssemblyFeature")))
    {
        bool refVal_auxiliaryAssemblyFeature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("auxiliaryAssemblyFeature")), refVal_auxiliaryAssemblyFeature );
        setAuxiliaryAssemblyFeature(refVal_auxiliaryAssemblyFeature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureListFieldIndex")))
    {
        int32_t refVal_featureListFieldIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureListFieldIndex")), refVal_featureListFieldIndex );
        setFeatureListFieldIndex(refVal_featureListFieldIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occurrenceQueriesFromAllConfigurations")))
    {
        std::vector<std::shared_ptr<BTMIndividualQueryWithOccurrenceBase_904>> refVal_occurrenceQueriesFromAllConfigurations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("occurrenceQueriesFromAllConfigurations")), refVal_occurrenceQueriesFromAllConfigurations );
        setOccurrenceQueriesFromAllConfigurations(refVal_occurrenceQueriesFromAllConfigurations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        int32_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mateConnectorQueryList")))
    {
        std::shared_ptr<BTMParameterQueryWithOccurrenceList_67> refVal_mateConnectorQueryList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mateConnectorQueryList")), refVal_mateConnectorQueryList );
        setMateConnectorQueryList(refVal_mateConnectorQueryList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("primaryAxisAlignment")))
    {
        bool refVal_primaryAxisAlignment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("primaryAxisAlignment")), refVal_primaryAxisAlignment );
        setPrimaryAxisAlignment(refVal_primaryAxisAlignment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondaryAxisAlignment")))
    {
        utility::string_t refVal_secondaryAxisAlignment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondaryAxisAlignment")), refVal_secondaryAxisAlignment );
        setSecondaryAxisAlignment(refVal_secondaryAxisAlignment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mateOffset")))
    {
        std::shared_ptr<BTVector3d_389> refVal_mateOffset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mateOffset")), refVal_mateOffset );
        setMateOffset(refVal_mateOffset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mateConnectors")))
    {
        std::vector<std::shared_ptr<BTMMateConnector_66>> refVal_mateConnectors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mateConnectors")), refVal_mateConnectors );
        setMateConnectors(refVal_mateConnectors);
    }
    return ok;
}

std::shared_ptr<BTMParameterQueryWithOccurrenceList_67> BTMMate_64::getMateConnectorQueryList() const
{
    return m_MateConnectorQueryList;
}

void BTMMate_64::setMateConnectorQueryList(const std::shared_ptr<BTMParameterQueryWithOccurrenceList_67>& value)
{
    m_MateConnectorQueryList = value;
    m_MateConnectorQueryListIsSet = true;
}

bool BTMMate_64::mateConnectorQueryListIsSet() const
{
    return m_MateConnectorQueryListIsSet;
}

void BTMMate_64::unsetMateConnectorQueryList()
{
    m_MateConnectorQueryListIsSet = false;
}
bool BTMMate_64::isPrimaryAxisAlignment() const
{
    return m_PrimaryAxisAlignment;
}

void BTMMate_64::setPrimaryAxisAlignment(bool value)
{
    m_PrimaryAxisAlignment = value;
    m_PrimaryAxisAlignmentIsSet = true;
}

bool BTMMate_64::primaryAxisAlignmentIsSet() const
{
    return m_PrimaryAxisAlignmentIsSet;
}

void BTMMate_64::unsetPrimaryAxisAlignment()
{
    m_PrimaryAxisAlignmentIsSet = false;
}
utility::string_t BTMMate_64::getSecondaryAxisAlignment() const
{
    return m_SecondaryAxisAlignment;
}

void BTMMate_64::setSecondaryAxisAlignment(const utility::string_t& value)
{
    m_SecondaryAxisAlignment = value;
    m_SecondaryAxisAlignmentIsSet = true;
}

bool BTMMate_64::secondaryAxisAlignmentIsSet() const
{
    return m_SecondaryAxisAlignmentIsSet;
}

void BTMMate_64::unsetSecondaryAxisAlignment()
{
    m_SecondaryAxisAlignmentIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTMMate_64::getMateOffset() const
{
    return m_MateOffset;
}

void BTMMate_64::setMateOffset(const std::shared_ptr<BTVector3d_389>& value)
{
    m_MateOffset = value;
    m_MateOffsetIsSet = true;
}

bool BTMMate_64::mateOffsetIsSet() const
{
    return m_MateOffsetIsSet;
}

void BTMMate_64::unsetMateOffset()
{
    m_MateOffsetIsSet = false;
}
std::vector<std::shared_ptr<BTMMateConnector_66>>& BTMMate_64::getMateConnectors()
{
    return m_MateConnectors;
}

void BTMMate_64::setMateConnectors(const std::vector<std::shared_ptr<BTMMateConnector_66>>& value)
{
    m_MateConnectors = value;
    m_MateConnectorsIsSet = true;
}

bool BTMMate_64::mateConnectorsIsSet() const
{
    return m_MateConnectorsIsSet;
}

void BTMMate_64::unsetMateConnectors()
{
    m_MateConnectorsIsSet = false;
}
}
}
}
}


