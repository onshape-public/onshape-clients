/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ContentDisposition.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ContentDisposition::ContentDisposition()
{
    m_CreationDate = utility::datetime();
    m_CreationDateIsSet = false;
    m_FileName = utility::conversions::to_string_t("");
    m_FileNameIsSet = false;
    m_ModificationDate = utility::datetime();
    m_ModificationDateIsSet = false;
    m_ParametersIsSet = false;
    m_ReadDate = utility::datetime();
    m_ReadDateIsSet = false;
    m_Size = 0L;
    m_SizeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

ContentDisposition::~ContentDisposition()
{
}

void ContentDisposition::validate()
{
    // TODO: implement validation
}

web::json::value ContentDisposition::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreationDateIsSet)
    {
        val[utility::conversions::to_string_t("creationDate")] = ModelBase::toJson(m_CreationDate);
    }
    if(m_FileNameIsSet)
    {
        val[utility::conversions::to_string_t("fileName")] = ModelBase::toJson(m_FileName);
    }
    if(m_ModificationDateIsSet)
    {
        val[utility::conversions::to_string_t("modificationDate")] = ModelBase::toJson(m_ModificationDate);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_ReadDateIsSet)
    {
        val[utility::conversions::to_string_t("readDate")] = ModelBase::toJson(m_ReadDate);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool ContentDisposition::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("creationDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creationDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_creationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_creationDate);
            setCreationDate(refVal_creationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fileName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fileName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_fileName);
            setFileName(refVal_fileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modificationDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modificationDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_modificationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_modificationDate);
            setModificationDate(refVal_modificationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readDate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("readDate"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_readDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_readDate);
            setReadDate(refVal_readDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("size"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void ContentDisposition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CreationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creationDate"), m_CreationDate));
    }
    if(m_FileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fileName"), m_FileName));
    }
    if(m_ModificationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modificationDate"), m_ModificationDate));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_ReadDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readDate"), m_ReadDate));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool ContentDisposition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("creationDate")))
    {
        utility::datetime refVal_creationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creationDate")), refVal_creationDate );
        setCreationDate(refVal_creationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fileName")))
    {
        utility::string_t refVal_fileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fileName")), refVal_fileName );
        setFileName(refVal_fileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modificationDate")))
    {
        utility::datetime refVal_modificationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modificationDate")), refVal_modificationDate );
        setModificationDate(refVal_modificationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::map<utility::string_t, utility::string_t> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readDate")))
    {
        utility::datetime refVal_readDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readDate")), refVal_readDate );
        setReadDate(refVal_readDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        int64_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("size")), refVal_size );
        setSize(refVal_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

utility::datetime ContentDisposition::getCreationDate() const
{
    return m_CreationDate;
}

void ContentDisposition::setCreationDate(const utility::datetime& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}

bool ContentDisposition::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}

void ContentDisposition::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
utility::string_t ContentDisposition::getFileName() const
{
    return m_FileName;
}

void ContentDisposition::setFileName(const utility::string_t& value)
{
    m_FileName = value;
    m_FileNameIsSet = true;
}

bool ContentDisposition::fileNameIsSet() const
{
    return m_FileNameIsSet;
}

void ContentDisposition::unsetFileName()
{
    m_FileNameIsSet = false;
}
utility::datetime ContentDisposition::getModificationDate() const
{
    return m_ModificationDate;
}

void ContentDisposition::setModificationDate(const utility::datetime& value)
{
    m_ModificationDate = value;
    m_ModificationDateIsSet = true;
}

bool ContentDisposition::modificationDateIsSet() const
{
    return m_ModificationDateIsSet;
}

void ContentDisposition::unsetModificationDate()
{
    m_ModificationDateIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ContentDisposition::getParameters()
{
    return m_Parameters;
}

void ContentDisposition::setParameters(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool ContentDisposition::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void ContentDisposition::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::datetime ContentDisposition::getReadDate() const
{
    return m_ReadDate;
}

void ContentDisposition::setReadDate(const utility::datetime& value)
{
    m_ReadDate = value;
    m_ReadDateIsSet = true;
}

bool ContentDisposition::readDateIsSet() const
{
    return m_ReadDateIsSet;
}

void ContentDisposition::unsetReadDate()
{
    m_ReadDateIsSet = false;
}
int64_t ContentDisposition::getSize() const
{
    return m_Size;
}

void ContentDisposition::setSize(int64_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool ContentDisposition::sizeIsSet() const
{
    return m_SizeIsSet;
}

void ContentDisposition::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t ContentDisposition::getType() const
{
    return m_Type;
}

void ContentDisposition::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ContentDisposition::typeIsSet() const
{
    return m_TypeIsSet;
}

void ContentDisposition::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


