/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTQuantityRange_181.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTQuantityRange_181_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTQuantityRange_181_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTLocationInfo_226.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTQuantityRange_181
    : public ModelBase
{
public:
    BTQuantityRange_181();
    virtual ~BTQuantityRange_181();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTQuantityRange_181 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getDefaultValue() const;
    bool defaultValueIsSet() const;
    void unsetDefaultValue();

    void setDefaultValue(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTLocationInfo_226> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const std::shared_ptr<BTLocationInfo_226>& value);

    /// <summary>
    /// 
    /// </summary>
    double getMaxValue() const;
    bool maxValueIsSet() const;
    void unsetMaxValue();

    void setMaxValue(double value);

    /// <summary>
    /// 
    /// </summary>
    double getMinValue() const;
    bool minValueIsSet() const;
    void unsetMinValue();

    void setMinValue(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnits() const;
    bool unitsIsSet() const;
    void unsetUnits();

    void setUnits(const utility::string_t& value);


protected:
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    double m_DefaultValue;
    bool m_DefaultValueIsSet;
    std::shared_ptr<BTLocationInfo_226> m_Location;
    bool m_LocationIsSet;
    double m_MaxValue;
    bool m_MaxValueIsSet;
    double m_MinValue;
    bool m_MinValueIsSet;
    utility::string_t m_Units;
    bool m_UnitsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTQuantityRange_181_H_ */
