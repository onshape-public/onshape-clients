/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentSearchHitInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentSearchHitInfo::BTDocumentSearchHitInfo()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementName = utility::conversions::to_string_t("");
    m_ElementNameIsSet = false;
    m_HighlightedFieldsIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_SourceMapIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_VersionOrWorkspaceName = utility::conversions::to_string_t("");
    m_VersionOrWorkspaceNameIsSet = false;
}

BTDocumentSearchHitInfo::~BTDocumentSearchHitInfo()
{
}

void BTDocumentSearchHitInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentSearchHitInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementNameIsSet)
    {
        val[utility::conversions::to_string_t("elementName")] = ModelBase::toJson(m_ElementName);
    }
    if(m_HighlightedFieldsIsSet)
    {
        val[utility::conversions::to_string_t("highlightedFields")] = ModelBase::toJson(m_HighlightedFields);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_SourceMapIsSet)
    {
        val[utility::conversions::to_string_t("sourceMap")] = ModelBase::toJson(m_SourceMap);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_VersionOrWorkspaceNameIsSet)
    {
        val[utility::conversions::to_string_t("versionOrWorkspaceName")] = ModelBase::toJson(m_VersionOrWorkspaceName);
    }

    return val;
}

bool BTDocumentSearchHitInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementName;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementName);
            setElementName(refVal_elementName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("highlightedFields")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("highlightedFields"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::vector<utility::string_t>> refVal_highlightedFields;
            ok &= ModelBase::fromJson(fieldValue, refVal_highlightedFields);
            setHighlightedFields(refVal_highlightedFields);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceMap")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceMap"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_sourceMap;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceMap);
            setSourceMap(refVal_sourceMap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionOrWorkspaceName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionOrWorkspaceName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionOrWorkspaceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionOrWorkspaceName);
            setVersionOrWorkspaceName(refVal_versionOrWorkspaceName);
        }
    }
    return ok;
}

void BTDocumentSearchHitInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementName"), m_ElementName));
    }
    if(m_HighlightedFieldsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("highlightedFields"), m_HighlightedFields));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_SourceMapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMap"), m_SourceMap));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_VersionOrWorkspaceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionOrWorkspaceName"), m_VersionOrWorkspaceName));
    }
}

bool BTDocumentSearchHitInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementName")))
    {
        utility::string_t refVal_elementName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementName")), refVal_elementName );
        setElementName(refVal_elementName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("highlightedFields")))
    {
        std::map<utility::string_t, std::vector<utility::string_t>> refVal_highlightedFields;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("highlightedFields")), refVal_highlightedFields );
        setHighlightedFields(refVal_highlightedFields);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMap")))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_sourceMap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMap")), refVal_sourceMap );
        setSourceMap(refVal_sourceMap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionOrWorkspaceName")))
    {
        utility::string_t refVal_versionOrWorkspaceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionOrWorkspaceName")), refVal_versionOrWorkspaceName );
        setVersionOrWorkspaceName(refVal_versionOrWorkspaceName);
    }
    return ok;
}

utility::string_t BTDocumentSearchHitInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTDocumentSearchHitInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTDocumentSearchHitInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTDocumentSearchHitInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTDocumentSearchHitInfo::getElementName() const
{
    return m_ElementName;
}

void BTDocumentSearchHitInfo::setElementName(const utility::string_t& value)
{
    m_ElementName = value;
    m_ElementNameIsSet = true;
}

bool BTDocumentSearchHitInfo::elementNameIsSet() const
{
    return m_ElementNameIsSet;
}

void BTDocumentSearchHitInfo::unsetElementName()
{
    m_ElementNameIsSet = false;
}
std::map<utility::string_t, std::vector<utility::string_t>>& BTDocumentSearchHitInfo::getHighlightedFields()
{
    return m_HighlightedFields;
}

void BTDocumentSearchHitInfo::setHighlightedFields(const std::map<utility::string_t, std::vector<utility::string_t>>& value)
{
    m_HighlightedFields = value;
    m_HighlightedFieldsIsSet = true;
}

bool BTDocumentSearchHitInfo::highlightedFieldsIsSet() const
{
    return m_HighlightedFieldsIsSet;
}

void BTDocumentSearchHitInfo::unsetHighlightedFields()
{
    m_HighlightedFieldsIsSet = false;
}
utility::string_t BTDocumentSearchHitInfo::getName() const
{
    return m_Name;
}

void BTDocumentSearchHitInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTDocumentSearchHitInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTDocumentSearchHitInfo::unsetName()
{
    m_NameIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& BTDocumentSearchHitInfo::getSourceMap()
{
    return m_SourceMap;
}

void BTDocumentSearchHitInfo::setSourceMap(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_SourceMap = value;
    m_SourceMapIsSet = true;
}

bool BTDocumentSearchHitInfo::sourceMapIsSet() const
{
    return m_SourceMapIsSet;
}

void BTDocumentSearchHitInfo::unsetSourceMap()
{
    m_SourceMapIsSet = false;
}
utility::string_t BTDocumentSearchHitInfo::getType() const
{
    return m_Type;
}

void BTDocumentSearchHitInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTDocumentSearchHitInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTDocumentSearchHitInfo::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BTDocumentSearchHitInfo::getVersionOrWorkspaceName() const
{
    return m_VersionOrWorkspaceName;
}

void BTDocumentSearchHitInfo::setVersionOrWorkspaceName(const utility::string_t& value)
{
    m_VersionOrWorkspaceName = value;
    m_VersionOrWorkspaceNameIsSet = true;
}

bool BTDocumentSearchHitInfo::versionOrWorkspaceNameIsSet() const
{
    return m_VersionOrWorkspaceNameIsSet;
}

void BTDocumentSearchHitInfo::unsetVersionOrWorkspaceName()
{
    m_VersionOrWorkspaceNameIsSet = false;
}
}
}
}
}


