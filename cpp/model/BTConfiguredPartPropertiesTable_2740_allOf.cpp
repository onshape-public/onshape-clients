/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTConfiguredPartPropertiesTable_2740_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTConfiguredPartPropertiesTable_2740_allOf::BTConfiguredPartPropertiesTable_2740_allOf()
{
    m_PartDeterministicId = utility::conversions::to_string_t("");
    m_PartDeterministicIdIsSet = false;
    m_PropertyNodeId = utility::conversions::to_string_t("");
    m_PropertyNodeIdIsSet = false;
    m_PartDeterministicIdsIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTConfiguredPartPropertiesTable_2740_allOf::~BTConfiguredPartPropertiesTable_2740_allOf()
{
}

void BTConfiguredPartPropertiesTable_2740_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTConfiguredPartPropertiesTable_2740_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PartDeterministicIdIsSet)
    {
        val[utility::conversions::to_string_t("partDeterministicId")] = ModelBase::toJson(m_PartDeterministicId);
    }
    if(m_PropertyNodeIdIsSet)
    {
        val[utility::conversions::to_string_t("propertyNodeId")] = ModelBase::toJson(m_PropertyNodeId);
    }
    if(m_PartDeterministicIdsIsSet)
    {
        val[utility::conversions::to_string_t("partDeterministicIds")] = ModelBase::toJson(m_PartDeterministicIds);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTConfiguredPartPropertiesTable_2740_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("partDeterministicId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partDeterministicId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partDeterministicId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partDeterministicId);
            setPartDeterministicId(refVal_partDeterministicId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propertyNodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("propertyNodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_propertyNodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_propertyNodeId);
            setPropertyNodeId(refVal_propertyNodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partDeterministicIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partDeterministicIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_partDeterministicIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_partDeterministicIds);
            setPartDeterministicIds(refVal_partDeterministicIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTConfiguredPartPropertiesTable_2740_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PartDeterministicIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partDeterministicId"), m_PartDeterministicId));
    }
    if(m_PropertyNodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("propertyNodeId"), m_PropertyNodeId));
    }
    if(m_PartDeterministicIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partDeterministicIds"), m_PartDeterministicIds));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTConfiguredPartPropertiesTable_2740_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("partDeterministicId")))
    {
        utility::string_t refVal_partDeterministicId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partDeterministicId")), refVal_partDeterministicId );
        setPartDeterministicId(refVal_partDeterministicId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propertyNodeId")))
    {
        utility::string_t refVal_propertyNodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("propertyNodeId")), refVal_propertyNodeId );
        setPropertyNodeId(refVal_propertyNodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partDeterministicIds")))
    {
        std::vector<utility::string_t> refVal_partDeterministicIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partDeterministicIds")), refVal_partDeterministicIds );
        setPartDeterministicIds(refVal_partDeterministicIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

utility::string_t BTConfiguredPartPropertiesTable_2740_allOf::getPartDeterministicId() const
{
    return m_PartDeterministicId;
}

void BTConfiguredPartPropertiesTable_2740_allOf::setPartDeterministicId(const utility::string_t& value)
{
    m_PartDeterministicId = value;
    m_PartDeterministicIdIsSet = true;
}

bool BTConfiguredPartPropertiesTable_2740_allOf::partDeterministicIdIsSet() const
{
    return m_PartDeterministicIdIsSet;
}

void BTConfiguredPartPropertiesTable_2740_allOf::unsetPartDeterministicId()
{
    m_PartDeterministicIdIsSet = false;
}
utility::string_t BTConfiguredPartPropertiesTable_2740_allOf::getPropertyNodeId() const
{
    return m_PropertyNodeId;
}

void BTConfiguredPartPropertiesTable_2740_allOf::setPropertyNodeId(const utility::string_t& value)
{
    m_PropertyNodeId = value;
    m_PropertyNodeIdIsSet = true;
}

bool BTConfiguredPartPropertiesTable_2740_allOf::propertyNodeIdIsSet() const
{
    return m_PropertyNodeIdIsSet;
}

void BTConfiguredPartPropertiesTable_2740_allOf::unsetPropertyNodeId()
{
    m_PropertyNodeIdIsSet = false;
}
std::vector<utility::string_t>& BTConfiguredPartPropertiesTable_2740_allOf::getPartDeterministicIds()
{
    return m_PartDeterministicIds;
}

void BTConfiguredPartPropertiesTable_2740_allOf::setPartDeterministicIds(const std::vector<utility::string_t>& value)
{
    m_PartDeterministicIds = value;
    m_PartDeterministicIdsIsSet = true;
}

bool BTConfiguredPartPropertiesTable_2740_allOf::partDeterministicIdsIsSet() const
{
    return m_PartDeterministicIdsIsSet;
}

void BTConfiguredPartPropertiesTable_2740_allOf::unsetPartDeterministicIds()
{
    m_PartDeterministicIdsIsSet = false;
}
utility::string_t BTConfiguredPartPropertiesTable_2740_allOf::getBtType() const
{
    return m_BtType;
}

void BTConfiguredPartPropertiesTable_2740_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTConfiguredPartPropertiesTable_2740_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTConfiguredPartPropertiesTable_2740_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


