/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureFilter_127.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureFilter_127::BTFeatureFilter_127()
{
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_Exclusion = utility::conversions::to_string_t("");
    m_ExclusionIsSet = false;
}

BTFeatureFilter_127::~BTFeatureFilter_127()
{
}

void BTFeatureFilter_127::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureFilter_127::toJson() const
{
    web::json::value val = this->BTQueryFilter_183::toJson();
    
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_ExclusionIsSet)
    {
        val[utility::conversions::to_string_t("exclusion")] = ModelBase::toJson(m_Exclusion);
    }

    return val;
}

bool BTFeatureFilter_127::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTQueryFilter_183::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exclusion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exclusion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_exclusion;
            ok &= ModelBase::fromJson(fieldValue, refVal_exclusion);
            setExclusion(refVal_exclusion);
        }
    }
    return ok;
}

void BTFeatureFilter_127::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_ExclusionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exclusion"), m_Exclusion));
    }
}

bool BTFeatureFilter_127::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exclusion")))
    {
        utility::string_t refVal_exclusion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exclusion")), refVal_exclusion );
        setExclusion(refVal_exclusion);
    }
    return ok;
}

utility::string_t BTFeatureFilter_127::getFeatureId() const
{
    return m_FeatureId;
}

void BTFeatureFilter_127::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTFeatureFilter_127::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTFeatureFilter_127::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
utility::string_t BTFeatureFilter_127::getExclusion() const
{
    return m_Exclusion;
}

void BTFeatureFilter_127::setExclusion(const utility::string_t& value)
{
    m_Exclusion = value;
    m_ExclusionIsSet = true;
}

bool BTFeatureFilter_127::exclusionIsSet() const
{
    return m_ExclusionIsSet;
}

void BTFeatureFilter_127::unsetExclusion()
{
    m_ExclusionIsSet = false;
}
}
}
}
}


