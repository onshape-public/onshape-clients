/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTDocumentSummaryInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentSummaryInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentSummaryInfo_H_


#include "BTDocumentLabelInfo.h"
#include "BTBaseInfo.h"
#include "BTDocumentSummaryInfo_allOf.h"
#include "BTThumbnailInfo.h"
#include "BTWorkspaceInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTGlobalTreeNodeInfo.h"
#include "Object.h"
#include "BTUserBasicSummaryInfo.h"
#include <vector>
#include "BTOwnerInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTDocumentSummaryInfo
    : public BTGlobalTreeNodeInfo
{
public:
    BTDocumentSummaryInfo();
    virtual ~BTDocumentSummaryInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTDocumentSummaryInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultElementId() const;
    bool defaultElementIdIsSet() const;
    void unsetDefaultElementId();

    void setDefaultElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWorkspaceInfo> getDefaultWorkspace() const;
    bool defaultWorkspaceIsSet() const;
    void unsetDefaultWorkspace();

    void setDefaultWorkspace(const std::shared_ptr<BTWorkspaceInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getPermissionSet() const;
    bool permissionSetIsSet() const;
    void unsetPermissionSet();

    void setPermissionSet(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrash() const;
    bool trashIsSet() const;
    void unsetTrash();

    void setTrash(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalWorkspacesUpdating() const;
    bool totalWorkspacesUpdatingIsSet() const;
    void unsetTotalWorkspacesUpdating();

    void setTotalWorkspacesUpdating(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalWorkspacesScheduledForUpdate() const;
    bool totalWorkspacesScheduledForUpdateIsSet() const;
    void unsetTotalWorkspacesScheduledForUpdate();

    void setTotalWorkspacesScheduledForUpdate(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanUnshare() const;
    bool canUnshareIsSet() const;
    void unsetCanUnshare();

    void setCanUnshare(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTThumbnailInfo> getThumbnail() const;
    bool thumbnailIsSet() const;
    void unsetThumbnail();

    void setThumbnail(const std::shared_ptr<BTThumbnailInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSupportTeamUserAndShared() const;
    bool supportTeamUserAndSharedIsSet() const;
    void unsetSupportTeamUserAndShared();

    void setSupportTeamUserAndShared(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isLikedByCurrentUser() const;
    bool likedByCurrentUserIsSet() const;
    void unsetLikedByCurrentUser();

    void setLikedByCurrentUser(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTDocumentLabelInfo>>& getDocumentLabels();
    bool documentLabelsIsSet() const;
    void unsetDocumentLabels();

    void setDocumentLabels(const std::vector<std::shared_ptr<BTDocumentLabelInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getNumberOfTimesReferenced() const;
    bool numberOfTimesReferencedIsSet() const;
    void unsetNumberOfTimesReferenced();

    void setNumberOfTimesReferenced(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getNumberOfTimesCopied() const;
    bool numberOfTimesCopiedIsSet() const;
    void unsetNumberOfTimesCopied();

    void setNumberOfTimesCopied(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getLikes() const;
    bool likesIsSet() const;
    void unsetLikes();

    void setLikes(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTBaseInfo> getRecentVersion() const;
    bool recentVersionIsSet() const;
    void unsetRecentVersion();

    void setRecentVersion(const std::shared_ptr<BTBaseInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasRelevantInsertables() const;
    bool hasRelevantInsertablesIsSet() const;
    void unsetHasRelevantInsertables();

    void setHasRelevantInsertables(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCreatedWithEducationPlan() const;
    bool createdWithEducationPlanIsSet() const;
    void unsetCreatedWithEducationPlan();

    void setCreatedWithEducationPlan(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isNotRevisionManaged() const;
    bool notRevisionManagedIsSet() const;
    void unsetNotRevisionManaged();

    void setNotRevisionManaged(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isAnonymousAccessAllowed() const;
    bool anonymousAccessAllowedIsSet() const;
    void unsetAnonymousAccessAllowed();

    void setAnonymousAccessAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isAnonymousAllowsExport() const;
    bool anonymousAllowsExportIsSet() const;
    void unsetAnonymousAllowsExport();

    void setAnonymousAllowsExport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTrashedAt() const;
    bool trashedAtIsSet() const;
    void unsetTrashedAt();

    void setTrashedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsOrphaned() const;
    bool isOrphanedIsSet() const;
    void unsetIsOrphaned();

    void setIsOrphaned(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasReleaseRevisionableObjects() const;
    bool hasReleaseRevisionableObjectsIsSet() const;
    void unsetHasReleaseRevisionableObjects();

    void setHasReleaseRevisionableObjects(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isRPublic() const;
    bool rPublicIsSet() const;
    void unsetr_public();

    void setRPublic(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isUserAccountLimitsBreached() const;
    bool userAccountLimitsBreachedIsSet() const;
    void unsetUserAccountLimitsBreached();

    void setUserAccountLimitsBreached(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsUsingManagedWorkflow() const;
    bool isUsingManagedWorkflowIsSet() const;
    void unsetIsUsingManagedWorkflow();

    void setIsUsingManagedWorkflow(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPermission() const;
    bool permissionIsSet() const;
    void unsetPermission();

    void setPermission(const utility::string_t& value);


protected:
    utility::string_t m_DefaultElementId;
    bool m_DefaultElementIdIsSet;
    std::shared_ptr<BTWorkspaceInfo> m_DefaultWorkspace;
    bool m_DefaultWorkspaceIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    std::shared_ptr<Object> m_PermissionSet;
    bool m_PermissionSetIsSet;
    bool m_Trash;
    bool m_TrashIsSet;
    int32_t m_TotalWorkspacesUpdating;
    bool m_TotalWorkspacesUpdatingIsSet;
    int32_t m_TotalWorkspacesScheduledForUpdate;
    bool m_TotalWorkspacesScheduledForUpdateIsSet;
    bool m_CanUnshare;
    bool m_CanUnshareIsSet;
    std::shared_ptr<BTThumbnailInfo> m_Thumbnail;
    bool m_ThumbnailIsSet;
    bool m_SupportTeamUserAndShared;
    bool m_SupportTeamUserAndSharedIsSet;
    bool m_LikedByCurrentUser;
    bool m_LikedByCurrentUserIsSet;
    std::vector<std::shared_ptr<BTDocumentLabelInfo>> m_DocumentLabels;
    bool m_DocumentLabelsIsSet;
    int64_t m_NumberOfTimesReferenced;
    bool m_NumberOfTimesReferencedIsSet;
    int64_t m_NumberOfTimesCopied;
    bool m_NumberOfTimesCopiedIsSet;
    int64_t m_Likes;
    bool m_LikesIsSet;
    std::shared_ptr<BTBaseInfo> m_RecentVersion;
    bool m_RecentVersionIsSet;
    bool m_HasRelevantInsertables;
    bool m_HasRelevantInsertablesIsSet;
    bool m_CreatedWithEducationPlan;
    bool m_CreatedWithEducationPlanIsSet;
    bool m_NotRevisionManaged;
    bool m_NotRevisionManagedIsSet;
    bool m_AnonymousAccessAllowed;
    bool m_AnonymousAccessAllowedIsSet;
    bool m_AnonymousAllowsExport;
    bool m_AnonymousAllowsExportIsSet;
    utility::datetime m_TrashedAt;
    bool m_TrashedAtIsSet;
    bool m_IsOrphaned;
    bool m_IsOrphanedIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    bool m_HasReleaseRevisionableObjects;
    bool m_HasReleaseRevisionableObjectsIsSet;
    bool m_r_public;
    bool m_r_publicIsSet;
    bool m_UserAccountLimitsBreached;
    bool m_UserAccountLimitsBreachedIsSet;
    bool m_IsUsingManagedWorkflow;
    bool m_IsUsingManagedWorkflowIsSet;
    utility::string_t m_Permission;
    bool m_PermissionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentSummaryInfo_H_ */
