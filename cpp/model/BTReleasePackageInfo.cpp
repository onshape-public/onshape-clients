/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTReleasePackageInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTReleasePackageInfo::BTReleasePackageInfo()
{
    m_ColumnNamesIsSet = false;
    m_CommentsIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DescriptionAsProperty = utility::conversions::to_string_t("");
    m_DescriptionAsPropertyIsSet = false;
    m_Detailed = false;
    m_DetailedIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IsObsoletion = false;
    m_IsObsoletionIsSet = false;
    m_ItemsIsSet = false;
    m_LinkedVersionIdsIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NameAsProperty = utility::conversions::to_string_t("");
    m_NameAsPropertyIsSet = false;
    m_PackageThumbnail = utility::conversions::to_string_t("");
    m_PackageThumbnailIsSet = false;
    m_ParentCommentsIsSet = false;
    m_ParentPackagesIsSet = false;
    m_PropertiesIsSet = false;
    m_RevisionRuleId = utility::conversions::to_string_t("");
    m_RevisionRuleIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_WorkflowIsSet = false;
    m_WorkflowIdIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTReleasePackageInfo::~BTReleasePackageInfo()
{
}

void BTReleasePackageInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTReleasePackageInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ColumnNamesIsSet)
    {
        val[utility::conversions::to_string_t("columnNames")] = ModelBase::toJson(m_ColumnNames);
    }
    if(m_CommentsIsSet)
    {
        val[utility::conversions::to_string_t("comments")] = ModelBase::toJson(m_Comments);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DescriptionAsPropertyIsSet)
    {
        val[utility::conversions::to_string_t("descriptionAsProperty")] = ModelBase::toJson(m_DescriptionAsProperty);
    }
    if(m_DetailedIsSet)
    {
        val[utility::conversions::to_string_t("detailed")] = ModelBase::toJson(m_Detailed);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IsObsoletionIsSet)
    {
        val[utility::conversions::to_string_t("isObsoletion")] = ModelBase::toJson(m_IsObsoletion);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t("items")] = ModelBase::toJson(m_Items);
    }
    if(m_LinkedVersionIdsIsSet)
    {
        val[utility::conversions::to_string_t("linkedVersionIds")] = ModelBase::toJson(m_LinkedVersionIds);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NameAsPropertyIsSet)
    {
        val[utility::conversions::to_string_t("nameAsProperty")] = ModelBase::toJson(m_NameAsProperty);
    }
    if(m_PackageThumbnailIsSet)
    {
        val[utility::conversions::to_string_t("packageThumbnail")] = ModelBase::toJson(m_PackageThumbnail);
    }
    if(m_ParentCommentsIsSet)
    {
        val[utility::conversions::to_string_t("parentComments")] = ModelBase::toJson(m_ParentComments);
    }
    if(m_ParentPackagesIsSet)
    {
        val[utility::conversions::to_string_t("parentPackages")] = ModelBase::toJson(m_ParentPackages);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_RevisionRuleIdIsSet)
    {
        val[utility::conversions::to_string_t("revisionRuleId")] = ModelBase::toJson(m_RevisionRuleId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_WorkflowIsSet)
    {
        val[utility::conversions::to_string_t("workflow")] = ModelBase::toJson(m_Workflow);
    }
    if(m_WorkflowIdIsSet)
    {
        val[utility::conversions::to_string_t("workflowId")] = ModelBase::toJson(m_WorkflowId);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTReleasePackageInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("columnNames")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("columnNames"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_columnNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_columnNames);
            setColumnNames(refVal_columnNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("comments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("comments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTCommentInfo>> refVal_comments;
            ok &= ModelBase::fromJson(fieldValue, refVal_comments);
            setComments(refVal_comments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descriptionAsProperty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descriptionAsProperty"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descriptionAsProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_descriptionAsProperty);
            setDescriptionAsProperty(refVal_descriptionAsProperty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("detailed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("detailed"));
        if(!fieldValue.is_null())
        {
            bool refVal_detailed;
            ok &= ModelBase::fromJson(fieldValue, refVal_detailed);
            setDetailed(refVal_detailed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isObsoletion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isObsoletion"));
        if(!fieldValue.is_null())
        {
            bool refVal_isObsoletion;
            ok &= ModelBase::fromJson(fieldValue, refVal_isObsoletion);
            setIsObsoletion(refVal_isObsoletion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("items")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("items"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTReleasePackageItemInfo>> refVal_items;
            ok &= ModelBase::fromJson(fieldValue, refVal_items);
            setItems(refVal_items);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkedVersionIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkedVersionIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_linkedVersionIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkedVersionIds);
            setLinkedVersionIds(refVal_linkedVersionIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nameAsProperty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nameAsProperty"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nameAsProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_nameAsProperty);
            setNameAsProperty(refVal_nameAsProperty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("packageThumbnail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("packageThumbnail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_packageThumbnail;
            ok &= ModelBase::fromJson(fieldValue, refVal_packageThumbnail);
            setPackageThumbnail(refVal_packageThumbnail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentComments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentComments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTReleaseCommentListInfo>> refVal_parentComments;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentComments);
            setParentComments(refVal_parentComments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentPackages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentPackages"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_parentPackages;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentPackages);
            setParentPackages(refVal_parentPackages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTWorkflowPropertyInfo>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revisionRuleId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revisionRuleId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revisionRuleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_revisionRuleId);
            setRevisionRuleId(refVal_revisionRuleId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflow")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workflow"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTWorkflowSnapshotInfo> refVal_workflow;
            ok &= ModelBase::fromJson(fieldValue, refVal_workflow);
            setWorkflow(refVal_workflow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workflowId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workflowId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPublishedWorkflowId> refVal_workflowId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workflowId);
            setWorkflowId(refVal_workflowId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTReleasePackageInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ColumnNamesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnNames"), m_ColumnNames));
    }
    if(m_CommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("comments"), m_Comments));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DescriptionAsPropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descriptionAsProperty"), m_DescriptionAsProperty));
    }
    if(m_DetailedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("detailed"), m_Detailed));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsObsoletionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isObsoletion"), m_IsObsoletion));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("items"), m_Items));
    }
    if(m_LinkedVersionIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkedVersionIds"), m_LinkedVersionIds));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NameAsPropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nameAsProperty"), m_NameAsProperty));
    }
    if(m_PackageThumbnailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("packageThumbnail"), m_PackageThumbnail));
    }
    if(m_ParentCommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentComments"), m_ParentComments));
    }
    if(m_ParentPackagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentPackages"), m_ParentPackages));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
    if(m_RevisionRuleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revisionRuleId"), m_RevisionRuleId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_WorkflowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflow"), m_Workflow));
    }
    if(m_WorkflowIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workflowId"), m_WorkflowId));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTReleasePackageInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("columnNames")))
    {
        std::map<utility::string_t, utility::string_t> refVal_columnNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnNames")), refVal_columnNames );
        setColumnNames(refVal_columnNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("comments")))
    {
        std::vector<std::shared_ptr<BTCommentInfo>> refVal_comments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("comments")), refVal_comments );
        setComments(refVal_comments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descriptionAsProperty")))
    {
        utility::string_t refVal_descriptionAsProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descriptionAsProperty")), refVal_descriptionAsProperty );
        setDescriptionAsProperty(refVal_descriptionAsProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("detailed")))
    {
        bool refVal_detailed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("detailed")), refVal_detailed );
        setDetailed(refVal_detailed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isObsoletion")))
    {
        bool refVal_isObsoletion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isObsoletion")), refVal_isObsoletion );
        setIsObsoletion(refVal_isObsoletion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("items")))
    {
        std::vector<std::shared_ptr<BTReleasePackageItemInfo>> refVal_items;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("items")), refVal_items );
        setItems(refVal_items);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkedVersionIds")))
    {
        std::vector<utility::string_t> refVal_linkedVersionIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkedVersionIds")), refVal_linkedVersionIds );
        setLinkedVersionIds(refVal_linkedVersionIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nameAsProperty")))
    {
        utility::string_t refVal_nameAsProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nameAsProperty")), refVal_nameAsProperty );
        setNameAsProperty(refVal_nameAsProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("packageThumbnail")))
    {
        utility::string_t refVal_packageThumbnail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("packageThumbnail")), refVal_packageThumbnail );
        setPackageThumbnail(refVal_packageThumbnail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentComments")))
    {
        std::vector<std::shared_ptr<BTReleaseCommentListInfo>> refVal_parentComments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentComments")), refVal_parentComments );
        setParentComments(refVal_parentComments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentPackages")))
    {
        std::vector<utility::string_t> refVal_parentPackages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentPackages")), refVal_parentPackages );
        setParentPackages(refVal_parentPackages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<BTWorkflowPropertyInfo>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revisionRuleId")))
    {
        utility::string_t refVal_revisionRuleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revisionRuleId")), refVal_revisionRuleId );
        setRevisionRuleId(refVal_revisionRuleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflow")))
    {
        std::shared_ptr<BTWorkflowSnapshotInfo> refVal_workflow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflow")), refVal_workflow );
        setWorkflow(refVal_workflow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workflowId")))
    {
        std::shared_ptr<BTPublishedWorkflowId> refVal_workflowId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workflowId")), refVal_workflowId );
        setWorkflowId(refVal_workflowId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

std::map<utility::string_t, utility::string_t>& BTReleasePackageInfo::getColumnNames()
{
    return m_ColumnNames;
}

void BTReleasePackageInfo::setColumnNames(const std::map<utility::string_t, utility::string_t>& value)
{
    m_ColumnNames = value;
    m_ColumnNamesIsSet = true;
}

bool BTReleasePackageInfo::columnNamesIsSet() const
{
    return m_ColumnNamesIsSet;
}

void BTReleasePackageInfo::unsetColumnNames()
{
    m_ColumnNamesIsSet = false;
}
std::vector<std::shared_ptr<BTCommentInfo>>& BTReleasePackageInfo::getComments()
{
    return m_Comments;
}

void BTReleasePackageInfo::setComments(const std::vector<std::shared_ptr<BTCommentInfo>>& value)
{
    m_Comments = value;
    m_CommentsIsSet = true;
}

bool BTReleasePackageInfo::commentsIsSet() const
{
    return m_CommentsIsSet;
}

void BTReleasePackageInfo::unsetComments()
{
    m_CommentsIsSet = false;
}
utility::string_t BTReleasePackageInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTReleasePackageInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTReleasePackageInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTReleasePackageInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTReleasePackageInfo::getDescription() const
{
    return m_Description;
}

void BTReleasePackageInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTReleasePackageInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTReleasePackageInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTReleasePackageInfo::getDescriptionAsProperty() const
{
    return m_DescriptionAsProperty;
}

void BTReleasePackageInfo::setDescriptionAsProperty(const utility::string_t& value)
{
    m_DescriptionAsProperty = value;
    m_DescriptionAsPropertyIsSet = true;
}

bool BTReleasePackageInfo::descriptionAsPropertyIsSet() const
{
    return m_DescriptionAsPropertyIsSet;
}

void BTReleasePackageInfo::unsetDescriptionAsProperty()
{
    m_DescriptionAsPropertyIsSet = false;
}
bool BTReleasePackageInfo::isDetailed() const
{
    return m_Detailed;
}

void BTReleasePackageInfo::setDetailed(bool value)
{
    m_Detailed = value;
    m_DetailedIsSet = true;
}

bool BTReleasePackageInfo::detailedIsSet() const
{
    return m_DetailedIsSet;
}

void BTReleasePackageInfo::unsetDetailed()
{
    m_DetailedIsSet = false;
}
utility::string_t BTReleasePackageInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTReleasePackageInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTReleasePackageInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTReleasePackageInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTReleasePackageInfo::getHref() const
{
    return m_Href;
}

void BTReleasePackageInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTReleasePackageInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTReleasePackageInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTReleasePackageInfo::getId() const
{
    return m_Id;
}

void BTReleasePackageInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTReleasePackageInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTReleasePackageInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTReleasePackageInfo::isIsObsoletion() const
{
    return m_IsObsoletion;
}

void BTReleasePackageInfo::setIsObsoletion(bool value)
{
    m_IsObsoletion = value;
    m_IsObsoletionIsSet = true;
}

bool BTReleasePackageInfo::isObsoletionIsSet() const
{
    return m_IsObsoletionIsSet;
}

void BTReleasePackageInfo::unsetIsObsoletion()
{
    m_IsObsoletionIsSet = false;
}
std::vector<std::shared_ptr<BTReleasePackageItemInfo>>& BTReleasePackageInfo::getItems()
{
    return m_Items;
}

void BTReleasePackageInfo::setItems(const std::vector<std::shared_ptr<BTReleasePackageItemInfo>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool BTReleasePackageInfo::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void BTReleasePackageInfo::unsetItems()
{
    m_ItemsIsSet = false;
}
std::vector<utility::string_t>& BTReleasePackageInfo::getLinkedVersionIds()
{
    return m_LinkedVersionIds;
}

void BTReleasePackageInfo::setLinkedVersionIds(const std::vector<utility::string_t>& value)
{
    m_LinkedVersionIds = value;
    m_LinkedVersionIdsIsSet = true;
}

bool BTReleasePackageInfo::linkedVersionIdsIsSet() const
{
    return m_LinkedVersionIdsIsSet;
}

void BTReleasePackageInfo::unsetLinkedVersionIds()
{
    m_LinkedVersionIdsIsSet = false;
}
utility::string_t BTReleasePackageInfo::getName() const
{
    return m_Name;
}

void BTReleasePackageInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTReleasePackageInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTReleasePackageInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTReleasePackageInfo::getNameAsProperty() const
{
    return m_NameAsProperty;
}

void BTReleasePackageInfo::setNameAsProperty(const utility::string_t& value)
{
    m_NameAsProperty = value;
    m_NameAsPropertyIsSet = true;
}

bool BTReleasePackageInfo::nameAsPropertyIsSet() const
{
    return m_NameAsPropertyIsSet;
}

void BTReleasePackageInfo::unsetNameAsProperty()
{
    m_NameAsPropertyIsSet = false;
}
utility::string_t BTReleasePackageInfo::getPackageThumbnail() const
{
    return m_PackageThumbnail;
}

void BTReleasePackageInfo::setPackageThumbnail(const utility::string_t& value)
{
    m_PackageThumbnail = value;
    m_PackageThumbnailIsSet = true;
}

bool BTReleasePackageInfo::packageThumbnailIsSet() const
{
    return m_PackageThumbnailIsSet;
}

void BTReleasePackageInfo::unsetPackageThumbnail()
{
    m_PackageThumbnailIsSet = false;
}
std::vector<std::shared_ptr<BTReleaseCommentListInfo>>& BTReleasePackageInfo::getParentComments()
{
    return m_ParentComments;
}

void BTReleasePackageInfo::setParentComments(const std::vector<std::shared_ptr<BTReleaseCommentListInfo>>& value)
{
    m_ParentComments = value;
    m_ParentCommentsIsSet = true;
}

bool BTReleasePackageInfo::parentCommentsIsSet() const
{
    return m_ParentCommentsIsSet;
}

void BTReleasePackageInfo::unsetParentComments()
{
    m_ParentCommentsIsSet = false;
}
std::vector<utility::string_t>& BTReleasePackageInfo::getParentPackages()
{
    return m_ParentPackages;
}

void BTReleasePackageInfo::setParentPackages(const std::vector<utility::string_t>& value)
{
    m_ParentPackages = value;
    m_ParentPackagesIsSet = true;
}

bool BTReleasePackageInfo::parentPackagesIsSet() const
{
    return m_ParentPackagesIsSet;
}

void BTReleasePackageInfo::unsetParentPackages()
{
    m_ParentPackagesIsSet = false;
}
std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& BTReleasePackageInfo::getProperties()
{
    return m_Properties;
}

void BTReleasePackageInfo::setProperties(const std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool BTReleasePackageInfo::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void BTReleasePackageInfo::unsetProperties()
{
    m_PropertiesIsSet = false;
}
utility::string_t BTReleasePackageInfo::getRevisionRuleId() const
{
    return m_RevisionRuleId;
}

void BTReleasePackageInfo::setRevisionRuleId(const utility::string_t& value)
{
    m_RevisionRuleId = value;
    m_RevisionRuleIdIsSet = true;
}

bool BTReleasePackageInfo::revisionRuleIdIsSet() const
{
    return m_RevisionRuleIdIsSet;
}

void BTReleasePackageInfo::unsetRevisionRuleId()
{
    m_RevisionRuleIdIsSet = false;
}
utility::string_t BTReleasePackageInfo::getVersionId() const
{
    return m_VersionId;
}

void BTReleasePackageInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTReleasePackageInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTReleasePackageInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTReleasePackageInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTReleasePackageInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTReleasePackageInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTReleasePackageInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
std::shared_ptr<BTWorkflowSnapshotInfo> BTReleasePackageInfo::getWorkflow() const
{
    return m_Workflow;
}

void BTReleasePackageInfo::setWorkflow(const std::shared_ptr<BTWorkflowSnapshotInfo>& value)
{
    m_Workflow = value;
    m_WorkflowIsSet = true;
}

bool BTReleasePackageInfo::workflowIsSet() const
{
    return m_WorkflowIsSet;
}

void BTReleasePackageInfo::unsetWorkflow()
{
    m_WorkflowIsSet = false;
}
std::shared_ptr<BTPublishedWorkflowId> BTReleasePackageInfo::getWorkflowId() const
{
    return m_WorkflowId;
}

void BTReleasePackageInfo::setWorkflowId(const std::shared_ptr<BTPublishedWorkflowId>& value)
{
    m_WorkflowId = value;
    m_WorkflowIdIsSet = true;
}

bool BTReleasePackageInfo::workflowIdIsSet() const
{
    return m_WorkflowIdIsSet;
}

void BTReleasePackageInfo::unsetWorkflowId()
{
    m_WorkflowIdIsSet = false;
}
utility::string_t BTReleasePackageInfo::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTReleasePackageInfo::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTReleasePackageInfo::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTReleasePackageInfo::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


