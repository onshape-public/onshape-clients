/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPartAppearanceInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPartAppearanceInfo::BTPartAppearanceInfo()
{
    m_ColorIsSet = false;
    m_IsGenerated = false;
    m_IsGeneratedIsSet = false;
    m_Opacity = 0;
    m_OpacityIsSet = false;
}

BTPartAppearanceInfo::~BTPartAppearanceInfo()
{
}

void BTPartAppearanceInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTPartAppearanceInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_IsGeneratedIsSet)
    {
        val[utility::conversions::to_string_t("isGenerated")] = ModelBase::toJson(m_IsGenerated);
    }
    if(m_OpacityIsSet)
    {
        val[utility::conversions::to_string_t("opacity")] = ModelBase::toJson(m_Opacity);
    }

    return val;
}

bool BTPartAppearanceInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTColorInfo> refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isGenerated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isGenerated"));
        if(!fieldValue.is_null())
        {
            bool refVal_isGenerated;
            ok &= ModelBase::fromJson(fieldValue, refVal_isGenerated);
            setIsGenerated(refVal_isGenerated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("opacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("opacity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_opacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_opacity);
            setOpacity(refVal_opacity);
        }
    }
    return ok;
}

void BTPartAppearanceInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_IsGeneratedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isGenerated"), m_IsGenerated));
    }
    if(m_OpacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("opacity"), m_Opacity));
    }
}

bool BTPartAppearanceInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        std::shared_ptr<BTColorInfo> refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isGenerated")))
    {
        bool refVal_isGenerated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isGenerated")), refVal_isGenerated );
        setIsGenerated(refVal_isGenerated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("opacity")))
    {
        int32_t refVal_opacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("opacity")), refVal_opacity );
        setOpacity(refVal_opacity);
    }
    return ok;
}

std::shared_ptr<BTColorInfo> BTPartAppearanceInfo::getColor() const
{
    return m_Color;
}

void BTPartAppearanceInfo::setColor(const std::shared_ptr<BTColorInfo>& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool BTPartAppearanceInfo::colorIsSet() const
{
    return m_ColorIsSet;
}

void BTPartAppearanceInfo::unsetColor()
{
    m_ColorIsSet = false;
}
bool BTPartAppearanceInfo::isIsGenerated() const
{
    return m_IsGenerated;
}

void BTPartAppearanceInfo::setIsGenerated(bool value)
{
    m_IsGenerated = value;
    m_IsGeneratedIsSet = true;
}

bool BTPartAppearanceInfo::isGeneratedIsSet() const
{
    return m_IsGeneratedIsSet;
}

void BTPartAppearanceInfo::unsetIsGenerated()
{
    m_IsGeneratedIsSet = false;
}
int32_t BTPartAppearanceInfo::getOpacity() const
{
    return m_Opacity;
}

void BTPartAppearanceInfo::setOpacity(int32_t value)
{
    m_Opacity = value;
    m_OpacityIsSet = true;
}

bool BTPartAppearanceInfo::opacityIsSet() const
{
    return m_OpacityIsSet;
}

void BTPartAppearanceInfo::unsetOpacity()
{
    m_OpacityIsSet = false;
}
}
}
}
}


