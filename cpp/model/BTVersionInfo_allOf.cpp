/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTVersionInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTVersionInfo_allOf::BTVersionInfo_allOf()
{
    m_Purpose = 0;
    m_PurposeIsSet = false;
}

BTVersionInfo_allOf::~BTVersionInfo_allOf()
{
}

void BTVersionInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTVersionInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PurposeIsSet)
    {
        val[utility::conversions::to_string_t("purpose")] = ModelBase::toJson(m_Purpose);
    }

    return val;
}

bool BTVersionInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("purpose")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("purpose"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_purpose;
            ok &= ModelBase::fromJson(fieldValue, refVal_purpose);
            setPurpose(refVal_purpose);
        }
    }
    return ok;
}

void BTVersionInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PurposeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("purpose"), m_Purpose));
    }
}

bool BTVersionInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("purpose")))
    {
        int32_t refVal_purpose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("purpose")), refVal_purpose );
        setPurpose(refVal_purpose);
    }
    return ok;
}

int32_t BTVersionInfo_allOf::getPurpose() const
{
    return m_Purpose;
}

void BTVersionInfo_allOf::setPurpose(int32_t value)
{
    m_Purpose = value;
    m_PurposeIsSet = true;
}

bool BTVersionInfo_allOf::purposeIsSet() const
{
    return m_PurposeIsSet;
}

void BTVersionInfo_allOf::unsetPurpose()
{
    m_PurposeIsSet = false;
}
}
}
}
}


