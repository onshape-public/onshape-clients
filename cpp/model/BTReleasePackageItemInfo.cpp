/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTReleasePackageItemInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTReleasePackageItemInfo::BTReleasePackageItemInfo()
{
    m_CanExport = false;
    m_CanExportIsSet = false;
    m_CompanyId = utility::conversions::to_string_t("");
    m_CompanyIdIsSet = false;
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_ConfigurationKey = utility::conversions::to_string_t("");
    m_ConfigurationKeyIsSet = false;
    m_DiffThumbnailConfigurationKey = utility::conversions::to_string_t("");
    m_DiffThumbnailConfigurationKeyIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementType = 0;
    m_ElementTypeIsSet = false;
    m_ErrorsIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_IsIncludedEditable = false;
    m_IsIncludedEditableIsSet = false;
    m_IsRevisionManaged = false;
    m_IsRevisionManagedIsSet = false;
    m_IsTranslatable = false;
    m_IsTranslatableIsSet = false;
    m_MimeType = utility::conversions::to_string_t("");
    m_MimeTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ObsoletionRevisionId = utility::conversions::to_string_t("");
    m_ObsoletionRevisionIdIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_PartType = utility::conversions::to_string_t("");
    m_PartTypeIsSet = false;
    m_PropertiesIsSet = false;
    m_Rpid = utility::conversions::to_string_t("");
    m_RpidIsSet = false;
    m_SmallThumbnailHref = utility::conversions::to_string_t("");
    m_SmallThumbnailHrefIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTReleasePackageItemInfo::~BTReleasePackageItemInfo()
{
}

void BTReleasePackageItemInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTReleasePackageItemInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CanExportIsSet)
    {
        val[utility::conversions::to_string_t("canExport")] = ModelBase::toJson(m_CanExport);
    }
    if(m_CompanyIdIsSet)
    {
        val[utility::conversions::to_string_t("companyId")] = ModelBase::toJson(m_CompanyId);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_ConfigurationKeyIsSet)
    {
        val[utility::conversions::to_string_t("configurationKey")] = ModelBase::toJson(m_ConfigurationKey);
    }
    if(m_DiffThumbnailConfigurationKeyIsSet)
    {
        val[utility::conversions::to_string_t("diffThumbnailConfigurationKey")] = ModelBase::toJson(m_DiffThumbnailConfigurationKey);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementTypeIsSet)
    {
        val[utility::conversions::to_string_t("elementType")] = ModelBase::toJson(m_ElementType);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t("errors")] = ModelBase::toJson(m_Errors);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_IsIncludedEditableIsSet)
    {
        val[utility::conversions::to_string_t("isIncludedEditable")] = ModelBase::toJson(m_IsIncludedEditable);
    }
    if(m_IsRevisionManagedIsSet)
    {
        val[utility::conversions::to_string_t("isRevisionManaged")] = ModelBase::toJson(m_IsRevisionManaged);
    }
    if(m_IsTranslatableIsSet)
    {
        val[utility::conversions::to_string_t("isTranslatable")] = ModelBase::toJson(m_IsTranslatable);
    }
    if(m_MimeTypeIsSet)
    {
        val[utility::conversions::to_string_t("mimeType")] = ModelBase::toJson(m_MimeType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ObsoletionRevisionIdIsSet)
    {
        val[utility::conversions::to_string_t("obsoletionRevisionId")] = ModelBase::toJson(m_ObsoletionRevisionId);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_PartTypeIsSet)
    {
        val[utility::conversions::to_string_t("partType")] = ModelBase::toJson(m_PartType);
    }
    if(m_PropertiesIsSet)
    {
        val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);
    }
    if(m_RpidIsSet)
    {
        val[utility::conversions::to_string_t("rpid")] = ModelBase::toJson(m_Rpid);
    }
    if(m_SmallThumbnailHrefIsSet)
    {
        val[utility::conversions::to_string_t("smallThumbnailHref")] = ModelBase::toJson(m_SmallThumbnailHref);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTReleasePackageItemInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("canExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canExport"));
        if(!fieldValue.is_null())
        {
            bool refVal_canExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_canExport);
            setCanExport(refVal_canExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("companyId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("companyId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_companyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_companyId);
            setCompanyId(refVal_companyId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationKey);
            setConfigurationKey(refVal_configurationKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("diffThumbnailConfigurationKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("diffThumbnailConfigurationKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_diffThumbnailConfigurationKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_diffThumbnailConfigurationKey);
            setDiffThumbnailConfigurationKey(refVal_diffThumbnailConfigurationKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_elementType;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementType);
            setElementType(refVal_elementType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errors"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTReleasePackageItemError>> refVal_errors;
            ok &= ModelBase::fromJson(fieldValue, refVal_errors);
            setErrors(refVal_errors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isIncludedEditable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isIncludedEditable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isIncludedEditable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isIncludedEditable);
            setIsIncludedEditable(refVal_isIncludedEditable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isRevisionManaged")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isRevisionManaged"));
        if(!fieldValue.is_null())
        {
            bool refVal_isRevisionManaged;
            ok &= ModelBase::fromJson(fieldValue, refVal_isRevisionManaged);
            setIsRevisionManaged(refVal_isRevisionManaged);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isTranslatable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isTranslatable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isTranslatable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isTranslatable);
            setIsTranslatable(refVal_isTranslatable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mimeType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mimeType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mimeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_mimeType);
            setMimeType(refVal_mimeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("obsoletionRevisionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("obsoletionRevisionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_obsoletionRevisionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_obsoletionRevisionId);
            setObsoletionRevisionId(refVal_obsoletionRevisionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partType;
            ok &= ModelBase::fromJson(fieldValue, refVal_partType);
            setPartType(refVal_partType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("properties")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("properties"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMetadataPropertyInfo>> refVal_properties;
            ok &= ModelBase::fromJson(fieldValue, refVal_properties);
            setProperties(refVal_properties);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rpid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rpid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rpid;
            ok &= ModelBase::fromJson(fieldValue, refVal_rpid);
            setRpid(refVal_rpid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smallThumbnailHref")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smallThumbnailHref"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smallThumbnailHref;
            ok &= ModelBase::fromJson(fieldValue, refVal_smallThumbnailHref);
            setSmallThumbnailHref(refVal_smallThumbnailHref);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTReleasePackageItemInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CanExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canExport"), m_CanExport));
    }
    if(m_CompanyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("companyId"), m_CompanyId));
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_ConfigurationKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationKey"), m_ConfigurationKey));
    }
    if(m_DiffThumbnailConfigurationKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("diffThumbnailConfigurationKey"), m_DiffThumbnailConfigurationKey));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementType"), m_ElementType));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errors"), m_Errors));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsIncludedEditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isIncludedEditable"), m_IsIncludedEditable));
    }
    if(m_IsRevisionManagedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isRevisionManaged"), m_IsRevisionManaged));
    }
    if(m_IsTranslatableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isTranslatable"), m_IsTranslatable));
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mimeType"), m_MimeType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ObsoletionRevisionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("obsoletionRevisionId"), m_ObsoletionRevisionId));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_PartTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partType"), m_PartType));
    }
    if(m_PropertiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), m_Properties));
    }
    if(m_RpidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rpid"), m_Rpid));
    }
    if(m_SmallThumbnailHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smallThumbnailHref"), m_SmallThumbnailHref));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTReleasePackageItemInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("canExport")))
    {
        bool refVal_canExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canExport")), refVal_canExport );
        setCanExport(refVal_canExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("companyId")))
    {
        utility::string_t refVal_companyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("companyId")), refVal_companyId );
        setCompanyId(refVal_companyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationKey")))
    {
        utility::string_t refVal_configurationKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationKey")), refVal_configurationKey );
        setConfigurationKey(refVal_configurationKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("diffThumbnailConfigurationKey")))
    {
        utility::string_t refVal_diffThumbnailConfigurationKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("diffThumbnailConfigurationKey")), refVal_diffThumbnailConfigurationKey );
        setDiffThumbnailConfigurationKey(refVal_diffThumbnailConfigurationKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementType")))
    {
        int32_t refVal_elementType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementType")), refVal_elementType );
        setElementType(refVal_elementType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errors")))
    {
        std::vector<std::shared_ptr<BTReleasePackageItemError>> refVal_errors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errors")), refVal_errors );
        setErrors(refVal_errors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isIncludedEditable")))
    {
        bool refVal_isIncludedEditable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isIncludedEditable")), refVal_isIncludedEditable );
        setIsIncludedEditable(refVal_isIncludedEditable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isRevisionManaged")))
    {
        bool refVal_isRevisionManaged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isRevisionManaged")), refVal_isRevisionManaged );
        setIsRevisionManaged(refVal_isRevisionManaged);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isTranslatable")))
    {
        bool refVal_isTranslatable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isTranslatable")), refVal_isTranslatable );
        setIsTranslatable(refVal_isTranslatable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mimeType")))
    {
        utility::string_t refVal_mimeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mimeType")), refVal_mimeType );
        setMimeType(refVal_mimeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("obsoletionRevisionId")))
    {
        utility::string_t refVal_obsoletionRevisionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("obsoletionRevisionId")), refVal_obsoletionRevisionId );
        setObsoletionRevisionId(refVal_obsoletionRevisionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partType")))
    {
        utility::string_t refVal_partType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partType")), refVal_partType );
        setPartType(refVal_partType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("properties")))
    {
        std::vector<std::shared_ptr<BTMetadataPropertyInfo>> refVal_properties;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties")), refVal_properties );
        setProperties(refVal_properties);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rpid")))
    {
        utility::string_t refVal_rpid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rpid")), refVal_rpid );
        setRpid(refVal_rpid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smallThumbnailHref")))
    {
        utility::string_t refVal_smallThumbnailHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smallThumbnailHref")), refVal_smallThumbnailHref );
        setSmallThumbnailHref(refVal_smallThumbnailHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

bool BTReleasePackageItemInfo::isCanExport() const
{
    return m_CanExport;
}

void BTReleasePackageItemInfo::setCanExport(bool value)
{
    m_CanExport = value;
    m_CanExportIsSet = true;
}

bool BTReleasePackageItemInfo::canExportIsSet() const
{
    return m_CanExportIsSet;
}

void BTReleasePackageItemInfo::unsetCanExport()
{
    m_CanExportIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getCompanyId() const
{
    return m_CompanyId;
}

void BTReleasePackageItemInfo::setCompanyId(const utility::string_t& value)
{
    m_CompanyId = value;
    m_CompanyIdIsSet = true;
}

bool BTReleasePackageItemInfo::companyIdIsSet() const
{
    return m_CompanyIdIsSet;
}

void BTReleasePackageItemInfo::unsetCompanyId()
{
    m_CompanyIdIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getConfiguration() const
{
    return m_Configuration;
}

void BTReleasePackageItemInfo::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTReleasePackageItemInfo::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTReleasePackageItemInfo::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getConfigurationKey() const
{
    return m_ConfigurationKey;
}

void BTReleasePackageItemInfo::setConfigurationKey(const utility::string_t& value)
{
    m_ConfigurationKey = value;
    m_ConfigurationKeyIsSet = true;
}

bool BTReleasePackageItemInfo::configurationKeyIsSet() const
{
    return m_ConfigurationKeyIsSet;
}

void BTReleasePackageItemInfo::unsetConfigurationKey()
{
    m_ConfigurationKeyIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getDiffThumbnailConfigurationKey() const
{
    return m_DiffThumbnailConfigurationKey;
}

void BTReleasePackageItemInfo::setDiffThumbnailConfigurationKey(const utility::string_t& value)
{
    m_DiffThumbnailConfigurationKey = value;
    m_DiffThumbnailConfigurationKeyIsSet = true;
}

bool BTReleasePackageItemInfo::diffThumbnailConfigurationKeyIsSet() const
{
    return m_DiffThumbnailConfigurationKeyIsSet;
}

void BTReleasePackageItemInfo::unsetDiffThumbnailConfigurationKey()
{
    m_DiffThumbnailConfigurationKeyIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTReleasePackageItemInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTReleasePackageItemInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTReleasePackageItemInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getElementId() const
{
    return m_ElementId;
}

void BTReleasePackageItemInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTReleasePackageItemInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTReleasePackageItemInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
int32_t BTReleasePackageItemInfo::getElementType() const
{
    return m_ElementType;
}

void BTReleasePackageItemInfo::setElementType(int32_t value)
{
    m_ElementType = value;
    m_ElementTypeIsSet = true;
}

bool BTReleasePackageItemInfo::elementTypeIsSet() const
{
    return m_ElementTypeIsSet;
}

void BTReleasePackageItemInfo::unsetElementType()
{
    m_ElementTypeIsSet = false;
}
std::vector<std::shared_ptr<BTReleasePackageItemError>>& BTReleasePackageItemInfo::getErrors()
{
    return m_Errors;
}

void BTReleasePackageItemInfo::setErrors(const std::vector<std::shared_ptr<BTReleasePackageItemError>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool BTReleasePackageItemInfo::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void BTReleasePackageItemInfo::unsetErrors()
{
    m_ErrorsIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getHref() const
{
    return m_Href;
}

void BTReleasePackageItemInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTReleasePackageItemInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTReleasePackageItemInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getId() const
{
    return m_Id;
}

void BTReleasePackageItemInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTReleasePackageItemInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTReleasePackageItemInfo::unsetId()
{
    m_IdIsSet = false;
}
bool BTReleasePackageItemInfo::isIsIncludedEditable() const
{
    return m_IsIncludedEditable;
}

void BTReleasePackageItemInfo::setIsIncludedEditable(bool value)
{
    m_IsIncludedEditable = value;
    m_IsIncludedEditableIsSet = true;
}

bool BTReleasePackageItemInfo::isIncludedEditableIsSet() const
{
    return m_IsIncludedEditableIsSet;
}

void BTReleasePackageItemInfo::unsetIsIncludedEditable()
{
    m_IsIncludedEditableIsSet = false;
}
bool BTReleasePackageItemInfo::isIsRevisionManaged() const
{
    return m_IsRevisionManaged;
}

void BTReleasePackageItemInfo::setIsRevisionManaged(bool value)
{
    m_IsRevisionManaged = value;
    m_IsRevisionManagedIsSet = true;
}

bool BTReleasePackageItemInfo::isRevisionManagedIsSet() const
{
    return m_IsRevisionManagedIsSet;
}

void BTReleasePackageItemInfo::unsetIsRevisionManaged()
{
    m_IsRevisionManagedIsSet = false;
}
bool BTReleasePackageItemInfo::isIsTranslatable() const
{
    return m_IsTranslatable;
}

void BTReleasePackageItemInfo::setIsTranslatable(bool value)
{
    m_IsTranslatable = value;
    m_IsTranslatableIsSet = true;
}

bool BTReleasePackageItemInfo::isTranslatableIsSet() const
{
    return m_IsTranslatableIsSet;
}

void BTReleasePackageItemInfo::unsetIsTranslatable()
{
    m_IsTranslatableIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getMimeType() const
{
    return m_MimeType;
}

void BTReleasePackageItemInfo::setMimeType(const utility::string_t& value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}

bool BTReleasePackageItemInfo::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void BTReleasePackageItemInfo::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getName() const
{
    return m_Name;
}

void BTReleasePackageItemInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTReleasePackageItemInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTReleasePackageItemInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getObsoletionRevisionId() const
{
    return m_ObsoletionRevisionId;
}

void BTReleasePackageItemInfo::setObsoletionRevisionId(const utility::string_t& value)
{
    m_ObsoletionRevisionId = value;
    m_ObsoletionRevisionIdIsSet = true;
}

bool BTReleasePackageItemInfo::obsoletionRevisionIdIsSet() const
{
    return m_ObsoletionRevisionIdIsSet;
}

void BTReleasePackageItemInfo::unsetObsoletionRevisionId()
{
    m_ObsoletionRevisionIdIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getPartId() const
{
    return m_PartId;
}

void BTReleasePackageItemInfo::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTReleasePackageItemInfo::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTReleasePackageItemInfo::unsetPartId()
{
    m_PartIdIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getPartType() const
{
    return m_PartType;
}

void BTReleasePackageItemInfo::setPartType(const utility::string_t& value)
{
    m_PartType = value;
    m_PartTypeIsSet = true;
}

bool BTReleasePackageItemInfo::partTypeIsSet() const
{
    return m_PartTypeIsSet;
}

void BTReleasePackageItemInfo::unsetPartType()
{
    m_PartTypeIsSet = false;
}
std::vector<std::shared_ptr<BTMetadataPropertyInfo>>& BTReleasePackageItemInfo::getProperties()
{
    return m_Properties;
}

void BTReleasePackageItemInfo::setProperties(const std::vector<std::shared_ptr<BTMetadataPropertyInfo>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool BTReleasePackageItemInfo::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void BTReleasePackageItemInfo::unsetProperties()
{
    m_PropertiesIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getRpid() const
{
    return m_Rpid;
}

void BTReleasePackageItemInfo::setRpid(const utility::string_t& value)
{
    m_Rpid = value;
    m_RpidIsSet = true;
}

bool BTReleasePackageItemInfo::rpidIsSet() const
{
    return m_RpidIsSet;
}

void BTReleasePackageItemInfo::unsetRpid()
{
    m_RpidIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getSmallThumbnailHref() const
{
    return m_SmallThumbnailHref;
}

void BTReleasePackageItemInfo::setSmallThumbnailHref(const utility::string_t& value)
{
    m_SmallThumbnailHref = value;
    m_SmallThumbnailHrefIsSet = true;
}

bool BTReleasePackageItemInfo::smallThumbnailHrefIsSet() const
{
    return m_SmallThumbnailHrefIsSet;
}

void BTReleasePackageItemInfo::unsetSmallThumbnailHref()
{
    m_SmallThumbnailHrefIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getVersionId() const
{
    return m_VersionId;
}

void BTReleasePackageItemInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTReleasePackageItemInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTReleasePackageItemInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTReleasePackageItemInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTReleasePackageItemInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTReleasePackageItemInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
utility::string_t BTReleasePackageItemInfo::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTReleasePackageItemInfo::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTReleasePackageItemInfo::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTReleasePackageItemInfo::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


