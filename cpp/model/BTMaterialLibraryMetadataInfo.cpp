/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMaterialLibraryMetadataInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMaterialLibraryMetadataInfo::BTMaterialLibraryMetadataInfo()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentName = utility::conversions::to_string_t("");
    m_DocumentNameIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_IsPublic = false;
    m_IsPublicIsSet = false;
    m_LibraryName = utility::conversions::to_string_t("");
    m_LibraryNameIsSet = false;
    m_OwnerName = utility::conversions::to_string_t("");
    m_OwnerNameIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_WorkspaceId = utility::conversions::to_string_t("");
    m_WorkspaceIdIsSet = false;
}

BTMaterialLibraryMetadataInfo::~BTMaterialLibraryMetadataInfo()
{
}

void BTMaterialLibraryMetadataInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMaterialLibraryMetadataInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentNameIsSet)
    {
        val[utility::conversions::to_string_t("documentName")] = ModelBase::toJson(m_DocumentName);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_IsPublicIsSet)
    {
        val[utility::conversions::to_string_t("isPublic")] = ModelBase::toJson(m_IsPublic);
    }
    if(m_LibraryNameIsSet)
    {
        val[utility::conversions::to_string_t("libraryName")] = ModelBase::toJson(m_LibraryName);
    }
    if(m_OwnerNameIsSet)
    {
        val[utility::conversions::to_string_t("ownerName")] = ModelBase::toJson(m_OwnerName);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_WorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("workspaceId")] = ModelBase::toJson(m_WorkspaceId);
    }

    return val;
}

bool BTMaterialLibraryMetadataInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentName;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentName);
            setDocumentName(refVal_documentName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPublic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPublic"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPublic;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPublic);
            setIsPublic(refVal_isPublic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("libraryName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraryName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_libraryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraryName);
            setLibraryName(refVal_libraryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerName);
            setOwnerName(refVal_ownerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceId);
            setWorkspaceId(refVal_workspaceId);
        }
    }
    return ok;
}

void BTMaterialLibraryMetadataInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentName"), m_DocumentName));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_IsPublicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPublic"), m_IsPublic));
    }
    if(m_LibraryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryName"), m_LibraryName));
    }
    if(m_OwnerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerName"), m_OwnerName));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_WorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceId"), m_WorkspaceId));
    }
}

bool BTMaterialLibraryMetadataInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentName")))
    {
        utility::string_t refVal_documentName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentName")), refVal_documentName );
        setDocumentName(refVal_documentName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPublic")))
    {
        bool refVal_isPublic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPublic")), refVal_isPublic );
        setIsPublic(refVal_isPublic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryName")))
    {
        utility::string_t refVal_libraryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryName")), refVal_libraryName );
        setLibraryName(refVal_libraryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerName")))
    {
        utility::string_t refVal_ownerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerName")), refVal_ownerName );
        setOwnerName(refVal_ownerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceId")))
    {
        utility::string_t refVal_workspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceId")), refVal_workspaceId );
        setWorkspaceId(refVal_workspaceId);
    }
    return ok;
}

utility::string_t BTMaterialLibraryMetadataInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTMaterialLibraryMetadataInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getDocumentName() const
{
    return m_DocumentName;
}

void BTMaterialLibraryMetadataInfo::setDocumentName(const utility::string_t& value)
{
    m_DocumentName = value;
    m_DocumentNameIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::documentNameIsSet() const
{
    return m_DocumentNameIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetDocumentName()
{
    m_DocumentNameIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getElementId() const
{
    return m_ElementId;
}

void BTMaterialLibraryMetadataInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
bool BTMaterialLibraryMetadataInfo::isIsPublic() const
{
    return m_IsPublic;
}

void BTMaterialLibraryMetadataInfo::setIsPublic(bool value)
{
    m_IsPublic = value;
    m_IsPublicIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::isPublicIsSet() const
{
    return m_IsPublicIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetIsPublic()
{
    m_IsPublicIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getLibraryName() const
{
    return m_LibraryName;
}

void BTMaterialLibraryMetadataInfo::setLibraryName(const utility::string_t& value)
{
    m_LibraryName = value;
    m_LibraryNameIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::libraryNameIsSet() const
{
    return m_LibraryNameIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetLibraryName()
{
    m_LibraryNameIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getOwnerName() const
{
    return m_OwnerName;
}

void BTMaterialLibraryMetadataInfo::setOwnerName(const utility::string_t& value)
{
    m_OwnerName = value;
    m_OwnerNameIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::ownerNameIsSet() const
{
    return m_OwnerNameIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetOwnerName()
{
    m_OwnerNameIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getVersionId() const
{
    return m_VersionId;
}

void BTMaterialLibraryMetadataInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTMaterialLibraryMetadataInfo::getWorkspaceId() const
{
    return m_WorkspaceId;
}

void BTMaterialLibraryMetadataInfo::setWorkspaceId(const utility::string_t& value)
{
    m_WorkspaceId = value;
    m_WorkspaceIdIsSet = true;
}

bool BTMaterialLibraryMetadataInfo::workspaceIdIsSet() const
{
    return m_WorkspaceIdIsSet;
}

void BTMaterialLibraryMetadataInfo::unsetWorkspaceId()
{
    m_WorkspaceIdIsSet = false;
}
}
}
}
}


