/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPLiteralArray_254_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPLiteralArray_254_allOf::BTPLiteralArray_254_allOf()
{
    m_SpaceInEmptyListIsSet = false;
    m_TrailingComma = false;
    m_TrailingCommaIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPLiteralArray_254_allOf::~BTPLiteralArray_254_allOf()
{
}

void BTPLiteralArray_254_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPLiteralArray_254_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SpaceInEmptyListIsSet)
    {
        val[utility::conversions::to_string_t("spaceInEmptyList")] = ModelBase::toJson(m_SpaceInEmptyList);
    }
    if(m_TrailingCommaIsSet)
    {
        val[utility::conversions::to_string_t("trailingComma")] = ModelBase::toJson(m_TrailingComma);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPLiteralArray_254_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("spaceInEmptyList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceInEmptyList"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceInEmptyList;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceInEmptyList);
            setSpaceInEmptyList(refVal_spaceInEmptyList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trailingComma")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trailingComma"));
        if(!fieldValue.is_null())
        {
            bool refVal_trailingComma;
            ok &= ModelBase::fromJson(fieldValue, refVal_trailingComma);
            setTrailingComma(refVal_trailingComma);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPLiteralArray_254_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SpaceInEmptyListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceInEmptyList"), m_SpaceInEmptyList));
    }
    if(m_TrailingCommaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trailingComma"), m_TrailingComma));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPLiteralArray_254_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("spaceInEmptyList")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceInEmptyList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceInEmptyList")), refVal_spaceInEmptyList );
        setSpaceInEmptyList(refVal_spaceInEmptyList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trailingComma")))
    {
        bool refVal_trailingComma;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trailingComma")), refVal_trailingComma );
        setTrailingComma(refVal_trailingComma);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTPSpace_10> BTPLiteralArray_254_allOf::getSpaceInEmptyList() const
{
    return m_SpaceInEmptyList;
}

void BTPLiteralArray_254_allOf::setSpaceInEmptyList(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceInEmptyList = value;
    m_SpaceInEmptyListIsSet = true;
}

bool BTPLiteralArray_254_allOf::spaceInEmptyListIsSet() const
{
    return m_SpaceInEmptyListIsSet;
}

void BTPLiteralArray_254_allOf::unsetSpaceInEmptyList()
{
    m_SpaceInEmptyListIsSet = false;
}
bool BTPLiteralArray_254_allOf::isTrailingComma() const
{
    return m_TrailingComma;
}

void BTPLiteralArray_254_allOf::setTrailingComma(bool value)
{
    m_TrailingComma = value;
    m_TrailingCommaIsSet = true;
}

bool BTPLiteralArray_254_allOf::trailingCommaIsSet() const
{
    return m_TrailingCommaIsSet;
}

void BTPLiteralArray_254_allOf::unsetTrailingComma()
{
    m_TrailingCommaIsSet = false;
}
utility::string_t BTPLiteralArray_254_allOf::getBtType() const
{
    return m_BtType;
}

void BTPLiteralArray_254_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPLiteralArray_254_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPLiteralArray_254_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


