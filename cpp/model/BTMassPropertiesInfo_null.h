/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMassPropertiesInfo_null.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMassPropertiesInfo_null_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMassPropertiesInfo_null_H_


#include "../ModelBase.h"

#include <vector>
#include "BTVector3d_389.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMassPropertiesInfo_null
    : public ModelBase
{
public:
    BTMassPropertiesInfo_null();
    virtual ~BTMassPropertiesInfo_null();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMassPropertiesInfo_null members

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getCentroid();
    bool centroidIsSet() const;
    void unsetCentroid();

    void setCentroid(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasMass() const;
    bool hasMassIsSet() const;
    void unsetHasMass();

    void setHasMass(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getInertia();
    bool inertiaIsSet() const;
    void unsetInertia();

    void setInertia(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getMass();
    bool massIsSet() const;
    void unsetMass();

    void setMass(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMassMissingCount() const;
    bool massMissingCountIsSet() const;
    void unsetMassMissingCount();

    void setMassMissingCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getPeriphery();
    bool peripheryIsSet() const;
    void unsetPeriphery();

    void setPeriphery(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTVector3d_389>>& getPrincipalAxes();
    bool principalAxesIsSet() const;
    void unsetPrincipalAxes();

    void setPrincipalAxes(const std::vector<std::shared_ptr<BTVector3d_389>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getPrincipalInertia();
    bool principalInertiaIsSet() const;
    void unsetPrincipalInertia();

    void setPrincipalInertia(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getVolume();
    bool volumeIsSet() const;
    void unsetVolume();

    void setVolume(std::vector<double> value);


protected:
    std::vector<double> m_Centroid;
    bool m_CentroidIsSet;
    bool m_HasMass;
    bool m_HasMassIsSet;
    std::vector<double> m_Inertia;
    bool m_InertiaIsSet;
    std::vector<double> m_Mass;
    bool m_MassIsSet;
    int32_t m_MassMissingCount;
    bool m_MassMissingCountIsSet;
    std::vector<double> m_Periphery;
    bool m_PeripheryIsSet;
    std::vector<std::shared_ptr<BTVector3d_389>> m_PrincipalAxes;
    bool m_PrincipalAxesIsSet;
    std::vector<double> m_PrincipalInertia;
    bool m_PrincipalInertiaIsSet;
    std::vector<double> m_Volume;
    bool m_VolumeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMassPropertiesInfo_null_H_ */
