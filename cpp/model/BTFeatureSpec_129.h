/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTFeatureSpec_129.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureSpec_129_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureSpec_129_H_


#include "../ModelBase.h"

#include "BTEditingLogic_2350.h"
#include "BTParameterGroupSpec_3469.h"
#include <cpprest/details/basic_types.h>
#include "BTLocationInfo_226.h"
#include "BTParameterSpec_6.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTFeatureSpec_129
    : public ModelBase
{
public:
    BTFeatureSpec_129();
    virtual ~BTFeatureSpec_129();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTFeatureSpec_129 members

    /// <summary>
    /// 
    /// </summary>
    int32_t getAdditionalLocalizedStrings() const;
    bool additionalLocalizedStringsIsSet() const;
    void unsetAdditionalLocalizedStrings();

    void setAdditionalLocalizedStrings(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTParameterSpec_6>>& getAllParameters();
    bool allParametersIsSet() const;
    void unsetAllParameters();

    void setAllParameters(const std::vector<std::shared_ptr<BTParameterSpec_6>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTEditingLogic_2350> getEditingLogic() const;
    bool editingLogicIsSet() const;
    void unsetEditingLogic();

    void setEditingLogic(const std::shared_ptr<BTEditingLogic_2350>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureNameTemplate() const;
    bool featureNameTemplateIsSet() const;
    void unsetFeatureNameTemplate();

    void setFeatureNameTemplate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureType() const;
    bool featureTypeIsSet() const;
    void unsetFeatureType();

    void setFeatureType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeatureTypeName() const;
    bool featureTypeNameIsSet() const;
    void unsetFeatureTypeName();

    void setFeatureTypeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFilterSelectors();
    bool filterSelectorsIsSet() const;
    void unsetFilterSelectors();

    void setFilterSelectors(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFullFeatureType() const;
    bool fullFeatureTypeIsSet() const;
    void unsetFullFeatureType();

    void setFullFeatureType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTParameterGroupSpec_3469>>& getGroups();
    bool groupsIsSet() const;
    void unsetGroups();

    void setGroups(const std::vector<std::shared_ptr<BTParameterGroupSpec_3469>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIconUri() const;
    bool iconUriIsSet() const;
    void unsetIconUri();

    void setIconUri(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLanguageVersion() const;
    bool languageVersionIsSet() const;
    void unsetLanguageVersion();

    void setLanguageVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLinkedLocationName() const;
    bool linkedLocationNameIsSet() const;
    void unsetLinkedLocationName();

    void setLinkedLocationName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocalizableName() const;
    bool localizableNameIsSet() const;
    void unsetLocalizableName();

    void setLocalizableName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocalizedName() const;
    bool localizedNameIsSet() const;
    void unsetLocalizedName();

    void setLocalizedName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTLocationInfo_226>>& getLocationInfos();
    bool locationInfosIsSet() const;
    void unsetLocationInfos();

    void setLocationInfos(const std::vector<std::shared_ptr<BTLocationInfo_226>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getManipulatorChangeFunction() const;
    bool manipulatorChangeFunctionIsSet() const;
    void unsetManipulatorChangeFunction();

    void setManipulatorChangeFunction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRNamespace() const;
    bool rNamespaceIsSet() const;
    void unsetr_namespace();

    void setRNamespace(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNamespaceIncludingEnums() const;
    bool namespaceIncludingEnumsIsSet() const;
    void unsetNamespaceIncludingEnums();

    void setNamespaceIncludingEnums(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNamespaceTheSource() const;
    bool namespaceTheSourceIsSet() const;
    void unsetNamespaceTheSource();

    void setNamespaceTheSource(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTParameterSpec_6>>& getParameters();
    bool parametersIsSet() const;
    void unsetParameters();

    void setParameters(const std::vector<std::shared_ptr<BTParameterSpec_6>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSignature() const;
    bool signatureIsSet() const;
    void unsetSignature();

    void setSignature(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTLocationInfo_226> getSourceLocation() const;
    bool sourceLocationIsSet() const;
    void unsetSourceLocation();

    void setSourceLocation(const std::shared_ptr<BTLocationInfo_226>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceMicroversionId() const;
    bool sourceMicroversionIdIsSet() const;
    void unsetSourceMicroversionId();

    void setSourceMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getStringsToLocalize();
    bool stringsToLocalizeIsSet() const;
    void unsetStringsToLocalize();

    void setStringsToLocalize(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTableSpec() const;
    bool tableSpecIsSet() const;
    void unsetTableSpec();

    void setTableSpec(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getUiHints();
    bool uiHintsIsSet() const;
    void unsetUiHints();

    void setUiHints(const std::vector<utility::string_t>& value);


protected:
    int32_t m_AdditionalLocalizedStrings;
    bool m_AdditionalLocalizedStringsIsSet;
    std::vector<std::shared_ptr<BTParameterSpec_6>> m_AllParameters;
    bool m_AllParametersIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    std::shared_ptr<BTEditingLogic_2350> m_EditingLogic;
    bool m_EditingLogicIsSet;
    utility::string_t m_FeatureNameTemplate;
    bool m_FeatureNameTemplateIsSet;
    utility::string_t m_FeatureType;
    bool m_FeatureTypeIsSet;
    utility::string_t m_FeatureTypeName;
    bool m_FeatureTypeNameIsSet;
    std::vector<utility::string_t> m_FilterSelectors;
    bool m_FilterSelectorsIsSet;
    utility::string_t m_FullFeatureType;
    bool m_FullFeatureTypeIsSet;
    std::vector<std::shared_ptr<BTParameterGroupSpec_3469>> m_Groups;
    bool m_GroupsIsSet;
    utility::string_t m_IconUri;
    bool m_IconUriIsSet;
    int32_t m_LanguageVersion;
    bool m_LanguageVersionIsSet;
    utility::string_t m_LinkedLocationName;
    bool m_LinkedLocationNameIsSet;
    utility::string_t m_LocalizableName;
    bool m_LocalizableNameIsSet;
    utility::string_t m_LocalizedName;
    bool m_LocalizedNameIsSet;
    std::vector<std::shared_ptr<BTLocationInfo_226>> m_LocationInfos;
    bool m_LocationInfosIsSet;
    utility::string_t m_ManipulatorChangeFunction;
    bool m_ManipulatorChangeFunctionIsSet;
    utility::string_t m_r_namespace;
    bool m_r_namespaceIsSet;
    utility::string_t m_NamespaceIncludingEnums;
    bool m_NamespaceIncludingEnumsIsSet;
    bool m_NamespaceTheSource;
    bool m_NamespaceTheSourceIsSet;
    std::vector<std::shared_ptr<BTParameterSpec_6>> m_Parameters;
    bool m_ParametersIsSet;
    utility::string_t m_Signature;
    bool m_SignatureIsSet;
    std::shared_ptr<BTLocationInfo_226> m_SourceLocation;
    bool m_SourceLocationIsSet;
    utility::string_t m_SourceMicroversionId;
    bool m_SourceMicroversionIdIsSet;
    std::vector<utility::string_t> m_StringsToLocalize;
    bool m_StringsToLocalizeIsSet;
    bool m_TableSpec;
    bool m_TableSpecIsSet;
    std::vector<utility::string_t> m_UiHints;
    bool m_UiHintsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureSpec_129_H_ */
