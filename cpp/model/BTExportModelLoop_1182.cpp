/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelLoop_1182.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelLoop_1182::BTExportModelLoop_1182()
{
    m_CoedgesIsSet = false;
    m_IsInner = false;
    m_IsInnerIsSet = false;
    m_IsOuter = false;
    m_IsOuterIsSet = false;
}

BTExportModelLoop_1182::~BTExportModelLoop_1182()
{
}

void BTExportModelLoop_1182::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelLoop_1182::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CoedgesIsSet)
    {
        val[utility::conversions::to_string_t("coedges")] = ModelBase::toJson(m_Coedges);
    }
    if(m_IsInnerIsSet)
    {
        val[utility::conversions::to_string_t("isInner")] = ModelBase::toJson(m_IsInner);
    }
    if(m_IsOuterIsSet)
    {
        val[utility::conversions::to_string_t("isOuter")] = ModelBase::toJson(m_IsOuter);
    }

    return val;
}

bool BTExportModelLoop_1182::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("coedges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coedges"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportModelCoedge_1342>> refVal_coedges;
            ok &= ModelBase::fromJson(fieldValue, refVal_coedges);
            setCoedges(refVal_coedges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isInner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isInner"));
        if(!fieldValue.is_null())
        {
            bool refVal_isInner;
            ok &= ModelBase::fromJson(fieldValue, refVal_isInner);
            setIsInner(refVal_isInner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isOuter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isOuter"));
        if(!fieldValue.is_null())
        {
            bool refVal_isOuter;
            ok &= ModelBase::fromJson(fieldValue, refVal_isOuter);
            setIsOuter(refVal_isOuter);
        }
    }
    return ok;
}

void BTExportModelLoop_1182::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CoedgesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coedges"), m_Coedges));
    }
    if(m_IsInnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInner"), m_IsInner));
    }
    if(m_IsOuterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isOuter"), m_IsOuter));
    }
}

bool BTExportModelLoop_1182::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("coedges")))
    {
        std::vector<std::shared_ptr<BTExportModelCoedge_1342>> refVal_coedges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("coedges")), refVal_coedges );
        setCoedges(refVal_coedges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isInner")))
    {
        bool refVal_isInner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInner")), refVal_isInner );
        setIsInner(refVal_isInner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isOuter")))
    {
        bool refVal_isOuter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isOuter")), refVal_isOuter );
        setIsOuter(refVal_isOuter);
    }
    return ok;
}

std::vector<std::shared_ptr<BTExportModelCoedge_1342>>& BTExportModelLoop_1182::getCoedges()
{
    return m_Coedges;
}

void BTExportModelLoop_1182::setCoedges(const std::vector<std::shared_ptr<BTExportModelCoedge_1342>>& value)
{
    m_Coedges = value;
    m_CoedgesIsSet = true;
}

bool BTExportModelLoop_1182::coedgesIsSet() const
{
    return m_CoedgesIsSet;
}

void BTExportModelLoop_1182::unsetCoedges()
{
    m_CoedgesIsSet = false;
}
bool BTExportModelLoop_1182::isIsInner() const
{
    return m_IsInner;
}

void BTExportModelLoop_1182::setIsInner(bool value)
{
    m_IsInner = value;
    m_IsInnerIsSet = true;
}

bool BTExportModelLoop_1182::isInnerIsSet() const
{
    return m_IsInnerIsSet;
}

void BTExportModelLoop_1182::unsetIsInner()
{
    m_IsInnerIsSet = false;
}
bool BTExportModelLoop_1182::isIsOuter() const
{
    return m_IsOuter;
}

void BTExportModelLoop_1182::setIsOuter(bool value)
{
    m_IsOuter = value;
    m_IsOuterIsSet = true;
}

bool BTExportModelLoop_1182::isOuterIsSet() const
{
    return m_IsOuterIsSet;
}

void BTExportModelLoop_1182::unsetIsOuter()
{
    m_IsOuterIsSet = false;
}
}
}
}
}


