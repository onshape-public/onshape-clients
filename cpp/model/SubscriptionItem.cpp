/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SubscriptionItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SubscriptionItem::SubscriptionItem()
{
    m_Created = 0L;
    m_CreatedIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_object = utility::conversions::to_string_t("");
    m_objectIsSet = false;
    m_PlanIsSet = false;
    m_Quantity = 0;
    m_QuantityIsSet = false;
}

SubscriptionItem::~SubscriptionItem()
{
}

void SubscriptionItem::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_objectIsSet)
    {
        val[utility::conversions::to_string_t("object")] = ModelBase::toJson(m_object);
    }
    if(m_PlanIsSet)
    {
        val[utility::conversions::to_string_t("plan")] = ModelBase::toJson(m_Plan);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t("quantity")] = ModelBase::toJson(m_Quantity);
    }

    return val;
}

bool SubscriptionItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_object;
            ok &= ModelBase::fromJson(fieldValue, refVal_object);
            setObject(refVal_object);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plan"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Plan> refVal_plan;
            ok &= ModelBase::fromJson(fieldValue, refVal_plan);
            setPlan(refVal_plan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("quantity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("quantity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_quantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_quantity);
            setQuantity(refVal_quantity);
        }
    }
    return ok;
}

void SubscriptionItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_objectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object"), m_object));
    }
    if(m_PlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plan"), m_Plan));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("quantity"), m_Quantity));
    }
}

bool SubscriptionItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        int64_t refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object")))
    {
        utility::string_t refVal_object;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("object")), refVal_object );
        setObject(refVal_object);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plan")))
    {
        std::shared_ptr<Plan> refVal_plan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plan")), refVal_plan );
        setPlan(refVal_plan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("quantity")))
    {
        int32_t refVal_quantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("quantity")), refVal_quantity );
        setQuantity(refVal_quantity);
    }
    return ok;
}

int64_t SubscriptionItem::getCreated() const
{
    return m_Created;
}

void SubscriptionItem::setCreated(int64_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool SubscriptionItem::createdIsSet() const
{
    return m_CreatedIsSet;
}

void SubscriptionItem::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t SubscriptionItem::getId() const
{
    return m_Id;
}

void SubscriptionItem::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SubscriptionItem::idIsSet() const
{
    return m_IdIsSet;
}

void SubscriptionItem::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SubscriptionItem::getObject() const
{
    return m_object;
}

void SubscriptionItem::setObject(const utility::string_t& value)
{
    m_object = value;
    m_objectIsSet = true;
}

bool SubscriptionItem::objectIsSet() const
{
    return m_objectIsSet;
}

void SubscriptionItem::unsetobject()
{
    m_objectIsSet = false;
}
std::shared_ptr<Plan> SubscriptionItem::getPlan() const
{
    return m_Plan;
}

void SubscriptionItem::setPlan(const std::shared_ptr<Plan>& value)
{
    m_Plan = value;
    m_PlanIsSet = true;
}

bool SubscriptionItem::planIsSet() const
{
    return m_PlanIsSet;
}

void SubscriptionItem::unsetPlan()
{
    m_PlanIsSet = false;
}
int32_t SubscriptionItem::getQuantity() const
{
    return m_Quantity;
}

void SubscriptionItem::setQuantity(int32_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool SubscriptionItem::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void SubscriptionItem::unsetQuantity()
{
    m_QuantityIsSet = false;
}
}
}
}
}


