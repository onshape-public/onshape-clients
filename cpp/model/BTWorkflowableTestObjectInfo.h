/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTWorkflowableTestObjectInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowableTestObjectInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowableTestObjectInfo_H_


#include "../ModelBase.h"

#include "BTPublishedWorkflowId.h"
#include "BTWorkflowPropertyInfo.h"
#include <cpprest/details/basic_types.h>
#include "BTWorkflowSnapshotInfo.h"
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTWorkflowableTestObjectInfo
    : public ModelBase
{
public:
    BTWorkflowableTestObjectInfo();
    virtual ~BTWorkflowableTestObjectInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTWorkflowableTestObjectInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescriptionAsProperty() const;
    bool descriptionAsPropertyIsSet() const;
    void unsetDescriptionAsProperty();

    void setDescriptionAsProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getInfo();
    bool infoIsSet() const;
    void unsetInfo();

    void setInfo(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsObsoletion() const;
    bool isObsoletionIsSet() const;
    void unsetIsObsoletion();

    void setIsObsoletion(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNameAsProperty() const;
    bool nameAsPropertyIsSet() const;
    void unsetNameAsProperty();

    void setNameAsProperty(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::vector<std::shared_ptr<BTWorkflowPropertyInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWorkflowSnapshotInfo> getWorkflow() const;
    bool workflowIsSet() const;
    void unsetWorkflow();

    void setWorkflow(const std::shared_ptr<BTWorkflowSnapshotInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPublishedWorkflowId> getWorkflowId() const;
    bool workflowIdIsSet() const;
    void unsetWorkflowId();

    void setWorkflowId(const std::shared_ptr<BTPublishedWorkflowId>& value);


protected:
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_DescriptionAsProperty;
    bool m_DescriptionAsPropertyIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::map<utility::string_t, utility::string_t> m_Info;
    bool m_InfoIsSet;
    bool m_IsObsoletion;
    bool m_IsObsoletionIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_NameAsProperty;
    bool m_NameAsPropertyIsSet;
    std::vector<std::shared_ptr<BTWorkflowPropertyInfo>> m_Properties;
    bool m_PropertiesIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
    std::shared_ptr<BTWorkflowSnapshotInfo> m_Workflow;
    bool m_WorkflowIsSet;
    std::shared_ptr<BTPublishedWorkflowId> m_WorkflowId;
    bool m_WorkflowIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTWorkflowableTestObjectInfo_H_ */
