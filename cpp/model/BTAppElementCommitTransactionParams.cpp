/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementCommitTransactionParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementCommitTransactionParams::BTAppElementCommitTransactionParams()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ReturnError = false;
    m_ReturnErrorIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
}

BTAppElementCommitTransactionParams::~BTAppElementCommitTransactionParams()
{
}

void BTAppElementCommitTransactionParams::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementCommitTransactionParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_ReturnErrorIsSet)
    {
        val[utility::conversions::to_string_t("returnError")] = ModelBase::toJson(m_ReturnError);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t("transactionId")] = ModelBase::toJson(m_TransactionId);
    }

    return val;
}

bool BTAppElementCommitTransactionParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("returnError")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("returnError"));
        if(!fieldValue.is_null())
        {
            bool refVal_returnError;
            ok &= ModelBase::fromJson(fieldValue, refVal_returnError);
            setReturnError(refVal_returnError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transactionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transactionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionId);
            setTransactionId(refVal_transactionId);
        }
    }
    return ok;
}

void BTAppElementCommitTransactionParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_ReturnErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("returnError"), m_ReturnError));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transactionId"), m_TransactionId));
    }
}

bool BTAppElementCommitTransactionParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("returnError")))
    {
        bool refVal_returnError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("returnError")), refVal_returnError );
        setReturnError(refVal_returnError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transactionId")))
    {
        utility::string_t refVal_transactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transactionId")), refVal_transactionId );
        setTransactionId(refVal_transactionId);
    }
    return ok;
}

utility::string_t BTAppElementCommitTransactionParams::getDescription() const
{
    return m_Description;
}

void BTAppElementCommitTransactionParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTAppElementCommitTransactionParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTAppElementCommitTransactionParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool BTAppElementCommitTransactionParams::isReturnError() const
{
    return m_ReturnError;
}

void BTAppElementCommitTransactionParams::setReturnError(bool value)
{
    m_ReturnError = value;
    m_ReturnErrorIsSet = true;
}

bool BTAppElementCommitTransactionParams::returnErrorIsSet() const
{
    return m_ReturnErrorIsSet;
}

void BTAppElementCommitTransactionParams::unsetReturnError()
{
    m_ReturnErrorIsSet = false;
}
utility::string_t BTAppElementCommitTransactionParams::getTransactionId() const
{
    return m_TransactionId;
}

void BTAppElementCommitTransactionParams::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool BTAppElementCommitTransactionParams::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void BTAppElementCommitTransactionParams::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
}
}
}
}


