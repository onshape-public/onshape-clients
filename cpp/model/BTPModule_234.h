/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPModule_234.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModule_234_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModule_234_H_


#include "BTMicroversionId_366.h"
#include "BTPTopLevelNode_286.h"
#include "BTPModule_234_allOf.h"
#include "BTPNode_7.h"
#include "BTCacheDataPath_191.h"
#include <cpprest/details/basic_types.h>
#include "BTImport.h"
#include "BTPLiteralNumber_258.h"
#include "BTPSpace_10.h"
#include <map>
#include "BTPTopLevelImport_285.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPModule_234
    : public BTPNode_7
{
public:
    BTPModule_234();
    virtual ~BTPModule_234();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPModule_234 members

    /// <summary>
    /// 
    /// </summary>
    int32_t getVersionNumber() const;
    bool versionNumberIsSet() const;
    void unsetVersionNumber();

    void setVersionNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>>& getDeepImports();
    bool deepImportsIsSet() const;
    void unsetDeepImports();

    void setDeepImports(const std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsInternalModule() const;
    bool isInternalModuleIsSet() const;
    void unsetIsInternalModule();

    void setIsInternalModule(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPTopLevelImport_285>>& getImports();
    bool importsIsSet() const;
    void unsetImports();

    void setImports(const std::vector<std::shared_ptr<BTPTopLevelImport_285>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>>& getPathMap();
    bool pathMapIsSet() const;
    void unsetPathMap();

    void setPathMap(const std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPLiteralNumber_258> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<BTPLiteralNumber_258>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTPTopLevelNode_286>>& getTopLevel();
    bool topLevelIsSet() const;
    void unsetTopLevel();

    void setTopLevel(const std::vector<std::shared_ptr<BTPTopLevelNode_286>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTCacheDataPath_191> getPathToCache() const;
    bool pathToCacheIsSet() const;
    void unsetPathToCache();

    void setPathToCache(const std::shared_ptr<BTCacheDataPath_191>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsBlob() const;
    bool isBlobIsSet() const;
    void unsetIsBlob();

    void setIsBlob(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isMayHaveImplicitImports() const;
    bool mayHaveImplicitImportsIsSet() const;
    void unsetMayHaveImplicitImports();

    void setMayHaveImplicitImports(bool value);


protected:
    int32_t m_VersionNumber;
    bool m_VersionNumberIsSet;
    std::map<utility::string_t, std::vector<std::shared_ptr<BTImport>>> m_DeepImports;
    bool m_DeepImportsIsSet;
    bool m_IsInternalModule;
    bool m_IsInternalModuleIsSet;
    std::vector<std::shared_ptr<BTPTopLevelImport_285>> m_Imports;
    bool m_ImportsIsSet;
    std::map<utility::string_t, std::shared_ptr<BTMicroversionId_366>> m_PathMap;
    bool m_PathMapIsSet;
    std::shared_ptr<BTPLiteralNumber_258> m_Version;
    bool m_VersionIsSet;
    std::vector<std::shared_ptr<BTPTopLevelNode_286>> m_TopLevel;
    bool m_TopLevelIsSet;
    std::shared_ptr<BTCacheDataPath_191> m_PathToCache;
    bool m_PathToCacheIsSet;
    bool m_IsBlob;
    bool m_IsBlobIsSet;
    bool m_MayHaveImplicitImports;
    bool m_MayHaveImplicitImportsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPModule_234_H_ */
