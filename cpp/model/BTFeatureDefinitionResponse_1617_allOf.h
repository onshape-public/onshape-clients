/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTFeatureDefinitionResponse_1617_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureDefinitionResponse_1617_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureDefinitionResponse_1617_allOf_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "BTFeatureState_1688.h"
#include "BTMFeature_134.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTFeatureDefinitionResponse_1617_allOf
    : public ModelBase
{
public:
    BTFeatureDefinitionResponse_1617_allOf();
    virtual ~BTFeatureDefinitionResponse_1617_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTFeatureDefinitionResponse_1617_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTFeatureState_1688> getFeatureState() const;
    bool featureStateIsSet() const;
    void unsetFeatureState();

    void setFeatureState(const std::shared_ptr<BTFeatureState_1688>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTMFeature_134> getFeature() const;
    bool featureIsSet() const;
    void unsetFeature();

    void setFeature(const std::shared_ptr<BTMFeature_134>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);


protected:
    std::shared_ptr<BTFeatureState_1688> m_FeatureState;
    bool m_FeatureStateIsSet;
    std::shared_ptr<BTMFeature_134> m_Feature;
    bool m_FeatureIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTFeatureDefinitionResponse_1617_allOf_H_ */
