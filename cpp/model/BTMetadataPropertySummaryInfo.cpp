/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMetadataPropertySummaryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMetadataPropertySummaryInfo::BTMetadataPropertySummaryInfo()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_EditableInMicroversion = false;
    m_EditableInMicroversionIsSet = false;
    m_EditableInVersion = false;
    m_EditableInVersionIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_r_namespace = utility::conversions::to_string_t("");
    m_r_namespaceIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = 0;
    m_OwnerTypeIsSet = false;
    m_PropertyConfigSummaryInfoListIsSet = false;
    m_UiReadonlyInMicroversion = false;
    m_UiReadonlyInMicroversionIsSet = false;
    m_UiReadonlyInVersion = false;
    m_UiReadonlyInVersionIsSet = false;
    m_ValueType = 0;
    m_ValueTypeIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTMetadataPropertySummaryInfo::~BTMetadataPropertySummaryInfo()
{
}

void BTMetadataPropertySummaryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMetadataPropertySummaryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_EditableInMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("editableInMicroversion")] = ModelBase::toJson(m_EditableInMicroversion);
    }
    if(m_EditableInVersionIsSet)
    {
        val[utility::conversions::to_string_t("editableInVersion")] = ModelBase::toJson(m_EditableInVersion);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_PropertyConfigSummaryInfoListIsSet)
    {
        val[utility::conversions::to_string_t("propertyConfigSummaryInfoList")] = ModelBase::toJson(m_PropertyConfigSummaryInfoList);
    }
    if(m_UiReadonlyInMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("uiReadonlyInMicroversion")] = ModelBase::toJson(m_UiReadonlyInMicroversion);
    }
    if(m_UiReadonlyInVersionIsSet)
    {
        val[utility::conversions::to_string_t("uiReadonlyInVersion")] = ModelBase::toJson(m_UiReadonlyInVersion);
    }
    if(m_ValueTypeIsSet)
    {
        val[utility::conversions::to_string_t("valueType")] = ModelBase::toJson(m_ValueType);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTMetadataPropertySummaryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editableInMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editableInMicroversion"));
        if(!fieldValue.is_null())
        {
            bool refVal_editableInMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_editableInMicroversion);
            setEditableInMicroversion(refVal_editableInMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editableInVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editableInVersion"));
        if(!fieldValue.is_null())
        {
            bool refVal_editableInVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_editableInVersion);
            setEditableInVersion(refVal_editableInVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propertyConfigSummaryInfoList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("propertyConfigSummaryInfoList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>> refVal_propertyConfigSummaryInfoList;
            ok &= ModelBase::fromJson(fieldValue, refVal_propertyConfigSummaryInfoList);
            setPropertyConfigSummaryInfoList(refVal_propertyConfigSummaryInfoList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiReadonlyInMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiReadonlyInMicroversion"));
        if(!fieldValue.is_null())
        {
            bool refVal_uiReadonlyInMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiReadonlyInMicroversion);
            setUiReadonlyInMicroversion(refVal_uiReadonlyInMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uiReadonlyInVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uiReadonlyInVersion"));
        if(!fieldValue.is_null())
        {
            bool refVal_uiReadonlyInVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_uiReadonlyInVersion);
            setUiReadonlyInVersion(refVal_uiReadonlyInVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valueType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valueType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_valueType;
            ok &= ModelBase::fromJson(fieldValue, refVal_valueType);
            setValueType(refVal_valueType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTMetadataPropertySummaryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_EditableInMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editableInMicroversion"), m_EditableInMicroversion));
    }
    if(m_EditableInVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editableInVersion"), m_EditableInVersion));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_PropertyConfigSummaryInfoListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("propertyConfigSummaryInfoList"), m_PropertyConfigSummaryInfoList));
    }
    if(m_UiReadonlyInMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiReadonlyInMicroversion"), m_UiReadonlyInMicroversion));
    }
    if(m_UiReadonlyInVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiReadonlyInVersion"), m_UiReadonlyInVersion));
    }
    if(m_ValueTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valueType"), m_ValueType));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTMetadataPropertySummaryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editableInMicroversion")))
    {
        bool refVal_editableInMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editableInMicroversion")), refVal_editableInMicroversion );
        setEditableInMicroversion(refVal_editableInMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editableInVersion")))
    {
        bool refVal_editableInVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editableInVersion")), refVal_editableInVersion );
        setEditableInVersion(refVal_editableInVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        int32_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propertyConfigSummaryInfoList")))
    {
        std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>> refVal_propertyConfigSummaryInfoList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("propertyConfigSummaryInfoList")), refVal_propertyConfigSummaryInfoList );
        setPropertyConfigSummaryInfoList(refVal_propertyConfigSummaryInfoList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiReadonlyInMicroversion")))
    {
        bool refVal_uiReadonlyInMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiReadonlyInMicroversion")), refVal_uiReadonlyInMicroversion );
        setUiReadonlyInMicroversion(refVal_uiReadonlyInMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiReadonlyInVersion")))
    {
        bool refVal_uiReadonlyInVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiReadonlyInVersion")), refVal_uiReadonlyInVersion );
        setUiReadonlyInVersion(refVal_uiReadonlyInVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valueType")))
    {
        int32_t refVal_valueType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valueType")), refVal_valueType );
        setValueType(refVal_valueType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTMetadataPropertySummaryInfo::getDescription() const
{
    return m_Description;
}

void BTMetadataPropertySummaryInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTMetadataPropertySummaryInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTMetadataPropertySummaryInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool BTMetadataPropertySummaryInfo::isEditableInMicroversion() const
{
    return m_EditableInMicroversion;
}

void BTMetadataPropertySummaryInfo::setEditableInMicroversion(bool value)
{
    m_EditableInMicroversion = value;
    m_EditableInMicroversionIsSet = true;
}

bool BTMetadataPropertySummaryInfo::editableInMicroversionIsSet() const
{
    return m_EditableInMicroversionIsSet;
}

void BTMetadataPropertySummaryInfo::unsetEditableInMicroversion()
{
    m_EditableInMicroversionIsSet = false;
}
bool BTMetadataPropertySummaryInfo::isEditableInVersion() const
{
    return m_EditableInVersion;
}

void BTMetadataPropertySummaryInfo::setEditableInVersion(bool value)
{
    m_EditableInVersion = value;
    m_EditableInVersionIsSet = true;
}

bool BTMetadataPropertySummaryInfo::editableInVersionIsSet() const
{
    return m_EditableInVersionIsSet;
}

void BTMetadataPropertySummaryInfo::unsetEditableInVersion()
{
    m_EditableInVersionIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getHref() const
{
    return m_Href;
}

void BTMetadataPropertySummaryInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTMetadataPropertySummaryInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTMetadataPropertySummaryInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getId() const
{
    return m_Id;
}

void BTMetadataPropertySummaryInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTMetadataPropertySummaryInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTMetadataPropertySummaryInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getName() const
{
    return m_Name;
}

void BTMetadataPropertySummaryInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTMetadataPropertySummaryInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTMetadataPropertySummaryInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getRNamespace() const
{
    return m_r_namespace;
}

void BTMetadataPropertySummaryInfo::setRNamespace(const utility::string_t& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTMetadataPropertySummaryInfo::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTMetadataPropertySummaryInfo::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getOwnerId() const
{
    return m_OwnerId;
}

void BTMetadataPropertySummaryInfo::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTMetadataPropertySummaryInfo::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTMetadataPropertySummaryInfo::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
int32_t BTMetadataPropertySummaryInfo::getOwnerType() const
{
    return m_OwnerType;
}

void BTMetadataPropertySummaryInfo::setOwnerType(int32_t value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTMetadataPropertySummaryInfo::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTMetadataPropertySummaryInfo::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>>& BTMetadataPropertySummaryInfo::getPropertyConfigSummaryInfoList()
{
    return m_PropertyConfigSummaryInfoList;
}

void BTMetadataPropertySummaryInfo::setPropertyConfigSummaryInfoList(const std::vector<std::shared_ptr<BTMetadataPropertyConfigSummaryInfo>>& value)
{
    m_PropertyConfigSummaryInfoList = value;
    m_PropertyConfigSummaryInfoListIsSet = true;
}

bool BTMetadataPropertySummaryInfo::propertyConfigSummaryInfoListIsSet() const
{
    return m_PropertyConfigSummaryInfoListIsSet;
}

void BTMetadataPropertySummaryInfo::unsetPropertyConfigSummaryInfoList()
{
    m_PropertyConfigSummaryInfoListIsSet = false;
}
bool BTMetadataPropertySummaryInfo::isUiReadonlyInMicroversion() const
{
    return m_UiReadonlyInMicroversion;
}

void BTMetadataPropertySummaryInfo::setUiReadonlyInMicroversion(bool value)
{
    m_UiReadonlyInMicroversion = value;
    m_UiReadonlyInMicroversionIsSet = true;
}

bool BTMetadataPropertySummaryInfo::uiReadonlyInMicroversionIsSet() const
{
    return m_UiReadonlyInMicroversionIsSet;
}

void BTMetadataPropertySummaryInfo::unsetUiReadonlyInMicroversion()
{
    m_UiReadonlyInMicroversionIsSet = false;
}
bool BTMetadataPropertySummaryInfo::isUiReadonlyInVersion() const
{
    return m_UiReadonlyInVersion;
}

void BTMetadataPropertySummaryInfo::setUiReadonlyInVersion(bool value)
{
    m_UiReadonlyInVersion = value;
    m_UiReadonlyInVersionIsSet = true;
}

bool BTMetadataPropertySummaryInfo::uiReadonlyInVersionIsSet() const
{
    return m_UiReadonlyInVersionIsSet;
}

void BTMetadataPropertySummaryInfo::unsetUiReadonlyInVersion()
{
    m_UiReadonlyInVersionIsSet = false;
}
int32_t BTMetadataPropertySummaryInfo::getValueType() const
{
    return m_ValueType;
}

void BTMetadataPropertySummaryInfo::setValueType(int32_t value)
{
    m_ValueType = value;
    m_ValueTypeIsSet = true;
}

bool BTMetadataPropertySummaryInfo::valueTypeIsSet() const
{
    return m_ValueTypeIsSet;
}

void BTMetadataPropertySummaryInfo::unsetValueType()
{
    m_ValueTypeIsSet = false;
}
utility::string_t BTMetadataPropertySummaryInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTMetadataPropertySummaryInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTMetadataPropertySummaryInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTMetadataPropertySummaryInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


