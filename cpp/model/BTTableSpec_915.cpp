/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTableSpec_915.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTableSpec_915::BTTableSpec_915()
{
}

BTTableSpec_915::~BTTableSpec_915()
{
}

void BTTableSpec_915::validate()
{
    // TODO: implement validation
}

web::json::value BTTableSpec_915::toJson() const
{
    web::json::value val = this->BTFeatureSpec_129::toJson();
    

    return val;
}

bool BTTableSpec_915::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTFeatureSpec_129::fromJson(val);
    
    return ok;
}

void BTTableSpec_915::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdditionalLocalizedStringsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("additionalLocalizedStrings"), m_AdditionalLocalizedStrings));
    }
    if(m_AllParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allParameters"), m_AllParameters));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_EditingLogicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editingLogic"), m_EditingLogic));
    }
    if(m_FeatureNameTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureNameTemplate"), m_FeatureNameTemplate));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_FeatureTypeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureTypeName"), m_FeatureTypeName));
    }
    if(m_FilterSelectorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filterSelectors"), m_FilterSelectors));
    }
    if(m_FullFeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullFeatureType"), m_FullFeatureType));
    }
    if(m_GroupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groups"), m_Groups));
    }
    if(m_IconUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconUri"), m_IconUri));
    }
    if(m_LanguageVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("languageVersion"), m_LanguageVersion));
    }
    if(m_LinkedLocationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkedLocationName"), m_LinkedLocationName));
    }
    if(m_LocalizableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizableName"), m_LocalizableName));
    }
    if(m_LocalizedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("localizedName"), m_LocalizedName));
    }
    if(m_LocationInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationInfos"), m_LocationInfos));
    }
    if(m_ManipulatorChangeFunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("manipulatorChangeFunction"), m_ManipulatorChangeFunction));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
    if(m_NamespaceIncludingEnumsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceIncludingEnums"), m_NamespaceIncludingEnums));
    }
    if(m_NamespaceTheSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespaceTheSource"), m_NamespaceTheSource));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_SignatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_Signature));
    }
    if(m_SourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceLocation"), m_SourceLocation));
    }
    if(m_SourceMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversionId"), m_SourceMicroversionId));
    }
    if(m_StringsToLocalizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stringsToLocalize"), m_StringsToLocalize));
    }
    if(m_TableSpecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableSpec"), m_TableSpec));
    }
    if(m_UiHintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uiHints"), m_UiHints));
    }
}

bool BTTableSpec_915::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("additionalLocalizedStrings")))
    {
        int32_t refVal_additionalLocalizedStrings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("additionalLocalizedStrings")), refVal_additionalLocalizedStrings );
        setAdditionalLocalizedStrings(refVal_additionalLocalizedStrings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allParameters")))
    {
        std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_allParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allParameters")), refVal_allParameters );
        setAllParameters(refVal_allParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editingLogic")))
    {
        std::shared_ptr<BTEditingLogic_2350> refVal_editingLogic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editingLogic")), refVal_editingLogic );
        setEditingLogic(refVal_editingLogic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureNameTemplate")))
    {
        utility::string_t refVal_featureNameTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureNameTemplate")), refVal_featureNameTemplate );
        setFeatureNameTemplate(refVal_featureNameTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureTypeName")))
    {
        utility::string_t refVal_featureTypeName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureTypeName")), refVal_featureTypeName );
        setFeatureTypeName(refVal_featureTypeName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filterSelectors")))
    {
        std::vector<utility::string_t> refVal_filterSelectors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filterSelectors")), refVal_filterSelectors );
        setFilterSelectors(refVal_filterSelectors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullFeatureType")))
    {
        utility::string_t refVal_fullFeatureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullFeatureType")), refVal_fullFeatureType );
        setFullFeatureType(refVal_fullFeatureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groups")))
    {
        std::vector<std::shared_ptr<BTParameterGroupSpec_3469>> refVal_groups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groups")), refVal_groups );
        setGroups(refVal_groups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconUri")))
    {
        utility::string_t refVal_iconUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconUri")), refVal_iconUri );
        setIconUri(refVal_iconUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("languageVersion")))
    {
        int32_t refVal_languageVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("languageVersion")), refVal_languageVersion );
        setLanguageVersion(refVal_languageVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkedLocationName")))
    {
        utility::string_t refVal_linkedLocationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkedLocationName")), refVal_linkedLocationName );
        setLinkedLocationName(refVal_linkedLocationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizableName")))
    {
        utility::string_t refVal_localizableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizableName")), refVal_localizableName );
        setLocalizableName(refVal_localizableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("localizedName")))
    {
        utility::string_t refVal_localizedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("localizedName")), refVal_localizedName );
        setLocalizedName(refVal_localizedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locationInfos")))
    {
        std::vector<std::shared_ptr<BTLocationInfo_226>> refVal_locationInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationInfos")), refVal_locationInfos );
        setLocationInfos(refVal_locationInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("manipulatorChangeFunction")))
    {
        utility::string_t refVal_manipulatorChangeFunction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("manipulatorChangeFunction")), refVal_manipulatorChangeFunction );
        setManipulatorChangeFunction(refVal_manipulatorChangeFunction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        utility::string_t refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceIncludingEnums")))
    {
        utility::string_t refVal_namespaceIncludingEnums;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceIncludingEnums")), refVal_namespaceIncludingEnums );
        setNamespaceIncludingEnums(refVal_namespaceIncludingEnums);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespaceTheSource")))
    {
        bool refVal_namespaceTheSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespaceTheSource")), refVal_namespaceTheSource );
        setNamespaceTheSource(refVal_namespaceTheSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<std::shared_ptr<BTParameterSpec_6>> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signature")))
    {
        utility::string_t refVal_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature")), refVal_signature );
        setSignature(refVal_signature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceLocation")))
    {
        std::shared_ptr<BTLocationInfo_226> refVal_sourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceLocation")), refVal_sourceLocation );
        setSourceLocation(refVal_sourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversionId")))
    {
        utility::string_t refVal_sourceMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversionId")), refVal_sourceMicroversionId );
        setSourceMicroversionId(refVal_sourceMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stringsToLocalize")))
    {
        std::vector<utility::string_t> refVal_stringsToLocalize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stringsToLocalize")), refVal_stringsToLocalize );
        setStringsToLocalize(refVal_stringsToLocalize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableSpec")))
    {
        bool refVal_tableSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableSpec")), refVal_tableSpec );
        setTableSpec(refVal_tableSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uiHints")))
    {
        std::vector<utility::string_t> refVal_uiHints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uiHints")), refVal_uiHints );
        setUiHints(refVal_uiHints);
    }
    return ok;
}

}
}
}
}


