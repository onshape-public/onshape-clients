/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTEditingLogic_2350.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTEditingLogic_2350::BTEditingLogic_2350()
{
    m_FunctionName = utility::conversions::to_string_t("");
    m_FunctionNameIsSet = false;
    m_WantsHiddenBodies = false;
    m_WantsHiddenBodiesIsSet = false;
    m_WantsIsCreating = false;
    m_WantsIsCreatingIsSet = false;
    m_WantsSpecifiedParameters = false;
    m_WantsSpecifiedParametersIsSet = false;
}

BTEditingLogic_2350::~BTEditingLogic_2350()
{
}

void BTEditingLogic_2350::validate()
{
    // TODO: implement validation
}

web::json::value BTEditingLogic_2350::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FunctionNameIsSet)
    {
        val[utility::conversions::to_string_t("functionName")] = ModelBase::toJson(m_FunctionName);
    }
    if(m_WantsHiddenBodiesIsSet)
    {
        val[utility::conversions::to_string_t("wantsHiddenBodies")] = ModelBase::toJson(m_WantsHiddenBodies);
    }
    if(m_WantsIsCreatingIsSet)
    {
        val[utility::conversions::to_string_t("wantsIsCreating")] = ModelBase::toJson(m_WantsIsCreating);
    }
    if(m_WantsSpecifiedParametersIsSet)
    {
        val[utility::conversions::to_string_t("wantsSpecifiedParameters")] = ModelBase::toJson(m_WantsSpecifiedParameters);
    }

    return val;
}

bool BTEditingLogic_2350::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("functionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("functionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_functionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_functionName);
            setFunctionName(refVal_functionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wantsHiddenBodies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wantsHiddenBodies"));
        if(!fieldValue.is_null())
        {
            bool refVal_wantsHiddenBodies;
            ok &= ModelBase::fromJson(fieldValue, refVal_wantsHiddenBodies);
            setWantsHiddenBodies(refVal_wantsHiddenBodies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wantsIsCreating")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wantsIsCreating"));
        if(!fieldValue.is_null())
        {
            bool refVal_wantsIsCreating;
            ok &= ModelBase::fromJson(fieldValue, refVal_wantsIsCreating);
            setWantsIsCreating(refVal_wantsIsCreating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wantsSpecifiedParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wantsSpecifiedParameters"));
        if(!fieldValue.is_null())
        {
            bool refVal_wantsSpecifiedParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_wantsSpecifiedParameters);
            setWantsSpecifiedParameters(refVal_wantsSpecifiedParameters);
        }
    }
    return ok;
}

void BTEditingLogic_2350::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FunctionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("functionName"), m_FunctionName));
    }
    if(m_WantsHiddenBodiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wantsHiddenBodies"), m_WantsHiddenBodies));
    }
    if(m_WantsIsCreatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wantsIsCreating"), m_WantsIsCreating));
    }
    if(m_WantsSpecifiedParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wantsSpecifiedParameters"), m_WantsSpecifiedParameters));
    }
}

bool BTEditingLogic_2350::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("functionName")))
    {
        utility::string_t refVal_functionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("functionName")), refVal_functionName );
        setFunctionName(refVal_functionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wantsHiddenBodies")))
    {
        bool refVal_wantsHiddenBodies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wantsHiddenBodies")), refVal_wantsHiddenBodies );
        setWantsHiddenBodies(refVal_wantsHiddenBodies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wantsIsCreating")))
    {
        bool refVal_wantsIsCreating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wantsIsCreating")), refVal_wantsIsCreating );
        setWantsIsCreating(refVal_wantsIsCreating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wantsSpecifiedParameters")))
    {
        bool refVal_wantsSpecifiedParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wantsSpecifiedParameters")), refVal_wantsSpecifiedParameters );
        setWantsSpecifiedParameters(refVal_wantsSpecifiedParameters);
    }
    return ok;
}

utility::string_t BTEditingLogic_2350::getFunctionName() const
{
    return m_FunctionName;
}

void BTEditingLogic_2350::setFunctionName(const utility::string_t& value)
{
    m_FunctionName = value;
    m_FunctionNameIsSet = true;
}

bool BTEditingLogic_2350::functionNameIsSet() const
{
    return m_FunctionNameIsSet;
}

void BTEditingLogic_2350::unsetFunctionName()
{
    m_FunctionNameIsSet = false;
}
bool BTEditingLogic_2350::isWantsHiddenBodies() const
{
    return m_WantsHiddenBodies;
}

void BTEditingLogic_2350::setWantsHiddenBodies(bool value)
{
    m_WantsHiddenBodies = value;
    m_WantsHiddenBodiesIsSet = true;
}

bool BTEditingLogic_2350::wantsHiddenBodiesIsSet() const
{
    return m_WantsHiddenBodiesIsSet;
}

void BTEditingLogic_2350::unsetWantsHiddenBodies()
{
    m_WantsHiddenBodiesIsSet = false;
}
bool BTEditingLogic_2350::isWantsIsCreating() const
{
    return m_WantsIsCreating;
}

void BTEditingLogic_2350::setWantsIsCreating(bool value)
{
    m_WantsIsCreating = value;
    m_WantsIsCreatingIsSet = true;
}

bool BTEditingLogic_2350::wantsIsCreatingIsSet() const
{
    return m_WantsIsCreatingIsSet;
}

void BTEditingLogic_2350::unsetWantsIsCreating()
{
    m_WantsIsCreatingIsSet = false;
}
bool BTEditingLogic_2350::isWantsSpecifiedParameters() const
{
    return m_WantsSpecifiedParameters;
}

void BTEditingLogic_2350::setWantsSpecifiedParameters(bool value)
{
    m_WantsSpecifiedParameters = value;
    m_WantsSpecifiedParametersIsSet = true;
}

bool BTEditingLogic_2350::wantsSpecifiedParametersIsSet() const
{
    return m_WantsSpecifiedParametersIsSet;
}

void BTEditingLogic_2350::unsetWantsSpecifiedParameters()
{
    m_WantsSpecifiedParametersIsSet = false;
}
}
}
}
}


