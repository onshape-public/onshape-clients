/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTOwnerInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTOwnerInfo::BTOwnerInfo()
{
    m_AcceptOwnershipTransfer = false;
    m_AcceptOwnershipTransferIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_IsEnterpriseOwnedResource = false;
    m_IsEnterpriseOwnedResourceIsSet = false;
    m_JsonType = utility::conversions::to_string_t("");
    m_JsonTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTOwnerInfo::~BTOwnerInfo()
{
}

void BTOwnerInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTOwnerInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AcceptOwnershipTransferIsSet)
    {
        val[utility::conversions::to_string_t("acceptOwnershipTransfer")] = ModelBase::toJson(m_AcceptOwnershipTransfer);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_IsEnterpriseOwnedResourceIsSet)
    {
        val[utility::conversions::to_string_t("isEnterpriseOwnedResource")] = ModelBase::toJson(m_IsEnterpriseOwnedResource);
    }
    if(m_JsonTypeIsSet)
    {
        val[utility::conversions::to_string_t("jsonType")] = ModelBase::toJson(m_JsonType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTOwnerInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("acceptOwnershipTransfer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acceptOwnershipTransfer"));
        if(!fieldValue.is_null())
        {
            bool refVal_acceptOwnershipTransfer;
            ok &= ModelBase::fromJson(fieldValue, refVal_acceptOwnershipTransfer);
            setAcceptOwnershipTransfer(refVal_acceptOwnershipTransfer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("image"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_image);
            setImage(refVal_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEnterpriseOwnedResource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEnterpriseOwnedResource"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEnterpriseOwnedResource;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEnterpriseOwnedResource);
            setIsEnterpriseOwnedResource(refVal_isEnterpriseOwnedResource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jsonType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("jsonType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_jsonType;
            ok &= ModelBase::fromJson(fieldValue, refVal_jsonType);
            setJsonType(refVal_jsonType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTOwnerInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AcceptOwnershipTransferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acceptOwnershipTransfer"), m_AcceptOwnershipTransfer));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
    }
    if(m_IsEnterpriseOwnedResourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwnedResource"), m_IsEnterpriseOwnedResource));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTOwnerInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("acceptOwnershipTransfer")))
    {
        bool refVal_acceptOwnershipTransfer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acceptOwnershipTransfer")), refVal_acceptOwnershipTransfer );
        setAcceptOwnershipTransfer(refVal_acceptOwnershipTransfer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        utility::string_t refVal_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("image")), refVal_image );
        setImage(refVal_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwnedResource")))
    {
        bool refVal_isEnterpriseOwnedResource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwnedResource")), refVal_isEnterpriseOwnedResource );
        setIsEnterpriseOwnedResource(refVal_isEnterpriseOwnedResource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        int32_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

bool BTOwnerInfo::isAcceptOwnershipTransfer() const
{
    return m_AcceptOwnershipTransfer;
}

void BTOwnerInfo::setAcceptOwnershipTransfer(bool value)
{
    m_AcceptOwnershipTransfer = value;
    m_AcceptOwnershipTransferIsSet = true;
}

bool BTOwnerInfo::acceptOwnershipTransferIsSet() const
{
    return m_AcceptOwnershipTransferIsSet;
}

void BTOwnerInfo::unsetAcceptOwnershipTransfer()
{
    m_AcceptOwnershipTransferIsSet = false;
}
utility::string_t BTOwnerInfo::getHref() const
{
    return m_Href;
}

void BTOwnerInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTOwnerInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTOwnerInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTOwnerInfo::getId() const
{
    return m_Id;
}

void BTOwnerInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTOwnerInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTOwnerInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTOwnerInfo::getImage() const
{
    return m_Image;
}

void BTOwnerInfo::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool BTOwnerInfo::imageIsSet() const
{
    return m_ImageIsSet;
}

void BTOwnerInfo::unsetImage()
{
    m_ImageIsSet = false;
}
bool BTOwnerInfo::isIsEnterpriseOwnedResource() const
{
    return m_IsEnterpriseOwnedResource;
}

void BTOwnerInfo::setIsEnterpriseOwnedResource(bool value)
{
    m_IsEnterpriseOwnedResource = value;
    m_IsEnterpriseOwnedResourceIsSet = true;
}

bool BTOwnerInfo::isEnterpriseOwnedResourceIsSet() const
{
    return m_IsEnterpriseOwnedResourceIsSet;
}

void BTOwnerInfo::unsetIsEnterpriseOwnedResource()
{
    m_IsEnterpriseOwnedResourceIsSet = false;
}
utility::string_t BTOwnerInfo::getJsonType() const
{
    return m_JsonType;
}

void BTOwnerInfo::setJsonType(const utility::string_t& value)
{
    m_JsonType = value;
    m_JsonTypeIsSet = true;
}

bool BTOwnerInfo::jsonTypeIsSet() const
{
    return m_JsonTypeIsSet;
}

void BTOwnerInfo::unsetJsonType()
{
    m_JsonTypeIsSet = false;
}
utility::string_t BTOwnerInfo::getName() const
{
    return m_Name;
}

void BTOwnerInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTOwnerInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTOwnerInfo::unsetName()
{
    m_NameIsSet = false;
}
int32_t BTOwnerInfo::getType() const
{
    return m_Type;
}

void BTOwnerInfo::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTOwnerInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTOwnerInfo::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t BTOwnerInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTOwnerInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTOwnerInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTOwnerInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


