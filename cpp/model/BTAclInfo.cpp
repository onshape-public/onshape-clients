/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAclInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAclInfo::BTAclInfo()
{
    m_Admin = false;
    m_AdminIsSet = false;
    m_EntriesIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InheritedAclsIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ObjectId = utility::conversions::to_string_t("");
    m_ObjectIdIsSet = false;
    m_ObjectType = 0L;
    m_ObjectTypeIsSet = false;
    m_OwnerIsSet = false;
    m_r_public = false;
    m_r_publicIsSet = false;
    m_SharedWithSupport = false;
    m_SharedWithSupportIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
    m_Visibility = utility::conversions::to_string_t("");
    m_VisibilityIsSet = false;
}

BTAclInfo::~BTAclInfo()
{
}

void BTAclInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAclInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdminIsSet)
    {
        val[utility::conversions::to_string_t("admin")] = ModelBase::toJson(m_Admin);
    }
    if(m_EntriesIsSet)
    {
        val[utility::conversions::to_string_t("entries")] = ModelBase::toJson(m_Entries);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InheritedAclsIsSet)
    {
        val[utility::conversions::to_string_t("inheritedAcls")] = ModelBase::toJson(m_InheritedAcls);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("objectId")] = ModelBase::toJson(m_ObjectId);
    }
    if(m_ObjectTypeIsSet)
    {
        val[utility::conversions::to_string_t("objectType")] = ModelBase::toJson(m_ObjectType);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t("owner")] = ModelBase::toJson(m_Owner);
    }
    if(m_r_publicIsSet)
    {
        val[utility::conversions::to_string_t("public")] = ModelBase::toJson(m_r_public);
    }
    if(m_SharedWithSupportIsSet)
    {
        val[utility::conversions::to_string_t("sharedWithSupport")] = ModelBase::toJson(m_SharedWithSupport);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }
    if(m_VisibilityIsSet)
    {
        val[utility::conversions::to_string_t("visibility")] = ModelBase::toJson(m_Visibility);
    }

    return val;
}

bool BTAclInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("admin"));
        if(!fieldValue.is_null())
        {
            bool refVal_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_admin);
            setAdmin(refVal_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entries")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("entries"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAclEntryInfo>> refVal_entries;
            ok &= ModelBase::fromJson(fieldValue, refVal_entries);
            setEntries(refVal_entries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inheritedAcls")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inheritedAcls"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTInheritedAclInfo>> refVal_inheritedAcls;
            ok &= ModelBase::fromJson(fieldValue, refVal_inheritedAcls);
            setInheritedAcls(refVal_inheritedAcls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_objectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectId);
            setObjectId(refVal_objectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("objectType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("objectType"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_objectType;
            ok &= ModelBase::fromJson(fieldValue, refVal_objectType);
            setObjectType(refVal_objectType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOwnerInfo> refVal_owner;
            ok &= ModelBase::fromJson(fieldValue, refVal_owner);
            setOwner(refVal_owner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("public")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("public"));
        if(!fieldValue.is_null())
        {
            bool refVal_public;
            ok &= ModelBase::fromJson(fieldValue, refVal_public);
            setRPublic(refVal_public);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedWithSupport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedWithSupport"));
        if(!fieldValue.is_null())
        {
            bool refVal_sharedWithSupport;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedWithSupport);
            setSharedWithSupport(refVal_sharedWithSupport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("visibility")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("visibility"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_visibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_visibility);
            setVisibility(refVal_visibility);
        }
    }
    return ok;
}

void BTAclInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("admin"), m_Admin));
    }
    if(m_EntriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entries"), m_Entries));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_InheritedAclsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inheritedAcls"), m_InheritedAcls));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectId"), m_ObjectId));
    }
    if(m_ObjectTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectType"), m_ObjectType));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_r_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("public"), m_r_public));
    }
    if(m_SharedWithSupportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedWithSupport"), m_SharedWithSupport));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_VisibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visibility"), m_Visibility));
    }
}

bool BTAclInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("admin")))
    {
        bool refVal_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("admin")), refVal_admin );
        setAdmin(refVal_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entries")))
    {
        std::vector<std::shared_ptr<BTAclEntryInfo>> refVal_entries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("entries")), refVal_entries );
        setEntries(refVal_entries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inheritedAcls")))
    {
        std::vector<std::shared_ptr<BTInheritedAclInfo>> refVal_inheritedAcls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inheritedAcls")), refVal_inheritedAcls );
        setInheritedAcls(refVal_inheritedAcls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectId")))
    {
        utility::string_t refVal_objectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectId")), refVal_objectId );
        setObjectId(refVal_objectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectType")))
    {
        int64_t refVal_objectType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectType")), refVal_objectType );
        setObjectType(refVal_objectType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("public")))
    {
        bool refVal_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("public")), refVal_public );
        setRPublic(refVal_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedWithSupport")))
    {
        bool refVal_sharedWithSupport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedWithSupport")), refVal_sharedWithSupport );
        setSharedWithSupport(refVal_sharedWithSupport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visibility")))
    {
        utility::string_t refVal_visibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visibility")), refVal_visibility );
        setVisibility(refVal_visibility);
    }
    return ok;
}

bool BTAclInfo::isAdmin() const
{
    return m_Admin;
}

void BTAclInfo::setAdmin(bool value)
{
    m_Admin = value;
    m_AdminIsSet = true;
}

bool BTAclInfo::adminIsSet() const
{
    return m_AdminIsSet;
}

void BTAclInfo::unsetAdmin()
{
    m_AdminIsSet = false;
}
std::vector<std::shared_ptr<BTAclEntryInfo>>& BTAclInfo::getEntries()
{
    return m_Entries;
}

void BTAclInfo::setEntries(const std::vector<std::shared_ptr<BTAclEntryInfo>>& value)
{
    m_Entries = value;
    m_EntriesIsSet = true;
}

bool BTAclInfo::entriesIsSet() const
{
    return m_EntriesIsSet;
}

void BTAclInfo::unsetEntries()
{
    m_EntriesIsSet = false;
}
utility::string_t BTAclInfo::getHref() const
{
    return m_Href;
}

void BTAclInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTAclInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTAclInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTAclInfo::getId() const
{
    return m_Id;
}

void BTAclInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTAclInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTAclInfo::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::shared_ptr<BTInheritedAclInfo>>& BTAclInfo::getInheritedAcls()
{
    return m_InheritedAcls;
}

void BTAclInfo::setInheritedAcls(const std::vector<std::shared_ptr<BTInheritedAclInfo>>& value)
{
    m_InheritedAcls = value;
    m_InheritedAclsIsSet = true;
}

bool BTAclInfo::inheritedAclsIsSet() const
{
    return m_InheritedAclsIsSet;
}

void BTAclInfo::unsetInheritedAcls()
{
    m_InheritedAclsIsSet = false;
}
utility::string_t BTAclInfo::getName() const
{
    return m_Name;
}

void BTAclInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTAclInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTAclInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTAclInfo::getObjectId() const
{
    return m_ObjectId;
}

void BTAclInfo::setObjectId(const utility::string_t& value)
{
    m_ObjectId = value;
    m_ObjectIdIsSet = true;
}

bool BTAclInfo::objectIdIsSet() const
{
    return m_ObjectIdIsSet;
}

void BTAclInfo::unsetObjectId()
{
    m_ObjectIdIsSet = false;
}
int64_t BTAclInfo::getObjectType() const
{
    return m_ObjectType;
}

void BTAclInfo::setObjectType(int64_t value)
{
    m_ObjectType = value;
    m_ObjectTypeIsSet = true;
}

bool BTAclInfo::objectTypeIsSet() const
{
    return m_ObjectTypeIsSet;
}

void BTAclInfo::unsetObjectType()
{
    m_ObjectTypeIsSet = false;
}
std::shared_ptr<BTOwnerInfo> BTAclInfo::getOwner() const
{
    return m_Owner;
}

void BTAclInfo::setOwner(const std::shared_ptr<BTOwnerInfo>& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool BTAclInfo::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void BTAclInfo::unsetOwner()
{
    m_OwnerIsSet = false;
}
bool BTAclInfo::isRPublic() const
{
    return m_r_public;
}

void BTAclInfo::setRPublic(bool value)
{
    m_r_public = value;
    m_r_publicIsSet = true;
}

bool BTAclInfo::rPublicIsSet() const
{
    return m_r_publicIsSet;
}

void BTAclInfo::unsetr_public()
{
    m_r_publicIsSet = false;
}
bool BTAclInfo::isSharedWithSupport() const
{
    return m_SharedWithSupport;
}

void BTAclInfo::setSharedWithSupport(bool value)
{
    m_SharedWithSupport = value;
    m_SharedWithSupportIsSet = true;
}

bool BTAclInfo::sharedWithSupportIsSet() const
{
    return m_SharedWithSupportIsSet;
}

void BTAclInfo::unsetSharedWithSupport()
{
    m_SharedWithSupportIsSet = false;
}
utility::string_t BTAclInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTAclInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTAclInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTAclInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
utility::string_t BTAclInfo::getVisibility() const
{
    return m_Visibility;
}

void BTAclInfo::setVisibility(const utility::string_t& value)
{
    m_Visibility = value;
    m_VisibilityIsSet = true;
}

bool BTAclInfo::visibilityIsSet() const
{
    return m_VisibilityIsSet;
}

void BTAclInfo::unsetVisibility()
{
    m_VisibilityIsSet = false;
}
}
}
}
}


