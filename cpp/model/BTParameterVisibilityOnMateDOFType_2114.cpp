/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTParameterVisibilityOnMateDOFType_2114.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTParameterVisibilityOnMateDOFType_2114::BTParameterVisibilityOnMateDOFType_2114()
{
    m_type = utility::conversions::to_string_t("");
    m_typeIsSet = false;
}

BTParameterVisibilityOnMateDOFType_2114::~BTParameterVisibilityOnMateDOFType_2114()
{
}

void BTParameterVisibilityOnMateDOFType_2114::validate()
{
    // TODO: implement validation
}

web::json::value BTParameterVisibilityOnMateDOFType_2114::toJson() const
{
    web::json::value val = this->BTParameterVisibilityOnEqual_180::toJson();
    
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t("@type")] = ModelBase::toJson(m_type);
    }

    return val;
}

bool BTParameterVisibilityOnMateDOFType_2114::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTParameterVisibilityOnEqual_180::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("@type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("@type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_@type;
            ok &= ModelBase::fromJson(fieldValue, refVal_@type);
            setType(refVal_@type);
        }
    }
    return ok;
}

void BTParameterVisibilityOnMateDOFType_2114::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("@type"), m_type));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool BTParameterVisibilityOnMateDOFType_2114::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("@type")))
    {
        utility::string_t refVal_@type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("@type")), refVal_@type );
        setType(refVal_@type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        utility::string_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

utility::string_t BTParameterVisibilityOnMateDOFType_2114::getType() const
{
    return m_type;
}

void BTParameterVisibilityOnMateDOFType_2114::setType(const utility::string_t& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool BTParameterVisibilityOnMateDOFType_2114::typeIsSet() const
{
    return m_typeIsSet;
}

void BTParameterVisibilityOnMateDOFType_2114::unsettype()
{
    m_typeIsSet = false;
}
}
}
}
}


