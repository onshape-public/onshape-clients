/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTInsertableInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTInsertableInfo::BTInsertableInfo()
{
    m_BodyType = utility::conversions::to_string_t("");
    m_BodyTypeIsSet = false;
    m_ClassType = 0;
    m_ClassTypeIsSet = false;
    m_ConfigurationId = utility::conversions::to_string_t("");
    m_ConfigurationIdIsSet = false;
    m_ConfigurationParameterValuesIsSet = false;
    m_ConfigurationParametersIsSet = false;
    m_DataType = utility::conversions::to_string_t("");
    m_DataTypeIsSet = false;
    m_DeterministicId = utility::conversions::to_string_t("");
    m_DeterministicIdIsSet = false;
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ElementName = utility::conversions::to_string_t("");
    m_ElementNameIsSet = false;
    m_ElementType = utility::conversions::to_string_t("");
    m_ElementTypeIsSet = false;
    m_FeatureId = utility::conversions::to_string_t("");
    m_FeatureIdIsSet = false;
    m_FeatureName = utility::conversions::to_string_t("");
    m_FeatureNameIsSet = false;
    m_FeatureSpecIsSet = false;
    m_FeatureType = utility::conversions::to_string_t("");
    m_FeatureTypeIsSet = false;
    m_FsTableSpecIsSet = false;
    m_HasFaults = false;
    m_HasFaultsIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InsertableQuery = utility::conversions::to_string_t("");
    m_InsertableQueryIsSet = false;
    m_IsFlattenedBody = false;
    m_IsFlattenedBodyIsSet = false;
    m_IsMesh = false;
    m_IsMeshIsSet = false;
    m_MicroversionId = utility::conversions::to_string_t("");
    m_MicroversionIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_PartName = utility::conversions::to_string_t("");
    m_PartNameIsSet = false;
    m_PredictableId = utility::conversions::to_string_t("");
    m_PredictableIdIsSet = false;
    m_ThumbnailUri = utility::conversions::to_string_t("");
    m_ThumbnailUriIsSet = false;
    m_UnflattenedPartDeterministicId = utility::conversions::to_string_t("");
    m_UnflattenedPartDeterministicIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_VersionName = utility::conversions::to_string_t("");
    m_VersionNameIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTInsertableInfo::~BTInsertableInfo()
{
}

void BTInsertableInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTInsertableInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodyTypeIsSet)
    {
        val[utility::conversions::to_string_t("bodyType")] = ModelBase::toJson(m_BodyType);
    }
    if(m_ClassTypeIsSet)
    {
        val[utility::conversions::to_string_t("classType")] = ModelBase::toJson(m_ClassType);
    }
    if(m_ConfigurationIdIsSet)
    {
        val[utility::conversions::to_string_t("configurationId")] = ModelBase::toJson(m_ConfigurationId);
    }
    if(m_ConfigurationParameterValuesIsSet)
    {
        val[utility::conversions::to_string_t("configurationParameterValues")] = ModelBase::toJson(m_ConfigurationParameterValues);
    }
    if(m_ConfigurationParametersIsSet)
    {
        val[utility::conversions::to_string_t("configurationParameters")] = ModelBase::toJson(m_ConfigurationParameters);
    }
    if(m_DataTypeIsSet)
    {
        val[utility::conversions::to_string_t("dataType")] = ModelBase::toJson(m_DataType);
    }
    if(m_DeterministicIdIsSet)
    {
        val[utility::conversions::to_string_t("deterministicId")] = ModelBase::toJson(m_DeterministicId);
    }
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ElementNameIsSet)
    {
        val[utility::conversions::to_string_t("elementName")] = ModelBase::toJson(m_ElementName);
    }
    if(m_ElementTypeIsSet)
    {
        val[utility::conversions::to_string_t("elementType")] = ModelBase::toJson(m_ElementType);
    }
    if(m_FeatureIdIsSet)
    {
        val[utility::conversions::to_string_t("featureId")] = ModelBase::toJson(m_FeatureId);
    }
    if(m_FeatureNameIsSet)
    {
        val[utility::conversions::to_string_t("featureName")] = ModelBase::toJson(m_FeatureName);
    }
    if(m_FeatureSpecIsSet)
    {
        val[utility::conversions::to_string_t("featureSpec")] = ModelBase::toJson(m_FeatureSpec);
    }
    if(m_FeatureTypeIsSet)
    {
        val[utility::conversions::to_string_t("featureType")] = ModelBase::toJson(m_FeatureType);
    }
    if(m_FsTableSpecIsSet)
    {
        val[utility::conversions::to_string_t("fsTableSpec")] = ModelBase::toJson(m_FsTableSpec);
    }
    if(m_HasFaultsIsSet)
    {
        val[utility::conversions::to_string_t("hasFaults")] = ModelBase::toJson(m_HasFaults);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InsertableQueryIsSet)
    {
        val[utility::conversions::to_string_t("insertableQuery")] = ModelBase::toJson(m_InsertableQuery);
    }
    if(m_IsFlattenedBodyIsSet)
    {
        val[utility::conversions::to_string_t("isFlattenedBody")] = ModelBase::toJson(m_IsFlattenedBody);
    }
    if(m_IsMeshIsSet)
    {
        val[utility::conversions::to_string_t("isMesh")] = ModelBase::toJson(m_IsMesh);
    }
    if(m_MicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("microversionId")] = ModelBase::toJson(m_MicroversionId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_PartNameIsSet)
    {
        val[utility::conversions::to_string_t("partName")] = ModelBase::toJson(m_PartName);
    }
    if(m_PredictableIdIsSet)
    {
        val[utility::conversions::to_string_t("predictableId")] = ModelBase::toJson(m_PredictableId);
    }
    if(m_ThumbnailUriIsSet)
    {
        val[utility::conversions::to_string_t("thumbnailUri")] = ModelBase::toJson(m_ThumbnailUri);
    }
    if(m_UnflattenedPartDeterministicIdIsSet)
    {
        val[utility::conversions::to_string_t("unflattenedPartDeterministicId")] = ModelBase::toJson(m_UnflattenedPartDeterministicId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_VersionNameIsSet)
    {
        val[utility::conversions::to_string_t("versionName")] = ModelBase::toJson(m_VersionName);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTInsertableInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bodyType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyType);
            setBodyType(refVal_bodyType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("classType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("classType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_classType;
            ok &= ModelBase::fromJson(fieldValue, refVal_classType);
            setClassType(refVal_classType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configurationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationId);
            setConfigurationId(refVal_configurationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationParameterValues")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationParameterValues"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_configurationParameterValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationParameterValues);
            setConfigurationParameterValues(refVal_configurationParameterValues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configurationParameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configurationParameters"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_configurationParameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_configurationParameters);
            setConfigurationParameters(refVal_configurationParameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataType;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataType);
            setDataType(refVal_dataType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deterministicId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deterministicId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deterministicId;
            ok &= ModelBase::fromJson(fieldValue, refVal_deterministicId);
            setDeterministicId(refVal_deterministicId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementName;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementName);
            setElementName(refVal_elementName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementType;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementType);
            setElementType(refVal_elementType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureId;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureId);
            setFeatureId(refVal_featureId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureName;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureName);
            setFeatureName(refVal_featureName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureSpec")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureSpec"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_featureSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureSpec);
            setFeatureSpec(refVal_featureSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("featureType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_featureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureType);
            setFeatureType(refVal_featureType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fsTableSpec")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fsTableSpec"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_fsTableSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_fsTableSpec);
            setFsTableSpec(refVal_fsTableSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasFaults")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasFaults"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasFaults;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasFaults);
            setHasFaults(refVal_hasFaults);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("insertableQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("insertableQuery"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_insertableQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_insertableQuery);
            setInsertableQuery(refVal_insertableQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFlattenedBody")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFlattenedBody"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFlattenedBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFlattenedBody);
            setIsFlattenedBody(refVal_isFlattenedBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isMesh")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isMesh"));
        if(!fieldValue.is_null())
        {
            bool refVal_isMesh;
            ok &= ModelBase::fromJson(fieldValue, refVal_isMesh);
            setIsMesh(refVal_isMesh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_microversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionId);
            setMicroversionId(refVal_microversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partName;
            ok &= ModelBase::fromJson(fieldValue, refVal_partName);
            setPartName(refVal_partName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predictableId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("predictableId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_predictableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_predictableId);
            setPredictableId(refVal_predictableId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thumbnailUri")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thumbnailUri"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_thumbnailUri;
            ok &= ModelBase::fromJson(fieldValue, refVal_thumbnailUri);
            setThumbnailUri(refVal_thumbnailUri);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unflattenedPartDeterministicId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unflattenedPartDeterministicId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unflattenedPartDeterministicId;
            ok &= ModelBase::fromJson(fieldValue, refVal_unflattenedPartDeterministicId);
            setUnflattenedPartDeterministicId(refVal_unflattenedPartDeterministicId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionName);
            setVersionName(refVal_versionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTInsertableInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BodyTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyType"), m_BodyType));
    }
    if(m_ClassTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("classType"), m_ClassType));
    }
    if(m_ConfigurationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationId"), m_ConfigurationId));
    }
    if(m_ConfigurationParameterValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationParameterValues"), m_ConfigurationParameterValues));
    }
    if(m_ConfigurationParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configurationParameters"), m_ConfigurationParameters));
    }
    if(m_DataTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataType"), m_DataType));
    }
    if(m_DeterministicIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deterministicId"), m_DeterministicId));
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ElementNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementName"), m_ElementName));
    }
    if(m_ElementTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementType"), m_ElementType));
    }
    if(m_FeatureIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureId"), m_FeatureId));
    }
    if(m_FeatureNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureName"), m_FeatureName));
    }
    if(m_FeatureSpecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureSpec"), m_FeatureSpec));
    }
    if(m_FeatureTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureType"), m_FeatureType));
    }
    if(m_FsTableSpecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fsTableSpec"), m_FsTableSpec));
    }
    if(m_HasFaultsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasFaults"), m_HasFaults));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_InsertableQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("insertableQuery"), m_InsertableQuery));
    }
    if(m_IsFlattenedBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFlattenedBody"), m_IsFlattenedBody));
    }
    if(m_IsMeshIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMesh"), m_IsMesh));
    }
    if(m_MicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionId"), m_MicroversionId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PartNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partName"), m_PartName));
    }
    if(m_PredictableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predictableId"), m_PredictableId));
    }
    if(m_ThumbnailUriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thumbnailUri"), m_ThumbnailUri));
    }
    if(m_UnflattenedPartDeterministicIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unflattenedPartDeterministicId"), m_UnflattenedPartDeterministicId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_VersionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionName"), m_VersionName));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTInsertableInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bodyType")))
    {
        utility::string_t refVal_bodyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyType")), refVal_bodyType );
        setBodyType(refVal_bodyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("classType")))
    {
        int32_t refVal_classType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("classType")), refVal_classType );
        setClassType(refVal_classType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationId")))
    {
        utility::string_t refVal_configurationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationId")), refVal_configurationId );
        setConfigurationId(refVal_configurationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationParameterValues")))
    {
        std::vector<utility::string_t> refVal_configurationParameterValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationParameterValues")), refVal_configurationParameterValues );
        setConfigurationParameterValues(refVal_configurationParameterValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configurationParameters")))
    {
        std::vector<utility::string_t> refVal_configurationParameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configurationParameters")), refVal_configurationParameters );
        setConfigurationParameters(refVal_configurationParameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataType")))
    {
        utility::string_t refVal_dataType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataType")), refVal_dataType );
        setDataType(refVal_dataType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deterministicId")))
    {
        utility::string_t refVal_deterministicId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deterministicId")), refVal_deterministicId );
        setDeterministicId(refVal_deterministicId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementName")))
    {
        utility::string_t refVal_elementName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementName")), refVal_elementName );
        setElementName(refVal_elementName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementType")))
    {
        utility::string_t refVal_elementType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementType")), refVal_elementType );
        setElementType(refVal_elementType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureId")))
    {
        utility::string_t refVal_featureId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureId")), refVal_featureId );
        setFeatureId(refVal_featureId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureName")))
    {
        utility::string_t refVal_featureName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureName")), refVal_featureName );
        setFeatureName(refVal_featureName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureSpec")))
    {
        std::vector<utility::string_t> refVal_featureSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureSpec")), refVal_featureSpec );
        setFeatureSpec(refVal_featureSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("featureType")))
    {
        utility::string_t refVal_featureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureType")), refVal_featureType );
        setFeatureType(refVal_featureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fsTableSpec")))
    {
        std::vector<utility::string_t> refVal_fsTableSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fsTableSpec")), refVal_fsTableSpec );
        setFsTableSpec(refVal_fsTableSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasFaults")))
    {
        bool refVal_hasFaults;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasFaults")), refVal_hasFaults );
        setHasFaults(refVal_hasFaults);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("insertableQuery")))
    {
        utility::string_t refVal_insertableQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("insertableQuery")), refVal_insertableQuery );
        setInsertableQuery(refVal_insertableQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFlattenedBody")))
    {
        bool refVal_isFlattenedBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFlattenedBody")), refVal_isFlattenedBody );
        setIsFlattenedBody(refVal_isFlattenedBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMesh")))
    {
        bool refVal_isMesh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMesh")), refVal_isMesh );
        setIsMesh(refVal_isMesh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionId")))
    {
        utility::string_t refVal_microversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionId")), refVal_microversionId );
        setMicroversionId(refVal_microversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partName")))
    {
        utility::string_t refVal_partName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partName")), refVal_partName );
        setPartName(refVal_partName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predictableId")))
    {
        utility::string_t refVal_predictableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("predictableId")), refVal_predictableId );
        setPredictableId(refVal_predictableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thumbnailUri")))
    {
        utility::string_t refVal_thumbnailUri;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thumbnailUri")), refVal_thumbnailUri );
        setThumbnailUri(refVal_thumbnailUri);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unflattenedPartDeterministicId")))
    {
        utility::string_t refVal_unflattenedPartDeterministicId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unflattenedPartDeterministicId")), refVal_unflattenedPartDeterministicId );
        setUnflattenedPartDeterministicId(refVal_unflattenedPartDeterministicId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionName")))
    {
        utility::string_t refVal_versionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionName")), refVal_versionName );
        setVersionName(refVal_versionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTInsertableInfo::getBodyType() const
{
    return m_BodyType;
}

void BTInsertableInfo::setBodyType(const utility::string_t& value)
{
    m_BodyType = value;
    m_BodyTypeIsSet = true;
}

bool BTInsertableInfo::bodyTypeIsSet() const
{
    return m_BodyTypeIsSet;
}

void BTInsertableInfo::unsetBodyType()
{
    m_BodyTypeIsSet = false;
}
int32_t BTInsertableInfo::getClassType() const
{
    return m_ClassType;
}

void BTInsertableInfo::setClassType(int32_t value)
{
    m_ClassType = value;
    m_ClassTypeIsSet = true;
}

bool BTInsertableInfo::classTypeIsSet() const
{
    return m_ClassTypeIsSet;
}

void BTInsertableInfo::unsetClassType()
{
    m_ClassTypeIsSet = false;
}
utility::string_t BTInsertableInfo::getConfigurationId() const
{
    return m_ConfigurationId;
}

void BTInsertableInfo::setConfigurationId(const utility::string_t& value)
{
    m_ConfigurationId = value;
    m_ConfigurationIdIsSet = true;
}

bool BTInsertableInfo::configurationIdIsSet() const
{
    return m_ConfigurationIdIsSet;
}

void BTInsertableInfo::unsetConfigurationId()
{
    m_ConfigurationIdIsSet = false;
}
std::vector<utility::string_t>& BTInsertableInfo::getConfigurationParameterValues()
{
    return m_ConfigurationParameterValues;
}

void BTInsertableInfo::setConfigurationParameterValues(const std::vector<utility::string_t>& value)
{
    m_ConfigurationParameterValues = value;
    m_ConfigurationParameterValuesIsSet = true;
}

bool BTInsertableInfo::configurationParameterValuesIsSet() const
{
    return m_ConfigurationParameterValuesIsSet;
}

void BTInsertableInfo::unsetConfigurationParameterValues()
{
    m_ConfigurationParameterValuesIsSet = false;
}
std::vector<utility::string_t>& BTInsertableInfo::getConfigurationParameters()
{
    return m_ConfigurationParameters;
}

void BTInsertableInfo::setConfigurationParameters(const std::vector<utility::string_t>& value)
{
    m_ConfigurationParameters = value;
    m_ConfigurationParametersIsSet = true;
}

bool BTInsertableInfo::configurationParametersIsSet() const
{
    return m_ConfigurationParametersIsSet;
}

void BTInsertableInfo::unsetConfigurationParameters()
{
    m_ConfigurationParametersIsSet = false;
}
utility::string_t BTInsertableInfo::getDataType() const
{
    return m_DataType;
}

void BTInsertableInfo::setDataType(const utility::string_t& value)
{
    m_DataType = value;
    m_DataTypeIsSet = true;
}

bool BTInsertableInfo::dataTypeIsSet() const
{
    return m_DataTypeIsSet;
}

void BTInsertableInfo::unsetDataType()
{
    m_DataTypeIsSet = false;
}
utility::string_t BTInsertableInfo::getDeterministicId() const
{
    return m_DeterministicId;
}

void BTInsertableInfo::setDeterministicId(const utility::string_t& value)
{
    m_DeterministicId = value;
    m_DeterministicIdIsSet = true;
}

bool BTInsertableInfo::deterministicIdIsSet() const
{
    return m_DeterministicIdIsSet;
}

void BTInsertableInfo::unsetDeterministicId()
{
    m_DeterministicIdIsSet = false;
}
utility::string_t BTInsertableInfo::getDocumentId() const
{
    return m_DocumentId;
}

void BTInsertableInfo::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTInsertableInfo::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTInsertableInfo::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTInsertableInfo::getElementId() const
{
    return m_ElementId;
}

void BTInsertableInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTInsertableInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTInsertableInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTInsertableInfo::getElementName() const
{
    return m_ElementName;
}

void BTInsertableInfo::setElementName(const utility::string_t& value)
{
    m_ElementName = value;
    m_ElementNameIsSet = true;
}

bool BTInsertableInfo::elementNameIsSet() const
{
    return m_ElementNameIsSet;
}

void BTInsertableInfo::unsetElementName()
{
    m_ElementNameIsSet = false;
}
utility::string_t BTInsertableInfo::getElementType() const
{
    return m_ElementType;
}

void BTInsertableInfo::setElementType(const utility::string_t& value)
{
    m_ElementType = value;
    m_ElementTypeIsSet = true;
}

bool BTInsertableInfo::elementTypeIsSet() const
{
    return m_ElementTypeIsSet;
}

void BTInsertableInfo::unsetElementType()
{
    m_ElementTypeIsSet = false;
}
utility::string_t BTInsertableInfo::getFeatureId() const
{
    return m_FeatureId;
}

void BTInsertableInfo::setFeatureId(const utility::string_t& value)
{
    m_FeatureId = value;
    m_FeatureIdIsSet = true;
}

bool BTInsertableInfo::featureIdIsSet() const
{
    return m_FeatureIdIsSet;
}

void BTInsertableInfo::unsetFeatureId()
{
    m_FeatureIdIsSet = false;
}
utility::string_t BTInsertableInfo::getFeatureName() const
{
    return m_FeatureName;
}

void BTInsertableInfo::setFeatureName(const utility::string_t& value)
{
    m_FeatureName = value;
    m_FeatureNameIsSet = true;
}

bool BTInsertableInfo::featureNameIsSet() const
{
    return m_FeatureNameIsSet;
}

void BTInsertableInfo::unsetFeatureName()
{
    m_FeatureNameIsSet = false;
}
std::vector<utility::string_t>& BTInsertableInfo::getFeatureSpec()
{
    return m_FeatureSpec;
}

void BTInsertableInfo::setFeatureSpec(const std::vector<utility::string_t>& value)
{
    m_FeatureSpec = value;
    m_FeatureSpecIsSet = true;
}

bool BTInsertableInfo::featureSpecIsSet() const
{
    return m_FeatureSpecIsSet;
}

void BTInsertableInfo::unsetFeatureSpec()
{
    m_FeatureSpecIsSet = false;
}
utility::string_t BTInsertableInfo::getFeatureType() const
{
    return m_FeatureType;
}

void BTInsertableInfo::setFeatureType(const utility::string_t& value)
{
    m_FeatureType = value;
    m_FeatureTypeIsSet = true;
}

bool BTInsertableInfo::featureTypeIsSet() const
{
    return m_FeatureTypeIsSet;
}

void BTInsertableInfo::unsetFeatureType()
{
    m_FeatureTypeIsSet = false;
}
std::vector<utility::string_t>& BTInsertableInfo::getFsTableSpec()
{
    return m_FsTableSpec;
}

void BTInsertableInfo::setFsTableSpec(const std::vector<utility::string_t>& value)
{
    m_FsTableSpec = value;
    m_FsTableSpecIsSet = true;
}

bool BTInsertableInfo::fsTableSpecIsSet() const
{
    return m_FsTableSpecIsSet;
}

void BTInsertableInfo::unsetFsTableSpec()
{
    m_FsTableSpecIsSet = false;
}
bool BTInsertableInfo::isHasFaults() const
{
    return m_HasFaults;
}

void BTInsertableInfo::setHasFaults(bool value)
{
    m_HasFaults = value;
    m_HasFaultsIsSet = true;
}

bool BTInsertableInfo::hasFaultsIsSet() const
{
    return m_HasFaultsIsSet;
}

void BTInsertableInfo::unsetHasFaults()
{
    m_HasFaultsIsSet = false;
}
utility::string_t BTInsertableInfo::getHref() const
{
    return m_Href;
}

void BTInsertableInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTInsertableInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTInsertableInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTInsertableInfo::getId() const
{
    return m_Id;
}

void BTInsertableInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTInsertableInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTInsertableInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTInsertableInfo::getInsertableQuery() const
{
    return m_InsertableQuery;
}

void BTInsertableInfo::setInsertableQuery(const utility::string_t& value)
{
    m_InsertableQuery = value;
    m_InsertableQueryIsSet = true;
}

bool BTInsertableInfo::insertableQueryIsSet() const
{
    return m_InsertableQueryIsSet;
}

void BTInsertableInfo::unsetInsertableQuery()
{
    m_InsertableQueryIsSet = false;
}
bool BTInsertableInfo::isIsFlattenedBody() const
{
    return m_IsFlattenedBody;
}

void BTInsertableInfo::setIsFlattenedBody(bool value)
{
    m_IsFlattenedBody = value;
    m_IsFlattenedBodyIsSet = true;
}

bool BTInsertableInfo::isFlattenedBodyIsSet() const
{
    return m_IsFlattenedBodyIsSet;
}

void BTInsertableInfo::unsetIsFlattenedBody()
{
    m_IsFlattenedBodyIsSet = false;
}
bool BTInsertableInfo::isIsMesh() const
{
    return m_IsMesh;
}

void BTInsertableInfo::setIsMesh(bool value)
{
    m_IsMesh = value;
    m_IsMeshIsSet = true;
}

bool BTInsertableInfo::isMeshIsSet() const
{
    return m_IsMeshIsSet;
}

void BTInsertableInfo::unsetIsMesh()
{
    m_IsMeshIsSet = false;
}
utility::string_t BTInsertableInfo::getMicroversionId() const
{
    return m_MicroversionId;
}

void BTInsertableInfo::setMicroversionId(const utility::string_t& value)
{
    m_MicroversionId = value;
    m_MicroversionIdIsSet = true;
}

bool BTInsertableInfo::microversionIdIsSet() const
{
    return m_MicroversionIdIsSet;
}

void BTInsertableInfo::unsetMicroversionId()
{
    m_MicroversionIdIsSet = false;
}
utility::string_t BTInsertableInfo::getName() const
{
    return m_Name;
}

void BTInsertableInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTInsertableInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTInsertableInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTInsertableInfo::getParentId() const
{
    return m_ParentId;
}

void BTInsertableInfo::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTInsertableInfo::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTInsertableInfo::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTInsertableInfo::getPartName() const
{
    return m_PartName;
}

void BTInsertableInfo::setPartName(const utility::string_t& value)
{
    m_PartName = value;
    m_PartNameIsSet = true;
}

bool BTInsertableInfo::partNameIsSet() const
{
    return m_PartNameIsSet;
}

void BTInsertableInfo::unsetPartName()
{
    m_PartNameIsSet = false;
}
utility::string_t BTInsertableInfo::getPredictableId() const
{
    return m_PredictableId;
}

void BTInsertableInfo::setPredictableId(const utility::string_t& value)
{
    m_PredictableId = value;
    m_PredictableIdIsSet = true;
}

bool BTInsertableInfo::predictableIdIsSet() const
{
    return m_PredictableIdIsSet;
}

void BTInsertableInfo::unsetPredictableId()
{
    m_PredictableIdIsSet = false;
}
utility::string_t BTInsertableInfo::getThumbnailUri() const
{
    return m_ThumbnailUri;
}

void BTInsertableInfo::setThumbnailUri(const utility::string_t& value)
{
    m_ThumbnailUri = value;
    m_ThumbnailUriIsSet = true;
}

bool BTInsertableInfo::thumbnailUriIsSet() const
{
    return m_ThumbnailUriIsSet;
}

void BTInsertableInfo::unsetThumbnailUri()
{
    m_ThumbnailUriIsSet = false;
}
utility::string_t BTInsertableInfo::getUnflattenedPartDeterministicId() const
{
    return m_UnflattenedPartDeterministicId;
}

void BTInsertableInfo::setUnflattenedPartDeterministicId(const utility::string_t& value)
{
    m_UnflattenedPartDeterministicId = value;
    m_UnflattenedPartDeterministicIdIsSet = true;
}

bool BTInsertableInfo::unflattenedPartDeterministicIdIsSet() const
{
    return m_UnflattenedPartDeterministicIdIsSet;
}

void BTInsertableInfo::unsetUnflattenedPartDeterministicId()
{
    m_UnflattenedPartDeterministicIdIsSet = false;
}
utility::string_t BTInsertableInfo::getVersionId() const
{
    return m_VersionId;
}

void BTInsertableInfo::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTInsertableInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTInsertableInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
utility::string_t BTInsertableInfo::getVersionName() const
{
    return m_VersionName;
}

void BTInsertableInfo::setVersionName(const utility::string_t& value)
{
    m_VersionName = value;
    m_VersionNameIsSet = true;
}

bool BTInsertableInfo::versionNameIsSet() const
{
    return m_VersionNameIsSet;
}

void BTInsertableInfo::unsetVersionName()
{
    m_VersionNameIsSet = false;
}
utility::string_t BTInsertableInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTInsertableInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTInsertableInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTInsertableInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


