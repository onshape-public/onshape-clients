/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentParams::BTDocumentParams()
{
    m_BetaCapabilityIdsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_GenerateUnknownMessages = false;
    m_GenerateUnknownMessagesIsSet = false;
    m_IsEmptyContent = false;
    m_IsEmptyContentIsSet = false;
    m_IsPublic = false;
    m_IsPublicIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_NotRevisionManaged = false;
    m_NotRevisionManagedIsSet = false;
    m_OwnerEmail = utility::conversions::to_string_t("");
    m_OwnerEmailIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = 0;
    m_OwnerTypeIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_TagsIsSet = false;
}

BTDocumentParams::~BTDocumentParams()
{
}

void BTDocumentParams::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BetaCapabilityIdsIsSet)
    {
        val[utility::conversions::to_string_t("betaCapabilityIds")] = ModelBase::toJson(m_BetaCapabilityIds);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_GenerateUnknownMessagesIsSet)
    {
        val[utility::conversions::to_string_t("generateUnknownMessages")] = ModelBase::toJson(m_GenerateUnknownMessages);
    }
    if(m_IsEmptyContentIsSet)
    {
        val[utility::conversions::to_string_t("isEmptyContent")] = ModelBase::toJson(m_IsEmptyContent);
    }
    if(m_IsPublicIsSet)
    {
        val[utility::conversions::to_string_t("isPublic")] = ModelBase::toJson(m_IsPublic);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NotRevisionManagedIsSet)
    {
        val[utility::conversions::to_string_t("notRevisionManaged")] = ModelBase::toJson(m_NotRevisionManaged);
    }
    if(m_OwnerEmailIsSet)
    {
        val[utility::conversions::to_string_t("ownerEmail")] = ModelBase::toJson(m_OwnerEmail);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }

    return val;
}

bool BTDocumentParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("betaCapabilityIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("betaCapabilityIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_betaCapabilityIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_betaCapabilityIds);
            setBetaCapabilityIds(refVal_betaCapabilityIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("generateUnknownMessages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("generateUnknownMessages"));
        if(!fieldValue.is_null())
        {
            bool refVal_generateUnknownMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_generateUnknownMessages);
            setGenerateUnknownMessages(refVal_generateUnknownMessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEmptyContent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEmptyContent"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEmptyContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEmptyContent);
            setIsEmptyContent(refVal_isEmptyContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isPublic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isPublic"));
        if(!fieldValue.is_null())
        {
            bool refVal_isPublic;
            ok &= ModelBase::fromJson(fieldValue, refVal_isPublic);
            setIsPublic(refVal_isPublic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notRevisionManaged")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notRevisionManaged"));
        if(!fieldValue.is_null())
        {
            bool refVal_notRevisionManaged;
            ok &= ModelBase::fromJson(fieldValue, refVal_notRevisionManaged);
            setNotRevisionManaged(refVal_notRevisionManaged);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerEmail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerEmail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerEmail);
            setOwnerEmail(refVal_ownerEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    return ok;
}

void BTDocumentParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BetaCapabilityIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("betaCapabilityIds"), m_BetaCapabilityIds));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_GenerateUnknownMessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("generateUnknownMessages"), m_GenerateUnknownMessages));
    }
    if(m_IsEmptyContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEmptyContent"), m_IsEmptyContent));
    }
    if(m_IsPublicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isPublic"), m_IsPublic));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NotRevisionManagedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notRevisionManaged"), m_NotRevisionManaged));
    }
    if(m_OwnerEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerEmail"), m_OwnerEmail));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
}

bool BTDocumentParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("betaCapabilityIds")))
    {
        std::vector<utility::string_t> refVal_betaCapabilityIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("betaCapabilityIds")), refVal_betaCapabilityIds );
        setBetaCapabilityIds(refVal_betaCapabilityIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("generateUnknownMessages")))
    {
        bool refVal_generateUnknownMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("generateUnknownMessages")), refVal_generateUnknownMessages );
        setGenerateUnknownMessages(refVal_generateUnknownMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEmptyContent")))
    {
        bool refVal_isEmptyContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEmptyContent")), refVal_isEmptyContent );
        setIsEmptyContent(refVal_isEmptyContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isPublic")))
    {
        bool refVal_isPublic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isPublic")), refVal_isPublic );
        setIsPublic(refVal_isPublic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notRevisionManaged")))
    {
        bool refVal_notRevisionManaged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notRevisionManaged")), refVal_notRevisionManaged );
        setNotRevisionManaged(refVal_notRevisionManaged);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerEmail")))
    {
        utility::string_t refVal_ownerEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerEmail")), refVal_ownerEmail );
        setOwnerEmail(refVal_ownerEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        int32_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    return ok;
}

std::vector<utility::string_t>& BTDocumentParams::getBetaCapabilityIds()
{
    return m_BetaCapabilityIds;
}

void BTDocumentParams::setBetaCapabilityIds(const std::vector<utility::string_t>& value)
{
    m_BetaCapabilityIds = value;
    m_BetaCapabilityIdsIsSet = true;
}

bool BTDocumentParams::betaCapabilityIdsIsSet() const
{
    return m_BetaCapabilityIdsIsSet;
}

void BTDocumentParams::unsetBetaCapabilityIds()
{
    m_BetaCapabilityIdsIsSet = false;
}
utility::string_t BTDocumentParams::getDescription() const
{
    return m_Description;
}

void BTDocumentParams::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTDocumentParams::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTDocumentParams::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool BTDocumentParams::isGenerateUnknownMessages() const
{
    return m_GenerateUnknownMessages;
}

void BTDocumentParams::setGenerateUnknownMessages(bool value)
{
    m_GenerateUnknownMessages = value;
    m_GenerateUnknownMessagesIsSet = true;
}

bool BTDocumentParams::generateUnknownMessagesIsSet() const
{
    return m_GenerateUnknownMessagesIsSet;
}

void BTDocumentParams::unsetGenerateUnknownMessages()
{
    m_GenerateUnknownMessagesIsSet = false;
}
bool BTDocumentParams::isIsEmptyContent() const
{
    return m_IsEmptyContent;
}

void BTDocumentParams::setIsEmptyContent(bool value)
{
    m_IsEmptyContent = value;
    m_IsEmptyContentIsSet = true;
}

bool BTDocumentParams::isEmptyContentIsSet() const
{
    return m_IsEmptyContentIsSet;
}

void BTDocumentParams::unsetIsEmptyContent()
{
    m_IsEmptyContentIsSet = false;
}
bool BTDocumentParams::isIsPublic() const
{
    return m_IsPublic;
}

void BTDocumentParams::setIsPublic(bool value)
{
    m_IsPublic = value;
    m_IsPublicIsSet = true;
}

bool BTDocumentParams::isPublicIsSet() const
{
    return m_IsPublicIsSet;
}

void BTDocumentParams::unsetIsPublic()
{
    m_IsPublicIsSet = false;
}
utility::string_t BTDocumentParams::getName() const
{
    return m_Name;
}

void BTDocumentParams::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTDocumentParams::nameIsSet() const
{
    return m_NameIsSet;
}

void BTDocumentParams::unsetName()
{
    m_NameIsSet = false;
}
bool BTDocumentParams::isNotRevisionManaged() const
{
    return m_NotRevisionManaged;
}

void BTDocumentParams::setNotRevisionManaged(bool value)
{
    m_NotRevisionManaged = value;
    m_NotRevisionManagedIsSet = true;
}

bool BTDocumentParams::notRevisionManagedIsSet() const
{
    return m_NotRevisionManagedIsSet;
}

void BTDocumentParams::unsetNotRevisionManaged()
{
    m_NotRevisionManagedIsSet = false;
}
utility::string_t BTDocumentParams::getOwnerEmail() const
{
    return m_OwnerEmail;
}

void BTDocumentParams::setOwnerEmail(const utility::string_t& value)
{
    m_OwnerEmail = value;
    m_OwnerEmailIsSet = true;
}

bool BTDocumentParams::ownerEmailIsSet() const
{
    return m_OwnerEmailIsSet;
}

void BTDocumentParams::unsetOwnerEmail()
{
    m_OwnerEmailIsSet = false;
}
utility::string_t BTDocumentParams::getOwnerId() const
{
    return m_OwnerId;
}

void BTDocumentParams::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTDocumentParams::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTDocumentParams::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
int32_t BTDocumentParams::getOwnerType() const
{
    return m_OwnerType;
}

void BTDocumentParams::setOwnerType(int32_t value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTDocumentParams::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTDocumentParams::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
utility::string_t BTDocumentParams::getParentId() const
{
    return m_ParentId;
}

void BTDocumentParams::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTDocumentParams::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTDocumentParams::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTDocumentParams::getProjectId() const
{
    return m_ProjectId;
}

void BTDocumentParams::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTDocumentParams::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTDocumentParams::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
std::vector<utility::string_t>& BTDocumentParams::getTags()
{
    return m_Tags;
}

void BTDocumentParams::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool BTDocumentParams::tagsIsSet() const
{
    return m_TagsIsSet;
}

void BTDocumentParams::unsetTags()
{
    m_TagsIsSet = false;
}
}
}
}
}


