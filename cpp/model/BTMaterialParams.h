/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTMaterialParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTMaterialParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTMaterialParams_H_


#include "../ModelBase.h"

#include "BTExternalElementReferenceInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "BTMaterialPropertyParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTMaterialParams
    : public ModelBase
{
public:
    BTMaterialParams();
    virtual ~BTMaterialParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTMaterialParams members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();

    void setDisplayName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLibraryName() const;
    bool libraryNameIsSet() const;
    void unsetLibraryName();

    void setLibraryName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTExternalElementReferenceInfo> getLibraryReference() const;
    bool libraryReferenceIsSet() const;
    void unsetLibraryReference();

    void setLibraryReference(const std::shared_ptr<BTExternalElementReferenceInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMaterialPropertyParams>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::vector<std::shared_ptr<BTMaterialPropertyParams>>& value);


protected:
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_LibraryName;
    bool m_LibraryNameIsSet;
    std::shared_ptr<BTExternalElementReferenceInfo> m_LibraryReference;
    bool m_LibraryReferenceIsSet;
    std::vector<std::shared_ptr<BTMaterialPropertyParams>> m_Properties;
    bool m_PropertiesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTMaterialParams_H_ */
