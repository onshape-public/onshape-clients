/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTSMBendTableRowMetadata_1705.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTSMBendTableRowMetadata_1705::BTSMBendTableRowMetadata_1705()
{
    m_IsJointTypeEditable = false;
    m_IsJointTypeEditableIsSet = false;
}

BTSMBendTableRowMetadata_1705::~BTSMBendTableRowMetadata_1705()
{
}

void BTSMBendTableRowMetadata_1705::validate()
{
    // TODO: implement validation
}

web::json::value BTSMBendTableRowMetadata_1705::toJson() const
{
    web::json::value val = this->BTBaseSMJointTableRowMetadata_2232::toJson();
    
    if(m_IsJointTypeEditableIsSet)
    {
        val[utility::conversions::to_string_t("isJointTypeEditable")] = ModelBase::toJson(m_IsJointTypeEditable);
    }

    return val;
}

bool BTSMBendTableRowMetadata_1705::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTBaseSMJointTableRowMetadata_2232::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("isJointTypeEditable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isJointTypeEditable"));
        if(!fieldValue.is_null())
        {
            bool refVal_isJointTypeEditable;
            ok &= ModelBase::fromJson(fieldValue, refVal_isJointTypeEditable);
            setIsJointTypeEditable(refVal_isJointTypeEditable);
        }
    }
    return ok;
}

void BTSMBendTableRowMetadata_1705::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_CrossHighlightDataIfAnyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossHighlightDataIfAny"), m_CrossHighlightDataIfAny));
    }
    if(m_CrossHighlightDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("crossHighlightData"), m_CrossHighlightData));
    }
    if(m_IsJointTypeEditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isJointTypeEditable"), m_IsJointTypeEditable));
    }
}

bool BTSMBendTableRowMetadata_1705::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossHighlightDataIfAny")))
    {
        std::shared_ptr<BTTableCrossHighlightData_1753> refVal_crossHighlightDataIfAny;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossHighlightDataIfAny")), refVal_crossHighlightDataIfAny );
        setCrossHighlightDataIfAny(refVal_crossHighlightDataIfAny);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("crossHighlightData")))
    {
        std::shared_ptr<BTTableCrossHighlightData_1753> refVal_crossHighlightData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("crossHighlightData")), refVal_crossHighlightData );
        setCrossHighlightData(refVal_crossHighlightData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isJointTypeEditable")))
    {
        bool refVal_isJointTypeEditable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isJointTypeEditable")), refVal_isJointTypeEditable );
        setIsJointTypeEditable(refVal_isJointTypeEditable);
    }
    return ok;
}

bool BTSMBendTableRowMetadata_1705::isIsJointTypeEditable() const
{
    return m_IsJointTypeEditable;
}

void BTSMBendTableRowMetadata_1705::setIsJointTypeEditable(bool value)
{
    m_IsJointTypeEditable = value;
    m_IsJointTypeEditableIsSet = true;
}

bool BTSMBendTableRowMetadata_1705::isJointTypeEditableIsSet() const
{
    return m_IsJointTypeEditableIsSet;
}

void BTSMBendTableRowMetadata_1705::unsetIsJointTypeEditable()
{
    m_IsJointTypeEditableIsSet = false;
}
}
}
}
}


