/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAssemblyDefinitionInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAssemblyDefinitionInfo::BTAssemblyDefinitionInfo()
{
    m_PartStudioFeaturesIsSet = false;
    m_PartsIsSet = false;
    m_RootAssemblyIsSet = false;
    m_SubAssembliesIsSet = false;
}

BTAssemblyDefinitionInfo::~BTAssemblyDefinitionInfo()
{
}

void BTAssemblyDefinitionInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAssemblyDefinitionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PartStudioFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("partStudioFeatures")] = ModelBase::toJson(m_PartStudioFeatures);
    }
    if(m_PartsIsSet)
    {
        val[utility::conversions::to_string_t("parts")] = ModelBase::toJson(m_Parts);
    }
    if(m_RootAssemblyIsSet)
    {
        val[utility::conversions::to_string_t("rootAssembly")] = ModelBase::toJson(m_RootAssembly);
    }
    if(m_SubAssembliesIsSet)
    {
        val[utility::conversions::to_string_t("subAssemblies")] = ModelBase::toJson(m_SubAssemblies);
    }

    return val;
}

bool BTAssemblyDefinitionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("partStudioFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partStudioFeatures"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAssemblyPSFeatureInfo>> refVal_partStudioFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_partStudioFeatures);
            setPartStudioFeatures(refVal_partStudioFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parts"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTAssemblyPartsInfo>> refVal_parts;
            ok &= ModelBase::fromJson(fieldValue, refVal_parts);
            setParts(refVal_parts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rootAssembly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rootAssembly"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTRootAssemblyInfo> refVal_rootAssembly;
            ok &= ModelBase::fromJson(fieldValue, refVal_rootAssembly);
            setRootAssembly(refVal_rootAssembly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subAssemblies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subAssemblies"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTSubAssemblyInfo>> refVal_subAssemblies;
            ok &= ModelBase::fromJson(fieldValue, refVal_subAssemblies);
            setSubAssemblies(refVal_subAssemblies);
        }
    }
    return ok;
}

void BTAssemblyDefinitionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PartStudioFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partStudioFeatures"), m_PartStudioFeatures));
    }
    if(m_PartsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parts"), m_Parts));
    }
    if(m_RootAssemblyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rootAssembly"), m_RootAssembly));
    }
    if(m_SubAssembliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subAssemblies"), m_SubAssemblies));
    }
}

bool BTAssemblyDefinitionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("partStudioFeatures")))
    {
        std::vector<std::shared_ptr<BTAssemblyPSFeatureInfo>> refVal_partStudioFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partStudioFeatures")), refVal_partStudioFeatures );
        setPartStudioFeatures(refVal_partStudioFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parts")))
    {
        std::vector<std::shared_ptr<BTAssemblyPartsInfo>> refVal_parts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parts")), refVal_parts );
        setParts(refVal_parts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rootAssembly")))
    {
        std::shared_ptr<BTRootAssemblyInfo> refVal_rootAssembly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rootAssembly")), refVal_rootAssembly );
        setRootAssembly(refVal_rootAssembly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subAssemblies")))
    {
        std::vector<std::shared_ptr<BTSubAssemblyInfo>> refVal_subAssemblies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subAssemblies")), refVal_subAssemblies );
        setSubAssemblies(refVal_subAssemblies);
    }
    return ok;
}

std::vector<std::shared_ptr<BTAssemblyPSFeatureInfo>>& BTAssemblyDefinitionInfo::getPartStudioFeatures()
{
    return m_PartStudioFeatures;
}

void BTAssemblyDefinitionInfo::setPartStudioFeatures(const std::vector<std::shared_ptr<BTAssemblyPSFeatureInfo>>& value)
{
    m_PartStudioFeatures = value;
    m_PartStudioFeaturesIsSet = true;
}

bool BTAssemblyDefinitionInfo::partStudioFeaturesIsSet() const
{
    return m_PartStudioFeaturesIsSet;
}

void BTAssemblyDefinitionInfo::unsetPartStudioFeatures()
{
    m_PartStudioFeaturesIsSet = false;
}
std::vector<std::shared_ptr<BTAssemblyPartsInfo>>& BTAssemblyDefinitionInfo::getParts()
{
    return m_Parts;
}

void BTAssemblyDefinitionInfo::setParts(const std::vector<std::shared_ptr<BTAssemblyPartsInfo>>& value)
{
    m_Parts = value;
    m_PartsIsSet = true;
}

bool BTAssemblyDefinitionInfo::partsIsSet() const
{
    return m_PartsIsSet;
}

void BTAssemblyDefinitionInfo::unsetParts()
{
    m_PartsIsSet = false;
}
std::shared_ptr<BTRootAssemblyInfo> BTAssemblyDefinitionInfo::getRootAssembly() const
{
    return m_RootAssembly;
}

void BTAssemblyDefinitionInfo::setRootAssembly(const std::shared_ptr<BTRootAssemblyInfo>& value)
{
    m_RootAssembly = value;
    m_RootAssemblyIsSet = true;
}

bool BTAssemblyDefinitionInfo::rootAssemblyIsSet() const
{
    return m_RootAssemblyIsSet;
}

void BTAssemblyDefinitionInfo::unsetRootAssembly()
{
    m_RootAssemblyIsSet = false;
}
std::vector<std::shared_ptr<BTSubAssemblyInfo>>& BTAssemblyDefinitionInfo::getSubAssemblies()
{
    return m_SubAssemblies;
}

void BTAssemblyDefinitionInfo::setSubAssemblies(const std::vector<std::shared_ptr<BTSubAssemblyInfo>>& value)
{
    m_SubAssemblies = value;
    m_SubAssembliesIsSet = true;
}

bool BTAssemblyDefinitionInfo::subAssembliesIsSet() const
{
    return m_SubAssembliesIsSet;
}

void BTAssemblyDefinitionInfo::unsetSubAssemblies()
{
    m_SubAssembliesIsSet = false;
}
}
}
}
}


