/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTTranslateFormatParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslateFormatParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslateFormatParams_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTTranslateFormatParams
    : public ModelBase
{
public:
    BTTranslateFormatParams();
    virtual ~BTTranslateFormatParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTTranslateFormatParams members

    /// <summary>
    /// 
    /// </summary>
    bool isAllowFaultyParts() const;
    bool allowFaultyPartsIsSet() const;
    void unsetAllowFaultyParts();

    void setAllowFaultyParts(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getAngularTolerance() const;
    bool angularToleranceIsSet() const;
    void unsetAngularTolerance();

    void setAngularTolerance(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlobElementId() const;
    bool blobElementIdIsSet() const;
    void unsetBlobElementId();

    void setBlobElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlobMicroversionId() const;
    bool blobMicroversionIdIsSet() const;
    void unsetBlobMicroversionId();

    void setBlobMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCloudObjectId() const;
    bool cloudObjectIdIsSet() const;
    void unsetCloudObjectId();

    void setCloudObjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCloudStorageAccountId() const;
    bool cloudStorageAccountIdIsSet() const;
    void unsetCloudStorageAccountId();

    void setCloudStorageAccountId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColorMethod() const;
    bool colorMethodIsSet() const;
    void unsetColorMethod();

    void setColorMethod(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfiguration() const;
    bool configurationIsSet() const;
    void unsetConfiguration();

    void setConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConnectionId() const;
    bool connectionIdIsSet() const;
    void unsetConnectionId();

    void setConnectionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCreateComposite() const;
    bool createCompositeIsSet() const;
    void unsetCreateComposite();

    void setCreateComposite(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCurrentSheetOnly() const;
    bool currentSheetOnlyIsSet() const;
    void unsetCurrentSheetOnly();

    void setCurrentSheetOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDestinationName() const;
    bool destinationNameIsSet() const;
    void unsetDestinationName();

    void setDestinationName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getDistanceTolerance() const;
    bool distanceToleranceIsSet() const;
    void unsetDistanceTolerance();

    void setDistanceTolerance(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEmailLink() const;
    bool emailLinkIsSet() const;
    void unsetEmailLink();

    void setEmailLink(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmailMessage() const;
    bool emailMessageIsSet() const;
    void unsetEmailMessage();

    void setEmailMessage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmailSubject() const;
    bool emailSubjectIsSet() const;
    void unsetEmailSubject();

    void setEmailSubject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getEmailTo();
    bool emailToIsSet() const;
    void unsetEmailTo();

    void setEmailTo(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExtractAssemblyHierarchy() const;
    bool extractAssemblyHierarchyIsSet() const;
    void unsetExtractAssemblyHierarchy();

    void setExtractAssemblyHierarchy(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isFlatten() const;
    bool flattenIsSet() const;
    void unsetFlatten();

    void setFlatten(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isFlattenAssemblies() const;
    bool flattenAssembliesIsSet() const;
    void unsetFlattenAssemblies();

    void setFlattenAssemblies(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getForeignId() const;
    bool foreignIdIsSet() const;
    void unsetForeignId();

    void setForeignId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFormatName() const;
    bool formatNameIsSet() const;
    void unsetFormatName();

    void setFormatName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFromUserId() const;
    bool fromUserIdIsSet() const;
    void unsetFromUserId();

    void setFromUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isGetyAxisIsUp() const;
    bool getyAxisIsUpIsSet() const;
    void unsetGetyAxisIsUp();

    void setGetyAxisIsUp(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isGrouping() const;
    bool groupingIsSet() const;
    void unsetGrouping();

    void setGrouping(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImageHeight() const;
    bool imageHeightIsSet() const;
    void unsetImageHeight();

    void setImageHeight(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImageWidth() const;
    bool imageWidthIsSet() const;
    void unsetImageWidth();

    void setImageWidth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isImportInBackground() const;
    bool importInBackgroundIsSet() const;
    void unsetImportInBackground();

    void setImportInBackground(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isImportWithinDocument() const;
    bool importWithinDocumentIsSet() const;
    void unsetImportWithinDocument();

    void setImportWithinDocument(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIncludeExportIds() const;
    bool includeExportIdsIsSet() const;
    void unsetIncludeExportIds();

    void setIncludeExportIds(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isJoinAdjacentSurfaces() const;
    bool joinAdjacentSurfacesIsSet() const;
    void unsetJoinAdjacentSurfaces();

    void setJoinAdjacentSurfaces(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLinkDocumentId() const;
    bool linkDocumentIdIsSet() const;
    void unsetLinkDocumentId();

    void setLinkDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLinkDocumentWorkspaceId() const;
    bool linkDocumentWorkspaceIdIsSet() const;
    void unsetLinkDocumentWorkspaceId();

    void setLinkDocumentWorkspaceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getMaximumChordLength() const;
    bool maximumChordLengthIsSet() const;
    void unsetMaximumChordLength();

    void setMaximumChordLength(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isNotifyUser() const;
    bool notifyUserIsSet() const;
    void unsetNotifyUser();

    void setNotifyUser(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOriginalForeignId() const;
    bool originalForeignIdIsSet() const;
    void unsetOriginalForeignId();

    void setOriginalForeignId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartIds() const;
    bool partIdsIsSet() const;
    void unsetPartIds();

    void setPartIds(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isPasswordRequired() const;
    bool passwordRequiredIsSet() const;
    void unsetPasswordRequired();

    void setPasswordRequired(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProcessedForeignId() const;
    bool processedForeignIdIsSet() const;
    void unsetProcessedForeignId();

    void setProcessedForeignId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProjectId();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSelectablePdfText() const;
    bool selectablePdfTextIsSet() const;
    void unsetSelectablePdfText();

    void setSelectablePdfText(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSendCopyToMe() const;
    bool sendCopyToMeIsSet() const;
    void unsetSendCopyToMe();

    void setSendCopyToMe(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isShowOverriddenDimensions() const;
    bool showOverriddenDimensionsIsSet() const;
    void unsetShowOverriddenDimensions();

    void setShowOverriddenDimensions(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceName() const;
    bool sourceNameIsSet() const;
    void unsetSourceName();

    void setSourceName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSpecifyUnits() const;
    bool specifyUnitsIsSet() const;
    void unsetSpecifyUnits();

    void setSpecifyUnits(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSplinesAsPolylines() const;
    bool splinesAsPolylinesIsSet() const;
    void unsetSplinesAsPolylines();

    void setSplinesAsPolylines(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSplitAssembliesIntoMultipleDocuments() const;
    bool splitAssembliesIntoMultipleDocumentsIsSet() const;
    void unsetSplitAssembliesIntoMultipleDocuments();

    void setSplitAssembliesIntoMultipleDocuments(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isStoreInDocument() const;
    bool storeInDocumentIsSet() const;
    void unsetStoreInDocument();

    void setStoreInDocument(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isTextAsGeometry() const;
    bool textAsGeometryIsSet() const;
    void unsetTextAsGeometry();

    void setTextAsGeometry(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isTriggerAutoDownload() const;
    bool triggerAutoDownloadIsSet() const;
    void unsetTriggerAutoDownload();

    void setTriggerAutoDownload(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnit() const;
    bool unitIsSet() const;
    void unsetUnit();

    void setUnit(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUploadId() const;
    bool uploadIdIsSet() const;
    void unsetUploadId();

    void setUploadId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getValidForDays() const;
    bool validForDaysIsSet() const;
    void unsetValidForDays();

    void setValidForDays(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionString() const;
    bool versionStringIsSet() const;
    void unsetVersionString();

    void setVersionString(const utility::string_t& value);


protected:
    bool m_AllowFaultyParts;
    bool m_AllowFaultyPartsIsSet;
    double m_AngularTolerance;
    bool m_AngularToleranceIsSet;
    utility::string_t m_BlobElementId;
    bool m_BlobElementIdIsSet;
    utility::string_t m_BlobMicroversionId;
    bool m_BlobMicroversionIdIsSet;
    utility::string_t m_CloudObjectId;
    bool m_CloudObjectIdIsSet;
    utility::string_t m_CloudStorageAccountId;
    bool m_CloudStorageAccountIdIsSet;
    utility::string_t m_ColorMethod;
    bool m_ColorMethodIsSet;
    utility::string_t m_Configuration;
    bool m_ConfigurationIsSet;
    utility::string_t m_ConnectionId;
    bool m_ConnectionIdIsSet;
    bool m_CreateComposite;
    bool m_CreateCompositeIsSet;
    bool m_CurrentSheetOnly;
    bool m_CurrentSheetOnlyIsSet;
    utility::string_t m_DestinationName;
    bool m_DestinationNameIsSet;
    double m_DistanceTolerance;
    bool m_DistanceToleranceIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    bool m_EmailLink;
    bool m_EmailLinkIsSet;
    utility::string_t m_EmailMessage;
    bool m_EmailMessageIsSet;
    utility::string_t m_EmailSubject;
    bool m_EmailSubjectIsSet;
    std::vector<utility::string_t> m_EmailTo;
    bool m_EmailToIsSet;
    bool m_ExtractAssemblyHierarchy;
    bool m_ExtractAssemblyHierarchyIsSet;
    bool m_Flatten;
    bool m_FlattenIsSet;
    bool m_FlattenAssemblies;
    bool m_FlattenAssembliesIsSet;
    utility::string_t m_ForeignId;
    bool m_ForeignIdIsSet;
    utility::string_t m_FormatName;
    bool m_FormatNameIsSet;
    utility::string_t m_FromUserId;
    bool m_FromUserIdIsSet;
    bool m_GetyAxisIsUp;
    bool m_GetyAxisIsUpIsSet;
    bool m_Grouping;
    bool m_GroupingIsSet;
    int32_t m_ImageHeight;
    bool m_ImageHeightIsSet;
    int32_t m_ImageWidth;
    bool m_ImageWidthIsSet;
    bool m_ImportInBackground;
    bool m_ImportInBackgroundIsSet;
    bool m_ImportWithinDocument;
    bool m_ImportWithinDocumentIsSet;
    bool m_IncludeExportIds;
    bool m_IncludeExportIdsIsSet;
    bool m_JoinAdjacentSurfaces;
    bool m_JoinAdjacentSurfacesIsSet;
    utility::string_t m_LinkDocumentId;
    bool m_LinkDocumentIdIsSet;
    utility::string_t m_LinkDocumentWorkspaceId;
    bool m_LinkDocumentWorkspaceIdIsSet;
    double m_MaximumChordLength;
    bool m_MaximumChordLengthIsSet;
    bool m_NotifyUser;
    bool m_NotifyUserIsSet;
    utility::string_t m_OriginalForeignId;
    bool m_OriginalForeignIdIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_PartIds;
    bool m_PartIdsIsSet;
    utility::string_t m_Password;
    bool m_PasswordIsSet;
    bool m_PasswordRequired;
    bool m_PasswordRequiredIsSet;
    utility::string_t m_ProcessedForeignId;
    bool m_ProcessedForeignIdIsSet;
    utility::string_t m_ProjectId;
    bool m_ProjectIdIsSet;
    bool m_SelectablePdfText;
    bool m_SelectablePdfTextIsSet;
    bool m_SendCopyToMe;
    bool m_SendCopyToMeIsSet;
    bool m_ShowOverriddenDimensions;
    bool m_ShowOverriddenDimensionsIsSet;
    utility::string_t m_SourceName;
    bool m_SourceNameIsSet;
    bool m_SpecifyUnits;
    bool m_SpecifyUnitsIsSet;
    bool m_SplinesAsPolylines;
    bool m_SplinesAsPolylinesIsSet;
    bool m_SplitAssembliesIntoMultipleDocuments;
    bool m_SplitAssembliesIntoMultipleDocumentsIsSet;
    bool m_StoreInDocument;
    bool m_StoreInDocumentIsSet;
    bool m_TextAsGeometry;
    bool m_TextAsGeometryIsSet;
    bool m_TriggerAutoDownload;
    bool m_TriggerAutoDownloadIsSet;
    utility::string_t m_Unit;
    bool m_UnitIsSet;
    utility::string_t m_UploadId;
    bool m_UploadIdIsSet;
    int32_t m_ValidForDays;
    bool m_ValidForDaysIsSet;
    utility::string_t m_VersionString;
    bool m_VersionStringIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTTranslateFormatParams_H_ */
