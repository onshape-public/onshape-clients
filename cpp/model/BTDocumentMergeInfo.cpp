/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentMergeInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentMergeInfo::BTDocumentMergeInfo()
{
    m_LibraryVersionMismatch = false;
    m_LibraryVersionMismatchIsSet = false;
    m_OverwrittenElementsIsSet = false;
}

BTDocumentMergeInfo::~BTDocumentMergeInfo()
{
}

void BTDocumentMergeInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentMergeInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LibraryVersionMismatchIsSet)
    {
        val[utility::conversions::to_string_t("libraryVersionMismatch")] = ModelBase::toJson(m_LibraryVersionMismatch);
    }
    if(m_OverwrittenElementsIsSet)
    {
        val[utility::conversions::to_string_t("overwrittenElements")] = ModelBase::toJson(m_OverwrittenElements);
    }

    return val;
}

bool BTDocumentMergeInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("libraryVersionMismatch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraryVersionMismatch"));
        if(!fieldValue.is_null())
        {
            bool refVal_libraryVersionMismatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraryVersionMismatch);
            setLibraryVersionMismatch(refVal_libraryVersionMismatch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("overwrittenElements")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("overwrittenElements"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTDocumentElementInfo>> refVal_overwrittenElements;
            ok &= ModelBase::fromJson(fieldValue, refVal_overwrittenElements);
            setOverwrittenElements(refVal_overwrittenElements);
        }
    }
    return ok;
}

void BTDocumentMergeInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LibraryVersionMismatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryVersionMismatch"), m_LibraryVersionMismatch));
    }
    if(m_OverwrittenElementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("overwrittenElements"), m_OverwrittenElements));
    }
}

bool BTDocumentMergeInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("libraryVersionMismatch")))
    {
        bool refVal_libraryVersionMismatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryVersionMismatch")), refVal_libraryVersionMismatch );
        setLibraryVersionMismatch(refVal_libraryVersionMismatch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("overwrittenElements")))
    {
        std::vector<std::shared_ptr<BTDocumentElementInfo>> refVal_overwrittenElements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("overwrittenElements")), refVal_overwrittenElements );
        setOverwrittenElements(refVal_overwrittenElements);
    }
    return ok;
}

bool BTDocumentMergeInfo::isLibraryVersionMismatch() const
{
    return m_LibraryVersionMismatch;
}

void BTDocumentMergeInfo::setLibraryVersionMismatch(bool value)
{
    m_LibraryVersionMismatch = value;
    m_LibraryVersionMismatchIsSet = true;
}

bool BTDocumentMergeInfo::libraryVersionMismatchIsSet() const
{
    return m_LibraryVersionMismatchIsSet;
}

void BTDocumentMergeInfo::unsetLibraryVersionMismatch()
{
    m_LibraryVersionMismatchIsSet = false;
}
std::vector<std::shared_ptr<BTDocumentElementInfo>>& BTDocumentMergeInfo::getOverwrittenElements()
{
    return m_OverwrittenElements;
}

void BTDocumentMergeInfo::setOverwrittenElements(const std::vector<std::shared_ptr<BTDocumentElementInfo>>& value)
{
    m_OverwrittenElements = value;
    m_OverwrittenElementsIsSet = true;
}

bool BTDocumentMergeInfo::overwrittenElementsIsSet() const
{
    return m_OverwrittenElementsIsSet;
}

void BTDocumentMergeInfo::unsetOverwrittenElements()
{
    m_OverwrittenElementsIsSet = false;
}
}
}
}
}


