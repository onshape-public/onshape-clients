/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMConfigurationParameter_819.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMConfigurationParameter_819::BTMConfigurationParameter_819()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_GeneratedParameterIdIsSet = false;
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ParameterId = utility::conversions::to_string_t("");
    m_ParameterIdIsSet = false;
    m_ParameterName = utility::conversions::to_string_t("");
    m_ParameterNameIsSet = false;
    m_ParameterType = utility::conversions::to_string_t("");
    m_ParameterTypeIsSet = false;
    m_Valid = false;
    m_ValidIsSet = false;
}

BTMConfigurationParameter_819::~BTMConfigurationParameter_819()
{
}

void BTMConfigurationParameter_819::validate()
{
    // TODO: implement validation
}

web::json::value BTMConfigurationParameter_819::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_GeneratedParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("generatedParameterId")] = ModelBase::toJson(m_GeneratedParameterId);
    }
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ParameterIdIsSet)
    {
        val[utility::conversions::to_string_t("parameterId")] = ModelBase::toJson(m_ParameterId);
    }
    if(m_ParameterNameIsSet)
    {
        val[utility::conversions::to_string_t("parameterName")] = ModelBase::toJson(m_ParameterName);
    }
    if(m_ParameterTypeIsSet)
    {
        val[utility::conversions::to_string_t("parameterType")] = ModelBase::toJson(m_ParameterType);
    }
    if(m_ValidIsSet)
    {
        val[utility::conversions::to_string_t("valid")] = ModelBase::toJson(m_Valid);
    }

    return val;
}

bool BTMConfigurationParameter_819::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("generatedParameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("generatedParameterId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTTreeNode_20> refVal_generatedParameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_generatedParameterId);
            setGeneratedParameterId(refVal_generatedParameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterId);
            setParameterId(refVal_parameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterName;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterName);
            setParameterName(refVal_parameterName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameterType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameterType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parameterType;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameterType);
            setParameterType(refVal_parameterType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valid"));
        if(!fieldValue.is_null())
        {
            bool refVal_valid;
            ok &= ModelBase::fromJson(fieldValue, refVal_valid);
            setValid(refVal_valid);
        }
    }
    return ok;
}

void BTMConfigurationParameter_819::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_GeneratedParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("generatedParameterId"), m_GeneratedParameterId));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_ParameterNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterName"), m_ParameterName));
    }
    if(m_ParameterTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterType"), m_ParameterType));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valid"), m_Valid));
    }
}

bool BTMConfigurationParameter_819::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("generatedParameterId")))
    {
        std::shared_ptr<BTTreeNode_20> refVal_generatedParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("generatedParameterId")), refVal_generatedParameterId );
        setGeneratedParameterId(refVal_generatedParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterName")))
    {
        utility::string_t refVal_parameterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterName")), refVal_parameterName );
        setParameterName(refVal_parameterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterType")))
    {
        utility::string_t refVal_parameterType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterType")), refVal_parameterType );
        setParameterType(refVal_parameterType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valid")))
    {
        bool refVal_valid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valid")), refVal_valid );
        setValid(refVal_valid);
    }
    return ok;
}

utility::string_t BTMConfigurationParameter_819::getBtType() const
{
    return m_BtType;
}

void BTMConfigurationParameter_819::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMConfigurationParameter_819::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMConfigurationParameter_819::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::shared_ptr<BTTreeNode_20> BTMConfigurationParameter_819::getGeneratedParameterId() const
{
    return m_GeneratedParameterId;
}

void BTMConfigurationParameter_819::setGeneratedParameterId(const std::shared_ptr<BTTreeNode_20>& value)
{
    m_GeneratedParameterId = value;
    m_GeneratedParameterIdIsSet = true;
}

bool BTMConfigurationParameter_819::generatedParameterIdIsSet() const
{
    return m_GeneratedParameterIdIsSet;
}

void BTMConfigurationParameter_819::unsetGeneratedParameterId()
{
    m_GeneratedParameterIdIsSet = false;
}
utility::string_t BTMConfigurationParameter_819::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTMConfigurationParameter_819::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTMConfigurationParameter_819::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTMConfigurationParameter_819::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
utility::string_t BTMConfigurationParameter_819::getNodeId() const
{
    return m_NodeId;
}

void BTMConfigurationParameter_819::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTMConfigurationParameter_819::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTMConfigurationParameter_819::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTMConfigurationParameter_819::getParameterId() const
{
    return m_ParameterId;
}

void BTMConfigurationParameter_819::setParameterId(const utility::string_t& value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}

bool BTMConfigurationParameter_819::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}

void BTMConfigurationParameter_819::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
utility::string_t BTMConfigurationParameter_819::getParameterName() const
{
    return m_ParameterName;
}

void BTMConfigurationParameter_819::setParameterName(const utility::string_t& value)
{
    m_ParameterName = value;
    m_ParameterNameIsSet = true;
}

bool BTMConfigurationParameter_819::parameterNameIsSet() const
{
    return m_ParameterNameIsSet;
}

void BTMConfigurationParameter_819::unsetParameterName()
{
    m_ParameterNameIsSet = false;
}
utility::string_t BTMConfigurationParameter_819::getParameterType() const
{
    return m_ParameterType;
}

void BTMConfigurationParameter_819::setParameterType(const utility::string_t& value)
{
    m_ParameterType = value;
    m_ParameterTypeIsSet = true;
}

bool BTMConfigurationParameter_819::parameterTypeIsSet() const
{
    return m_ParameterTypeIsSet;
}

void BTMConfigurationParameter_819::unsetParameterType()
{
    m_ParameterTypeIsSet = false;
}
bool BTMConfigurationParameter_819::isValid() const
{
    return m_Valid;
}

void BTMConfigurationParameter_819::setValid(bool value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}

bool BTMConfigurationParameter_819::validIsSet() const
{
    return m_ValidIsSet;
}

void BTMConfigurationParameter_819::unsetValid()
{
    m_ValidIsSet = false;
}
}
}
}
}


