/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTranslateFormatParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTranslateFormatParams::BTTranslateFormatParams()
{
    m_AllowFaultyParts = false;
    m_AllowFaultyPartsIsSet = false;
    m_AngularTolerance = 0.0;
    m_AngularToleranceIsSet = false;
    m_BlobElementId = utility::conversions::to_string_t("");
    m_BlobElementIdIsSet = false;
    m_BlobMicroversionId = utility::conversions::to_string_t("");
    m_BlobMicroversionIdIsSet = false;
    m_CloudObjectId = utility::conversions::to_string_t("");
    m_CloudObjectIdIsSet = false;
    m_CloudStorageAccountId = utility::conversions::to_string_t("");
    m_CloudStorageAccountIdIsSet = false;
    m_ColorMethod = utility::conversions::to_string_t("");
    m_ColorMethodIsSet = false;
    m_Configuration = utility::conversions::to_string_t("");
    m_ConfigurationIsSet = false;
    m_ConnectionId = utility::conversions::to_string_t("");
    m_ConnectionIdIsSet = false;
    m_CreateComposite = false;
    m_CreateCompositeIsSet = false;
    m_CurrentSheetOnly = false;
    m_CurrentSheetOnlyIsSet = false;
    m_DestinationName = utility::conversions::to_string_t("");
    m_DestinationNameIsSet = false;
    m_DistanceTolerance = 0.0;
    m_DistanceToleranceIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_EmailLink = false;
    m_EmailLinkIsSet = false;
    m_EmailMessage = utility::conversions::to_string_t("");
    m_EmailMessageIsSet = false;
    m_EmailSubject = utility::conversions::to_string_t("");
    m_EmailSubjectIsSet = false;
    m_EmailToIsSet = false;
    m_ExtractAssemblyHierarchy = false;
    m_ExtractAssemblyHierarchyIsSet = false;
    m_Flatten = false;
    m_FlattenIsSet = false;
    m_FlattenAssemblies = false;
    m_FlattenAssembliesIsSet = false;
    m_ForeignId = utility::conversions::to_string_t("");
    m_ForeignIdIsSet = false;
    m_FormatName = utility::conversions::to_string_t("");
    m_FormatNameIsSet = false;
    m_FromUserId = utility::conversions::to_string_t("");
    m_FromUserIdIsSet = false;
    m_GetyAxisIsUp = false;
    m_GetyAxisIsUpIsSet = false;
    m_Grouping = false;
    m_GroupingIsSet = false;
    m_ImageHeight = 0;
    m_ImageHeightIsSet = false;
    m_ImageWidth = 0;
    m_ImageWidthIsSet = false;
    m_ImportInBackground = false;
    m_ImportInBackgroundIsSet = false;
    m_ImportWithinDocument = false;
    m_ImportWithinDocumentIsSet = false;
    m_IncludeExportIds = false;
    m_IncludeExportIdsIsSet = false;
    m_JoinAdjacentSurfaces = false;
    m_JoinAdjacentSurfacesIsSet = false;
    m_LinkDocumentId = utility::conversions::to_string_t("");
    m_LinkDocumentIdIsSet = false;
    m_LinkDocumentWorkspaceId = utility::conversions::to_string_t("");
    m_LinkDocumentWorkspaceIdIsSet = false;
    m_MaximumChordLength = 0.0;
    m_MaximumChordLengthIsSet = false;
    m_NotifyUser = false;
    m_NotifyUserIsSet = false;
    m_OriginalForeignId = utility::conversions::to_string_t("");
    m_OriginalForeignIdIsSet = false;
    m_ParentId = utility::conversions::to_string_t("");
    m_ParentIdIsSet = false;
    m_PartIds = utility::conversions::to_string_t("");
    m_PartIdsIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_PasswordRequired = false;
    m_PasswordRequiredIsSet = false;
    m_ProcessedForeignId = utility::conversions::to_string_t("");
    m_ProcessedForeignIdIsSet = false;
    m_ProjectId = utility::conversions::to_string_t("");
    m_ProjectIdIsSet = false;
    m_SelectablePdfText = false;
    m_SelectablePdfTextIsSet = false;
    m_SendCopyToMe = false;
    m_SendCopyToMeIsSet = false;
    m_ShowOverriddenDimensions = false;
    m_ShowOverriddenDimensionsIsSet = false;
    m_SourceName = utility::conversions::to_string_t("");
    m_SourceNameIsSet = false;
    m_SpecifyUnits = false;
    m_SpecifyUnitsIsSet = false;
    m_SplinesAsPolylines = false;
    m_SplinesAsPolylinesIsSet = false;
    m_SplitAssembliesIntoMultipleDocuments = false;
    m_SplitAssembliesIntoMultipleDocumentsIsSet = false;
    m_StoreInDocument = false;
    m_StoreInDocumentIsSet = false;
    m_TextAsGeometry = false;
    m_TextAsGeometryIsSet = false;
    m_TriggerAutoDownload = false;
    m_TriggerAutoDownloadIsSet = false;
    m_Unit = utility::conversions::to_string_t("");
    m_UnitIsSet = false;
    m_UploadId = utility::conversions::to_string_t("");
    m_UploadIdIsSet = false;
    m_ValidForDays = 0;
    m_ValidForDaysIsSet = false;
    m_VersionString = utility::conversions::to_string_t("");
    m_VersionStringIsSet = false;
}

BTTranslateFormatParams::~BTTranslateFormatParams()
{
}

void BTTranslateFormatParams::validate()
{
    // TODO: implement validation
}

web::json::value BTTranslateFormatParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AllowFaultyPartsIsSet)
    {
        val[utility::conversions::to_string_t("allowFaultyParts")] = ModelBase::toJson(m_AllowFaultyParts);
    }
    if(m_AngularToleranceIsSet)
    {
        val[utility::conversions::to_string_t("angularTolerance")] = ModelBase::toJson(m_AngularTolerance);
    }
    if(m_BlobElementIdIsSet)
    {
        val[utility::conversions::to_string_t("blobElementId")] = ModelBase::toJson(m_BlobElementId);
    }
    if(m_BlobMicroversionIdIsSet)
    {
        val[utility::conversions::to_string_t("blobMicroversionId")] = ModelBase::toJson(m_BlobMicroversionId);
    }
    if(m_CloudObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudObjectId")] = ModelBase::toJson(m_CloudObjectId);
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageAccountId")] = ModelBase::toJson(m_CloudStorageAccountId);
    }
    if(m_ColorMethodIsSet)
    {
        val[utility::conversions::to_string_t("colorMethod")] = ModelBase::toJson(m_ColorMethod);
    }
    if(m_ConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_ConnectionIdIsSet)
    {
        val[utility::conversions::to_string_t("connectionId")] = ModelBase::toJson(m_ConnectionId);
    }
    if(m_CreateCompositeIsSet)
    {
        val[utility::conversions::to_string_t("createComposite")] = ModelBase::toJson(m_CreateComposite);
    }
    if(m_CurrentSheetOnlyIsSet)
    {
        val[utility::conversions::to_string_t("currentSheetOnly")] = ModelBase::toJson(m_CurrentSheetOnly);
    }
    if(m_DestinationNameIsSet)
    {
        val[utility::conversions::to_string_t("destinationName")] = ModelBase::toJson(m_DestinationName);
    }
    if(m_DistanceToleranceIsSet)
    {
        val[utility::conversions::to_string_t("distanceTolerance")] = ModelBase::toJson(m_DistanceTolerance);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_EmailLinkIsSet)
    {
        val[utility::conversions::to_string_t("emailLink")] = ModelBase::toJson(m_EmailLink);
    }
    if(m_EmailMessageIsSet)
    {
        val[utility::conversions::to_string_t("emailMessage")] = ModelBase::toJson(m_EmailMessage);
    }
    if(m_EmailSubjectIsSet)
    {
        val[utility::conversions::to_string_t("emailSubject")] = ModelBase::toJson(m_EmailSubject);
    }
    if(m_EmailToIsSet)
    {
        val[utility::conversions::to_string_t("emailTo")] = ModelBase::toJson(m_EmailTo);
    }
    if(m_ExtractAssemblyHierarchyIsSet)
    {
        val[utility::conversions::to_string_t("extractAssemblyHierarchy")] = ModelBase::toJson(m_ExtractAssemblyHierarchy);
    }
    if(m_FlattenIsSet)
    {
        val[utility::conversions::to_string_t("flatten")] = ModelBase::toJson(m_Flatten);
    }
    if(m_FlattenAssembliesIsSet)
    {
        val[utility::conversions::to_string_t("flattenAssemblies")] = ModelBase::toJson(m_FlattenAssemblies);
    }
    if(m_ForeignIdIsSet)
    {
        val[utility::conversions::to_string_t("foreignId")] = ModelBase::toJson(m_ForeignId);
    }
    if(m_FormatNameIsSet)
    {
        val[utility::conversions::to_string_t("formatName")] = ModelBase::toJson(m_FormatName);
    }
    if(m_FromUserIdIsSet)
    {
        val[utility::conversions::to_string_t("fromUserId")] = ModelBase::toJson(m_FromUserId);
    }
    if(m_GetyAxisIsUpIsSet)
    {
        val[utility::conversions::to_string_t("getyAxisIsUp")] = ModelBase::toJson(m_GetyAxisIsUp);
    }
    if(m_GroupingIsSet)
    {
        val[utility::conversions::to_string_t("grouping")] = ModelBase::toJson(m_Grouping);
    }
    if(m_ImageHeightIsSet)
    {
        val[utility::conversions::to_string_t("imageHeight")] = ModelBase::toJson(m_ImageHeight);
    }
    if(m_ImageWidthIsSet)
    {
        val[utility::conversions::to_string_t("imageWidth")] = ModelBase::toJson(m_ImageWidth);
    }
    if(m_ImportInBackgroundIsSet)
    {
        val[utility::conversions::to_string_t("importInBackground")] = ModelBase::toJson(m_ImportInBackground);
    }
    if(m_ImportWithinDocumentIsSet)
    {
        val[utility::conversions::to_string_t("importWithinDocument")] = ModelBase::toJson(m_ImportWithinDocument);
    }
    if(m_IncludeExportIdsIsSet)
    {
        val[utility::conversions::to_string_t("includeExportIds")] = ModelBase::toJson(m_IncludeExportIds);
    }
    if(m_JoinAdjacentSurfacesIsSet)
    {
        val[utility::conversions::to_string_t("joinAdjacentSurfaces")] = ModelBase::toJson(m_JoinAdjacentSurfaces);
    }
    if(m_LinkDocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("linkDocumentId")] = ModelBase::toJson(m_LinkDocumentId);
    }
    if(m_LinkDocumentWorkspaceIdIsSet)
    {
        val[utility::conversions::to_string_t("linkDocumentWorkspaceId")] = ModelBase::toJson(m_LinkDocumentWorkspaceId);
    }
    if(m_MaximumChordLengthIsSet)
    {
        val[utility::conversions::to_string_t("maximumChordLength")] = ModelBase::toJson(m_MaximumChordLength);
    }
    if(m_NotifyUserIsSet)
    {
        val[utility::conversions::to_string_t("notifyUser")] = ModelBase::toJson(m_NotifyUser);
    }
    if(m_OriginalForeignIdIsSet)
    {
        val[utility::conversions::to_string_t("originalForeignId")] = ModelBase::toJson(m_OriginalForeignId);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t("parentId")] = ModelBase::toJson(m_ParentId);
    }
    if(m_PartIdsIsSet)
    {
        val[utility::conversions::to_string_t("partIds")] = ModelBase::toJson(m_PartIds);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_PasswordRequiredIsSet)
    {
        val[utility::conversions::to_string_t("passwordRequired")] = ModelBase::toJson(m_PasswordRequired);
    }
    if(m_ProcessedForeignIdIsSet)
    {
        val[utility::conversions::to_string_t("processedForeignId")] = ModelBase::toJson(m_ProcessedForeignId);
    }
    if(m_ProjectIdIsSet)
    {
        val[utility::conversions::to_string_t("projectId")] = ModelBase::toJson(m_ProjectId);
    }
    if(m_SelectablePdfTextIsSet)
    {
        val[utility::conversions::to_string_t("selectablePdfText")] = ModelBase::toJson(m_SelectablePdfText);
    }
    if(m_SendCopyToMeIsSet)
    {
        val[utility::conversions::to_string_t("sendCopyToMe")] = ModelBase::toJson(m_SendCopyToMe);
    }
    if(m_ShowOverriddenDimensionsIsSet)
    {
        val[utility::conversions::to_string_t("showOverriddenDimensions")] = ModelBase::toJson(m_ShowOverriddenDimensions);
    }
    if(m_SourceNameIsSet)
    {
        val[utility::conversions::to_string_t("sourceName")] = ModelBase::toJson(m_SourceName);
    }
    if(m_SpecifyUnitsIsSet)
    {
        val[utility::conversions::to_string_t("specifyUnits")] = ModelBase::toJson(m_SpecifyUnits);
    }
    if(m_SplinesAsPolylinesIsSet)
    {
        val[utility::conversions::to_string_t("splinesAsPolylines")] = ModelBase::toJson(m_SplinesAsPolylines);
    }
    if(m_SplitAssembliesIntoMultipleDocumentsIsSet)
    {
        val[utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")] = ModelBase::toJson(m_SplitAssembliesIntoMultipleDocuments);
    }
    if(m_StoreInDocumentIsSet)
    {
        val[utility::conversions::to_string_t("storeInDocument")] = ModelBase::toJson(m_StoreInDocument);
    }
    if(m_TextAsGeometryIsSet)
    {
        val[utility::conversions::to_string_t("textAsGeometry")] = ModelBase::toJson(m_TextAsGeometry);
    }
    if(m_TriggerAutoDownloadIsSet)
    {
        val[utility::conversions::to_string_t("triggerAutoDownload")] = ModelBase::toJson(m_TriggerAutoDownload);
    }
    if(m_UnitIsSet)
    {
        val[utility::conversions::to_string_t("unit")] = ModelBase::toJson(m_Unit);
    }
    if(m_UploadIdIsSet)
    {
        val[utility::conversions::to_string_t("uploadId")] = ModelBase::toJson(m_UploadId);
    }
    if(m_ValidForDaysIsSet)
    {
        val[utility::conversions::to_string_t("validForDays")] = ModelBase::toJson(m_ValidForDays);
    }
    if(m_VersionStringIsSet)
    {
        val[utility::conversions::to_string_t("versionString")] = ModelBase::toJson(m_VersionString);
    }

    return val;
}

bool BTTranslateFormatParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("allowFaultyParts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowFaultyParts"));
        if(!fieldValue.is_null())
        {
            bool refVal_allowFaultyParts;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowFaultyParts);
            setAllowFaultyParts(refVal_allowFaultyParts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("angularTolerance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("angularTolerance"));
        if(!fieldValue.is_null())
        {
            double refVal_angularTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_angularTolerance);
            setAngularTolerance(refVal_angularTolerance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("blobElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_blobElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_blobElementId);
            setBlobElementId(refVal_blobElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("blobMicroversionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("blobMicroversionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_blobMicroversionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_blobMicroversionId);
            setBlobMicroversionId(refVal_blobMicroversionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudObjectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudObjectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudObjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudObjectId);
            setCloudObjectId(refVal_cloudObjectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageAccountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageAccountId);
            setCloudStorageAccountId(refVal_cloudStorageAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("colorMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("colorMethod"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_colorMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_colorMethod);
            setColorMethod(refVal_colorMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("configuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("configuration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_configuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_configuration);
            setConfiguration(refVal_configuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connectionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connectionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connectionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_connectionId);
            setConnectionId(refVal_connectionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createComposite")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createComposite"));
        if(!fieldValue.is_null())
        {
            bool refVal_createComposite;
            ok &= ModelBase::fromJson(fieldValue, refVal_createComposite);
            setCreateComposite(refVal_createComposite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("currentSheetOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("currentSheetOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_currentSheetOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_currentSheetOnly);
            setCurrentSheetOnly(refVal_currentSheetOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("destinationName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("destinationName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_destinationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_destinationName);
            setDestinationName(refVal_destinationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("distanceTolerance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("distanceTolerance"));
        if(!fieldValue.is_null())
        {
            double refVal_distanceTolerance;
            ok &= ModelBase::fromJson(fieldValue, refVal_distanceTolerance);
            setDistanceTolerance(refVal_distanceTolerance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailLink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailLink"));
        if(!fieldValue.is_null())
        {
            bool refVal_emailLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailLink);
            setEmailLink(refVal_emailLink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailMessage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailMessage"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailMessage);
            setEmailMessage(refVal_emailMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailSubject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailSubject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailSubject);
            setEmailSubject(refVal_emailSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailTo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailTo"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_emailTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailTo);
            setEmailTo(refVal_emailTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extractAssemblyHierarchy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("extractAssemblyHierarchy"));
        if(!fieldValue.is_null())
        {
            bool refVal_extractAssemblyHierarchy;
            ok &= ModelBase::fromJson(fieldValue, refVal_extractAssemblyHierarchy);
            setExtractAssemblyHierarchy(refVal_extractAssemblyHierarchy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flatten")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("flatten"));
        if(!fieldValue.is_null())
        {
            bool refVal_flatten;
            ok &= ModelBase::fromJson(fieldValue, refVal_flatten);
            setFlatten(refVal_flatten);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("flattenAssemblies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("flattenAssemblies"));
        if(!fieldValue.is_null())
        {
            bool refVal_flattenAssemblies;
            ok &= ModelBase::fromJson(fieldValue, refVal_flattenAssemblies);
            setFlattenAssemblies(refVal_flattenAssemblies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("foreignId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("foreignId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_foreignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_foreignId);
            setForeignId(refVal_foreignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("formatName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("formatName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_formatName;
            ok &= ModelBase::fromJson(fieldValue, refVal_formatName);
            setFormatName(refVal_formatName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromUserId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromUserId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fromUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromUserId);
            setFromUserId(refVal_fromUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("getyAxisIsUp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("getyAxisIsUp"));
        if(!fieldValue.is_null())
        {
            bool refVal_getyAxisIsUp;
            ok &= ModelBase::fromJson(fieldValue, refVal_getyAxisIsUp);
            setGetyAxisIsUp(refVal_getyAxisIsUp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("grouping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("grouping"));
        if(!fieldValue.is_null())
        {
            bool refVal_grouping;
            ok &= ModelBase::fromJson(fieldValue, refVal_grouping);
            setGrouping(refVal_grouping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imageHeight")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imageHeight"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_imageHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_imageHeight);
            setImageHeight(refVal_imageHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imageWidth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imageWidth"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_imageWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_imageWidth);
            setImageWidth(refVal_imageWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importInBackground")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importInBackground"));
        if(!fieldValue.is_null())
        {
            bool refVal_importInBackground;
            ok &= ModelBase::fromJson(fieldValue, refVal_importInBackground);
            setImportInBackground(refVal_importInBackground);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importWithinDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importWithinDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_importWithinDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_importWithinDocument);
            setImportWithinDocument(refVal_importWithinDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includeExportIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includeExportIds"));
        if(!fieldValue.is_null())
        {
            bool refVal_includeExportIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_includeExportIds);
            setIncludeExportIds(refVal_includeExportIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("joinAdjacentSurfaces")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("joinAdjacentSurfaces"));
        if(!fieldValue.is_null())
        {
            bool refVal_joinAdjacentSurfaces;
            ok &= ModelBase::fromJson(fieldValue, refVal_joinAdjacentSurfaces);
            setJoinAdjacentSurfaces(refVal_joinAdjacentSurfaces);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkDocumentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkDocumentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkDocumentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkDocumentId);
            setLinkDocumentId(refVal_linkDocumentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("linkDocumentWorkspaceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("linkDocumentWorkspaceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_linkDocumentWorkspaceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_linkDocumentWorkspaceId);
            setLinkDocumentWorkspaceId(refVal_linkDocumentWorkspaceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maximumChordLength")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maximumChordLength"));
        if(!fieldValue.is_null())
        {
            double refVal_maximumChordLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_maximumChordLength);
            setMaximumChordLength(refVal_maximumChordLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notifyUser")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notifyUser"));
        if(!fieldValue.is_null())
        {
            bool refVal_notifyUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_notifyUser);
            setNotifyUser(refVal_notifyUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originalForeignId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originalForeignId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_originalForeignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_originalForeignId);
            setOriginalForeignId(refVal_originalForeignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentId);
            setParentId(refVal_parentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partIds"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_partIds);
            setPartIds(refVal_partIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordRequired")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("passwordRequired"));
        if(!fieldValue.is_null())
        {
            bool refVal_passwordRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_passwordRequired);
            setPasswordRequired(refVal_passwordRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("processedForeignId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("processedForeignId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_processedForeignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_processedForeignId);
            setProcessedForeignId(refVal_processedForeignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("projectId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("projectId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_projectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_projectId);
            setProjectId(refVal_projectId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("selectablePdfText")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("selectablePdfText"));
        if(!fieldValue.is_null())
        {
            bool refVal_selectablePdfText;
            ok &= ModelBase::fromJson(fieldValue, refVal_selectablePdfText);
            setSelectablePdfText(refVal_selectablePdfText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sendCopyToMe")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sendCopyToMe"));
        if(!fieldValue.is_null())
        {
            bool refVal_sendCopyToMe;
            ok &= ModelBase::fromJson(fieldValue, refVal_sendCopyToMe);
            setSendCopyToMe(refVal_sendCopyToMe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("showOverriddenDimensions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("showOverriddenDimensions"));
        if(!fieldValue.is_null())
        {
            bool refVal_showOverriddenDimensions;
            ok &= ModelBase::fromJson(fieldValue, refVal_showOverriddenDimensions);
            setShowOverriddenDimensions(refVal_showOverriddenDimensions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceName);
            setSourceName(refVal_sourceName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("specifyUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("specifyUnits"));
        if(!fieldValue.is_null())
        {
            bool refVal_specifyUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_specifyUnits);
            setSpecifyUnits(refVal_specifyUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("splinesAsPolylines")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("splinesAsPolylines"));
        if(!fieldValue.is_null())
        {
            bool refVal_splinesAsPolylines;
            ok &= ModelBase::fromJson(fieldValue, refVal_splinesAsPolylines);
            setSplinesAsPolylines(refVal_splinesAsPolylines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments"));
        if(!fieldValue.is_null())
        {
            bool refVal_splitAssembliesIntoMultipleDocuments;
            ok &= ModelBase::fromJson(fieldValue, refVal_splitAssembliesIntoMultipleDocuments);
            setSplitAssembliesIntoMultipleDocuments(refVal_splitAssembliesIntoMultipleDocuments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("storeInDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("storeInDocument"));
        if(!fieldValue.is_null())
        {
            bool refVal_storeInDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_storeInDocument);
            setStoreInDocument(refVal_storeInDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("textAsGeometry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("textAsGeometry"));
        if(!fieldValue.is_null())
        {
            bool refVal_textAsGeometry;
            ok &= ModelBase::fromJson(fieldValue, refVal_textAsGeometry);
            setTextAsGeometry(refVal_textAsGeometry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("triggerAutoDownload")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("triggerAutoDownload"));
        if(!fieldValue.is_null())
        {
            bool refVal_triggerAutoDownload;
            ok &= ModelBase::fromJson(fieldValue, refVal_triggerAutoDownload);
            setTriggerAutoDownload(refVal_triggerAutoDownload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unit"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_unit;
            ok &= ModelBase::fromJson(fieldValue, refVal_unit);
            setUnit(refVal_unit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uploadId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uploadId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uploadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uploadId);
            setUploadId(refVal_uploadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validForDays")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validForDays"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_validForDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_validForDays);
            setValidForDays(refVal_validForDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionString")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionString"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionString;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionString);
            setVersionString(refVal_versionString);
        }
    }
    return ok;
}

void BTTranslateFormatParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AllowFaultyPartsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowFaultyParts"), m_AllowFaultyParts));
    }
    if(m_AngularToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("angularTolerance"), m_AngularTolerance));
    }
    if(m_BlobElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blobElementId"), m_BlobElementId));
    }
    if(m_BlobMicroversionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("blobMicroversionId"), m_BlobMicroversionId));
    }
    if(m_CloudObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudObjectId"), m_CloudObjectId));
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageAccountId"), m_CloudStorageAccountId));
    }
    if(m_ColorMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("colorMethod"), m_ColorMethod));
    }
    if(m_ConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("configuration"), m_Configuration));
    }
    if(m_ConnectionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connectionId"), m_ConnectionId));
    }
    if(m_CreateCompositeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createComposite"), m_CreateComposite));
    }
    if(m_CurrentSheetOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currentSheetOnly"), m_CurrentSheetOnly));
    }
    if(m_DestinationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destinationName"), m_DestinationName));
    }
    if(m_DistanceToleranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("distanceTolerance"), m_DistanceTolerance));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_EmailLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailLink"), m_EmailLink));
    }
    if(m_EmailMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailMessage"), m_EmailMessage));
    }
    if(m_EmailSubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailSubject"), m_EmailSubject));
    }
    if(m_EmailToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailTo"), m_EmailTo));
    }
    if(m_ExtractAssemblyHierarchyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("extractAssemblyHierarchy"), m_ExtractAssemblyHierarchy));
    }
    if(m_FlattenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("flatten"), m_Flatten));
    }
    if(m_FlattenAssembliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("flattenAssemblies"), m_FlattenAssemblies));
    }
    if(m_ForeignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("foreignId"), m_ForeignId));
    }
    if(m_FormatNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("formatName"), m_FormatName));
    }
    if(m_FromUserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromUserId"), m_FromUserId));
    }
    if(m_GetyAxisIsUpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("getyAxisIsUp"), m_GetyAxisIsUp));
    }
    if(m_GroupingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("grouping"), m_Grouping));
    }
    if(m_ImageHeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageHeight"), m_ImageHeight));
    }
    if(m_ImageWidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imageWidth"), m_ImageWidth));
    }
    if(m_ImportInBackgroundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importInBackground"), m_ImportInBackground));
    }
    if(m_ImportWithinDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importWithinDocument"), m_ImportWithinDocument));
    }
    if(m_IncludeExportIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includeExportIds"), m_IncludeExportIds));
    }
    if(m_JoinAdjacentSurfacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("joinAdjacentSurfaces"), m_JoinAdjacentSurfaces));
    }
    if(m_LinkDocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkDocumentId"), m_LinkDocumentId));
    }
    if(m_LinkDocumentWorkspaceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("linkDocumentWorkspaceId"), m_LinkDocumentWorkspaceId));
    }
    if(m_MaximumChordLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maximumChordLength"), m_MaximumChordLength));
    }
    if(m_NotifyUserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notifyUser"), m_NotifyUser));
    }
    if(m_OriginalForeignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originalForeignId"), m_OriginalForeignId));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentId"), m_ParentId));
    }
    if(m_PartIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partIds"), m_PartIds));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    }
    if(m_PasswordRequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("passwordRequired"), m_PasswordRequired));
    }
    if(m_ProcessedForeignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("processedForeignId"), m_ProcessedForeignId));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_SelectablePdfTextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("selectablePdfText"), m_SelectablePdfText));
    }
    if(m_SendCopyToMeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sendCopyToMe"), m_SendCopyToMe));
    }
    if(m_ShowOverriddenDimensionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("showOverriddenDimensions"), m_ShowOverriddenDimensions));
    }
    if(m_SourceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceName"), m_SourceName));
    }
    if(m_SpecifyUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("specifyUnits"), m_SpecifyUnits));
    }
    if(m_SplinesAsPolylinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("splinesAsPolylines"), m_SplinesAsPolylines));
    }
    if(m_SplitAssembliesIntoMultipleDocumentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments"), m_SplitAssembliesIntoMultipleDocuments));
    }
    if(m_StoreInDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("storeInDocument"), m_StoreInDocument));
    }
    if(m_TextAsGeometryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("textAsGeometry"), m_TextAsGeometry));
    }
    if(m_TriggerAutoDownloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("triggerAutoDownload"), m_TriggerAutoDownload));
    }
    if(m_UnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unit"), m_Unit));
    }
    if(m_UploadIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uploadId"), m_UploadId));
    }
    if(m_ValidForDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validForDays"), m_ValidForDays));
    }
    if(m_VersionStringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionString"), m_VersionString));
    }
}

bool BTTranslateFormatParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allowFaultyParts")))
    {
        bool refVal_allowFaultyParts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowFaultyParts")), refVal_allowFaultyParts );
        setAllowFaultyParts(refVal_allowFaultyParts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("angularTolerance")))
    {
        double refVal_angularTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("angularTolerance")), refVal_angularTolerance );
        setAngularTolerance(refVal_angularTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobElementId")))
    {
        utility::string_t refVal_blobElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("blobElementId")), refVal_blobElementId );
        setBlobElementId(refVal_blobElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("blobMicroversionId")))
    {
        utility::string_t refVal_blobMicroversionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("blobMicroversionId")), refVal_blobMicroversionId );
        setBlobMicroversionId(refVal_blobMicroversionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudObjectId")))
    {
        utility::string_t refVal_cloudObjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudObjectId")), refVal_cloudObjectId );
        setCloudObjectId(refVal_cloudObjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        utility::string_t refVal_cloudStorageAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageAccountId")), refVal_cloudStorageAccountId );
        setCloudStorageAccountId(refVal_cloudStorageAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("colorMethod")))
    {
        utility::string_t refVal_colorMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("colorMethod")), refVal_colorMethod );
        setColorMethod(refVal_colorMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("configuration")))
    {
        utility::string_t refVal_configuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("configuration")), refVal_configuration );
        setConfiguration(refVal_configuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connectionId")))
    {
        utility::string_t refVal_connectionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connectionId")), refVal_connectionId );
        setConnectionId(refVal_connectionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createComposite")))
    {
        bool refVal_createComposite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createComposite")), refVal_createComposite );
        setCreateComposite(refVal_createComposite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("currentSheetOnly")))
    {
        bool refVal_currentSheetOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("currentSheetOnly")), refVal_currentSheetOnly );
        setCurrentSheetOnly(refVal_currentSheetOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("destinationName")))
    {
        utility::string_t refVal_destinationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("destinationName")), refVal_destinationName );
        setDestinationName(refVal_destinationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("distanceTolerance")))
    {
        double refVal_distanceTolerance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("distanceTolerance")), refVal_distanceTolerance );
        setDistanceTolerance(refVal_distanceTolerance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailLink")))
    {
        bool refVal_emailLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailLink")), refVal_emailLink );
        setEmailLink(refVal_emailLink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailMessage")))
    {
        utility::string_t refVal_emailMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailMessage")), refVal_emailMessage );
        setEmailMessage(refVal_emailMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailSubject")))
    {
        utility::string_t refVal_emailSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailSubject")), refVal_emailSubject );
        setEmailSubject(refVal_emailSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailTo")))
    {
        std::vector<utility::string_t> refVal_emailTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailTo")), refVal_emailTo );
        setEmailTo(refVal_emailTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extractAssemblyHierarchy")))
    {
        bool refVal_extractAssemblyHierarchy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("extractAssemblyHierarchy")), refVal_extractAssemblyHierarchy );
        setExtractAssemblyHierarchy(refVal_extractAssemblyHierarchy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flatten")))
    {
        bool refVal_flatten;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("flatten")), refVal_flatten );
        setFlatten(refVal_flatten);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("flattenAssemblies")))
    {
        bool refVal_flattenAssemblies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("flattenAssemblies")), refVal_flattenAssemblies );
        setFlattenAssemblies(refVal_flattenAssemblies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("foreignId")))
    {
        utility::string_t refVal_foreignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("foreignId")), refVal_foreignId );
        setForeignId(refVal_foreignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("formatName")))
    {
        utility::string_t refVal_formatName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("formatName")), refVal_formatName );
        setFormatName(refVal_formatName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromUserId")))
    {
        utility::string_t refVal_fromUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromUserId")), refVal_fromUserId );
        setFromUserId(refVal_fromUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("getyAxisIsUp")))
    {
        bool refVal_getyAxisIsUp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("getyAxisIsUp")), refVal_getyAxisIsUp );
        setGetyAxisIsUp(refVal_getyAxisIsUp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("grouping")))
    {
        bool refVal_grouping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("grouping")), refVal_grouping );
        setGrouping(refVal_grouping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageHeight")))
    {
        int32_t refVal_imageHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageHeight")), refVal_imageHeight );
        setImageHeight(refVal_imageHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imageWidth")))
    {
        int32_t refVal_imageWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imageWidth")), refVal_imageWidth );
        setImageWidth(refVal_imageWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importInBackground")))
    {
        bool refVal_importInBackground;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importInBackground")), refVal_importInBackground );
        setImportInBackground(refVal_importInBackground);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importWithinDocument")))
    {
        bool refVal_importWithinDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importWithinDocument")), refVal_importWithinDocument );
        setImportWithinDocument(refVal_importWithinDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includeExportIds")))
    {
        bool refVal_includeExportIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includeExportIds")), refVal_includeExportIds );
        setIncludeExportIds(refVal_includeExportIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("joinAdjacentSurfaces")))
    {
        bool refVal_joinAdjacentSurfaces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("joinAdjacentSurfaces")), refVal_joinAdjacentSurfaces );
        setJoinAdjacentSurfaces(refVal_joinAdjacentSurfaces);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkDocumentId")))
    {
        utility::string_t refVal_linkDocumentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkDocumentId")), refVal_linkDocumentId );
        setLinkDocumentId(refVal_linkDocumentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("linkDocumentWorkspaceId")))
    {
        utility::string_t refVal_linkDocumentWorkspaceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("linkDocumentWorkspaceId")), refVal_linkDocumentWorkspaceId );
        setLinkDocumentWorkspaceId(refVal_linkDocumentWorkspaceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maximumChordLength")))
    {
        double refVal_maximumChordLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maximumChordLength")), refVal_maximumChordLength );
        setMaximumChordLength(refVal_maximumChordLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notifyUser")))
    {
        bool refVal_notifyUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notifyUser")), refVal_notifyUser );
        setNotifyUser(refVal_notifyUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("originalForeignId")))
    {
        utility::string_t refVal_originalForeignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originalForeignId")), refVal_originalForeignId );
        setOriginalForeignId(refVal_originalForeignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentId")))
    {
        utility::string_t refVal_parentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentId")), refVal_parentId );
        setParentId(refVal_parentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partIds")))
    {
        utility::string_t refVal_partIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partIds")), refVal_partIds );
        setPartIds(refVal_partIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("password")), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordRequired")))
    {
        bool refVal_passwordRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("passwordRequired")), refVal_passwordRequired );
        setPasswordRequired(refVal_passwordRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("processedForeignId")))
    {
        utility::string_t refVal_processedForeignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("processedForeignId")), refVal_processedForeignId );
        setProcessedForeignId(refVal_processedForeignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("selectablePdfText")))
    {
        bool refVal_selectablePdfText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("selectablePdfText")), refVal_selectablePdfText );
        setSelectablePdfText(refVal_selectablePdfText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sendCopyToMe")))
    {
        bool refVal_sendCopyToMe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sendCopyToMe")), refVal_sendCopyToMe );
        setSendCopyToMe(refVal_sendCopyToMe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("showOverriddenDimensions")))
    {
        bool refVal_showOverriddenDimensions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("showOverriddenDimensions")), refVal_showOverriddenDimensions );
        setShowOverriddenDimensions(refVal_showOverriddenDimensions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceName")))
    {
        utility::string_t refVal_sourceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceName")), refVal_sourceName );
        setSourceName(refVal_sourceName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("specifyUnits")))
    {
        bool refVal_specifyUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("specifyUnits")), refVal_specifyUnits );
        setSpecifyUnits(refVal_specifyUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("splinesAsPolylines")))
    {
        bool refVal_splinesAsPolylines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("splinesAsPolylines")), refVal_splinesAsPolylines );
        setSplinesAsPolylines(refVal_splinesAsPolylines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")))
    {
        bool refVal_splitAssembliesIntoMultipleDocuments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("splitAssembliesIntoMultipleDocuments")), refVal_splitAssembliesIntoMultipleDocuments );
        setSplitAssembliesIntoMultipleDocuments(refVal_splitAssembliesIntoMultipleDocuments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("storeInDocument")))
    {
        bool refVal_storeInDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("storeInDocument")), refVal_storeInDocument );
        setStoreInDocument(refVal_storeInDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("textAsGeometry")))
    {
        bool refVal_textAsGeometry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("textAsGeometry")), refVal_textAsGeometry );
        setTextAsGeometry(refVal_textAsGeometry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("triggerAutoDownload")))
    {
        bool refVal_triggerAutoDownload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("triggerAutoDownload")), refVal_triggerAutoDownload );
        setTriggerAutoDownload(refVal_triggerAutoDownload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unit")))
    {
        utility::string_t refVal_unit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unit")), refVal_unit );
        setUnit(refVal_unit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uploadId")))
    {
        utility::string_t refVal_uploadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uploadId")), refVal_uploadId );
        setUploadId(refVal_uploadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validForDays")))
    {
        int32_t refVal_validForDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validForDays")), refVal_validForDays );
        setValidForDays(refVal_validForDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionString")))
    {
        utility::string_t refVal_versionString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionString")), refVal_versionString );
        setVersionString(refVal_versionString);
    }
    return ok;
}

bool BTTranslateFormatParams::isAllowFaultyParts() const
{
    return m_AllowFaultyParts;
}

void BTTranslateFormatParams::setAllowFaultyParts(bool value)
{
    m_AllowFaultyParts = value;
    m_AllowFaultyPartsIsSet = true;
}

bool BTTranslateFormatParams::allowFaultyPartsIsSet() const
{
    return m_AllowFaultyPartsIsSet;
}

void BTTranslateFormatParams::unsetAllowFaultyParts()
{
    m_AllowFaultyPartsIsSet = false;
}
double BTTranslateFormatParams::getAngularTolerance() const
{
    return m_AngularTolerance;
}

void BTTranslateFormatParams::setAngularTolerance(double value)
{
    m_AngularTolerance = value;
    m_AngularToleranceIsSet = true;
}

bool BTTranslateFormatParams::angularToleranceIsSet() const
{
    return m_AngularToleranceIsSet;
}

void BTTranslateFormatParams::unsetAngularTolerance()
{
    m_AngularToleranceIsSet = false;
}
utility::string_t BTTranslateFormatParams::getBlobElementId() const
{
    return m_BlobElementId;
}

void BTTranslateFormatParams::setBlobElementId(const utility::string_t& value)
{
    m_BlobElementId = value;
    m_BlobElementIdIsSet = true;
}

bool BTTranslateFormatParams::blobElementIdIsSet() const
{
    return m_BlobElementIdIsSet;
}

void BTTranslateFormatParams::unsetBlobElementId()
{
    m_BlobElementIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getBlobMicroversionId() const
{
    return m_BlobMicroversionId;
}

void BTTranslateFormatParams::setBlobMicroversionId(const utility::string_t& value)
{
    m_BlobMicroversionId = value;
    m_BlobMicroversionIdIsSet = true;
}

bool BTTranslateFormatParams::blobMicroversionIdIsSet() const
{
    return m_BlobMicroversionIdIsSet;
}

void BTTranslateFormatParams::unsetBlobMicroversionId()
{
    m_BlobMicroversionIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getCloudObjectId() const
{
    return m_CloudObjectId;
}

void BTTranslateFormatParams::setCloudObjectId(const utility::string_t& value)
{
    m_CloudObjectId = value;
    m_CloudObjectIdIsSet = true;
}

bool BTTranslateFormatParams::cloudObjectIdIsSet() const
{
    return m_CloudObjectIdIsSet;
}

void BTTranslateFormatParams::unsetCloudObjectId()
{
    m_CloudObjectIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getCloudStorageAccountId() const
{
    return m_CloudStorageAccountId;
}

void BTTranslateFormatParams::setCloudStorageAccountId(const utility::string_t& value)
{
    m_CloudStorageAccountId = value;
    m_CloudStorageAccountIdIsSet = true;
}

bool BTTranslateFormatParams::cloudStorageAccountIdIsSet() const
{
    return m_CloudStorageAccountIdIsSet;
}

void BTTranslateFormatParams::unsetCloudStorageAccountId()
{
    m_CloudStorageAccountIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getColorMethod() const
{
    return m_ColorMethod;
}

void BTTranslateFormatParams::setColorMethod(const utility::string_t& value)
{
    m_ColorMethod = value;
    m_ColorMethodIsSet = true;
}

bool BTTranslateFormatParams::colorMethodIsSet() const
{
    return m_ColorMethodIsSet;
}

void BTTranslateFormatParams::unsetColorMethod()
{
    m_ColorMethodIsSet = false;
}
utility::string_t BTTranslateFormatParams::getConfiguration() const
{
    return m_Configuration;
}

void BTTranslateFormatParams::setConfiguration(const utility::string_t& value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}

bool BTTranslateFormatParams::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}

void BTTranslateFormatParams::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
utility::string_t BTTranslateFormatParams::getConnectionId() const
{
    return m_ConnectionId;
}

void BTTranslateFormatParams::setConnectionId(const utility::string_t& value)
{
    m_ConnectionId = value;
    m_ConnectionIdIsSet = true;
}

bool BTTranslateFormatParams::connectionIdIsSet() const
{
    return m_ConnectionIdIsSet;
}

void BTTranslateFormatParams::unsetConnectionId()
{
    m_ConnectionIdIsSet = false;
}
bool BTTranslateFormatParams::isCreateComposite() const
{
    return m_CreateComposite;
}

void BTTranslateFormatParams::setCreateComposite(bool value)
{
    m_CreateComposite = value;
    m_CreateCompositeIsSet = true;
}

bool BTTranslateFormatParams::createCompositeIsSet() const
{
    return m_CreateCompositeIsSet;
}

void BTTranslateFormatParams::unsetCreateComposite()
{
    m_CreateCompositeIsSet = false;
}
bool BTTranslateFormatParams::isCurrentSheetOnly() const
{
    return m_CurrentSheetOnly;
}

void BTTranslateFormatParams::setCurrentSheetOnly(bool value)
{
    m_CurrentSheetOnly = value;
    m_CurrentSheetOnlyIsSet = true;
}

bool BTTranslateFormatParams::currentSheetOnlyIsSet() const
{
    return m_CurrentSheetOnlyIsSet;
}

void BTTranslateFormatParams::unsetCurrentSheetOnly()
{
    m_CurrentSheetOnlyIsSet = false;
}
utility::string_t BTTranslateFormatParams::getDestinationName() const
{
    return m_DestinationName;
}

void BTTranslateFormatParams::setDestinationName(const utility::string_t& value)
{
    m_DestinationName = value;
    m_DestinationNameIsSet = true;
}

bool BTTranslateFormatParams::destinationNameIsSet() const
{
    return m_DestinationNameIsSet;
}

void BTTranslateFormatParams::unsetDestinationName()
{
    m_DestinationNameIsSet = false;
}
double BTTranslateFormatParams::getDistanceTolerance() const
{
    return m_DistanceTolerance;
}

void BTTranslateFormatParams::setDistanceTolerance(double value)
{
    m_DistanceTolerance = value;
    m_DistanceToleranceIsSet = true;
}

bool BTTranslateFormatParams::distanceToleranceIsSet() const
{
    return m_DistanceToleranceIsSet;
}

void BTTranslateFormatParams::unsetDistanceTolerance()
{
    m_DistanceToleranceIsSet = false;
}
utility::string_t BTTranslateFormatParams::getElementId() const
{
    return m_ElementId;
}

void BTTranslateFormatParams::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTTranslateFormatParams::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTTranslateFormatParams::unsetElementId()
{
    m_ElementIdIsSet = false;
}
bool BTTranslateFormatParams::isEmailLink() const
{
    return m_EmailLink;
}

void BTTranslateFormatParams::setEmailLink(bool value)
{
    m_EmailLink = value;
    m_EmailLinkIsSet = true;
}

bool BTTranslateFormatParams::emailLinkIsSet() const
{
    return m_EmailLinkIsSet;
}

void BTTranslateFormatParams::unsetEmailLink()
{
    m_EmailLinkIsSet = false;
}
utility::string_t BTTranslateFormatParams::getEmailMessage() const
{
    return m_EmailMessage;
}

void BTTranslateFormatParams::setEmailMessage(const utility::string_t& value)
{
    m_EmailMessage = value;
    m_EmailMessageIsSet = true;
}

bool BTTranslateFormatParams::emailMessageIsSet() const
{
    return m_EmailMessageIsSet;
}

void BTTranslateFormatParams::unsetEmailMessage()
{
    m_EmailMessageIsSet = false;
}
utility::string_t BTTranslateFormatParams::getEmailSubject() const
{
    return m_EmailSubject;
}

void BTTranslateFormatParams::setEmailSubject(const utility::string_t& value)
{
    m_EmailSubject = value;
    m_EmailSubjectIsSet = true;
}

bool BTTranslateFormatParams::emailSubjectIsSet() const
{
    return m_EmailSubjectIsSet;
}

void BTTranslateFormatParams::unsetEmailSubject()
{
    m_EmailSubjectIsSet = false;
}
std::vector<utility::string_t>& BTTranslateFormatParams::getEmailTo()
{
    return m_EmailTo;
}

void BTTranslateFormatParams::setEmailTo(const std::vector<utility::string_t>& value)
{
    m_EmailTo = value;
    m_EmailToIsSet = true;
}

bool BTTranslateFormatParams::emailToIsSet() const
{
    return m_EmailToIsSet;
}

void BTTranslateFormatParams::unsetEmailTo()
{
    m_EmailToIsSet = false;
}
bool BTTranslateFormatParams::isExtractAssemblyHierarchy() const
{
    return m_ExtractAssemblyHierarchy;
}

void BTTranslateFormatParams::setExtractAssemblyHierarchy(bool value)
{
    m_ExtractAssemblyHierarchy = value;
    m_ExtractAssemblyHierarchyIsSet = true;
}

bool BTTranslateFormatParams::extractAssemblyHierarchyIsSet() const
{
    return m_ExtractAssemblyHierarchyIsSet;
}

void BTTranslateFormatParams::unsetExtractAssemblyHierarchy()
{
    m_ExtractAssemblyHierarchyIsSet = false;
}
bool BTTranslateFormatParams::isFlatten() const
{
    return m_Flatten;
}

void BTTranslateFormatParams::setFlatten(bool value)
{
    m_Flatten = value;
    m_FlattenIsSet = true;
}

bool BTTranslateFormatParams::flattenIsSet() const
{
    return m_FlattenIsSet;
}

void BTTranslateFormatParams::unsetFlatten()
{
    m_FlattenIsSet = false;
}
bool BTTranslateFormatParams::isFlattenAssemblies() const
{
    return m_FlattenAssemblies;
}

void BTTranslateFormatParams::setFlattenAssemblies(bool value)
{
    m_FlattenAssemblies = value;
    m_FlattenAssembliesIsSet = true;
}

bool BTTranslateFormatParams::flattenAssembliesIsSet() const
{
    return m_FlattenAssembliesIsSet;
}

void BTTranslateFormatParams::unsetFlattenAssemblies()
{
    m_FlattenAssembliesIsSet = false;
}
utility::string_t BTTranslateFormatParams::getForeignId() const
{
    return m_ForeignId;
}

void BTTranslateFormatParams::setForeignId(const utility::string_t& value)
{
    m_ForeignId = value;
    m_ForeignIdIsSet = true;
}

bool BTTranslateFormatParams::foreignIdIsSet() const
{
    return m_ForeignIdIsSet;
}

void BTTranslateFormatParams::unsetForeignId()
{
    m_ForeignIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getFormatName() const
{
    return m_FormatName;
}

void BTTranslateFormatParams::setFormatName(const utility::string_t& value)
{
    m_FormatName = value;
    m_FormatNameIsSet = true;
}

bool BTTranslateFormatParams::formatNameIsSet() const
{
    return m_FormatNameIsSet;
}

void BTTranslateFormatParams::unsetFormatName()
{
    m_FormatNameIsSet = false;
}
utility::string_t BTTranslateFormatParams::getFromUserId() const
{
    return m_FromUserId;
}

void BTTranslateFormatParams::setFromUserId(const utility::string_t& value)
{
    m_FromUserId = value;
    m_FromUserIdIsSet = true;
}

bool BTTranslateFormatParams::fromUserIdIsSet() const
{
    return m_FromUserIdIsSet;
}

void BTTranslateFormatParams::unsetFromUserId()
{
    m_FromUserIdIsSet = false;
}
bool BTTranslateFormatParams::isGetyAxisIsUp() const
{
    return m_GetyAxisIsUp;
}

void BTTranslateFormatParams::setGetyAxisIsUp(bool value)
{
    m_GetyAxisIsUp = value;
    m_GetyAxisIsUpIsSet = true;
}

bool BTTranslateFormatParams::getyAxisIsUpIsSet() const
{
    return m_GetyAxisIsUpIsSet;
}

void BTTranslateFormatParams::unsetGetyAxisIsUp()
{
    m_GetyAxisIsUpIsSet = false;
}
bool BTTranslateFormatParams::isGrouping() const
{
    return m_Grouping;
}

void BTTranslateFormatParams::setGrouping(bool value)
{
    m_Grouping = value;
    m_GroupingIsSet = true;
}

bool BTTranslateFormatParams::groupingIsSet() const
{
    return m_GroupingIsSet;
}

void BTTranslateFormatParams::unsetGrouping()
{
    m_GroupingIsSet = false;
}
int32_t BTTranslateFormatParams::getImageHeight() const
{
    return m_ImageHeight;
}

void BTTranslateFormatParams::setImageHeight(int32_t value)
{
    m_ImageHeight = value;
    m_ImageHeightIsSet = true;
}

bool BTTranslateFormatParams::imageHeightIsSet() const
{
    return m_ImageHeightIsSet;
}

void BTTranslateFormatParams::unsetImageHeight()
{
    m_ImageHeightIsSet = false;
}
int32_t BTTranslateFormatParams::getImageWidth() const
{
    return m_ImageWidth;
}

void BTTranslateFormatParams::setImageWidth(int32_t value)
{
    m_ImageWidth = value;
    m_ImageWidthIsSet = true;
}

bool BTTranslateFormatParams::imageWidthIsSet() const
{
    return m_ImageWidthIsSet;
}

void BTTranslateFormatParams::unsetImageWidth()
{
    m_ImageWidthIsSet = false;
}
bool BTTranslateFormatParams::isImportInBackground() const
{
    return m_ImportInBackground;
}

void BTTranslateFormatParams::setImportInBackground(bool value)
{
    m_ImportInBackground = value;
    m_ImportInBackgroundIsSet = true;
}

bool BTTranslateFormatParams::importInBackgroundIsSet() const
{
    return m_ImportInBackgroundIsSet;
}

void BTTranslateFormatParams::unsetImportInBackground()
{
    m_ImportInBackgroundIsSet = false;
}
bool BTTranslateFormatParams::isImportWithinDocument() const
{
    return m_ImportWithinDocument;
}

void BTTranslateFormatParams::setImportWithinDocument(bool value)
{
    m_ImportWithinDocument = value;
    m_ImportWithinDocumentIsSet = true;
}

bool BTTranslateFormatParams::importWithinDocumentIsSet() const
{
    return m_ImportWithinDocumentIsSet;
}

void BTTranslateFormatParams::unsetImportWithinDocument()
{
    m_ImportWithinDocumentIsSet = false;
}
bool BTTranslateFormatParams::isIncludeExportIds() const
{
    return m_IncludeExportIds;
}

void BTTranslateFormatParams::setIncludeExportIds(bool value)
{
    m_IncludeExportIds = value;
    m_IncludeExportIdsIsSet = true;
}

bool BTTranslateFormatParams::includeExportIdsIsSet() const
{
    return m_IncludeExportIdsIsSet;
}

void BTTranslateFormatParams::unsetIncludeExportIds()
{
    m_IncludeExportIdsIsSet = false;
}
bool BTTranslateFormatParams::isJoinAdjacentSurfaces() const
{
    return m_JoinAdjacentSurfaces;
}

void BTTranslateFormatParams::setJoinAdjacentSurfaces(bool value)
{
    m_JoinAdjacentSurfaces = value;
    m_JoinAdjacentSurfacesIsSet = true;
}

bool BTTranslateFormatParams::joinAdjacentSurfacesIsSet() const
{
    return m_JoinAdjacentSurfacesIsSet;
}

void BTTranslateFormatParams::unsetJoinAdjacentSurfaces()
{
    m_JoinAdjacentSurfacesIsSet = false;
}
utility::string_t BTTranslateFormatParams::getLinkDocumentId() const
{
    return m_LinkDocumentId;
}

void BTTranslateFormatParams::setLinkDocumentId(const utility::string_t& value)
{
    m_LinkDocumentId = value;
    m_LinkDocumentIdIsSet = true;
}

bool BTTranslateFormatParams::linkDocumentIdIsSet() const
{
    return m_LinkDocumentIdIsSet;
}

void BTTranslateFormatParams::unsetLinkDocumentId()
{
    m_LinkDocumentIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getLinkDocumentWorkspaceId() const
{
    return m_LinkDocumentWorkspaceId;
}

void BTTranslateFormatParams::setLinkDocumentWorkspaceId(const utility::string_t& value)
{
    m_LinkDocumentWorkspaceId = value;
    m_LinkDocumentWorkspaceIdIsSet = true;
}

bool BTTranslateFormatParams::linkDocumentWorkspaceIdIsSet() const
{
    return m_LinkDocumentWorkspaceIdIsSet;
}

void BTTranslateFormatParams::unsetLinkDocumentWorkspaceId()
{
    m_LinkDocumentWorkspaceIdIsSet = false;
}
double BTTranslateFormatParams::getMaximumChordLength() const
{
    return m_MaximumChordLength;
}

void BTTranslateFormatParams::setMaximumChordLength(double value)
{
    m_MaximumChordLength = value;
    m_MaximumChordLengthIsSet = true;
}

bool BTTranslateFormatParams::maximumChordLengthIsSet() const
{
    return m_MaximumChordLengthIsSet;
}

void BTTranslateFormatParams::unsetMaximumChordLength()
{
    m_MaximumChordLengthIsSet = false;
}
bool BTTranslateFormatParams::isNotifyUser() const
{
    return m_NotifyUser;
}

void BTTranslateFormatParams::setNotifyUser(bool value)
{
    m_NotifyUser = value;
    m_NotifyUserIsSet = true;
}

bool BTTranslateFormatParams::notifyUserIsSet() const
{
    return m_NotifyUserIsSet;
}

void BTTranslateFormatParams::unsetNotifyUser()
{
    m_NotifyUserIsSet = false;
}
utility::string_t BTTranslateFormatParams::getOriginalForeignId() const
{
    return m_OriginalForeignId;
}

void BTTranslateFormatParams::setOriginalForeignId(const utility::string_t& value)
{
    m_OriginalForeignId = value;
    m_OriginalForeignIdIsSet = true;
}

bool BTTranslateFormatParams::originalForeignIdIsSet() const
{
    return m_OriginalForeignIdIsSet;
}

void BTTranslateFormatParams::unsetOriginalForeignId()
{
    m_OriginalForeignIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getParentId() const
{
    return m_ParentId;
}

void BTTranslateFormatParams::setParentId(const utility::string_t& value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool BTTranslateFormatParams::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void BTTranslateFormatParams::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getPartIds() const
{
    return m_PartIds;
}

void BTTranslateFormatParams::setPartIds(const utility::string_t& value)
{
    m_PartIds = value;
    m_PartIdsIsSet = true;
}

bool BTTranslateFormatParams::partIdsIsSet() const
{
    return m_PartIdsIsSet;
}

void BTTranslateFormatParams::unsetPartIds()
{
    m_PartIdsIsSet = false;
}
utility::string_t BTTranslateFormatParams::getPassword() const
{
    return m_Password;
}

void BTTranslateFormatParams::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool BTTranslateFormatParams::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void BTTranslateFormatParams::unsetPassword()
{
    m_PasswordIsSet = false;
}
bool BTTranslateFormatParams::isPasswordRequired() const
{
    return m_PasswordRequired;
}

void BTTranslateFormatParams::setPasswordRequired(bool value)
{
    m_PasswordRequired = value;
    m_PasswordRequiredIsSet = true;
}

bool BTTranslateFormatParams::passwordRequiredIsSet() const
{
    return m_PasswordRequiredIsSet;
}

void BTTranslateFormatParams::unsetPasswordRequired()
{
    m_PasswordRequiredIsSet = false;
}
utility::string_t BTTranslateFormatParams::getProcessedForeignId() const
{
    return m_ProcessedForeignId;
}

void BTTranslateFormatParams::setProcessedForeignId(const utility::string_t& value)
{
    m_ProcessedForeignId = value;
    m_ProcessedForeignIdIsSet = true;
}

bool BTTranslateFormatParams::processedForeignIdIsSet() const
{
    return m_ProcessedForeignIdIsSet;
}

void BTTranslateFormatParams::unsetProcessedForeignId()
{
    m_ProcessedForeignIdIsSet = false;
}
utility::string_t BTTranslateFormatParams::getProjectId() const
{
    return m_ProjectId;
}

void BTTranslateFormatParams::setProjectId(const utility::string_t& value)
{
    m_ProjectId = value;
    m_ProjectIdIsSet = true;
}

bool BTTranslateFormatParams::projectIdIsSet() const
{
    return m_ProjectIdIsSet;
}

void BTTranslateFormatParams::unsetProjectId()
{
    m_ProjectIdIsSet = false;
}
bool BTTranslateFormatParams::isSelectablePdfText() const
{
    return m_SelectablePdfText;
}

void BTTranslateFormatParams::setSelectablePdfText(bool value)
{
    m_SelectablePdfText = value;
    m_SelectablePdfTextIsSet = true;
}

bool BTTranslateFormatParams::selectablePdfTextIsSet() const
{
    return m_SelectablePdfTextIsSet;
}

void BTTranslateFormatParams::unsetSelectablePdfText()
{
    m_SelectablePdfTextIsSet = false;
}
bool BTTranslateFormatParams::isSendCopyToMe() const
{
    return m_SendCopyToMe;
}

void BTTranslateFormatParams::setSendCopyToMe(bool value)
{
    m_SendCopyToMe = value;
    m_SendCopyToMeIsSet = true;
}

bool BTTranslateFormatParams::sendCopyToMeIsSet() const
{
    return m_SendCopyToMeIsSet;
}

void BTTranslateFormatParams::unsetSendCopyToMe()
{
    m_SendCopyToMeIsSet = false;
}
bool BTTranslateFormatParams::isShowOverriddenDimensions() const
{
    return m_ShowOverriddenDimensions;
}

void BTTranslateFormatParams::setShowOverriddenDimensions(bool value)
{
    m_ShowOverriddenDimensions = value;
    m_ShowOverriddenDimensionsIsSet = true;
}

bool BTTranslateFormatParams::showOverriddenDimensionsIsSet() const
{
    return m_ShowOverriddenDimensionsIsSet;
}

void BTTranslateFormatParams::unsetShowOverriddenDimensions()
{
    m_ShowOverriddenDimensionsIsSet = false;
}
utility::string_t BTTranslateFormatParams::getSourceName() const
{
    return m_SourceName;
}

void BTTranslateFormatParams::setSourceName(const utility::string_t& value)
{
    m_SourceName = value;
    m_SourceNameIsSet = true;
}

bool BTTranslateFormatParams::sourceNameIsSet() const
{
    return m_SourceNameIsSet;
}

void BTTranslateFormatParams::unsetSourceName()
{
    m_SourceNameIsSet = false;
}
bool BTTranslateFormatParams::isSpecifyUnits() const
{
    return m_SpecifyUnits;
}

void BTTranslateFormatParams::setSpecifyUnits(bool value)
{
    m_SpecifyUnits = value;
    m_SpecifyUnitsIsSet = true;
}

bool BTTranslateFormatParams::specifyUnitsIsSet() const
{
    return m_SpecifyUnitsIsSet;
}

void BTTranslateFormatParams::unsetSpecifyUnits()
{
    m_SpecifyUnitsIsSet = false;
}
bool BTTranslateFormatParams::isSplinesAsPolylines() const
{
    return m_SplinesAsPolylines;
}

void BTTranslateFormatParams::setSplinesAsPolylines(bool value)
{
    m_SplinesAsPolylines = value;
    m_SplinesAsPolylinesIsSet = true;
}

bool BTTranslateFormatParams::splinesAsPolylinesIsSet() const
{
    return m_SplinesAsPolylinesIsSet;
}

void BTTranslateFormatParams::unsetSplinesAsPolylines()
{
    m_SplinesAsPolylinesIsSet = false;
}
bool BTTranslateFormatParams::isSplitAssembliesIntoMultipleDocuments() const
{
    return m_SplitAssembliesIntoMultipleDocuments;
}

void BTTranslateFormatParams::setSplitAssembliesIntoMultipleDocuments(bool value)
{
    m_SplitAssembliesIntoMultipleDocuments = value;
    m_SplitAssembliesIntoMultipleDocumentsIsSet = true;
}

bool BTTranslateFormatParams::splitAssembliesIntoMultipleDocumentsIsSet() const
{
    return m_SplitAssembliesIntoMultipleDocumentsIsSet;
}

void BTTranslateFormatParams::unsetSplitAssembliesIntoMultipleDocuments()
{
    m_SplitAssembliesIntoMultipleDocumentsIsSet = false;
}
bool BTTranslateFormatParams::isStoreInDocument() const
{
    return m_StoreInDocument;
}

void BTTranslateFormatParams::setStoreInDocument(bool value)
{
    m_StoreInDocument = value;
    m_StoreInDocumentIsSet = true;
}

bool BTTranslateFormatParams::storeInDocumentIsSet() const
{
    return m_StoreInDocumentIsSet;
}

void BTTranslateFormatParams::unsetStoreInDocument()
{
    m_StoreInDocumentIsSet = false;
}
bool BTTranslateFormatParams::isTextAsGeometry() const
{
    return m_TextAsGeometry;
}

void BTTranslateFormatParams::setTextAsGeometry(bool value)
{
    m_TextAsGeometry = value;
    m_TextAsGeometryIsSet = true;
}

bool BTTranslateFormatParams::textAsGeometryIsSet() const
{
    return m_TextAsGeometryIsSet;
}

void BTTranslateFormatParams::unsetTextAsGeometry()
{
    m_TextAsGeometryIsSet = false;
}
bool BTTranslateFormatParams::isTriggerAutoDownload() const
{
    return m_TriggerAutoDownload;
}

void BTTranslateFormatParams::setTriggerAutoDownload(bool value)
{
    m_TriggerAutoDownload = value;
    m_TriggerAutoDownloadIsSet = true;
}

bool BTTranslateFormatParams::triggerAutoDownloadIsSet() const
{
    return m_TriggerAutoDownloadIsSet;
}

void BTTranslateFormatParams::unsetTriggerAutoDownload()
{
    m_TriggerAutoDownloadIsSet = false;
}
utility::string_t BTTranslateFormatParams::getUnit() const
{
    return m_Unit;
}

void BTTranslateFormatParams::setUnit(const utility::string_t& value)
{
    m_Unit = value;
    m_UnitIsSet = true;
}

bool BTTranslateFormatParams::unitIsSet() const
{
    return m_UnitIsSet;
}

void BTTranslateFormatParams::unsetUnit()
{
    m_UnitIsSet = false;
}
utility::string_t BTTranslateFormatParams::getUploadId() const
{
    return m_UploadId;
}

void BTTranslateFormatParams::setUploadId(const utility::string_t& value)
{
    m_UploadId = value;
    m_UploadIdIsSet = true;
}

bool BTTranslateFormatParams::uploadIdIsSet() const
{
    return m_UploadIdIsSet;
}

void BTTranslateFormatParams::unsetUploadId()
{
    m_UploadIdIsSet = false;
}
int32_t BTTranslateFormatParams::getValidForDays() const
{
    return m_ValidForDays;
}

void BTTranslateFormatParams::setValidForDays(int32_t value)
{
    m_ValidForDays = value;
    m_ValidForDaysIsSet = true;
}

bool BTTranslateFormatParams::validForDaysIsSet() const
{
    return m_ValidForDaysIsSet;
}

void BTTranslateFormatParams::unsetValidForDays()
{
    m_ValidForDaysIsSet = false;
}
utility::string_t BTTranslateFormatParams::getVersionString() const
{
    return m_VersionString;
}

void BTTranslateFormatParams::setVersionString(const utility::string_t& value)
{
    m_VersionString = value;
    m_VersionStringIsSet = true;
}

bool BTTranslateFormatParams::versionStringIsSet() const
{
    return m_VersionStringIsSet;
}

void BTTranslateFormatParams::unsetVersionString()
{
    m_VersionStringIsSet = false;
}
}
}
}
}


