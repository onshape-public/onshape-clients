/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCloudStorageAccountInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCloudStorageAccountInfo::BTCloudStorageAccountInfo()
{
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_ImportFolderIsSet = false;
    m_ExportFolderIsSet = false;
    m_CloudStorageProvider = 0;
    m_CloudStorageProviderIsSet = false;
    m_CloudStorageAccountId = utility::conversions::to_string_t("");
    m_CloudStorageAccountIdIsSet = false;
}

BTCloudStorageAccountInfo::~BTCloudStorageAccountInfo()
{
}

void BTCloudStorageAccountInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCloudStorageAccountInfo::toJson() const
{
    web::json::value val = this->BTGlobalTreeNodeInfo::toJson();
    
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_ImportFolderIsSet)
    {
        val[utility::conversions::to_string_t("importFolder")] = ModelBase::toJson(m_ImportFolder);
    }
    if(m_ExportFolderIsSet)
    {
        val[utility::conversions::to_string_t("exportFolder")] = ModelBase::toJson(m_ExportFolder);
    }
    if(m_CloudStorageProviderIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageProvider")] = ModelBase::toJson(m_CloudStorageProvider);
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        val[utility::conversions::to_string_t("cloudStorageAccountId")] = ModelBase::toJson(m_CloudStorageAccountId);
    }

    return val;
}

bool BTCloudStorageAccountInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTGlobalTreeNodeInfo::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importFolder")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importFolder"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCloudStorageObjectInfo> refVal_importFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_importFolder);
            setImportFolder(refVal_importFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportFolder")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportFolder"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCloudStorageObjectInfo> refVal_exportFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportFolder);
            setExportFolder(refVal_exportFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageProvider"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_cloudStorageProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageProvider);
            setCloudStorageProvider(refVal_cloudStorageProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cloudStorageAccountId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cloudStorageAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_cloudStorageAccountId);
            setCloudStorageAccountId(refVal_cloudStorageAccountId);
        }
    }
    return ok;
}

void BTCloudStorageAccountInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CanMoveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canMove"), m_CanMove));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_CreatedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdBy"), m_CreatedBy));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_IsContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isContainer"), m_IsContainer));
    }
    if(m_IsEnterpriseOwnedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnterpriseOwned"), m_IsEnterpriseOwned));
    }
    if(m_IsMutableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isMutable"), m_IsMutable));
    }
    if(m_JsonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jsonType"), m_JsonType));
    }
    if(m_ModifiedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedAt"), m_ModifiedAt));
    }
    if(m_ModifiedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modifiedBy"), m_ModifiedBy));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner"), m_Owner));
    }
    if(m_ProjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("projectId"), m_ProjectId));
    }
    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceType"), m_ResourceType));
    }
    if(m_TreeHrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treeHref"), m_TreeHref));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_ImportFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importFolder"), m_ImportFolder));
    }
    if(m_ExportFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportFolder"), m_ExportFolder));
    }
    if(m_CloudStorageProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageProvider"), m_CloudStorageProvider));
    }
    if(m_CloudStorageAccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cloudStorageAccountId"), m_CloudStorageAccountId));
    }
}

bool BTCloudStorageAccountInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("canMove")))
    {
        bool refVal_canMove;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canMove")), refVal_canMove );
        setCanMove(refVal_canMove);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_createdBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdBy")), refVal_createdBy );
        setCreatedBy(refVal_createdBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isContainer")))
    {
        bool refVal_isContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isContainer")), refVal_isContainer );
        setIsContainer(refVal_isContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnterpriseOwned")))
    {
        bool refVal_isEnterpriseOwned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnterpriseOwned")), refVal_isEnterpriseOwned );
        setIsEnterpriseOwned(refVal_isEnterpriseOwned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isMutable")))
    {
        bool refVal_isMutable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isMutable")), refVal_isMutable );
        setIsMutable(refVal_isMutable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jsonType")))
    {
        utility::string_t refVal_jsonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jsonType")), refVal_jsonType );
        setJsonType(refVal_jsonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedAt")))
    {
        utility::datetime refVal_modifiedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedAt")), refVal_modifiedAt );
        setModifiedAt(refVal_modifiedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modifiedBy")))
    {
        std::shared_ptr<BTUserBasicSummaryInfo> refVal_modifiedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modifiedBy")), refVal_modifiedBy );
        setModifiedBy(refVal_modifiedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner")))
    {
        std::shared_ptr<BTOwnerInfo> refVal_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner")), refVal_owner );
        setOwner(refVal_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("projectId")))
    {
        utility::string_t refVal_projectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("projectId")), refVal_projectId );
        setProjectId(refVal_projectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resourceType")))
    {
        utility::string_t refVal_resourceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceType")), refVal_resourceType );
        setResourceType(refVal_resourceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treeHref")))
    {
        utility::string_t refVal_treeHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treeHref")), refVal_treeHref );
        setTreeHref(refVal_treeHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importFolder")))
    {
        std::shared_ptr<BTCloudStorageObjectInfo> refVal_importFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importFolder")), refVal_importFolder );
        setImportFolder(refVal_importFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportFolder")))
    {
        std::shared_ptr<BTCloudStorageObjectInfo> refVal_exportFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportFolder")), refVal_exportFolder );
        setExportFolder(refVal_exportFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageProvider")))
    {
        int32_t refVal_cloudStorageProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageProvider")), refVal_cloudStorageProvider );
        setCloudStorageProvider(refVal_cloudStorageProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cloudStorageAccountId")))
    {
        utility::string_t refVal_cloudStorageAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cloudStorageAccountId")), refVal_cloudStorageAccountId );
        setCloudStorageAccountId(refVal_cloudStorageAccountId);
    }
    return ok;
}

bool BTCloudStorageAccountInfo::isEnabled() const
{
    return m_Enabled;
}

void BTCloudStorageAccountInfo::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool BTCloudStorageAccountInfo::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void BTCloudStorageAccountInfo::unsetEnabled()
{
    m_EnabledIsSet = false;
}
std::shared_ptr<BTCloudStorageObjectInfo> BTCloudStorageAccountInfo::getImportFolder() const
{
    return m_ImportFolder;
}

void BTCloudStorageAccountInfo::setImportFolder(const std::shared_ptr<BTCloudStorageObjectInfo>& value)
{
    m_ImportFolder = value;
    m_ImportFolderIsSet = true;
}

bool BTCloudStorageAccountInfo::importFolderIsSet() const
{
    return m_ImportFolderIsSet;
}

void BTCloudStorageAccountInfo::unsetImportFolder()
{
    m_ImportFolderIsSet = false;
}
std::shared_ptr<BTCloudStorageObjectInfo> BTCloudStorageAccountInfo::getExportFolder() const
{
    return m_ExportFolder;
}

void BTCloudStorageAccountInfo::setExportFolder(const std::shared_ptr<BTCloudStorageObjectInfo>& value)
{
    m_ExportFolder = value;
    m_ExportFolderIsSet = true;
}

bool BTCloudStorageAccountInfo::exportFolderIsSet() const
{
    return m_ExportFolderIsSet;
}

void BTCloudStorageAccountInfo::unsetExportFolder()
{
    m_ExportFolderIsSet = false;
}
int32_t BTCloudStorageAccountInfo::getCloudStorageProvider() const
{
    return m_CloudStorageProvider;
}

void BTCloudStorageAccountInfo::setCloudStorageProvider(int32_t value)
{
    m_CloudStorageProvider = value;
    m_CloudStorageProviderIsSet = true;
}

bool BTCloudStorageAccountInfo::cloudStorageProviderIsSet() const
{
    return m_CloudStorageProviderIsSet;
}

void BTCloudStorageAccountInfo::unsetCloudStorageProvider()
{
    m_CloudStorageProviderIsSet = false;
}
utility::string_t BTCloudStorageAccountInfo::getCloudStorageAccountId() const
{
    return m_CloudStorageAccountId;
}

void BTCloudStorageAccountInfo::setCloudStorageAccountId(const utility::string_t& value)
{
    m_CloudStorageAccountId = value;
    m_CloudStorageAccountIdIsSet = true;
}

bool BTCloudStorageAccountInfo::cloudStorageAccountIdIsSet() const
{
    return m_CloudStorageAccountIdIsSet;
}

void BTCloudStorageAccountInfo::unsetCloudStorageAccountId()
{
    m_CloudStorageAccountIdIsSet = false;
}
}
}
}
}


