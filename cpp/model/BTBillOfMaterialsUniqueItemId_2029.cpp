/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTBillOfMaterialsUniqueItemId_2029.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTBillOfMaterialsUniqueItemId_2029::BTBillOfMaterialsUniqueItemId_2029()
{
    m_AmbiguousUniqueIdIsSet = false;
    m_ApiConfiguration = utility::conversions::to_string_t("");
    m_ApiConfigurationIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_DocumentVersionElementIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_FullElementIdIsSet = false;
    m_IsStandardContent = false;
    m_IsStandardContentIsSet = false;
    m_ItemDefinitionId = utility::conversions::to_string_t("");
    m_ItemDefinitionIdIsSet = false;
    m_NonGeometric = false;
    m_NonGeometricIsSet = false;
    m_PartId = utility::conversions::to_string_t("");
    m_PartIdIsSet = false;
    m_SourceElementIsSet = false;
    m_StandardContentOwnerIsSet = false;
    m_UniqueElementIdIsSet = false;
    m_VersionId = utility::conversions::to_string_t("");
    m_VersionIdIsSet = false;
    m_WorkspacePartItem = false;
    m_WorkspacePartItemIsSet = false;
    m_WorkspaceReference = false;
    m_WorkspaceReferenceIsSet = false;
}

BTBillOfMaterialsUniqueItemId_2029::~BTBillOfMaterialsUniqueItemId_2029()
{
}

void BTBillOfMaterialsUniqueItemId_2029::validate()
{
    // TODO: implement validation
}

web::json::value BTBillOfMaterialsUniqueItemId_2029::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AmbiguousUniqueIdIsSet)
    {
        val[utility::conversions::to_string_t("ambiguousUniqueId")] = ModelBase::toJson(m_AmbiguousUniqueId);
    }
    if(m_ApiConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("apiConfiguration")] = ModelBase::toJson(m_ApiConfiguration);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_DocumentVersionElementIdIsSet)
    {
        val[utility::conversions::to_string_t("documentVersionElementId")] = ModelBase::toJson(m_DocumentVersionElementId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_FullElementIdIsSet)
    {
        val[utility::conversions::to_string_t("fullElementId")] = ModelBase::toJson(m_FullElementId);
    }
    if(m_IsStandardContentIsSet)
    {
        val[utility::conversions::to_string_t("isStandardContent")] = ModelBase::toJson(m_IsStandardContent);
    }
    if(m_ItemDefinitionIdIsSet)
    {
        val[utility::conversions::to_string_t("itemDefinitionId")] = ModelBase::toJson(m_ItemDefinitionId);
    }
    if(m_NonGeometricIsSet)
    {
        val[utility::conversions::to_string_t("nonGeometric")] = ModelBase::toJson(m_NonGeometric);
    }
    if(m_PartIdIsSet)
    {
        val[utility::conversions::to_string_t("partId")] = ModelBase::toJson(m_PartId);
    }
    if(m_SourceElementIsSet)
    {
        val[utility::conversions::to_string_t("sourceElement")] = ModelBase::toJson(m_SourceElement);
    }
    if(m_StandardContentOwnerIsSet)
    {
        val[utility::conversions::to_string_t("standardContentOwner")] = ModelBase::toJson(m_StandardContentOwner);
    }
    if(m_UniqueElementIdIsSet)
    {
        val[utility::conversions::to_string_t("uniqueElementId")] = ModelBase::toJson(m_UniqueElementId);
    }
    if(m_VersionIdIsSet)
    {
        val[utility::conversions::to_string_t("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_WorkspacePartItemIsSet)
    {
        val[utility::conversions::to_string_t("workspacePartItem")] = ModelBase::toJson(m_WorkspacePartItem);
    }
    if(m_WorkspaceReferenceIsSet)
    {
        val[utility::conversions::to_string_t("workspaceReference")] = ModelBase::toJson(m_WorkspaceReference);
    }

    return val;
}

bool BTBillOfMaterialsUniqueItemId_2029::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("ambiguousUniqueId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ambiguousUniqueId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_ambiguousUniqueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ambiguousUniqueId);
            setAmbiguousUniqueId(refVal_ambiguousUniqueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("apiConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("apiConfiguration"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apiConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_apiConfiguration);
            setApiConfiguration(refVal_apiConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentVersionElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentVersionElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentVersionElementIds_1897> refVal_documentVersionElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentVersionElementId);
            setDocumentVersionElementId(refVal_documentVersionElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fullElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fullElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTFullElementId_756> refVal_fullElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_fullElementId);
            setFullElementId(refVal_fullElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isStandardContent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isStandardContent"));
        if(!fieldValue.is_null())
        {
            bool refVal_isStandardContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_isStandardContent);
            setIsStandardContent(refVal_isStandardContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("itemDefinitionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("itemDefinitionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_itemDefinitionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_itemDefinitionId);
            setItemDefinitionId(refVal_itemDefinitionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nonGeometric")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nonGeometric"));
        if(!fieldValue.is_null())
        {
            bool refVal_nonGeometric;
            ok &= ModelBase::fromJson(fieldValue, refVal_nonGeometric);
            setNonGeometric(refVal_nonGeometric);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partId;
            ok &= ModelBase::fromJson(fieldValue, refVal_partId);
            setPartId(refVal_partId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceElement")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceElement"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTElementReference_725> refVal_sourceElement;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceElement);
            setSourceElement(refVal_sourceElement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("standardContentOwner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("standardContentOwner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTOwner_3114> refVal_standardContentOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_standardContentOwner);
            setStandardContentOwner(refVal_standardContentOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uniqueElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uniqueElementId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_uniqueElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uniqueElementId);
            setUniqueElementId(refVal_uniqueElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("versionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("versionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_versionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_versionId);
            setVersionId(refVal_versionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspacePartItem")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspacePartItem"));
        if(!fieldValue.is_null())
        {
            bool refVal_workspacePartItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspacePartItem);
            setWorkspacePartItem(refVal_workspacePartItem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceReference"));
        if(!fieldValue.is_null())
        {
            bool refVal_workspaceReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceReference);
            setWorkspaceReference(refVal_workspaceReference);
        }
    }
    return ok;
}

void BTBillOfMaterialsUniqueItemId_2029::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AmbiguousUniqueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ambiguousUniqueId"), m_AmbiguousUniqueId));
    }
    if(m_ApiConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("apiConfiguration"), m_ApiConfiguration));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentVersionElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentVersionElementId"), m_DocumentVersionElementId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_FullElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullElementId"), m_FullElementId));
    }
    if(m_IsStandardContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isStandardContent"), m_IsStandardContent));
    }
    if(m_ItemDefinitionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("itemDefinitionId"), m_ItemDefinitionId));
    }
    if(m_NonGeometricIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nonGeometric"), m_NonGeometric));
    }
    if(m_PartIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partId"), m_PartId));
    }
    if(m_SourceElementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceElement"), m_SourceElement));
    }
    if(m_StandardContentOwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("standardContentOwner"), m_StandardContentOwner));
    }
    if(m_UniqueElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uniqueElementId"), m_UniqueElementId));
    }
    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("versionId"), m_VersionId));
    }
    if(m_WorkspacePartItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspacePartItem"), m_WorkspacePartItem));
    }
    if(m_WorkspaceReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceReference"), m_WorkspaceReference));
    }
}

bool BTBillOfMaterialsUniqueItemId_2029::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ambiguousUniqueId")))
    {
        std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_ambiguousUniqueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ambiguousUniqueId")), refVal_ambiguousUniqueId );
        setAmbiguousUniqueId(refVal_ambiguousUniqueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("apiConfiguration")))
    {
        utility::string_t refVal_apiConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("apiConfiguration")), refVal_apiConfiguration );
        setApiConfiguration(refVal_apiConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentVersionElementId")))
    {
        std::shared_ptr<BTDocumentVersionElementIds_1897> refVal_documentVersionElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentVersionElementId")), refVal_documentVersionElementId );
        setDocumentVersionElementId(refVal_documentVersionElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullElementId")))
    {
        std::shared_ptr<BTFullElementId_756> refVal_fullElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullElementId")), refVal_fullElementId );
        setFullElementId(refVal_fullElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isStandardContent")))
    {
        bool refVal_isStandardContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isStandardContent")), refVal_isStandardContent );
        setIsStandardContent(refVal_isStandardContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("itemDefinitionId")))
    {
        utility::string_t refVal_itemDefinitionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("itemDefinitionId")), refVal_itemDefinitionId );
        setItemDefinitionId(refVal_itemDefinitionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nonGeometric")))
    {
        bool refVal_nonGeometric;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nonGeometric")), refVal_nonGeometric );
        setNonGeometric(refVal_nonGeometric);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partId")))
    {
        utility::string_t refVal_partId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partId")), refVal_partId );
        setPartId(refVal_partId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceElement")))
    {
        std::shared_ptr<BTElementReference_725> refVal_sourceElement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceElement")), refVal_sourceElement );
        setSourceElement(refVal_sourceElement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("standardContentOwner")))
    {
        std::shared_ptr<BTOwner_3114> refVal_standardContentOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("standardContentOwner")), refVal_standardContentOwner );
        setStandardContentOwner(refVal_standardContentOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uniqueElementId")))
    {
        std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> refVal_uniqueElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uniqueElementId")), refVal_uniqueElementId );
        setUniqueElementId(refVal_uniqueElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("versionId")))
    {
        utility::string_t refVal_versionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("versionId")), refVal_versionId );
        setVersionId(refVal_versionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspacePartItem")))
    {
        bool refVal_workspacePartItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspacePartItem")), refVal_workspacePartItem );
        setWorkspacePartItem(refVal_workspacePartItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceReference")))
    {
        bool refVal_workspaceReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceReference")), refVal_workspaceReference );
        setWorkspaceReference(refVal_workspaceReference);
    }
    return ok;
}

std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> BTBillOfMaterialsUniqueItemId_2029::getAmbiguousUniqueId() const
{
    return m_AmbiguousUniqueId;
}

void BTBillOfMaterialsUniqueItemId_2029::setAmbiguousUniqueId(const std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029>& value)
{
    m_AmbiguousUniqueId = value;
    m_AmbiguousUniqueIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::ambiguousUniqueIdIsSet() const
{
    return m_AmbiguousUniqueIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetAmbiguousUniqueId()
{
    m_AmbiguousUniqueIdIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getApiConfiguration() const
{
    return m_ApiConfiguration;
}

void BTBillOfMaterialsUniqueItemId_2029::setApiConfiguration(const utility::string_t& value)
{
    m_ApiConfiguration = value;
    m_ApiConfigurationIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::apiConfigurationIsSet() const
{
    return m_ApiConfigurationIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetApiConfiguration()
{
    m_ApiConfigurationIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getBtType() const
{
    return m_BtType;
}

void BTBillOfMaterialsUniqueItemId_2029::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetBtType()
{
    m_BtTypeIsSet = false;
}
std::shared_ptr<BTDocumentVersionElementIds_1897> BTBillOfMaterialsUniqueItemId_2029::getDocumentVersionElementId() const
{
    return m_DocumentVersionElementId;
}

void BTBillOfMaterialsUniqueItemId_2029::setDocumentVersionElementId(const std::shared_ptr<BTDocumentVersionElementIds_1897>& value)
{
    m_DocumentVersionElementId = value;
    m_DocumentVersionElementIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::documentVersionElementIdIsSet() const
{
    return m_DocumentVersionElementIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetDocumentVersionElementId()
{
    m_DocumentVersionElementIdIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getElementId() const
{
    return m_ElementId;
}

void BTBillOfMaterialsUniqueItemId_2029::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetElementId()
{
    m_ElementIdIsSet = false;
}
std::shared_ptr<BTFullElementId_756> BTBillOfMaterialsUniqueItemId_2029::getFullElementId() const
{
    return m_FullElementId;
}

void BTBillOfMaterialsUniqueItemId_2029::setFullElementId(const std::shared_ptr<BTFullElementId_756>& value)
{
    m_FullElementId = value;
    m_FullElementIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::fullElementIdIsSet() const
{
    return m_FullElementIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetFullElementId()
{
    m_FullElementIdIsSet = false;
}
bool BTBillOfMaterialsUniqueItemId_2029::isIsStandardContent() const
{
    return m_IsStandardContent;
}

void BTBillOfMaterialsUniqueItemId_2029::setIsStandardContent(bool value)
{
    m_IsStandardContent = value;
    m_IsStandardContentIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::isStandardContentIsSet() const
{
    return m_IsStandardContentIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetIsStandardContent()
{
    m_IsStandardContentIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getItemDefinitionId() const
{
    return m_ItemDefinitionId;
}

void BTBillOfMaterialsUniqueItemId_2029::setItemDefinitionId(const utility::string_t& value)
{
    m_ItemDefinitionId = value;
    m_ItemDefinitionIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::itemDefinitionIdIsSet() const
{
    return m_ItemDefinitionIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetItemDefinitionId()
{
    m_ItemDefinitionIdIsSet = false;
}
bool BTBillOfMaterialsUniqueItemId_2029::isNonGeometric() const
{
    return m_NonGeometric;
}

void BTBillOfMaterialsUniqueItemId_2029::setNonGeometric(bool value)
{
    m_NonGeometric = value;
    m_NonGeometricIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::nonGeometricIsSet() const
{
    return m_NonGeometricIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetNonGeometric()
{
    m_NonGeometricIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getPartId() const
{
    return m_PartId;
}

void BTBillOfMaterialsUniqueItemId_2029::setPartId(const utility::string_t& value)
{
    m_PartId = value;
    m_PartIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::partIdIsSet() const
{
    return m_PartIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetPartId()
{
    m_PartIdIsSet = false;
}
std::shared_ptr<BTElementReference_725> BTBillOfMaterialsUniqueItemId_2029::getSourceElement() const
{
    return m_SourceElement;
}

void BTBillOfMaterialsUniqueItemId_2029::setSourceElement(const std::shared_ptr<BTElementReference_725>& value)
{
    m_SourceElement = value;
    m_SourceElementIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::sourceElementIsSet() const
{
    return m_SourceElementIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetSourceElement()
{
    m_SourceElementIsSet = false;
}
std::shared_ptr<BTOwner_3114> BTBillOfMaterialsUniqueItemId_2029::getStandardContentOwner() const
{
    return m_StandardContentOwner;
}

void BTBillOfMaterialsUniqueItemId_2029::setStandardContentOwner(const std::shared_ptr<BTOwner_3114>& value)
{
    m_StandardContentOwner = value;
    m_StandardContentOwnerIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::standardContentOwnerIsSet() const
{
    return m_StandardContentOwnerIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetStandardContentOwner()
{
    m_StandardContentOwnerIsSet = false;
}
std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> BTBillOfMaterialsUniqueItemId_2029::getUniqueElementId() const
{
    return m_UniqueElementId;
}

void BTBillOfMaterialsUniqueItemId_2029::setUniqueElementId(const std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029>& value)
{
    m_UniqueElementId = value;
    m_UniqueElementIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::uniqueElementIdIsSet() const
{
    return m_UniqueElementIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetUniqueElementId()
{
    m_UniqueElementIdIsSet = false;
}
utility::string_t BTBillOfMaterialsUniqueItemId_2029::getVersionId() const
{
    return m_VersionId;
}

void BTBillOfMaterialsUniqueItemId_2029::setVersionId(const utility::string_t& value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
bool BTBillOfMaterialsUniqueItemId_2029::isWorkspacePartItem() const
{
    return m_WorkspacePartItem;
}

void BTBillOfMaterialsUniqueItemId_2029::setWorkspacePartItem(bool value)
{
    m_WorkspacePartItem = value;
    m_WorkspacePartItemIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::workspacePartItemIsSet() const
{
    return m_WorkspacePartItemIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetWorkspacePartItem()
{
    m_WorkspacePartItemIsSet = false;
}
bool BTBillOfMaterialsUniqueItemId_2029::isWorkspaceReference() const
{
    return m_WorkspaceReference;
}

void BTBillOfMaterialsUniqueItemId_2029::setWorkspaceReference(bool value)
{
    m_WorkspaceReference = value;
    m_WorkspaceReferenceIsSet = true;
}

bool BTBillOfMaterialsUniqueItemId_2029::workspaceReferenceIsSet() const
{
    return m_WorkspaceReferenceIsSet;
}

void BTBillOfMaterialsUniqueItemId_2029::unsetWorkspaceReference()
{
    m_WorkspaceReferenceIsSet = false;
}
}
}
}
}


