/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTFeatureSpecsResponse_664.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTFeatureSpecsResponse_664::BTFeatureSpecsResponse_664()
{
    m_FeatureSpecsIsSet = false;
    m_LibraryVersion = 0;
    m_LibraryVersionIsSet = false;
    m_MicroversionSkew = false;
    m_MicroversionSkewIsSet = false;
    m_RejectMicroversionSkew = false;
    m_RejectMicroversionSkewIsSet = false;
    m_SerializationVersion = utility::conversions::to_string_t("");
    m_SerializationVersionIsSet = false;
    m_SourceMicroversion = utility::conversions::to_string_t("");
    m_SourceMicroversionIsSet = false;
}

BTFeatureSpecsResponse_664::~BTFeatureSpecsResponse_664()
{
}

void BTFeatureSpecsResponse_664::validate()
{
    // TODO: implement validation
}

web::json::value BTFeatureSpecsResponse_664::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeatureSpecsIsSet)
    {
        val[utility::conversions::to_string_t("featureSpecs")] = ModelBase::toJson(m_FeatureSpecs);
    }
    if(m_LibraryVersionIsSet)
    {
        val[utility::conversions::to_string_t("libraryVersion")] = ModelBase::toJson(m_LibraryVersion);
    }
    if(m_MicroversionSkewIsSet)
    {
        val[utility::conversions::to_string_t("microversionSkew")] = ModelBase::toJson(m_MicroversionSkew);
    }
    if(m_RejectMicroversionSkewIsSet)
    {
        val[utility::conversions::to_string_t("rejectMicroversionSkew")] = ModelBase::toJson(m_RejectMicroversionSkew);
    }
    if(m_SerializationVersionIsSet)
    {
        val[utility::conversions::to_string_t("serializationVersion")] = ModelBase::toJson(m_SerializationVersion);
    }
    if(m_SourceMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("sourceMicroversion")] = ModelBase::toJson(m_SourceMicroversion);
    }

    return val;
}

bool BTFeatureSpecsResponse_664::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("featureSpecs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("featureSpecs"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTFeatureSpec_129>> refVal_featureSpecs;
            ok &= ModelBase::fromJson(fieldValue, refVal_featureSpecs);
            setFeatureSpecs(refVal_featureSpecs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("libraryVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("libraryVersion"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_libraryVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_libraryVersion);
            setLibraryVersion(refVal_libraryVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("microversionSkew")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("microversionSkew"));
        if(!fieldValue.is_null())
        {
            bool refVal_microversionSkew;
            ok &= ModelBase::fromJson(fieldValue, refVal_microversionSkew);
            setMicroversionSkew(refVal_microversionSkew);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rejectMicroversionSkew")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rejectMicroversionSkew"));
        if(!fieldValue.is_null())
        {
            bool refVal_rejectMicroversionSkew;
            ok &= ModelBase::fromJson(fieldValue, refVal_rejectMicroversionSkew);
            setRejectMicroversionSkew(refVal_rejectMicroversionSkew);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serializationVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("serializationVersion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_serializationVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_serializationVersion);
            setSerializationVersion(refVal_serializationVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sourceMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sourceMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sourceMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_sourceMicroversion);
            setSourceMicroversion(refVal_sourceMicroversion);
        }
    }
    return ok;
}

void BTFeatureSpecsResponse_664::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FeatureSpecsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("featureSpecs"), m_FeatureSpecs));
    }
    if(m_LibraryVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("libraryVersion"), m_LibraryVersion));
    }
    if(m_MicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("microversionSkew"), m_MicroversionSkew));
    }
    if(m_RejectMicroversionSkewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rejectMicroversionSkew"), m_RejectMicroversionSkew));
    }
    if(m_SerializationVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serializationVersion"), m_SerializationVersion));
    }
    if(m_SourceMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceMicroversion"), m_SourceMicroversion));
    }
}

bool BTFeatureSpecsResponse_664::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("featureSpecs")))
    {
        std::vector<std::shared_ptr<BTFeatureSpec_129>> refVal_featureSpecs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("featureSpecs")), refVal_featureSpecs );
        setFeatureSpecs(refVal_featureSpecs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("libraryVersion")))
    {
        int32_t refVal_libraryVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("libraryVersion")), refVal_libraryVersion );
        setLibraryVersion(refVal_libraryVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("microversionSkew")))
    {
        bool refVal_microversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("microversionSkew")), refVal_microversionSkew );
        setMicroversionSkew(refVal_microversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rejectMicroversionSkew")))
    {
        bool refVal_rejectMicroversionSkew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rejectMicroversionSkew")), refVal_rejectMicroversionSkew );
        setRejectMicroversionSkew(refVal_rejectMicroversionSkew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serializationVersion")))
    {
        utility::string_t refVal_serializationVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serializationVersion")), refVal_serializationVersion );
        setSerializationVersion(refVal_serializationVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sourceMicroversion")))
    {
        utility::string_t refVal_sourceMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceMicroversion")), refVal_sourceMicroversion );
        setSourceMicroversion(refVal_sourceMicroversion);
    }
    return ok;
}

std::vector<std::shared_ptr<BTFeatureSpec_129>>& BTFeatureSpecsResponse_664::getFeatureSpecs()
{
    return m_FeatureSpecs;
}

void BTFeatureSpecsResponse_664::setFeatureSpecs(const std::vector<std::shared_ptr<BTFeatureSpec_129>>& value)
{
    m_FeatureSpecs = value;
    m_FeatureSpecsIsSet = true;
}

bool BTFeatureSpecsResponse_664::featureSpecsIsSet() const
{
    return m_FeatureSpecsIsSet;
}

void BTFeatureSpecsResponse_664::unsetFeatureSpecs()
{
    m_FeatureSpecsIsSet = false;
}
int32_t BTFeatureSpecsResponse_664::getLibraryVersion() const
{
    return m_LibraryVersion;
}

void BTFeatureSpecsResponse_664::setLibraryVersion(int32_t value)
{
    m_LibraryVersion = value;
    m_LibraryVersionIsSet = true;
}

bool BTFeatureSpecsResponse_664::libraryVersionIsSet() const
{
    return m_LibraryVersionIsSet;
}

void BTFeatureSpecsResponse_664::unsetLibraryVersion()
{
    m_LibraryVersionIsSet = false;
}
bool BTFeatureSpecsResponse_664::isMicroversionSkew() const
{
    return m_MicroversionSkew;
}

void BTFeatureSpecsResponse_664::setMicroversionSkew(bool value)
{
    m_MicroversionSkew = value;
    m_MicroversionSkewIsSet = true;
}

bool BTFeatureSpecsResponse_664::microversionSkewIsSet() const
{
    return m_MicroversionSkewIsSet;
}

void BTFeatureSpecsResponse_664::unsetMicroversionSkew()
{
    m_MicroversionSkewIsSet = false;
}
bool BTFeatureSpecsResponse_664::isRejectMicroversionSkew() const
{
    return m_RejectMicroversionSkew;
}

void BTFeatureSpecsResponse_664::setRejectMicroversionSkew(bool value)
{
    m_RejectMicroversionSkew = value;
    m_RejectMicroversionSkewIsSet = true;
}

bool BTFeatureSpecsResponse_664::rejectMicroversionSkewIsSet() const
{
    return m_RejectMicroversionSkewIsSet;
}

void BTFeatureSpecsResponse_664::unsetRejectMicroversionSkew()
{
    m_RejectMicroversionSkewIsSet = false;
}
utility::string_t BTFeatureSpecsResponse_664::getSerializationVersion() const
{
    return m_SerializationVersion;
}

void BTFeatureSpecsResponse_664::setSerializationVersion(const utility::string_t& value)
{
    m_SerializationVersion = value;
    m_SerializationVersionIsSet = true;
}

bool BTFeatureSpecsResponse_664::serializationVersionIsSet() const
{
    return m_SerializationVersionIsSet;
}

void BTFeatureSpecsResponse_664::unsetSerializationVersion()
{
    m_SerializationVersionIsSet = false;
}
utility::string_t BTFeatureSpecsResponse_664::getSourceMicroversion() const
{
    return m_SourceMicroversion;
}

void BTFeatureSpecsResponse_664::setSourceMicroversion(const utility::string_t& value)
{
    m_SourceMicroversion = value;
    m_SourceMicroversionIsSet = true;
}

bool BTFeatureSpecsResponse_664::sourceMicroversionIsSet() const
{
    return m_SourceMicroversionIsSet;
}

void BTFeatureSpecsResponse_664::unsetSourceMicroversion()
{
    m_SourceMicroversionIsSet = false;
}
}
}
}
}


