/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTable_1825.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTable_1825::BTTable_1825()
{
    m_AllRowValuesIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_ColumnCount = 0;
    m_ColumnCountIsSet = false;
    m_FrozenColumns = 0;
    m_FrozenColumnsIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ReadOnly = false;
    m_ReadOnlyIsSet = false;
    m_RowCount = 0;
    m_RowCountIsSet = false;
    m_TableColumnsIsSet = false;
    m_TableId = utility::conversions::to_string_t("");
    m_TableIdIsSet = false;
    m_TableRowsIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
}

BTTable_1825::~BTTable_1825()
{
}

void BTTable_1825::validate()
{
    // TODO: implement validation
}

web::json::value BTTable_1825::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AllRowValuesIsSet)
    {
        val[utility::conversions::to_string_t("allRowValues")] = ModelBase::toJson(m_AllRowValues);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_ColumnCountIsSet)
    {
        val[utility::conversions::to_string_t("columnCount")] = ModelBase::toJson(m_ColumnCount);
    }
    if(m_FrozenColumnsIsSet)
    {
        val[utility::conversions::to_string_t("frozenColumns")] = ModelBase::toJson(m_FrozenColumns);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("readOnly")] = ModelBase::toJson(m_ReadOnly);
    }
    if(m_RowCountIsSet)
    {
        val[utility::conversions::to_string_t("rowCount")] = ModelBase::toJson(m_RowCount);
    }
    if(m_TableColumnsIsSet)
    {
        val[utility::conversions::to_string_t("tableColumns")] = ModelBase::toJson(m_TableColumns);
    }
    if(m_TableIdIsSet)
    {
        val[utility::conversions::to_string_t("tableId")] = ModelBase::toJson(m_TableId);
    }
    if(m_TableRowsIsSet)
    {
        val[utility::conversions::to_string_t("tableRows")] = ModelBase::toJson(m_TableRows);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }

    return val;
}

bool BTTable_1825::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("allRowValues")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allRowValues"));
        if(!fieldValue.is_null())
        {
            std::vector<std::vector<utility::string_t>> refVal_allRowValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_allRowValues);
            setAllRowValues(refVal_allRowValues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("columnCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("columnCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_columnCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_columnCount);
            setColumnCount(refVal_columnCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("frozenColumns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("frozenColumns"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_frozenColumns;
            ok &= ModelBase::fromJson(fieldValue, refVal_frozenColumns);
            setFrozenColumns(refVal_frozenColumns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("readOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_readOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_readOnly);
            setReadOnly(refVal_readOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rowCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rowCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_rowCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_rowCount);
            setRowCount(refVal_rowCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tableColumns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tableColumns"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTTableColumnInfo_1222>> refVal_tableColumns;
            ok &= ModelBase::fromJson(fieldValue, refVal_tableColumns);
            setTableColumns(refVal_tableColumns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tableId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tableId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_tableId);
            setTableId(refVal_tableId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tableRows")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tableRows"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTTableRow_1054>> refVal_tableRows;
            ok &= ModelBase::fromJson(fieldValue, refVal_tableRows);
            setTableRows(refVal_tableRows);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    return ok;
}

void BTTable_1825::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AllRowValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allRowValues"), m_AllRowValues));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ColumnCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("columnCount"), m_ColumnCount));
    }
    if(m_FrozenColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("frozenColumns"), m_FrozenColumns));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readOnly"), m_ReadOnly));
    }
    if(m_RowCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rowCount"), m_RowCount));
    }
    if(m_TableColumnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableColumns"), m_TableColumns));
    }
    if(m_TableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableId"), m_TableId));
    }
    if(m_TableRowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tableRows"), m_TableRows));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
}

bool BTTable_1825::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allRowValues")))
    {
        std::vector<std::vector<utility::string_t>> refVal_allRowValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allRowValues")), refVal_allRowValues );
        setAllRowValues(refVal_allRowValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("columnCount")))
    {
        int32_t refVal_columnCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("columnCount")), refVal_columnCount );
        setColumnCount(refVal_columnCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("frozenColumns")))
    {
        int32_t refVal_frozenColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("frozenColumns")), refVal_frozenColumns );
        setFrozenColumns(refVal_frozenColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readOnly")))
    {
        bool refVal_readOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readOnly")), refVal_readOnly );
        setReadOnly(refVal_readOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rowCount")))
    {
        int32_t refVal_rowCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rowCount")), refVal_rowCount );
        setRowCount(refVal_rowCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableColumns")))
    {
        std::vector<std::shared_ptr<BTTableColumnInfo_1222>> refVal_tableColumns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableColumns")), refVal_tableColumns );
        setTableColumns(refVal_tableColumns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableId")))
    {
        utility::string_t refVal_tableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableId")), refVal_tableId );
        setTableId(refVal_tableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tableRows")))
    {
        std::vector<std::shared_ptr<BTTableRow_1054>> refVal_tableRows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tableRows")), refVal_tableRows );
        setTableRows(refVal_tableRows);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    return ok;
}

std::vector<std::vector<utility::string_t>>& BTTable_1825::getAllRowValues()
{
    return m_AllRowValues;
}

void BTTable_1825::setAllRowValues(const std::vector<std::vector<utility::string_t>>& value)
{
    m_AllRowValues = value;
    m_AllRowValuesIsSet = true;
}

bool BTTable_1825::allRowValuesIsSet() const
{
    return m_AllRowValuesIsSet;
}

void BTTable_1825::unsetAllRowValues()
{
    m_AllRowValuesIsSet = false;
}
utility::string_t BTTable_1825::getBtType() const
{
    return m_BtType;
}

void BTTable_1825::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTTable_1825::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTTable_1825::unsetBtType()
{
    m_BtTypeIsSet = false;
}
int32_t BTTable_1825::getColumnCount() const
{
    return m_ColumnCount;
}

void BTTable_1825::setColumnCount(int32_t value)
{
    m_ColumnCount = value;
    m_ColumnCountIsSet = true;
}

bool BTTable_1825::columnCountIsSet() const
{
    return m_ColumnCountIsSet;
}

void BTTable_1825::unsetColumnCount()
{
    m_ColumnCountIsSet = false;
}
int32_t BTTable_1825::getFrozenColumns() const
{
    return m_FrozenColumns;
}

void BTTable_1825::setFrozenColumns(int32_t value)
{
    m_FrozenColumns = value;
    m_FrozenColumnsIsSet = true;
}

bool BTTable_1825::frozenColumnsIsSet() const
{
    return m_FrozenColumnsIsSet;
}

void BTTable_1825::unsetFrozenColumns()
{
    m_FrozenColumnsIsSet = false;
}
utility::string_t BTTable_1825::getNodeId() const
{
    return m_NodeId;
}

void BTTable_1825::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTTable_1825::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTTable_1825::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
bool BTTable_1825::isReadOnly() const
{
    return m_ReadOnly;
}

void BTTable_1825::setReadOnly(bool value)
{
    m_ReadOnly = value;
    m_ReadOnlyIsSet = true;
}

bool BTTable_1825::readOnlyIsSet() const
{
    return m_ReadOnlyIsSet;
}

void BTTable_1825::unsetReadOnly()
{
    m_ReadOnlyIsSet = false;
}
int32_t BTTable_1825::getRowCount() const
{
    return m_RowCount;
}

void BTTable_1825::setRowCount(int32_t value)
{
    m_RowCount = value;
    m_RowCountIsSet = true;
}

bool BTTable_1825::rowCountIsSet() const
{
    return m_RowCountIsSet;
}

void BTTable_1825::unsetRowCount()
{
    m_RowCountIsSet = false;
}
std::vector<std::shared_ptr<BTTableColumnInfo_1222>>& BTTable_1825::getTableColumns()
{
    return m_TableColumns;
}

void BTTable_1825::setTableColumns(const std::vector<std::shared_ptr<BTTableColumnInfo_1222>>& value)
{
    m_TableColumns = value;
    m_TableColumnsIsSet = true;
}

bool BTTable_1825::tableColumnsIsSet() const
{
    return m_TableColumnsIsSet;
}

void BTTable_1825::unsetTableColumns()
{
    m_TableColumnsIsSet = false;
}
utility::string_t BTTable_1825::getTableId() const
{
    return m_TableId;
}

void BTTable_1825::setTableId(const utility::string_t& value)
{
    m_TableId = value;
    m_TableIdIsSet = true;
}

bool BTTable_1825::tableIdIsSet() const
{
    return m_TableIdIsSet;
}

void BTTable_1825::unsetTableId()
{
    m_TableIdIsSet = false;
}
std::vector<std::shared_ptr<BTTableRow_1054>>& BTTable_1825::getTableRows()
{
    return m_TableRows;
}

void BTTable_1825::setTableRows(const std::vector<std::shared_ptr<BTTableRow_1054>>& value)
{
    m_TableRows = value;
    m_TableRowsIsSet = true;
}

bool BTTable_1825::tableRowsIsSet() const
{
    return m_TableRowsIsSet;
}

void BTTable_1825::unsetTableRows()
{
    m_TableRowsIsSet = false;
}
utility::string_t BTTable_1825::getTitle() const
{
    return m_Title;
}

void BTTable_1825::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool BTTable_1825::titleIsSet() const
{
    return m_TitleIsSet;
}

void BTTable_1825::unsetTitle()
{
    m_TitleIsSet = false;
}
}
}
}
}


