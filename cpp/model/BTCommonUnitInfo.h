/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTCommonUnitInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommonUnitInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommonUnitInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTCommonUnitInfo
    : public ModelBase
{
public:
    BTCommonUnitInfo();
    virtual ~BTCommonUnitInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTCommonUnitInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAbbreviation() const;
    bool abbreviationIsSet() const;
    void unsetAbbreviation();

    void setAbbreviation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnit() const;
    bool unitIsSet() const;
    void unsetUnit();

    void setUnit(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnitName() const;
    bool unitNameIsSet() const;
    void unsetUnitName();

    void setUnitName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnitType() const;
    bool unitTypeIsSet() const;
    void unsetUnitType();

    void setUnitType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getValueInBaseUnits() const;
    bool valueInBaseUnitsIsSet() const;
    void unsetValueInBaseUnits();

    void setValueInBaseUnits(double value);


protected:
    utility::string_t m_Abbreviation;
    bool m_AbbreviationIsSet;
    utility::string_t m_Unit;
    bool m_UnitIsSet;
    utility::string_t m_UnitName;
    bool m_UnitNameIsSet;
    utility::string_t m_UnitType;
    bool m_UnitTypeIsSet;
    double m_ValueInBaseUnits;
    bool m_ValueInBaseUnitsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTCommonUnitInfo_H_ */
