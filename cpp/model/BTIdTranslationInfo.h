/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTIdTranslationInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationInfo_H_


#include "../ModelBase.h"

#include "BTIdTranslationResultInfo.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTIdTranslationInfo
    : public ModelBase
{
public:
    BTIdTranslationInfo();
    virtual ~BTIdTranslationInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTIdTranslationInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTIdTranslationResultInfo>>& getIds();
    bool idsIsSet() const;
    void unsetIds();

    void setIds(const std::vector<std::shared_ptr<BTIdTranslationResultInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceDocumentMicroversion() const;
    bool sourceDocumentMicroversionIsSet() const;
    void unsetSourceDocumentMicroversion();

    void setSourceDocumentMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetDocumentMicroversion() const;
    bool targetDocumentMicroversionIsSet() const;
    void unsetTargetDocumentMicroversion();

    void setTargetDocumentMicroversion(const utility::string_t& value);


protected:
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::vector<std::shared_ptr<BTIdTranslationResultInfo>> m_Ids;
    bool m_IdsIsSet;
    utility::string_t m_SourceDocumentMicroversion;
    bool m_SourceDocumentMicroversionIsSet;
    utility::string_t m_TargetDocumentMicroversion;
    bool m_TargetDocumentMicroversionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationInfo_H_ */
