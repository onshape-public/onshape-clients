/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMetadataCategorySummaryInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMetadataCategorySummaryInfo::BTMetadataCategorySummaryInfo()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OwnerId = utility::conversions::to_string_t("");
    m_OwnerIdIsSet = false;
    m_OwnerType = 0;
    m_OwnerTypeIsSet = false;
    m_PublishState = 0;
    m_PublishStateIsSet = false;
    m_ViewRef = utility::conversions::to_string_t("");
    m_ViewRefIsSet = false;
}

BTMetadataCategorySummaryInfo::~BTMetadataCategorySummaryInfo()
{
}

void BTMetadataCategorySummaryInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTMetadataCategorySummaryInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_HrefIsSet)
    {
        val[utility::conversions::to_string_t("href")] = ModelBase::toJson(m_Href);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OwnerIdIsSet)
    {
        val[utility::conversions::to_string_t("ownerId")] = ModelBase::toJson(m_OwnerId);
    }
    if(m_OwnerTypeIsSet)
    {
        val[utility::conversions::to_string_t("ownerType")] = ModelBase::toJson(m_OwnerType);
    }
    if(m_PublishStateIsSet)
    {
        val[utility::conversions::to_string_t("publishState")] = ModelBase::toJson(m_PublishState);
    }
    if(m_ViewRefIsSet)
    {
        val[utility::conversions::to_string_t("viewRef")] = ModelBase::toJson(m_ViewRef);
    }

    return val;
}

bool BTMetadataCategorySummaryInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("href")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("href"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_href;
            ok &= ModelBase::fromJson(fieldValue, refVal_href);
            setHref(refVal_href);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ownerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerId);
            setOwnerId(refVal_ownerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ownerType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ownerType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ownerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ownerType);
            setOwnerType(refVal_ownerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("publishState")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("publishState"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_publishState;
            ok &= ModelBase::fromJson(fieldValue, refVal_publishState);
            setPublishState(refVal_publishState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_viewRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewRef);
            setViewRef(refVal_viewRef);
        }
    }
    return ok;
}

void BTMetadataCategorySummaryInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("href"), m_Href));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_OwnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerId"), m_OwnerId));
    }
    if(m_OwnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ownerType"), m_OwnerType));
    }
    if(m_PublishStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publishState"), m_PublishState));
    }
    if(m_ViewRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewRef"), m_ViewRef));
    }
}

bool BTMetadataCategorySummaryInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("href")))
    {
        utility::string_t refVal_href;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("href")), refVal_href );
        setHref(refVal_href);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerId")))
    {
        utility::string_t refVal_ownerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerId")), refVal_ownerId );
        setOwnerId(refVal_ownerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ownerType")))
    {
        int32_t refVal_ownerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ownerType")), refVal_ownerType );
        setOwnerType(refVal_ownerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("publishState")))
    {
        int32_t refVal_publishState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("publishState")), refVal_publishState );
        setPublishState(refVal_publishState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewRef")))
    {
        utility::string_t refVal_viewRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewRef")), refVal_viewRef );
        setViewRef(refVal_viewRef);
    }
    return ok;
}

utility::string_t BTMetadataCategorySummaryInfo::getDescription() const
{
    return m_Description;
}

void BTMetadataCategorySummaryInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BTMetadataCategorySummaryInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BTMetadataCategorySummaryInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t BTMetadataCategorySummaryInfo::getHref() const
{
    return m_Href;
}

void BTMetadataCategorySummaryInfo::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool BTMetadataCategorySummaryInfo::hrefIsSet() const
{
    return m_HrefIsSet;
}

void BTMetadataCategorySummaryInfo::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t BTMetadataCategorySummaryInfo::getId() const
{
    return m_Id;
}

void BTMetadataCategorySummaryInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTMetadataCategorySummaryInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTMetadataCategorySummaryInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTMetadataCategorySummaryInfo::getName() const
{
    return m_Name;
}

void BTMetadataCategorySummaryInfo::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BTMetadataCategorySummaryInfo::nameIsSet() const
{
    return m_NameIsSet;
}

void BTMetadataCategorySummaryInfo::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t BTMetadataCategorySummaryInfo::getOwnerId() const
{
    return m_OwnerId;
}

void BTMetadataCategorySummaryInfo::setOwnerId(const utility::string_t& value)
{
    m_OwnerId = value;
    m_OwnerIdIsSet = true;
}

bool BTMetadataCategorySummaryInfo::ownerIdIsSet() const
{
    return m_OwnerIdIsSet;
}

void BTMetadataCategorySummaryInfo::unsetOwnerId()
{
    m_OwnerIdIsSet = false;
}
int32_t BTMetadataCategorySummaryInfo::getOwnerType() const
{
    return m_OwnerType;
}

void BTMetadataCategorySummaryInfo::setOwnerType(int32_t value)
{
    m_OwnerType = value;
    m_OwnerTypeIsSet = true;
}

bool BTMetadataCategorySummaryInfo::ownerTypeIsSet() const
{
    return m_OwnerTypeIsSet;
}

void BTMetadataCategorySummaryInfo::unsetOwnerType()
{
    m_OwnerTypeIsSet = false;
}
int32_t BTMetadataCategorySummaryInfo::getPublishState() const
{
    return m_PublishState;
}

void BTMetadataCategorySummaryInfo::setPublishState(int32_t value)
{
    m_PublishState = value;
    m_PublishStateIsSet = true;
}

bool BTMetadataCategorySummaryInfo::publishStateIsSet() const
{
    return m_PublishStateIsSet;
}

void BTMetadataCategorySummaryInfo::unsetPublishState()
{
    m_PublishStateIsSet = false;
}
utility::string_t BTMetadataCategorySummaryInfo::getViewRef() const
{
    return m_ViewRef;
}

void BTMetadataCategorySummaryInfo::setViewRef(const utility::string_t& value)
{
    m_ViewRef = value;
    m_ViewRefIsSet = true;
}

bool BTMetadataCategorySummaryInfo::viewRefIsSet() const
{
    return m_ViewRefIsSet;
}

void BTMetadataCategorySummaryInfo::unsetViewRef()
{
    m_ViewRefIsSet = false;
}
}
}
}
}


