/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTAppElementModifyInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTAppElementModifyInfo::BTAppElementModifyInfo()
{
    m_ChangeId = utility::conversions::to_string_t("");
    m_ChangeIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_ErrorCode = 0;
    m_ErrorCodeIsSet = false;
    m_ErrorDescription = utility::conversions::to_string_t("");
    m_ErrorDescriptionIsSet = false;
    m_ErrorValue = utility::conversions::to_string_t("");
    m_ErrorValueIsSet = false;
    m_ParentChangeId = utility::conversions::to_string_t("");
    m_ParentChangeIdIsSet = false;
    m_PropertyEditsMerged = false;
    m_PropertyEditsMergedIsSet = false;
    m_TransactionId = utility::conversions::to_string_t("");
    m_TransactionIdIsSet = false;
}

BTAppElementModifyInfo::~BTAppElementModifyInfo()
{
}

void BTAppElementModifyInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTAppElementModifyInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("changeId")] = ModelBase::toJson(m_ChangeId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_ErrorCodeIsSet)
    {
        val[utility::conversions::to_string_t("errorCode")] = ModelBase::toJson(m_ErrorCode);
    }
    if(m_ErrorDescriptionIsSet)
    {
        val[utility::conversions::to_string_t("errorDescription")] = ModelBase::toJson(m_ErrorDescription);
    }
    if(m_ErrorValueIsSet)
    {
        val[utility::conversions::to_string_t("errorValue")] = ModelBase::toJson(m_ErrorValue);
    }
    if(m_ParentChangeIdIsSet)
    {
        val[utility::conversions::to_string_t("parentChangeId")] = ModelBase::toJson(m_ParentChangeId);
    }
    if(m_PropertyEditsMergedIsSet)
    {
        val[utility::conversions::to_string_t("propertyEditsMerged")] = ModelBase::toJson(m_PropertyEditsMerged);
    }
    if(m_TransactionIdIsSet)
    {
        val[utility::conversions::to_string_t("transactionId")] = ModelBase::toJson(m_TransactionId);
    }

    return val;
}

bool BTAppElementModifyInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("changeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_changeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_changeId);
            setChangeId(refVal_changeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_errorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorCode);
            setErrorCode(refVal_errorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorDescription")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorDescription"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorDescription);
            setErrorDescription(refVal_errorDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("errorValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errorValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_errorValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_errorValue);
            setErrorValue(refVal_errorValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parentChangeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parentChangeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parentChangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parentChangeId);
            setParentChangeId(refVal_parentChangeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("propertyEditsMerged")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("propertyEditsMerged"));
        if(!fieldValue.is_null())
        {
            bool refVal_propertyEditsMerged;
            ok &= ModelBase::fromJson(fieldValue, refVal_propertyEditsMerged);
            setPropertyEditsMerged(refVal_propertyEditsMerged);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transactionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("transactionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_transactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_transactionId);
            setTransactionId(refVal_transactionId);
        }
    }
    return ok;
}

void BTAppElementModifyInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changeId"), m_ChangeId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_ErrorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorCode"), m_ErrorCode));
    }
    if(m_ErrorDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorDescription"), m_ErrorDescription));
    }
    if(m_ErrorValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errorValue"), m_ErrorValue));
    }
    if(m_ParentChangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parentChangeId"), m_ParentChangeId));
    }
    if(m_PropertyEditsMergedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("propertyEditsMerged"), m_PropertyEditsMerged));
    }
    if(m_TransactionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transactionId"), m_TransactionId));
    }
}

bool BTAppElementModifyInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("changeId")))
    {
        utility::string_t refVal_changeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changeId")), refVal_changeId );
        setChangeId(refVal_changeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorCode")))
    {
        int32_t refVal_errorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorCode")), refVal_errorCode );
        setErrorCode(refVal_errorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorDescription")))
    {
        utility::string_t refVal_errorDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorDescription")), refVal_errorDescription );
        setErrorDescription(refVal_errorDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("errorValue")))
    {
        utility::string_t refVal_errorValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errorValue")), refVal_errorValue );
        setErrorValue(refVal_errorValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parentChangeId")))
    {
        utility::string_t refVal_parentChangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parentChangeId")), refVal_parentChangeId );
        setParentChangeId(refVal_parentChangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("propertyEditsMerged")))
    {
        bool refVal_propertyEditsMerged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("propertyEditsMerged")), refVal_propertyEditsMerged );
        setPropertyEditsMerged(refVal_propertyEditsMerged);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transactionId")))
    {
        utility::string_t refVal_transactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("transactionId")), refVal_transactionId );
        setTransactionId(refVal_transactionId);
    }
    return ok;
}

utility::string_t BTAppElementModifyInfo::getChangeId() const
{
    return m_ChangeId;
}

void BTAppElementModifyInfo::setChangeId(const utility::string_t& value)
{
    m_ChangeId = value;
    m_ChangeIdIsSet = true;
}

bool BTAppElementModifyInfo::changeIdIsSet() const
{
    return m_ChangeIdIsSet;
}

void BTAppElementModifyInfo::unsetChangeId()
{
    m_ChangeIdIsSet = false;
}
utility::string_t BTAppElementModifyInfo::getElementId() const
{
    return m_ElementId;
}

void BTAppElementModifyInfo::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTAppElementModifyInfo::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTAppElementModifyInfo::unsetElementId()
{
    m_ElementIdIsSet = false;
}
int32_t BTAppElementModifyInfo::getErrorCode() const
{
    return m_ErrorCode;
}

void BTAppElementModifyInfo::setErrorCode(int32_t value)
{
    m_ErrorCode = value;
    m_ErrorCodeIsSet = true;
}

bool BTAppElementModifyInfo::errorCodeIsSet() const
{
    return m_ErrorCodeIsSet;
}

void BTAppElementModifyInfo::unsetErrorCode()
{
    m_ErrorCodeIsSet = false;
}
utility::string_t BTAppElementModifyInfo::getErrorDescription() const
{
    return m_ErrorDescription;
}

void BTAppElementModifyInfo::setErrorDescription(const utility::string_t& value)
{
    m_ErrorDescription = value;
    m_ErrorDescriptionIsSet = true;
}

bool BTAppElementModifyInfo::errorDescriptionIsSet() const
{
    return m_ErrorDescriptionIsSet;
}

void BTAppElementModifyInfo::unsetErrorDescription()
{
    m_ErrorDescriptionIsSet = false;
}
utility::string_t BTAppElementModifyInfo::getErrorValue() const
{
    return m_ErrorValue;
}

void BTAppElementModifyInfo::setErrorValue(const utility::string_t& value)
{
    m_ErrorValue = value;
    m_ErrorValueIsSet = true;
}

bool BTAppElementModifyInfo::errorValueIsSet() const
{
    return m_ErrorValueIsSet;
}

void BTAppElementModifyInfo::unsetErrorValue()
{
    m_ErrorValueIsSet = false;
}
utility::string_t BTAppElementModifyInfo::getParentChangeId() const
{
    return m_ParentChangeId;
}

void BTAppElementModifyInfo::setParentChangeId(const utility::string_t& value)
{
    m_ParentChangeId = value;
    m_ParentChangeIdIsSet = true;
}

bool BTAppElementModifyInfo::parentChangeIdIsSet() const
{
    return m_ParentChangeIdIsSet;
}

void BTAppElementModifyInfo::unsetParentChangeId()
{
    m_ParentChangeIdIsSet = false;
}
bool BTAppElementModifyInfo::isPropertyEditsMerged() const
{
    return m_PropertyEditsMerged;
}

void BTAppElementModifyInfo::setPropertyEditsMerged(bool value)
{
    m_PropertyEditsMerged = value;
    m_PropertyEditsMergedIsSet = true;
}

bool BTAppElementModifyInfo::propertyEditsMergedIsSet() const
{
    return m_PropertyEditsMergedIsSet;
}

void BTAppElementModifyInfo::unsetPropertyEditsMerged()
{
    m_PropertyEditsMergedIsSet = false;
}
utility::string_t BTAppElementModifyInfo::getTransactionId() const
{
    return m_TransactionId;
}

void BTAppElementModifyInfo::setTransactionId(const utility::string_t& value)
{
    m_TransactionId = value;
    m_TransactionIdIsSet = true;
}

bool BTAppElementModifyInfo::transactionIdIsSet() const
{
    return m_TransactionIdIsSet;
}

void BTAppElementModifyInfo::unsetTransactionId()
{
    m_TransactionIdIsSet = false;
}
}
}
}
}


