/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTUserSettingsInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTUserSettingsInfo::BTUserSettingsInfo()
{
    m_CommonUnitsIsSet = false;
    m_CustomColorsIsSet = false;
    m_DefaultUnitsIsSet = false;
    m_DrawingBackgroundId = 0;
    m_DrawingBackgroundIdIsSet = false;
    m_EnforceApplicationAcl = false;
    m_EnforceApplicationAclIsSet = false;
    m_ExportDrawingOptions = utility::conversions::to_string_t("");
    m_ExportDrawingOptionsIsSet = false;
    m_ExportSolidOptions = utility::conversions::to_string_t("");
    m_ExportSolidOptionsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ImportOptions = utility::conversions::to_string_t("");
    m_ImportOptionsIsSet = false;
    m_Locale = utility::conversions::to_string_t("");
    m_LocaleIsSet = false;
    m_MaterialLibrarySettingsIsSet = false;
    m_MiniToolbarSettings = utility::conversions::to_string_t("");
    m_MiniToolbarSettingsIsSet = false;
    m_MouseActions = utility::conversions::to_string_t("");
    m_MouseActionsIsSet = false;
    m_ReverseScrollWheelZoomDirection = false;
    m_ReverseScrollWheelZoomDirectionIsSet = false;
    m_StartupPage = 0;
    m_StartupPageIsSet = false;
    m_SubstituteApproversIsSet = false;
    m_UnitsDisplayPrecisionIsSet = false;
    m_UnitsMaximumDisplayPrecisionIsSet = false;
    m_Use24HourTime = false;
    m_Use24HourTimeIsSet = false;
    m_ViewManipulationMouseKeyMappingIsSet = false;
    m_ViewMappingId = 0;
    m_ViewMappingIdIsSet = false;
}

BTUserSettingsInfo::~BTUserSettingsInfo()
{
}

void BTUserSettingsInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTUserSettingsInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CommonUnitsIsSet)
    {
        val[utility::conversions::to_string_t("commonUnits")] = ModelBase::toJson(m_CommonUnits);
    }
    if(m_CustomColorsIsSet)
    {
        val[utility::conversions::to_string_t("customColors")] = ModelBase::toJson(m_CustomColors);
    }
    if(m_DefaultUnitsIsSet)
    {
        val[utility::conversions::to_string_t("defaultUnits")] = ModelBase::toJson(m_DefaultUnits);
    }
    if(m_DrawingBackgroundIdIsSet)
    {
        val[utility::conversions::to_string_t("drawingBackgroundId")] = ModelBase::toJson(m_DrawingBackgroundId);
    }
    if(m_EnforceApplicationAclIsSet)
    {
        val[utility::conversions::to_string_t("enforceApplicationAcl")] = ModelBase::toJson(m_EnforceApplicationAcl);
    }
    if(m_ExportDrawingOptionsIsSet)
    {
        val[utility::conversions::to_string_t("exportDrawingOptions")] = ModelBase::toJson(m_ExportDrawingOptions);
    }
    if(m_ExportSolidOptionsIsSet)
    {
        val[utility::conversions::to_string_t("exportSolidOptions")] = ModelBase::toJson(m_ExportSolidOptions);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ImportOptionsIsSet)
    {
        val[utility::conversions::to_string_t("importOptions")] = ModelBase::toJson(m_ImportOptions);
    }
    if(m_LocaleIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_Locale);
    }
    if(m_MaterialLibrarySettingsIsSet)
    {
        val[utility::conversions::to_string_t("materialLibrarySettings")] = ModelBase::toJson(m_MaterialLibrarySettings);
    }
    if(m_MiniToolbarSettingsIsSet)
    {
        val[utility::conversions::to_string_t("miniToolbarSettings")] = ModelBase::toJson(m_MiniToolbarSettings);
    }
    if(m_MouseActionsIsSet)
    {
        val[utility::conversions::to_string_t("mouseActions")] = ModelBase::toJson(m_MouseActions);
    }
    if(m_ReverseScrollWheelZoomDirectionIsSet)
    {
        val[utility::conversions::to_string_t("reverseScrollWheelZoomDirection")] = ModelBase::toJson(m_ReverseScrollWheelZoomDirection);
    }
    if(m_StartupPageIsSet)
    {
        val[utility::conversions::to_string_t("startupPage")] = ModelBase::toJson(m_StartupPage);
    }
    if(m_SubstituteApproversIsSet)
    {
        val[utility::conversions::to_string_t("substituteApprovers")] = ModelBase::toJson(m_SubstituteApprovers);
    }
    if(m_UnitsDisplayPrecisionIsSet)
    {
        val[utility::conversions::to_string_t("unitsDisplayPrecision")] = ModelBase::toJson(m_UnitsDisplayPrecision);
    }
    if(m_UnitsMaximumDisplayPrecisionIsSet)
    {
        val[utility::conversions::to_string_t("unitsMaximumDisplayPrecision")] = ModelBase::toJson(m_UnitsMaximumDisplayPrecision);
    }
    if(m_Use24HourTimeIsSet)
    {
        val[utility::conversions::to_string_t("use24HourTime")] = ModelBase::toJson(m_Use24HourTime);
    }
    if(m_ViewManipulationMouseKeyMappingIsSet)
    {
        val[utility::conversions::to_string_t("viewManipulationMouseKeyMapping")] = ModelBase::toJson(m_ViewManipulationMouseKeyMapping);
    }
    if(m_ViewMappingIdIsSet)
    {
        val[utility::conversions::to_string_t("viewMappingId")] = ModelBase::toJson(m_ViewMappingId);
    }

    return val;
}

bool BTUserSettingsInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("commonUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("commonUnits"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTCommonUnitsInfo> refVal_commonUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_commonUnits);
            setCommonUnits(refVal_commonUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customColors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customColors"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_customColors;
            ok &= ModelBase::fromJson(fieldValue, refVal_customColors);
            setCustomColors(refVal_customColors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultUnits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultUnits"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDefaultUnitsInfo> refVal_defaultUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultUnits);
            setDefaultUnits(refVal_defaultUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("drawingBackgroundId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("drawingBackgroundId"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_drawingBackgroundId;
            ok &= ModelBase::fromJson(fieldValue, refVal_drawingBackgroundId);
            setDrawingBackgroundId(refVal_drawingBackgroundId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enforceApplicationAcl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enforceApplicationAcl"));
        if(!fieldValue.is_null())
        {
            bool refVal_enforceApplicationAcl;
            ok &= ModelBase::fromJson(fieldValue, refVal_enforceApplicationAcl);
            setEnforceApplicationAcl(refVal_enforceApplicationAcl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportDrawingOptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportDrawingOptions"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_exportDrawingOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportDrawingOptions);
            setExportDrawingOptions(refVal_exportDrawingOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exportSolidOptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exportSolidOptions"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_exportSolidOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_exportSolidOptions);
            setExportSolidOptions(refVal_exportSolidOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("importOptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importOptions"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_importOptions);
            setImportOptions(refVal_importOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locale"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_locale;
            ok &= ModelBase::fromJson(fieldValue, refVal_locale);
            setLocale(refVal_locale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("materialLibrarySettings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("materialLibrarySettings"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMaterialLibrarySettingsInfo> refVal_materialLibrarySettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_materialLibrarySettings);
            setMaterialLibrarySettings(refVal_materialLibrarySettings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("miniToolbarSettings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("miniToolbarSettings"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_miniToolbarSettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_miniToolbarSettings);
            setMiniToolbarSettings(refVal_miniToolbarSettings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mouseActions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mouseActions"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mouseActions;
            ok &= ModelBase::fromJson(fieldValue, refVal_mouseActions);
            setMouseActions(refVal_mouseActions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reverseScrollWheelZoomDirection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reverseScrollWheelZoomDirection"));
        if(!fieldValue.is_null())
        {
            bool refVal_reverseScrollWheelZoomDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_reverseScrollWheelZoomDirection);
            setReverseScrollWheelZoomDirection(refVal_reverseScrollWheelZoomDirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startupPage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startupPage"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_startupPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_startupPage);
            setStartupPage(refVal_startupPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("substituteApprovers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("substituteApprovers"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTSubstituteApproverInfo>> refVal_substituteApprovers;
            ok &= ModelBase::fromJson(fieldValue, refVal_substituteApprovers);
            setSubstituteApprovers(refVal_substituteApprovers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unitsDisplayPrecision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unitsDisplayPrecision"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUnitsDisplayPrecision> refVal_unitsDisplayPrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitsDisplayPrecision);
            setUnitsDisplayPrecision(refVal_unitsDisplayPrecision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unitsMaximumDisplayPrecision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unitsMaximumDisplayPrecision"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo> refVal_unitsMaximumDisplayPrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_unitsMaximumDisplayPrecision);
            setUnitsMaximumDisplayPrecision(refVal_unitsMaximumDisplayPrecision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("use24HourTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("use24HourTime"));
        if(!fieldValue.is_null())
        {
            bool refVal_use24HourTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_use24HourTime);
            setUse24HourTime(refVal_use24HourTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewManipulationMouseKeyMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewManipulationMouseKeyMapping"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTViewManipulationMouseKeyMappingInfo> refVal_viewManipulationMouseKeyMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewManipulationMouseKeyMapping);
            setViewManipulationMouseKeyMapping(refVal_viewManipulationMouseKeyMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("viewMappingId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("viewMappingId"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_viewMappingId;
            ok &= ModelBase::fromJson(fieldValue, refVal_viewMappingId);
            setViewMappingId(refVal_viewMappingId);
        }
    }
    return ok;
}

void BTUserSettingsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CommonUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("commonUnits"), m_CommonUnits));
    }
    if(m_CustomColorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customColors"), m_CustomColors));
    }
    if(m_DefaultUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultUnits"), m_DefaultUnits));
    }
    if(m_DrawingBackgroundIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("drawingBackgroundId"), m_DrawingBackgroundId));
    }
    if(m_EnforceApplicationAclIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enforceApplicationAcl"), m_EnforceApplicationAcl));
    }
    if(m_ExportDrawingOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportDrawingOptions"), m_ExportDrawingOptions));
    }
    if(m_ExportSolidOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exportSolidOptions"), m_ExportSolidOptions));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ImportOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importOptions"), m_ImportOptions));
    }
    if(m_LocaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locale"), m_Locale));
    }
    if(m_MaterialLibrarySettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("materialLibrarySettings"), m_MaterialLibrarySettings));
    }
    if(m_MiniToolbarSettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("miniToolbarSettings"), m_MiniToolbarSettings));
    }
    if(m_MouseActionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mouseActions"), m_MouseActions));
    }
    if(m_ReverseScrollWheelZoomDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reverseScrollWheelZoomDirection"), m_ReverseScrollWheelZoomDirection));
    }
    if(m_StartupPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startupPage"), m_StartupPage));
    }
    if(m_SubstituteApproversIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("substituteApprovers"), m_SubstituteApprovers));
    }
    if(m_UnitsDisplayPrecisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unitsDisplayPrecision"), m_UnitsDisplayPrecision));
    }
    if(m_UnitsMaximumDisplayPrecisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unitsMaximumDisplayPrecision"), m_UnitsMaximumDisplayPrecision));
    }
    if(m_Use24HourTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("use24HourTime"), m_Use24HourTime));
    }
    if(m_ViewManipulationMouseKeyMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewManipulationMouseKeyMapping"), m_ViewManipulationMouseKeyMapping));
    }
    if(m_ViewMappingIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("viewMappingId"), m_ViewMappingId));
    }
}

bool BTUserSettingsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("commonUnits")))
    {
        std::shared_ptr<BTCommonUnitsInfo> refVal_commonUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("commonUnits")), refVal_commonUnits );
        setCommonUnits(refVal_commonUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customColors")))
    {
        std::vector<utility::string_t> refVal_customColors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customColors")), refVal_customColors );
        setCustomColors(refVal_customColors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultUnits")))
    {
        std::shared_ptr<BTDefaultUnitsInfo> refVal_defaultUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultUnits")), refVal_defaultUnits );
        setDefaultUnits(refVal_defaultUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("drawingBackgroundId")))
    {
        int32_t refVal_drawingBackgroundId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("drawingBackgroundId")), refVal_drawingBackgroundId );
        setDrawingBackgroundId(refVal_drawingBackgroundId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enforceApplicationAcl")))
    {
        bool refVal_enforceApplicationAcl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enforceApplicationAcl")), refVal_enforceApplicationAcl );
        setEnforceApplicationAcl(refVal_enforceApplicationAcl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportDrawingOptions")))
    {
        utility::string_t refVal_exportDrawingOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportDrawingOptions")), refVal_exportDrawingOptions );
        setExportDrawingOptions(refVal_exportDrawingOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exportSolidOptions")))
    {
        utility::string_t refVal_exportSolidOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exportSolidOptions")), refVal_exportSolidOptions );
        setExportSolidOptions(refVal_exportSolidOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importOptions")))
    {
        utility::string_t refVal_importOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importOptions")), refVal_importOptions );
        setImportOptions(refVal_importOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        utility::string_t refVal_locale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locale")), refVal_locale );
        setLocale(refVal_locale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("materialLibrarySettings")))
    {
        std::shared_ptr<BTMaterialLibrarySettingsInfo> refVal_materialLibrarySettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("materialLibrarySettings")), refVal_materialLibrarySettings );
        setMaterialLibrarySettings(refVal_materialLibrarySettings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("miniToolbarSettings")))
    {
        utility::string_t refVal_miniToolbarSettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("miniToolbarSettings")), refVal_miniToolbarSettings );
        setMiniToolbarSettings(refVal_miniToolbarSettings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mouseActions")))
    {
        utility::string_t refVal_mouseActions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mouseActions")), refVal_mouseActions );
        setMouseActions(refVal_mouseActions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reverseScrollWheelZoomDirection")))
    {
        bool refVal_reverseScrollWheelZoomDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reverseScrollWheelZoomDirection")), refVal_reverseScrollWheelZoomDirection );
        setReverseScrollWheelZoomDirection(refVal_reverseScrollWheelZoomDirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startupPage")))
    {
        int32_t refVal_startupPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startupPage")), refVal_startupPage );
        setStartupPage(refVal_startupPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("substituteApprovers")))
    {
        std::vector<std::shared_ptr<BTSubstituteApproverInfo>> refVal_substituteApprovers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("substituteApprovers")), refVal_substituteApprovers );
        setSubstituteApprovers(refVal_substituteApprovers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unitsDisplayPrecision")))
    {
        std::shared_ptr<BTUnitsDisplayPrecision> refVal_unitsDisplayPrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unitsDisplayPrecision")), refVal_unitsDisplayPrecision );
        setUnitsDisplayPrecision(refVal_unitsDisplayPrecision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unitsMaximumDisplayPrecision")))
    {
        std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo> refVal_unitsMaximumDisplayPrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unitsMaximumDisplayPrecision")), refVal_unitsMaximumDisplayPrecision );
        setUnitsMaximumDisplayPrecision(refVal_unitsMaximumDisplayPrecision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("use24HourTime")))
    {
        bool refVal_use24HourTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("use24HourTime")), refVal_use24HourTime );
        setUse24HourTime(refVal_use24HourTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewManipulationMouseKeyMapping")))
    {
        std::shared_ptr<BTViewManipulationMouseKeyMappingInfo> refVal_viewManipulationMouseKeyMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewManipulationMouseKeyMapping")), refVal_viewManipulationMouseKeyMapping );
        setViewManipulationMouseKeyMapping(refVal_viewManipulationMouseKeyMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("viewMappingId")))
    {
        int32_t refVal_viewMappingId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("viewMappingId")), refVal_viewMappingId );
        setViewMappingId(refVal_viewMappingId);
    }
    return ok;
}

std::shared_ptr<BTCommonUnitsInfo> BTUserSettingsInfo::getCommonUnits() const
{
    return m_CommonUnits;
}

void BTUserSettingsInfo::setCommonUnits(const std::shared_ptr<BTCommonUnitsInfo>& value)
{
    m_CommonUnits = value;
    m_CommonUnitsIsSet = true;
}

bool BTUserSettingsInfo::commonUnitsIsSet() const
{
    return m_CommonUnitsIsSet;
}

void BTUserSettingsInfo::unsetCommonUnits()
{
    m_CommonUnitsIsSet = false;
}
std::vector<utility::string_t>& BTUserSettingsInfo::getCustomColors()
{
    return m_CustomColors;
}

void BTUserSettingsInfo::setCustomColors(const std::vector<utility::string_t>& value)
{
    m_CustomColors = value;
    m_CustomColorsIsSet = true;
}

bool BTUserSettingsInfo::customColorsIsSet() const
{
    return m_CustomColorsIsSet;
}

void BTUserSettingsInfo::unsetCustomColors()
{
    m_CustomColorsIsSet = false;
}
std::shared_ptr<BTDefaultUnitsInfo> BTUserSettingsInfo::getDefaultUnits() const
{
    return m_DefaultUnits;
}

void BTUserSettingsInfo::setDefaultUnits(const std::shared_ptr<BTDefaultUnitsInfo>& value)
{
    m_DefaultUnits = value;
    m_DefaultUnitsIsSet = true;
}

bool BTUserSettingsInfo::defaultUnitsIsSet() const
{
    return m_DefaultUnitsIsSet;
}

void BTUserSettingsInfo::unsetDefaultUnits()
{
    m_DefaultUnitsIsSet = false;
}
int32_t BTUserSettingsInfo::getDrawingBackgroundId() const
{
    return m_DrawingBackgroundId;
}

void BTUserSettingsInfo::setDrawingBackgroundId(int32_t value)
{
    m_DrawingBackgroundId = value;
    m_DrawingBackgroundIdIsSet = true;
}

bool BTUserSettingsInfo::drawingBackgroundIdIsSet() const
{
    return m_DrawingBackgroundIdIsSet;
}

void BTUserSettingsInfo::unsetDrawingBackgroundId()
{
    m_DrawingBackgroundIdIsSet = false;
}
bool BTUserSettingsInfo::isEnforceApplicationAcl() const
{
    return m_EnforceApplicationAcl;
}

void BTUserSettingsInfo::setEnforceApplicationAcl(bool value)
{
    m_EnforceApplicationAcl = value;
    m_EnforceApplicationAclIsSet = true;
}

bool BTUserSettingsInfo::enforceApplicationAclIsSet() const
{
    return m_EnforceApplicationAclIsSet;
}

void BTUserSettingsInfo::unsetEnforceApplicationAcl()
{
    m_EnforceApplicationAclIsSet = false;
}
utility::string_t BTUserSettingsInfo::getExportDrawingOptions() const
{
    return m_ExportDrawingOptions;
}

void BTUserSettingsInfo::setExportDrawingOptions(const utility::string_t& value)
{
    m_ExportDrawingOptions = value;
    m_ExportDrawingOptionsIsSet = true;
}

bool BTUserSettingsInfo::exportDrawingOptionsIsSet() const
{
    return m_ExportDrawingOptionsIsSet;
}

void BTUserSettingsInfo::unsetExportDrawingOptions()
{
    m_ExportDrawingOptionsIsSet = false;
}
utility::string_t BTUserSettingsInfo::getExportSolidOptions() const
{
    return m_ExportSolidOptions;
}

void BTUserSettingsInfo::setExportSolidOptions(const utility::string_t& value)
{
    m_ExportSolidOptions = value;
    m_ExportSolidOptionsIsSet = true;
}

bool BTUserSettingsInfo::exportSolidOptionsIsSet() const
{
    return m_ExportSolidOptionsIsSet;
}

void BTUserSettingsInfo::unsetExportSolidOptions()
{
    m_ExportSolidOptionsIsSet = false;
}
utility::string_t BTUserSettingsInfo::getId() const
{
    return m_Id;
}

void BTUserSettingsInfo::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTUserSettingsInfo::idIsSet() const
{
    return m_IdIsSet;
}

void BTUserSettingsInfo::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTUserSettingsInfo::getImportOptions() const
{
    return m_ImportOptions;
}

void BTUserSettingsInfo::setImportOptions(const utility::string_t& value)
{
    m_ImportOptions = value;
    m_ImportOptionsIsSet = true;
}

bool BTUserSettingsInfo::importOptionsIsSet() const
{
    return m_ImportOptionsIsSet;
}

void BTUserSettingsInfo::unsetImportOptions()
{
    m_ImportOptionsIsSet = false;
}
utility::string_t BTUserSettingsInfo::getLocale() const
{
    return m_Locale;
}

void BTUserSettingsInfo::setLocale(const utility::string_t& value)
{
    m_Locale = value;
    m_LocaleIsSet = true;
}

bool BTUserSettingsInfo::localeIsSet() const
{
    return m_LocaleIsSet;
}

void BTUserSettingsInfo::unsetLocale()
{
    m_LocaleIsSet = false;
}
std::shared_ptr<BTMaterialLibrarySettingsInfo> BTUserSettingsInfo::getMaterialLibrarySettings() const
{
    return m_MaterialLibrarySettings;
}

void BTUserSettingsInfo::setMaterialLibrarySettings(const std::shared_ptr<BTMaterialLibrarySettingsInfo>& value)
{
    m_MaterialLibrarySettings = value;
    m_MaterialLibrarySettingsIsSet = true;
}

bool BTUserSettingsInfo::materialLibrarySettingsIsSet() const
{
    return m_MaterialLibrarySettingsIsSet;
}

void BTUserSettingsInfo::unsetMaterialLibrarySettings()
{
    m_MaterialLibrarySettingsIsSet = false;
}
utility::string_t BTUserSettingsInfo::getMiniToolbarSettings() const
{
    return m_MiniToolbarSettings;
}

void BTUserSettingsInfo::setMiniToolbarSettings(const utility::string_t& value)
{
    m_MiniToolbarSettings = value;
    m_MiniToolbarSettingsIsSet = true;
}

bool BTUserSettingsInfo::miniToolbarSettingsIsSet() const
{
    return m_MiniToolbarSettingsIsSet;
}

void BTUserSettingsInfo::unsetMiniToolbarSettings()
{
    m_MiniToolbarSettingsIsSet = false;
}
utility::string_t BTUserSettingsInfo::getMouseActions() const
{
    return m_MouseActions;
}

void BTUserSettingsInfo::setMouseActions(const utility::string_t& value)
{
    m_MouseActions = value;
    m_MouseActionsIsSet = true;
}

bool BTUserSettingsInfo::mouseActionsIsSet() const
{
    return m_MouseActionsIsSet;
}

void BTUserSettingsInfo::unsetMouseActions()
{
    m_MouseActionsIsSet = false;
}
bool BTUserSettingsInfo::isReverseScrollWheelZoomDirection() const
{
    return m_ReverseScrollWheelZoomDirection;
}

void BTUserSettingsInfo::setReverseScrollWheelZoomDirection(bool value)
{
    m_ReverseScrollWheelZoomDirection = value;
    m_ReverseScrollWheelZoomDirectionIsSet = true;
}

bool BTUserSettingsInfo::reverseScrollWheelZoomDirectionIsSet() const
{
    return m_ReverseScrollWheelZoomDirectionIsSet;
}

void BTUserSettingsInfo::unsetReverseScrollWheelZoomDirection()
{
    m_ReverseScrollWheelZoomDirectionIsSet = false;
}
int32_t BTUserSettingsInfo::getStartupPage() const
{
    return m_StartupPage;
}

void BTUserSettingsInfo::setStartupPage(int32_t value)
{
    m_StartupPage = value;
    m_StartupPageIsSet = true;
}

bool BTUserSettingsInfo::startupPageIsSet() const
{
    return m_StartupPageIsSet;
}

void BTUserSettingsInfo::unsetStartupPage()
{
    m_StartupPageIsSet = false;
}
std::vector<std::shared_ptr<BTSubstituteApproverInfo>>& BTUserSettingsInfo::getSubstituteApprovers()
{
    return m_SubstituteApprovers;
}

void BTUserSettingsInfo::setSubstituteApprovers(const std::vector<std::shared_ptr<BTSubstituteApproverInfo>>& value)
{
    m_SubstituteApprovers = value;
    m_SubstituteApproversIsSet = true;
}

bool BTUserSettingsInfo::substituteApproversIsSet() const
{
    return m_SubstituteApproversIsSet;
}

void BTUserSettingsInfo::unsetSubstituteApprovers()
{
    m_SubstituteApproversIsSet = false;
}
std::shared_ptr<BTUnitsDisplayPrecision> BTUserSettingsInfo::getUnitsDisplayPrecision() const
{
    return m_UnitsDisplayPrecision;
}

void BTUserSettingsInfo::setUnitsDisplayPrecision(const std::shared_ptr<BTUnitsDisplayPrecision>& value)
{
    m_UnitsDisplayPrecision = value;
    m_UnitsDisplayPrecisionIsSet = true;
}

bool BTUserSettingsInfo::unitsDisplayPrecisionIsSet() const
{
    return m_UnitsDisplayPrecisionIsSet;
}

void BTUserSettingsInfo::unsetUnitsDisplayPrecision()
{
    m_UnitsDisplayPrecisionIsSet = false;
}
std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo> BTUserSettingsInfo::getUnitsMaximumDisplayPrecision() const
{
    return m_UnitsMaximumDisplayPrecision;
}

void BTUserSettingsInfo::setUnitsMaximumDisplayPrecision(const std::shared_ptr<BTUnitsMaximumDisplayPrecisionInfo>& value)
{
    m_UnitsMaximumDisplayPrecision = value;
    m_UnitsMaximumDisplayPrecisionIsSet = true;
}

bool BTUserSettingsInfo::unitsMaximumDisplayPrecisionIsSet() const
{
    return m_UnitsMaximumDisplayPrecisionIsSet;
}

void BTUserSettingsInfo::unsetUnitsMaximumDisplayPrecision()
{
    m_UnitsMaximumDisplayPrecisionIsSet = false;
}
bool BTUserSettingsInfo::isUse24HourTime() const
{
    return m_Use24HourTime;
}

void BTUserSettingsInfo::setUse24HourTime(bool value)
{
    m_Use24HourTime = value;
    m_Use24HourTimeIsSet = true;
}

bool BTUserSettingsInfo::use24HourTimeIsSet() const
{
    return m_Use24HourTimeIsSet;
}

void BTUserSettingsInfo::unsetUse24HourTime()
{
    m_Use24HourTimeIsSet = false;
}
std::shared_ptr<BTViewManipulationMouseKeyMappingInfo> BTUserSettingsInfo::getViewManipulationMouseKeyMapping() const
{
    return m_ViewManipulationMouseKeyMapping;
}

void BTUserSettingsInfo::setViewManipulationMouseKeyMapping(const std::shared_ptr<BTViewManipulationMouseKeyMappingInfo>& value)
{
    m_ViewManipulationMouseKeyMapping = value;
    m_ViewManipulationMouseKeyMappingIsSet = true;
}

bool BTUserSettingsInfo::viewManipulationMouseKeyMappingIsSet() const
{
    return m_ViewManipulationMouseKeyMappingIsSet;
}

void BTUserSettingsInfo::unsetViewManipulationMouseKeyMapping()
{
    m_ViewManipulationMouseKeyMappingIsSet = false;
}
int32_t BTUserSettingsInfo::getViewMappingId() const
{
    return m_ViewMappingId;
}

void BTUserSettingsInfo::setViewMappingId(int32_t value)
{
    m_ViewMappingId = value;
    m_ViewMappingIdIsSet = true;
}

bool BTUserSettingsInfo::viewMappingIdIsSet() const
{
    return m_ViewMappingIdIsSet;
}

void BTUserSettingsInfo::unsetViewMappingId()
{
    m_ViewMappingIdIsSet = false;
}
}
}
}
}


