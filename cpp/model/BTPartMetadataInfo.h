/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTPartMetadataInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMetadataInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMetadataInfo_H_


#include "../ModelBase.h"

#include "BTCustomPropertyDefinitionInfo.h"
#include "BTPartAppearanceInfo.h"
#include "BTPartMaterialInfo.h"
#include "BTThumbnailInfo.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTPartMetadataInfo
    : public ModelBase
{
public:
    BTPartMetadataInfo();
    virtual ~BTPartMetadataInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTPartMetadataInfo members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPartAppearanceInfo> getAppearance() const;
    bool appearanceIsSet() const;
    void unsetAppearance();

    void setAppearance(const std::shared_ptr<BTPartAppearanceInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBodyType() const;
    bool bodyTypeIsSet() const;
    void unsetBodyType();

    void setBodyType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfigurationId() const;
    bool configurationIdIsSet() const;
    void unsetConfigurationId();

    void setConfigurationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getCustomProperties();
    bool customPropertiesIsSet() const;
    void unsetCustomProperties();

    void setCustomProperties(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>>& getCustomPropertyDefinitions();
    bool customPropertyDefinitionsIsSet() const;
    void unsetCustomPropertyDefinitions();

    void setCustomPropertyDefinitions(const std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFlattenedBody() const;
    bool isFlattenedBodyIsSet() const;
    void unsetIsFlattenedBody();

    void setIsFlattenedBody(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsHidden() const;
    bool isHiddenIsSet() const;
    void unsetIsHidden();

    void setIsHidden(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsMesh() const;
    bool isMeshIsSet() const;
    void unsetIsMesh();

    void setIsMesh(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTPartMaterialInfo> getMaterial() const;
    bool materialIsSet() const;
    void unsetMaterial();

    void setMaterial(const std::shared_ptr<BTPartMaterialInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMicroversionId() const;
    bool microversionIdIsSet() const;
    void unsetMicroversionId();

    void setMicroversionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOrdinal() const;
    bool ordinalIsSet() const;
    void unsetOrdinal();

    void setOrdinal(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartNumber() const;
    bool partNumberIsSet() const;
    void unsetPartNumber();

    void setPartNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartQuery() const;
    bool partQueryIsSet() const;
    void unsetPartQuery();

    void setPartQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductLine() const;
    bool productLineIsSet() const;
    void unsetProductLine();

    void setProductLine(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProject() const;
    bool projectIsSet() const;
    void unsetProject();

    void setProject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, int32_t>& getPropertySourceTypes();
    bool propertySourceTypesIsSet() const;
    void unsetPropertySourceTypes();

    void setPropertySourceTypes(std::map<utility::string_t, int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getReferencingConfiguredPartNodeIds();
    bool referencingConfiguredPartNodeIdsIsSet() const;
    void unsetReferencingConfiguredPartNodeIds();

    void setReferencingConfiguredPartNodeIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();

    void setRevision(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThumbnailConfigurationId() const;
    bool thumbnailConfigurationIdIsSet() const;
    void unsetThumbnailConfigurationId();

    void setThumbnailConfigurationId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTThumbnailInfo> getThumbnailInfo() const;
    bool thumbnailInfoIsSet() const;
    void unsetThumbnailInfo();

    void setThumbnailInfo(const std::shared_ptr<BTThumbnailInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle1() const;
    bool title1IsSet() const;
    void unsetTitle1();

    void setTitle1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle2() const;
    bool title2IsSet() const;
    void unsetTitle2();

    void setTitle2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle3() const;
    bool title3IsSet() const;
    void unsetTitle3();

    void setTitle3(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnflattenedPartId() const;
    bool unflattenedPartIdIsSet() const;
    void unsetUnflattenedPartId();

    void setUnflattenedPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVendor() const;
    bool vendorIsSet() const;
    void unsetVendor();

    void setVendor(const utility::string_t& value);


protected:
    std::shared_ptr<BTPartAppearanceInfo> m_Appearance;
    bool m_AppearanceIsSet;
    utility::string_t m_BodyType;
    bool m_BodyTypeIsSet;
    utility::string_t m_ConfigurationId;
    bool m_ConfigurationIdIsSet;
    std::map<utility::string_t, utility::string_t> m_CustomProperties;
    bool m_CustomPropertiesIsSet;
    std::map<utility::string_t, std::shared_ptr<BTCustomPropertyDefinitionInfo>> m_CustomPropertyDefinitions;
    bool m_CustomPropertyDefinitionsIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_IsFlattenedBody;
    bool m_IsFlattenedBodyIsSet;
    bool m_IsHidden;
    bool m_IsHiddenIsSet;
    bool m_IsMesh;
    bool m_IsMeshIsSet;
    std::shared_ptr<BTPartMaterialInfo> m_Material;
    bool m_MaterialIsSet;
    utility::string_t m_MicroversionId;
    bool m_MicroversionIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Ordinal;
    bool m_OrdinalIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    utility::string_t m_PartNumber;
    bool m_PartNumberIsSet;
    utility::string_t m_PartQuery;
    bool m_PartQueryIsSet;
    utility::string_t m_ProductLine;
    bool m_ProductLineIsSet;
    utility::string_t m_Project;
    bool m_ProjectIsSet;
    std::map<utility::string_t, int32_t> m_PropertySourceTypes;
    bool m_PropertySourceTypesIsSet;
    std::vector<utility::string_t> m_ReferencingConfiguredPartNodeIds;
    bool m_ReferencingConfiguredPartNodeIdsIsSet;
    utility::string_t m_Revision;
    bool m_RevisionIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_ThumbnailConfigurationId;
    bool m_ThumbnailConfigurationIdIsSet;
    std::shared_ptr<BTThumbnailInfo> m_ThumbnailInfo;
    bool m_ThumbnailInfoIsSet;
    utility::string_t m_Title1;
    bool m_Title1IsSet;
    utility::string_t m_Title2;
    bool m_Title2IsSet;
    utility::string_t m_Title3;
    bool m_Title3IsSet;
    utility::string_t m_UnflattenedPartId;
    bool m_UnflattenedPartIdIsSet;
    utility::string_t m_Vendor;
    bool m_VendorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTPartMetadataInfo_H_ */
