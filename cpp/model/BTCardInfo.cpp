/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCardInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCardInfo::BTCardInfo()
{
    m_BillingAddressIsSet = false;
    m_ExpMonth = 0;
    m_ExpMonthIsSet = false;
    m_ExpYear = 0;
    m_ExpYearIsSet = false;
    m_Last4 = utility::conversions::to_string_t("");
    m_Last4IsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

BTCardInfo::~BTCardInfo()
{
}

void BTCardInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTCardInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BillingAddressIsSet)
    {
        val[utility::conversions::to_string_t("billingAddress")] = ModelBase::toJson(m_BillingAddress);
    }
    if(m_ExpMonthIsSet)
    {
        val[utility::conversions::to_string_t("expMonth")] = ModelBase::toJson(m_ExpMonth);
    }
    if(m_ExpYearIsSet)
    {
        val[utility::conversions::to_string_t("expYear")] = ModelBase::toJson(m_ExpYear);
    }
    if(m_Last4IsSet)
    {
        val[utility::conversions::to_string_t("last4")] = ModelBase::toJson(m_Last4);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool BTCardInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("billingAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("billingAddress"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTAddressInfo> refVal_billingAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_billingAddress);
            setBillingAddress(refVal_billingAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expMonth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expMonth"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_expMonth;
            ok &= ModelBase::fromJson(fieldValue, refVal_expMonth);
            setExpMonth(refVal_expMonth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expYear")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expYear"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_expYear;
            ok &= ModelBase::fromJson(fieldValue, refVal_expYear);
            setExpYear(refVal_expYear);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last4")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("last4"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_last4;
            ok &= ModelBase::fromJson(fieldValue, refVal_last4);
            setLast4(refVal_last4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void BTCardInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BillingAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("billingAddress"), m_BillingAddress));
    }
    if(m_ExpMonthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expMonth"), m_ExpMonth));
    }
    if(m_ExpYearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expYear"), m_ExpYear));
    }
    if(m_Last4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last4"), m_Last4));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool BTCardInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("billingAddress")))
    {
        std::shared_ptr<BTAddressInfo> refVal_billingAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("billingAddress")), refVal_billingAddress );
        setBillingAddress(refVal_billingAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expMonth")))
    {
        int32_t refVal_expMonth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expMonth")), refVal_expMonth );
        setExpMonth(refVal_expMonth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expYear")))
    {
        int32_t refVal_expYear;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expYear")), refVal_expYear );
        setExpYear(refVal_expYear);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last4")))
    {
        utility::string_t refVal_last4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("last4")), refVal_last4 );
        setLast4(refVal_last4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::shared_ptr<BTAddressInfo> BTCardInfo::getBillingAddress() const
{
    return m_BillingAddress;
}

void BTCardInfo::setBillingAddress(const std::shared_ptr<BTAddressInfo>& value)
{
    m_BillingAddress = value;
    m_BillingAddressIsSet = true;
}

bool BTCardInfo::billingAddressIsSet() const
{
    return m_BillingAddressIsSet;
}

void BTCardInfo::unsetBillingAddress()
{
    m_BillingAddressIsSet = false;
}
int32_t BTCardInfo::getExpMonth() const
{
    return m_ExpMonth;
}

void BTCardInfo::setExpMonth(int32_t value)
{
    m_ExpMonth = value;
    m_ExpMonthIsSet = true;
}

bool BTCardInfo::expMonthIsSet() const
{
    return m_ExpMonthIsSet;
}

void BTCardInfo::unsetExpMonth()
{
    m_ExpMonthIsSet = false;
}
int32_t BTCardInfo::getExpYear() const
{
    return m_ExpYear;
}

void BTCardInfo::setExpYear(int32_t value)
{
    m_ExpYear = value;
    m_ExpYearIsSet = true;
}

bool BTCardInfo::expYearIsSet() const
{
    return m_ExpYearIsSet;
}

void BTCardInfo::unsetExpYear()
{
    m_ExpYearIsSet = false;
}
utility::string_t BTCardInfo::getLast4() const
{
    return m_Last4;
}

void BTCardInfo::setLast4(const utility::string_t& value)
{
    m_Last4 = value;
    m_Last4IsSet = true;
}

bool BTCardInfo::last4IsSet() const
{
    return m_Last4IsSet;
}

void BTCardInfo::unsetLast4()
{
    m_Last4IsSet = false;
}
utility::string_t BTCardInfo::getType() const
{
    return m_Type;
}

void BTCardInfo::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTCardInfo::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTCardInfo::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


