/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMIndividualQuery_138_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMIndividualQuery_138_allOf::BTMIndividualQuery_138_allOf()
{
    m_PersistentQueryIsSet = false;
    m_VariableNameIsSet = false;
    m_QueryStatementIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTMIndividualQuery_138_allOf::~BTMIndividualQuery_138_allOf()
{
}

void BTMIndividualQuery_138_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTMIndividualQuery_138_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PersistentQueryIsSet)
    {
        val[utility::conversions::to_string_t("persistentQuery")] = ModelBase::toJson(m_PersistentQuery);
    }
    if(m_VariableNameIsSet)
    {
        val[utility::conversions::to_string_t("variableName")] = ModelBase::toJson(m_VariableName);
    }
    if(m_QueryStatementIsSet)
    {
        val[utility::conversions::to_string_t("queryStatement")] = ModelBase::toJson(m_QueryStatement);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTMIndividualQuery_138_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("persistentQuery")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("persistentQuery"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_persistentQuery;
            ok &= ModelBase::fromJson(fieldValue, refVal_persistentQuery);
            setPersistentQuery(refVal_persistentQuery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("variableName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("variableName"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTMIndividualQuery_138> refVal_variableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_variableName);
            setVariableName(refVal_variableName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queryStatement")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("queryStatement"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPStatement_269> refVal_queryStatement;
            ok &= ModelBase::fromJson(fieldValue, refVal_queryStatement);
            setQueryStatement(refVal_queryStatement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTMIndividualQuery_138_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PersistentQueryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("persistentQuery"), m_PersistentQuery));
    }
    if(m_VariableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("variableName"), m_VariableName));
    }
    if(m_QueryStatementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queryStatement"), m_QueryStatement));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTMIndividualQuery_138_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("persistentQuery")))
    {
        std::shared_ptr<BTPStatement_269> refVal_persistentQuery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("persistentQuery")), refVal_persistentQuery );
        setPersistentQuery(refVal_persistentQuery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("variableName")))
    {
        std::shared_ptr<BTMIndividualQuery_138> refVal_variableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("variableName")), refVal_variableName );
        setVariableName(refVal_variableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queryStatement")))
    {
        std::shared_ptr<BTPStatement_269> refVal_queryStatement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("queryStatement")), refVal_queryStatement );
        setQueryStatement(refVal_queryStatement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

std::shared_ptr<BTPStatement_269> BTMIndividualQuery_138_allOf::getPersistentQuery() const
{
    return m_PersistentQuery;
}

void BTMIndividualQuery_138_allOf::setPersistentQuery(const std::shared_ptr<BTPStatement_269>& value)
{
    m_PersistentQuery = value;
    m_PersistentQueryIsSet = true;
}

bool BTMIndividualQuery_138_allOf::persistentQueryIsSet() const
{
    return m_PersistentQueryIsSet;
}

void BTMIndividualQuery_138_allOf::unsetPersistentQuery()
{
    m_PersistentQueryIsSet = false;
}
std::shared_ptr<BTMIndividualQuery_138> BTMIndividualQuery_138_allOf::getVariableName() const
{
    return m_VariableName;
}

void BTMIndividualQuery_138_allOf::setVariableName(const std::shared_ptr<BTMIndividualQuery_138>& value)
{
    m_VariableName = value;
    m_VariableNameIsSet = true;
}

bool BTMIndividualQuery_138_allOf::variableNameIsSet() const
{
    return m_VariableNameIsSet;
}

void BTMIndividualQuery_138_allOf::unsetVariableName()
{
    m_VariableNameIsSet = false;
}
std::shared_ptr<BTPStatement_269> BTMIndividualQuery_138_allOf::getQueryStatement() const
{
    return m_QueryStatement;
}

void BTMIndividualQuery_138_allOf::setQueryStatement(const std::shared_ptr<BTPStatement_269>& value)
{
    m_QueryStatement = value;
    m_QueryStatementIsSet = true;
}

bool BTMIndividualQuery_138_allOf::queryStatementIsSet() const
{
    return m_QueryStatementIsSet;
}

void BTMIndividualQuery_138_allOf::unsetQueryStatement()
{
    m_QueryStatementIsSet = false;
}
utility::string_t BTMIndividualQuery_138_allOf::getBtType() const
{
    return m_BtType;
}

void BTMIndividualQuery_138_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTMIndividualQuery_138_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTMIndividualQuery_138_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


