/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTFolderInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTFolderInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTFolderInfo_H_


#include <cpprest/details/basic_types.h>
#include "BTGlobalTreeNodeInfo.h"
#include "Object.h"
#include "BTFolderInfo_allOf.h"
#include "BTUserBasicSummaryInfo.h"
#include "BTOwnerInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTFolderInfo
    : public BTGlobalTreeNodeInfo
{
public:
    BTFolderInfo();
    virtual ~BTFolderInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTFolderInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getPermissionSet() const;
    bool permissionSetIsSet() const;
    void unsetPermissionSet();

    void setPermissionSet(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrash() const;
    bool trashIsSet() const;
    void unsetTrash();

    void setTrash(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanUnshare() const;
    bool canUnshareIsSet() const;
    void unsetCanUnshare();

    void setCanUnshare(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isActive() const;
    bool activeIsSet() const;
    void unsetActive();

    void setActive(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTrashedAt() const;
    bool trashedAtIsSet() const;
    void unsetTrashedAt();

    void setTrashedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsOrphaned() const;
    bool isOrphanedIsSet() const;
    void unsetIsOrphaned();

    void setIsOrphaned(bool value);


protected:
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    std::shared_ptr<Object> m_PermissionSet;
    bool m_PermissionSetIsSet;
    bool m_Trash;
    bool m_TrashIsSet;
    bool m_CanUnshare;
    bool m_CanUnshareIsSet;
    bool m_Active;
    bool m_ActiveIsSet;
    utility::datetime m_TrashedAt;
    bool m_TrashedAtIsSet;
    bool m_IsOrphaned;
    bool m_IsOrphanedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTFolderInfo_H_ */
