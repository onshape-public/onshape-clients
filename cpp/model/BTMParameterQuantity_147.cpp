/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTMParameterQuantity_147.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTMParameterQuantity_147::BTMParameterQuantity_147()
{
    m_Units = utility::conversions::to_string_t("");
    m_UnitsIsSet = false;
    m_IsInteger = false;
    m_IsIntegerIsSet = false;
    m_Expression = utility::conversions::to_string_t("");
    m_ExpressionIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
}

BTMParameterQuantity_147::~BTMParameterQuantity_147()
{
}

void BTMParameterQuantity_147::validate()
{
    // TODO: implement validation
}

web::json::value BTMParameterQuantity_147::toJson() const
{
    web::json::value val = this->BTMParameter_1::toJson();
    
    if(m_UnitsIsSet)
    {
        val[utility::conversions::to_string_t("units")] = ModelBase::toJson(m_Units);
    }
    if(m_IsIntegerIsSet)
    {
        val[utility::conversions::to_string_t("isInteger")] = ModelBase::toJson(m_IsInteger);
    }
    if(m_ExpressionIsSet)
    {
        val[utility::conversions::to_string_t("expression")] = ModelBase::toJson(m_Expression);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool BTMParameterQuantity_147::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTMParameter_1::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("units")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("units"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_units;
            ok &= ModelBase::fromJson(fieldValue, refVal_units);
            setUnits(refVal_units);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isInteger")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isInteger"));
        if(!fieldValue.is_null())
        {
            bool refVal_isInteger;
            ok &= ModelBase::fromJson(fieldValue, refVal_isInteger);
            setIsInteger(refVal_isInteger);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expression")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expression"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_expression;
            ok &= ModelBase::fromJson(fieldValue, refVal_expression);
            setExpression(refVal_expression);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            double refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void BTMParameterQuantity_147::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameterId"), m_ParameterId));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("units"), m_Units));
    }
    if(m_IsIntegerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isInteger"), m_IsInteger));
    }
    if(m_ExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expression"), m_Expression));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool BTMParameterQuantity_147::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameterId")))
    {
        utility::string_t refVal_parameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameterId")), refVal_parameterId );
        setParameterId(refVal_parameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("units")))
    {
        utility::string_t refVal_units;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("units")), refVal_units );
        setUnits(refVal_units);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isInteger")))
    {
        bool refVal_isInteger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isInteger")), refVal_isInteger );
        setIsInteger(refVal_isInteger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expression")))
    {
        utility::string_t refVal_expression;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expression")), refVal_expression );
        setExpression(refVal_expression);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        double refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

utility::string_t BTMParameterQuantity_147::getUnits() const
{
    return m_Units;
}

void BTMParameterQuantity_147::setUnits(const utility::string_t& value)
{
    m_Units = value;
    m_UnitsIsSet = true;
}

bool BTMParameterQuantity_147::unitsIsSet() const
{
    return m_UnitsIsSet;
}

void BTMParameterQuantity_147::unsetUnits()
{
    m_UnitsIsSet = false;
}
bool BTMParameterQuantity_147::isIsInteger() const
{
    return m_IsInteger;
}

void BTMParameterQuantity_147::setIsInteger(bool value)
{
    m_IsInteger = value;
    m_IsIntegerIsSet = true;
}

bool BTMParameterQuantity_147::isIntegerIsSet() const
{
    return m_IsIntegerIsSet;
}

void BTMParameterQuantity_147::unsetIsInteger()
{
    m_IsIntegerIsSet = false;
}
utility::string_t BTMParameterQuantity_147::getExpression() const
{
    return m_Expression;
}

void BTMParameterQuantity_147::setExpression(const utility::string_t& value)
{
    m_Expression = value;
    m_ExpressionIsSet = true;
}

bool BTMParameterQuantity_147::expressionIsSet() const
{
    return m_ExpressionIsSet;
}

void BTMParameterQuantity_147::unsetExpression()
{
    m_ExpressionIsSet = false;
}
double BTMParameterQuantity_147::getValue() const
{
    return m_Value;
}

void BTMParameterQuantity_147::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BTMParameterQuantity_147::valueIsSet() const
{
    return m_ValueIsSet;
}

void BTMParameterQuantity_147::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


