/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTIdTranslationParams.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationParams_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationParams_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTIdTranslationParams
    : public ModelBase
{
public:
    BTIdTranslationParams();
    virtual ~BTIdTranslationParams();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTIdTranslationParams members

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getIds();
    bool idsIsSet() const;
    void unsetIds();

    void setIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLinkDocumentId() const;
    bool linkDocumentIdIsSet() const;
    void unsetLinkDocumentId();

    void setLinkDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceConfiguration() const;
    bool sourceConfigurationIsSet() const;
    void unsetSourceConfiguration();

    void setSourceConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceDocumentMicroversion() const;
    bool sourceDocumentMicroversionIsSet() const;
    void unsetSourceDocumentMicroversion();

    void setSourceDocumentMicroversion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTargetConfiguration() const;
    bool targetConfigurationIsSet() const;
    void unsetTargetConfiguration();

    void setTargetConfiguration(const utility::string_t& value);


protected:
    std::vector<utility::string_t> m_Ids;
    bool m_IdsIsSet;
    utility::string_t m_LinkDocumentId;
    bool m_LinkDocumentIdIsSet;
    utility::string_t m_SourceConfiguration;
    bool m_SourceConfigurationIsSet;
    utility::string_t m_SourceDocumentMicroversion;
    bool m_SourceDocumentMicroversionIsSet;
    utility::string_t m_TargetConfiguration;
    bool m_TargetConfigurationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTIdTranslationParams_H_ */
