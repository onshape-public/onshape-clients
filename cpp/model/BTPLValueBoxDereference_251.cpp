/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPLValueBoxDereference_251.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPLValueBoxDereference_251::BTPLValueBoxDereference_251()
{
    m_BoxIsSet = false;
    m_SpaceInsideIsSet = false;
}

BTPLValueBoxDereference_251::~BTPLValueBoxDereference_251()
{
}

void BTPLValueBoxDereference_251::validate()
{
    // TODO: implement validation
}

web::json::value BTPLValueBoxDereference_251::toJson() const
{
    web::json::value val = this->BTPLValue_249::toJson();
    
    if(m_BoxIsSet)
    {
        val[utility::conversions::to_string_t("box")] = ModelBase::toJson(m_Box);
    }
    if(m_SpaceInsideIsSet)
    {
        val[utility::conversions::to_string_t("spaceInside")] = ModelBase::toJson(m_SpaceInside);
    }

    return val;
}

bool BTPLValueBoxDereference_251::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPLValue_249::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("box")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("box"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPExpression_9> refVal_box;
            ok &= ModelBase::fromJson(fieldValue, refVal_box);
            setBox(refVal_box);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceInside")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceInside"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceInside;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceInside);
            setSpaceInside(refVal_spaceInside);
        }
    }
    return ok;
}

void BTPLValueBoxDereference_251::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_BoxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("box"), m_Box));
    }
    if(m_SpaceInsideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceInside"), m_SpaceInside));
    }
}

bool BTPLValueBoxDereference_251::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("box")))
    {
        std::shared_ptr<BTPExpression_9> refVal_box;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("box")), refVal_box );
        setBox(refVal_box);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceInside")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceInside;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceInside")), refVal_spaceInside );
        setSpaceInside(refVal_spaceInside);
    }
    return ok;
}

std::shared_ptr<BTPExpression_9> BTPLValueBoxDereference_251::getBox() const
{
    return m_Box;
}

void BTPLValueBoxDereference_251::setBox(const std::shared_ptr<BTPExpression_9>& value)
{
    m_Box = value;
    m_BoxIsSet = true;
}

bool BTPLValueBoxDereference_251::boxIsSet() const
{
    return m_BoxIsSet;
}

void BTPLValueBoxDereference_251::unsetBox()
{
    m_BoxIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPLValueBoxDereference_251::getSpaceInside() const
{
    return m_SpaceInside;
}

void BTPLValueBoxDereference_251::setSpaceInside(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceInside = value;
    m_SpaceInsideIsSet = true;
}

bool BTPLValueBoxDereference_251::spaceInsideIsSet() const
{
    return m_SpaceInsideIsSet;
}

void BTPLValueBoxDereference_251::unsetSpaceInside()
{
    m_SpaceInsideIsSet = false;
}
}
}
}
}


