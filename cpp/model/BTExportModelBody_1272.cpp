/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTExportModelBody_1272.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTExportModelBody_1272::BTExportModelBody_1272()
{
    m_EdgesIsSet = false;
    m_FacesIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_VerticesIsSet = false;
}

BTExportModelBody_1272::~BTExportModelBody_1272()
{
}

void BTExportModelBody_1272::validate()
{
    // TODO: implement validation
}

web::json::value BTExportModelBody_1272::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EdgesIsSet)
    {
        val[utility::conversions::to_string_t("edges")] = ModelBase::toJson(m_Edges);
    }
    if(m_FacesIsSet)
    {
        val[utility::conversions::to_string_t("faces")] = ModelBase::toJson(m_Faces);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_VerticesIsSet)
    {
        val[utility::conversions::to_string_t("vertices")] = ModelBase::toJson(m_Vertices);
    }

    return val;
}

bool BTExportModelBody_1272::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("edges")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("edges"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportModelEdge_1782>> refVal_edges;
            ok &= ModelBase::fromJson(fieldValue, refVal_edges);
            setEdges(refVal_edges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("faces")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("faces"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportModelFace_1363>> refVal_faces;
            ok &= ModelBase::fromJson(fieldValue, refVal_faces);
            setFaces(refVal_faces);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vertices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vertices"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTExportModelVertex_858>> refVal_vertices;
            ok &= ModelBase::fromJson(fieldValue, refVal_vertices);
            setVertices(refVal_vertices);
        }
    }
    return ok;
}

void BTExportModelBody_1272::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EdgesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("edges"), m_Edges));
    }
    if(m_FacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("faces"), m_Faces));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_VerticesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vertices"), m_Vertices));
    }
}

bool BTExportModelBody_1272::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("edges")))
    {
        std::vector<std::shared_ptr<BTExportModelEdge_1782>> refVal_edges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("edges")), refVal_edges );
        setEdges(refVal_edges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("faces")))
    {
        std::vector<std::shared_ptr<BTExportModelFace_1363>> refVal_faces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("faces")), refVal_faces );
        setFaces(refVal_faces);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vertices")))
    {
        std::vector<std::shared_ptr<BTExportModelVertex_858>> refVal_vertices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vertices")), refVal_vertices );
        setVertices(refVal_vertices);
    }
    return ok;
}

std::vector<std::shared_ptr<BTExportModelEdge_1782>>& BTExportModelBody_1272::getEdges()
{
    return m_Edges;
}

void BTExportModelBody_1272::setEdges(const std::vector<std::shared_ptr<BTExportModelEdge_1782>>& value)
{
    m_Edges = value;
    m_EdgesIsSet = true;
}

bool BTExportModelBody_1272::edgesIsSet() const
{
    return m_EdgesIsSet;
}

void BTExportModelBody_1272::unsetEdges()
{
    m_EdgesIsSet = false;
}
std::vector<std::shared_ptr<BTExportModelFace_1363>>& BTExportModelBody_1272::getFaces()
{
    return m_Faces;
}

void BTExportModelBody_1272::setFaces(const std::vector<std::shared_ptr<BTExportModelFace_1363>>& value)
{
    m_Faces = value;
    m_FacesIsSet = true;
}

bool BTExportModelBody_1272::facesIsSet() const
{
    return m_FacesIsSet;
}

void BTExportModelBody_1272::unsetFaces()
{
    m_FacesIsSet = false;
}
utility::string_t BTExportModelBody_1272::getId() const
{
    return m_Id;
}

void BTExportModelBody_1272::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BTExportModelBody_1272::idIsSet() const
{
    return m_IdIsSet;
}

void BTExportModelBody_1272::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BTExportModelBody_1272::getType() const
{
    return m_Type;
}

void BTExportModelBody_1272::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool BTExportModelBody_1272::typeIsSet() const
{
    return m_TypeIsSet;
}

void BTExportModelBody_1272::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<std::shared_ptr<BTExportModelVertex_858>>& BTExportModelBody_1272::getVertices()
{
    return m_Vertices;
}

void BTExportModelBody_1272::setVertices(const std::vector<std::shared_ptr<BTExportModelVertex_858>>& value)
{
    m_Vertices = value;
    m_VerticesIsSet = true;
}

bool BTExportModelBody_1272::verticesIsSet() const
{
    return m_VerticesIsSet;
}

void BTExportModelBody_1272::unsetVertices()
{
    m_VerticesIsSet = false;
}
}
}
}
}


