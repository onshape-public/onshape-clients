/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTViewManipulationMouseKeyMappingInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTViewManipulationMouseKeyMappingInfo::BTViewManipulationMouseKeyMappingInfo()
{
    m_AxisRotate3DMappingIsSet = false;
    m_Pan2DMappingIsSet = false;
    m_Pan3DMappingIsSet = false;
    m_Rotate3DMappingIsSet = false;
    m_Zoom2DMappingIsSet = false;
    m_Zoom3DMappingIsSet = false;
}

BTViewManipulationMouseKeyMappingInfo::~BTViewManipulationMouseKeyMappingInfo()
{
}

void BTViewManipulationMouseKeyMappingInfo::validate()
{
    // TODO: implement validation
}

web::json::value BTViewManipulationMouseKeyMappingInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AxisRotate3DMappingIsSet)
    {
        val[utility::conversions::to_string_t("axisRotate3DMapping")] = ModelBase::toJson(m_AxisRotate3DMapping);
    }
    if(m_Pan2DMappingIsSet)
    {
        val[utility::conversions::to_string_t("pan2DMapping")] = ModelBase::toJson(m_Pan2DMapping);
    }
    if(m_Pan3DMappingIsSet)
    {
        val[utility::conversions::to_string_t("pan3DMapping")] = ModelBase::toJson(m_Pan3DMapping);
    }
    if(m_Rotate3DMappingIsSet)
    {
        val[utility::conversions::to_string_t("rotate3DMapping")] = ModelBase::toJson(m_Rotate3DMapping);
    }
    if(m_Zoom2DMappingIsSet)
    {
        val[utility::conversions::to_string_t("zoom2DMapping")] = ModelBase::toJson(m_Zoom2DMapping);
    }
    if(m_Zoom3DMappingIsSet)
    {
        val[utility::conversions::to_string_t("zoom3DMapping")] = ModelBase::toJson(m_Zoom3DMapping);
    }

    return val;
}

bool BTViewManipulationMouseKeyMappingInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("axisRotate3DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("axisRotate3DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_axisRotate3DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_axisRotate3DMapping);
            setAxisRotate3DMapping(refVal_axisRotate3DMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pan2DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pan2DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_pan2DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_pan2DMapping);
            setPan2DMapping(refVal_pan2DMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pan3DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pan3DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_pan3DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_pan3DMapping);
            setPan3DMapping(refVal_pan3DMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rotate3DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rotate3DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_rotate3DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_rotate3DMapping);
            setRotate3DMapping(refVal_rotate3DMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zoom2DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zoom2DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_zoom2DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_zoom2DMapping);
            setZoom2DMapping(refVal_zoom2DMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zoom3DMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zoom3DMapping"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_zoom3DMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_zoom3DMapping);
            setZoom3DMapping(refVal_zoom3DMapping);
        }
    }
    return ok;
}

void BTViewManipulationMouseKeyMappingInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AxisRotate3DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("axisRotate3DMapping"), m_AxisRotate3DMapping));
    }
    if(m_Pan2DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pan2DMapping"), m_Pan2DMapping));
    }
    if(m_Pan3DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pan3DMapping"), m_Pan3DMapping));
    }
    if(m_Rotate3DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rotate3DMapping"), m_Rotate3DMapping));
    }
    if(m_Zoom2DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zoom2DMapping"), m_Zoom2DMapping));
    }
    if(m_Zoom3DMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zoom3DMapping"), m_Zoom3DMapping));
    }
}

bool BTViewManipulationMouseKeyMappingInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("axisRotate3DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_axisRotate3DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("axisRotate3DMapping")), refVal_axisRotate3DMapping );
        setAxisRotate3DMapping(refVal_axisRotate3DMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pan2DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_pan2DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pan2DMapping")), refVal_pan2DMapping );
        setPan2DMapping(refVal_pan2DMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pan3DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_pan3DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pan3DMapping")), refVal_pan3DMapping );
        setPan3DMapping(refVal_pan3DMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rotate3DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_rotate3DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rotate3DMapping")), refVal_rotate3DMapping );
        setRotate3DMapping(refVal_rotate3DMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zoom2DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_zoom2DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("zoom2DMapping")), refVal_zoom2DMapping );
        setZoom2DMapping(refVal_zoom2DMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zoom3DMapping")))
    {
        std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> refVal_zoom3DMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("zoom3DMapping")), refVal_zoom3DMapping );
        setZoom3DMapping(refVal_zoom3DMapping);
    }
    return ok;
}

std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getAxisRotate3DMapping()
{
    return m_AxisRotate3DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setAxisRotate3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_AxisRotate3DMapping = value;
    m_AxisRotate3DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::axisRotate3DMappingIsSet() const
{
    return m_AxisRotate3DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetAxisRotate3DMapping()
{
    m_AxisRotate3DMappingIsSet = false;
}
std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getPan2DMapping()
{
    return m_Pan2DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setPan2DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_Pan2DMapping = value;
    m_Pan2DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::pan2DMappingIsSet() const
{
    return m_Pan2DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetPan2DMapping()
{
    m_Pan2DMappingIsSet = false;
}
std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getPan3DMapping()
{
    return m_Pan3DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setPan3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_Pan3DMapping = value;
    m_Pan3DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::pan3DMappingIsSet() const
{
    return m_Pan3DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetPan3DMapping()
{
    m_Pan3DMappingIsSet = false;
}
std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getRotate3DMapping()
{
    return m_Rotate3DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setRotate3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_Rotate3DMapping = value;
    m_Rotate3DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::rotate3DMappingIsSet() const
{
    return m_Rotate3DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetRotate3DMapping()
{
    m_Rotate3DMappingIsSet = false;
}
std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getZoom2DMapping()
{
    return m_Zoom2DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setZoom2DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_Zoom2DMapping = value;
    m_Zoom2DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::zoom2DMappingIsSet() const
{
    return m_Zoom2DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetZoom2DMapping()
{
    m_Zoom2DMappingIsSet = false;
}
std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& BTViewManipulationMouseKeyMappingInfo::getZoom3DMapping()
{
    return m_Zoom3DMapping;
}

void BTViewManipulationMouseKeyMappingInfo::setZoom3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value)
{
    m_Zoom3DMapping = value;
    m_Zoom3DMappingIsSet = true;
}

bool BTViewManipulationMouseKeyMappingInfo::zoom3DMappingIsSet() const
{
    return m_Zoom3DMappingIsSet;
}

void BTViewManipulationMouseKeyMappingInfo::unsetZoom3DMapping()
{
    m_Zoom3DMappingIsSet = false;
}
}
}
}
}


