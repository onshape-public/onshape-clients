/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTBillOfMaterialsUniqueItemId_2029.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTBillOfMaterialsUniqueItemId_2029_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTBillOfMaterialsUniqueItemId_2029_H_


#include "../ModelBase.h"

#include "BTOwner_3114.h"
#include "BTDocumentVersionElementIds_1897.h"
#include "BTElementReference_725.h"
#include "BTFullElementId_756.h"
#include "BTBillOfMaterialsUniqueItemId_2029.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTBillOfMaterialsUniqueItemId_2029
    : public ModelBase
{
public:
    BTBillOfMaterialsUniqueItemId_2029();
    virtual ~BTBillOfMaterialsUniqueItemId_2029();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTBillOfMaterialsUniqueItemId_2029 members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> getAmbiguousUniqueId() const;
    bool ambiguousUniqueIdIsSet() const;
    void unsetAmbiguousUniqueId();

    void setAmbiguousUniqueId(const std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApiConfiguration() const;
    bool apiConfigurationIsSet() const;
    void unsetApiConfiguration();

    void setApiConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBtType() const;
    bool btTypeIsSet() const;
    void unsetBtType();

    void setBtType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTDocumentVersionElementIds_1897> getDocumentVersionElementId() const;
    bool documentVersionElementIdIsSet() const;
    void unsetDocumentVersionElementId();

    void setDocumentVersionElementId(const std::shared_ptr<BTDocumentVersionElementIds_1897>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTFullElementId_756> getFullElementId() const;
    bool fullElementIdIsSet() const;
    void unsetFullElementId();

    void setFullElementId(const std::shared_ptr<BTFullElementId_756>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsStandardContent() const;
    bool isStandardContentIsSet() const;
    void unsetIsStandardContent();

    void setIsStandardContent(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getItemDefinitionId() const;
    bool itemDefinitionIdIsSet() const;
    void unsetItemDefinitionId();

    void setItemDefinitionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNonGeometric() const;
    bool nonGeometricIsSet() const;
    void unsetNonGeometric();

    void setNonGeometric(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTElementReference_725> getSourceElement() const;
    bool sourceElementIsSet() const;
    void unsetSourceElement();

    void setSourceElement(const std::shared_ptr<BTElementReference_725>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTOwner_3114> getStandardContentOwner() const;
    bool standardContentOwnerIsSet() const;
    void unsetStandardContentOwner();

    void setStandardContentOwner(const std::shared_ptr<BTOwner_3114>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> getUniqueElementId() const;
    bool uniqueElementIdIsSet() const;
    void unsetUniqueElementId();

    void setUniqueElementId(const std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isWorkspacePartItem() const;
    bool workspacePartItemIsSet() const;
    void unsetWorkspacePartItem();

    void setWorkspacePartItem(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isWorkspaceReference() const;
    bool workspaceReferenceIsSet() const;
    void unsetWorkspaceReference();

    void setWorkspaceReference(bool value);


protected:
    std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> m_AmbiguousUniqueId;
    bool m_AmbiguousUniqueIdIsSet;
    utility::string_t m_ApiConfiguration;
    bool m_ApiConfigurationIsSet;
    utility::string_t m_BtType;
    bool m_BtTypeIsSet;
    std::shared_ptr<BTDocumentVersionElementIds_1897> m_DocumentVersionElementId;
    bool m_DocumentVersionElementIdIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    std::shared_ptr<BTFullElementId_756> m_FullElementId;
    bool m_FullElementIdIsSet;
    bool m_IsStandardContent;
    bool m_IsStandardContentIsSet;
    utility::string_t m_ItemDefinitionId;
    bool m_ItemDefinitionIdIsSet;
    bool m_NonGeometric;
    bool m_NonGeometricIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    std::shared_ptr<BTElementReference_725> m_SourceElement;
    bool m_SourceElementIsSet;
    std::shared_ptr<BTOwner_3114> m_StandardContentOwner;
    bool m_StandardContentOwnerIsSet;
    std::shared_ptr<BTBillOfMaterialsUniqueItemId_2029> m_UniqueElementId;
    bool m_UniqueElementIdIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    bool m_WorkspacePartItem;
    bool m_WorkspacePartItemIsSet;
    bool m_WorkspaceReference;
    bool m_WorkspaceReferenceIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTBillOfMaterialsUniqueItemId_2029_H_ */
