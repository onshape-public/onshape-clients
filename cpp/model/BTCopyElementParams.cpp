/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTCopyElementParams.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTCopyElementParams::BTCopyElementParams()
{
    m_AnchorElementId = utility::conversions::to_string_t("");
    m_AnchorElementIdIsSet = false;
    m_DocumentIdSource = utility::conversions::to_string_t("");
    m_DocumentIdSourceIsSet = false;
    m_ElementIdSource = utility::conversions::to_string_t("");
    m_ElementIdSourceIsSet = false;
    m_IsGroupAnchor = false;
    m_IsGroupAnchorIsSet = false;
    m_WorkspaceIdSource = utility::conversions::to_string_t("");
    m_WorkspaceIdSourceIsSet = false;
}

BTCopyElementParams::~BTCopyElementParams()
{
}

void BTCopyElementParams::validate()
{
    // TODO: implement validation
}

web::json::value BTCopyElementParams::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AnchorElementIdIsSet)
    {
        val[utility::conversions::to_string_t("anchorElementId")] = ModelBase::toJson(m_AnchorElementId);
    }
    if(m_DocumentIdSourceIsSet)
    {
        val[utility::conversions::to_string_t("documentIdSource")] = ModelBase::toJson(m_DocumentIdSource);
    }
    if(m_ElementIdSourceIsSet)
    {
        val[utility::conversions::to_string_t("elementIdSource")] = ModelBase::toJson(m_ElementIdSource);
    }
    if(m_IsGroupAnchorIsSet)
    {
        val[utility::conversions::to_string_t("isGroupAnchor")] = ModelBase::toJson(m_IsGroupAnchor);
    }
    if(m_WorkspaceIdSourceIsSet)
    {
        val[utility::conversions::to_string_t("workspaceIdSource")] = ModelBase::toJson(m_WorkspaceIdSource);
    }

    return val;
}

bool BTCopyElementParams::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("anchorElementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("anchorElementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_anchorElementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_anchorElementId);
            setAnchorElementId(refVal_anchorElementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentIdSource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentIdSource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentIdSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentIdSource);
            setDocumentIdSource(refVal_documentIdSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementIdSource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementIdSource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementIdSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementIdSource);
            setElementIdSource(refVal_elementIdSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isGroupAnchor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isGroupAnchor"));
        if(!fieldValue.is_null())
        {
            bool refVal_isGroupAnchor;
            ok &= ModelBase::fromJson(fieldValue, refVal_isGroupAnchor);
            setIsGroupAnchor(refVal_isGroupAnchor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("workspaceIdSource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workspaceIdSource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_workspaceIdSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_workspaceIdSource);
            setWorkspaceIdSource(refVal_workspaceIdSource);
        }
    }
    return ok;
}

void BTCopyElementParams::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AnchorElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("anchorElementId"), m_AnchorElementId));
    }
    if(m_DocumentIdSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentIdSource"), m_DocumentIdSource));
    }
    if(m_ElementIdSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementIdSource"), m_ElementIdSource));
    }
    if(m_IsGroupAnchorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isGroupAnchor"), m_IsGroupAnchor));
    }
    if(m_WorkspaceIdSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workspaceIdSource"), m_WorkspaceIdSource));
    }
}

bool BTCopyElementParams::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("anchorElementId")))
    {
        utility::string_t refVal_anchorElementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("anchorElementId")), refVal_anchorElementId );
        setAnchorElementId(refVal_anchorElementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentIdSource")))
    {
        utility::string_t refVal_documentIdSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentIdSource")), refVal_documentIdSource );
        setDocumentIdSource(refVal_documentIdSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementIdSource")))
    {
        utility::string_t refVal_elementIdSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementIdSource")), refVal_elementIdSource );
        setElementIdSource(refVal_elementIdSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isGroupAnchor")))
    {
        bool refVal_isGroupAnchor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isGroupAnchor")), refVal_isGroupAnchor );
        setIsGroupAnchor(refVal_isGroupAnchor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("workspaceIdSource")))
    {
        utility::string_t refVal_workspaceIdSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workspaceIdSource")), refVal_workspaceIdSource );
        setWorkspaceIdSource(refVal_workspaceIdSource);
    }
    return ok;
}

utility::string_t BTCopyElementParams::getAnchorElementId() const
{
    return m_AnchorElementId;
}

void BTCopyElementParams::setAnchorElementId(const utility::string_t& value)
{
    m_AnchorElementId = value;
    m_AnchorElementIdIsSet = true;
}

bool BTCopyElementParams::anchorElementIdIsSet() const
{
    return m_AnchorElementIdIsSet;
}

void BTCopyElementParams::unsetAnchorElementId()
{
    m_AnchorElementIdIsSet = false;
}
utility::string_t BTCopyElementParams::getDocumentIdSource() const
{
    return m_DocumentIdSource;
}

void BTCopyElementParams::setDocumentIdSource(const utility::string_t& value)
{
    m_DocumentIdSource = value;
    m_DocumentIdSourceIsSet = true;
}

bool BTCopyElementParams::documentIdSourceIsSet() const
{
    return m_DocumentIdSourceIsSet;
}

void BTCopyElementParams::unsetDocumentIdSource()
{
    m_DocumentIdSourceIsSet = false;
}
utility::string_t BTCopyElementParams::getElementIdSource() const
{
    return m_ElementIdSource;
}

void BTCopyElementParams::setElementIdSource(const utility::string_t& value)
{
    m_ElementIdSource = value;
    m_ElementIdSourceIsSet = true;
}

bool BTCopyElementParams::elementIdSourceIsSet() const
{
    return m_ElementIdSourceIsSet;
}

void BTCopyElementParams::unsetElementIdSource()
{
    m_ElementIdSourceIsSet = false;
}
bool BTCopyElementParams::isIsGroupAnchor() const
{
    return m_IsGroupAnchor;
}

void BTCopyElementParams::setIsGroupAnchor(bool value)
{
    m_IsGroupAnchor = value;
    m_IsGroupAnchorIsSet = true;
}

bool BTCopyElementParams::isGroupAnchorIsSet() const
{
    return m_IsGroupAnchorIsSet;
}

void BTCopyElementParams::unsetIsGroupAnchor()
{
    m_IsGroupAnchorIsSet = false;
}
utility::string_t BTCopyElementParams::getWorkspaceIdSource() const
{
    return m_WorkspaceIdSource;
}

void BTCopyElementParams::setWorkspaceIdSource(const utility::string_t& value)
{
    m_WorkspaceIdSource = value;
    m_WorkspaceIdSourceIsSet = true;
}

bool BTCopyElementParams::workspaceIdSourceIsSet() const
{
    return m_WorkspaceIdSourceIsSet;
}

void BTCopyElementParams::unsetWorkspaceIdSource()
{
    m_WorkspaceIdSourceIsSet = false;
}
}
}
}
}


