/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Card.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Card_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Card_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "ThreeDSecure.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Card
    : public ModelBase
{
public:
    Card();
    virtual ~Card();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Card members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressCity() const;
    bool addressCityIsSet() const;
    void unsetAddressCity();

    void setAddressCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressCountry() const;
    bool addressCountryIsSet() const;
    void unsetAddressCountry();

    void setAddressCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressLine1() const;
    bool addressLine1IsSet() const;
    void unsetAddressLine1();

    void setAddressLine1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressLine1Check() const;
    bool addressLine1CheckIsSet() const;
    void unsetAddressLine1Check();

    void setAddressLine1Check(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressLine2() const;
    bool addressLine2IsSet() const;
    void unsetAddressLine2();

    void setAddressLine2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressState() const;
    bool addressStateIsSet() const;
    void unsetAddressState();

    void setAddressState(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressZip() const;
    bool addressZipIsSet() const;
    void unsetAddressZip();

    void setAddressZip(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddressZipCheck() const;
    bool addressZipCheckIsSet() const;
    void unsetAddressZipCheck();

    void setAddressZipCheck(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getAvailablePayoutMethods();
    bool availablePayoutMethodsIsSet() const;
    void unsetAvailablePayoutMethods();

    void setAvailablePayoutMethods(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBrand() const;
    bool brandIsSet() const;
    void unsetBrand();

    void setBrand(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomer() const;
    bool customerIsSet() const;
    void unsetCustomer();

    void setCustomer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCvcCheck() const;
    bool cvcCheckIsSet() const;
    void unsetCvcCheck();

    void setCvcCheck(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDefaultForCurrency() const;
    bool defaultForCurrencyIsSet() const;
    void unsetDefaultForCurrency();

    void setDefaultForCurrency(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDynamicLast4() const;
    bool dynamicLast4IsSet() const;
    void unsetDynamicLast4();

    void setDynamicLast4(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getExpMonth() const;
    bool expMonthIsSet() const;
    void unsetExpMonth();

    void setExpMonth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getExpYear() const;
    bool expYearIsSet() const;
    void unsetExpYear();

    void setExpYear(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFingerprint() const;
    bool fingerprintIsSet() const;
    void unsetFingerprint();

    void setFingerprint(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFunding() const;
    bool fundingIsSet() const;
    void unsetFunding();

    void setFunding(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIin() const;
    bool iinIsSet() const;
    void unsetIin();

    void setIin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInstanceURL() const;
    bool instanceURLIsSet() const;
    void unsetInstanceURL();

    void setInstanceURL(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIssuer() const;
    bool issuerIsSet() const;
    void unsetIssuer();

    void setIssuer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLast4() const;
    bool last4IsSet() const;
    void unsetLast4();

    void setLast4(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getMetadata();
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObject() const;
    bool objectIsSet() const;
    void unsetobject();

    void setObject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRecipient() const;
    bool recipientIsSet() const;
    void unsetRecipient();

    void setRecipient(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ThreeDSecure> getThreeDSecure() const;
    bool threeDSecureIsSet() const;
    void unsetThreeDSecure();

    void setThreeDSecure(const std::shared_ptr<ThreeDSecure>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenizationMethod() const;
    bool tokenizationMethodIsSet() const;
    void unsetTokenizationMethod();

    void setTokenizationMethod(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_AddressCity;
    bool m_AddressCityIsSet;
    utility::string_t m_AddressCountry;
    bool m_AddressCountryIsSet;
    utility::string_t m_AddressLine1;
    bool m_AddressLine1IsSet;
    utility::string_t m_AddressLine1Check;
    bool m_AddressLine1CheckIsSet;
    utility::string_t m_AddressLine2;
    bool m_AddressLine2IsSet;
    utility::string_t m_AddressState;
    bool m_AddressStateIsSet;
    utility::string_t m_AddressZip;
    bool m_AddressZipIsSet;
    utility::string_t m_AddressZipCheck;
    bool m_AddressZipCheckIsSet;
    std::vector<utility::string_t> m_AvailablePayoutMethods;
    bool m_AvailablePayoutMethodsIsSet;
    utility::string_t m_Brand;
    bool m_BrandIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_Customer;
    bool m_CustomerIsSet;
    utility::string_t m_CvcCheck;
    bool m_CvcCheckIsSet;
    bool m_DefaultForCurrency;
    bool m_DefaultForCurrencyIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_DynamicLast4;
    bool m_DynamicLast4IsSet;
    int32_t m_ExpMonth;
    bool m_ExpMonthIsSet;
    int32_t m_ExpYear;
    bool m_ExpYearIsSet;
    utility::string_t m_Fingerprint;
    bool m_FingerprintIsSet;
    utility::string_t m_Funding;
    bool m_FundingIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Iin;
    bool m_IinIsSet;
    utility::string_t m_InstanceURL;
    bool m_InstanceURLIsSet;
    utility::string_t m_Issuer;
    bool m_IssuerIsSet;
    utility::string_t m_Last4;
    bool m_Last4IsSet;
    std::map<utility::string_t, utility::string_t> m_Metadata;
    bool m_MetadataIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_object;
    bool m_objectIsSet;
    utility::string_t m_Recipient;
    bool m_RecipientIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<ThreeDSecure> m_ThreeDSecure;
    bool m_ThreeDSecureIsSet;
    utility::string_t m_TokenizationMethod;
    bool m_TokenizationMethodIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Card_H_ */
