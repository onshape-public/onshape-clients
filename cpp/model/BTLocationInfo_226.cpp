/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTLocationInfo_226.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTLocationInfo_226::BTLocationInfo_226()
{
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
    m_Character = 0;
    m_CharacterIsSet = false;
    m_Column = 0;
    m_ColumnIsSet = false;
    m_Document = utility::conversions::to_string_t("");
    m_DocumentIsSet = false;
    m_ElementMicroversion = utility::conversions::to_string_t("");
    m_ElementMicroversionIsSet = false;
    m_EndCharacter = 0;
    m_EndCharacterIsSet = false;
    m_EndColumn = 0;
    m_EndColumnIsSet = false;
    m_EndLine = 0;
    m_EndLineIsSet = false;
    m_FromNodeIsSet = false;
    m_LanguageVersion = 0;
    m_LanguageVersionIsSet = false;
    m_Line = 0;
    m_LineIsSet = false;
    m_ModuleIdsIsSet = false;
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
    m_ParseNodeId = utility::conversions::to_string_t("");
    m_ParseNodeIdIsSet = false;
    m_ParseNodeIdRawIsSet = false;
    m_TopLevel = utility::conversions::to_string_t("");
    m_TopLevelIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
}

BTLocationInfo_226::~BTLocationInfo_226()
{
}

void BTLocationInfo_226::validate()
{
    // TODO: implement validation
}

web::json::value BTLocationInfo_226::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }
    if(m_CharacterIsSet)
    {
        val[utility::conversions::to_string_t("character")] = ModelBase::toJson(m_Character);
    }
    if(m_ColumnIsSet)
    {
        val[utility::conversions::to_string_t("column")] = ModelBase::toJson(m_Column);
    }
    if(m_DocumentIsSet)
    {
        val[utility::conversions::to_string_t("document")] = ModelBase::toJson(m_Document);
    }
    if(m_ElementMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("elementMicroversion")] = ModelBase::toJson(m_ElementMicroversion);
    }
    if(m_EndCharacterIsSet)
    {
        val[utility::conversions::to_string_t("endCharacter")] = ModelBase::toJson(m_EndCharacter);
    }
    if(m_EndColumnIsSet)
    {
        val[utility::conversions::to_string_t("endColumn")] = ModelBase::toJson(m_EndColumn);
    }
    if(m_EndLineIsSet)
    {
        val[utility::conversions::to_string_t("endLine")] = ModelBase::toJson(m_EndLine);
    }
    if(m_FromNodeIsSet)
    {
        val[utility::conversions::to_string_t("fromNode")] = ModelBase::toJson(m_FromNode);
    }
    if(m_LanguageVersionIsSet)
    {
        val[utility::conversions::to_string_t("languageVersion")] = ModelBase::toJson(m_LanguageVersion);
    }
    if(m_LineIsSet)
    {
        val[utility::conversions::to_string_t("line")] = ModelBase::toJson(m_Line);
    }
    if(m_ModuleIdsIsSet)
    {
        val[utility::conversions::to_string_t("moduleIds")] = ModelBase::toJson(m_ModuleIds);
    }
    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("nodeId")] = ModelBase::toJson(m_NodeId);
    }
    if(m_ParseNodeIdIsSet)
    {
        val[utility::conversions::to_string_t("parseNodeId")] = ModelBase::toJson(m_ParseNodeId);
    }
    if(m_ParseNodeIdRawIsSet)
    {
        val[utility::conversions::to_string_t("parseNodeIdRaw")] = ModelBase::toJson(m_ParseNodeIdRaw);
    }
    if(m_TopLevelIsSet)
    {
        val[utility::conversions::to_string_t("topLevel")] = ModelBase::toJson(m_TopLevel);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }

    return val;
}

bool BTLocationInfo_226::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("character")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("character"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_character;
            ok &= ModelBase::fromJson(fieldValue, refVal_character);
            setCharacter(refVal_character);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("column")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("column"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_column;
            ok &= ModelBase::fromJson(fieldValue, refVal_column);
            setColumn(refVal_column);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("document")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("document"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_document;
            ok &= ModelBase::fromJson(fieldValue, refVal_document);
            setDocument(refVal_document);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementMicroversion);
            setElementMicroversion(refVal_elementMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endCharacter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endCharacter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_endCharacter;
            ok &= ModelBase::fromJson(fieldValue, refVal_endCharacter);
            setEndCharacter(refVal_endCharacter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endColumn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endColumn"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_endColumn;
            ok &= ModelBase::fromJson(fieldValue, refVal_endColumn);
            setEndColumn(refVal_endColumn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endLine")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endLine"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_endLine;
            ok &= ModelBase::fromJson(fieldValue, refVal_endLine);
            setEndLine(refVal_endLine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromNode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromNode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPNode_7> refVal_fromNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromNode);
            setFromNode(refVal_fromNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("languageVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("languageVersion"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_languageVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_languageVersion);
            setLanguageVersion(refVal_languageVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("line")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("line"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_line;
            ok &= ModelBase::fromJson(fieldValue, refVal_line);
            setLine(refVal_line);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moduleIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moduleIds"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTDocumentVersionElementIds_1897> refVal_moduleIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_moduleIds);
            setModuleIds(refVal_moduleIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nodeId);
            setNodeId(refVal_nodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parseNodeId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parseNodeId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_parseNodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_parseNodeId);
            setParseNodeId(refVal_parseNodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parseNodeIdRaw")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parseNodeIdRaw"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTObjectId> refVal_parseNodeIdRaw;
            ok &= ModelBase::fromJson(fieldValue, refVal_parseNodeIdRaw);
            setParseNodeIdRaw(refVal_parseNodeIdRaw);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topLevel")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topLevel"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_topLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_topLevel);
            setTopLevel(refVal_topLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    return ok;
}

void BTLocationInfo_226::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_CharacterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("character"), m_Character));
    }
    if(m_ColumnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("column"), m_Column));
    }
    if(m_DocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("document"), m_Document));
    }
    if(m_ElementMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementMicroversion"), m_ElementMicroversion));
    }
    if(m_EndCharacterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endCharacter"), m_EndCharacter));
    }
    if(m_EndColumnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endColumn"), m_EndColumn));
    }
    if(m_EndLineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endLine"), m_EndLine));
    }
    if(m_FromNodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromNode"), m_FromNode));
    }
    if(m_LanguageVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("languageVersion"), m_LanguageVersion));
    }
    if(m_LineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line"), m_Line));
    }
    if(m_ModuleIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moduleIds"), m_ModuleIds));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ParseNodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parseNodeId"), m_ParseNodeId));
    }
    if(m_ParseNodeIdRawIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parseNodeIdRaw"), m_ParseNodeIdRaw));
    }
    if(m_TopLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topLevel"), m_TopLevel));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
}

bool BTLocationInfo_226::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("character")))
    {
        int32_t refVal_character;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("character")), refVal_character );
        setCharacter(refVal_character);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("column")))
    {
        int32_t refVal_column;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("column")), refVal_column );
        setColumn(refVal_column);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("document")))
    {
        utility::string_t refVal_document;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("document")), refVal_document );
        setDocument(refVal_document);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementMicroversion")))
    {
        utility::string_t refVal_elementMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementMicroversion")), refVal_elementMicroversion );
        setElementMicroversion(refVal_elementMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endCharacter")))
    {
        int32_t refVal_endCharacter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endCharacter")), refVal_endCharacter );
        setEndCharacter(refVal_endCharacter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endColumn")))
    {
        int32_t refVal_endColumn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endColumn")), refVal_endColumn );
        setEndColumn(refVal_endColumn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endLine")))
    {
        int32_t refVal_endLine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endLine")), refVal_endLine );
        setEndLine(refVal_endLine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromNode")))
    {
        std::shared_ptr<BTPNode_7> refVal_fromNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromNode")), refVal_fromNode );
        setFromNode(refVal_fromNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("languageVersion")))
    {
        int32_t refVal_languageVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("languageVersion")), refVal_languageVersion );
        setLanguageVersion(refVal_languageVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("line")))
    {
        int32_t refVal_line;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("line")), refVal_line );
        setLine(refVal_line);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moduleIds")))
    {
        std::shared_ptr<BTDocumentVersionElementIds_1897> refVal_moduleIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moduleIds")), refVal_moduleIds );
        setModuleIds(refVal_moduleIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parseNodeId")))
    {
        utility::string_t refVal_parseNodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parseNodeId")), refVal_parseNodeId );
        setParseNodeId(refVal_parseNodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parseNodeIdRaw")))
    {
        std::shared_ptr<BTObjectId> refVal_parseNodeIdRaw;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parseNodeIdRaw")), refVal_parseNodeIdRaw );
        setParseNodeIdRaw(refVal_parseNodeIdRaw);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topLevel")))
    {
        utility::string_t refVal_topLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topLevel")), refVal_topLevel );
        setTopLevel(refVal_topLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    return ok;
}

utility::string_t BTLocationInfo_226::getBtType() const
{
    return m_BtType;
}

void BTLocationInfo_226::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTLocationInfo_226::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTLocationInfo_226::unsetBtType()
{
    m_BtTypeIsSet = false;
}
int32_t BTLocationInfo_226::getCharacter() const
{
    return m_Character;
}

void BTLocationInfo_226::setCharacter(int32_t value)
{
    m_Character = value;
    m_CharacterIsSet = true;
}

bool BTLocationInfo_226::characterIsSet() const
{
    return m_CharacterIsSet;
}

void BTLocationInfo_226::unsetCharacter()
{
    m_CharacterIsSet = false;
}
int32_t BTLocationInfo_226::getColumn() const
{
    return m_Column;
}

void BTLocationInfo_226::setColumn(int32_t value)
{
    m_Column = value;
    m_ColumnIsSet = true;
}

bool BTLocationInfo_226::columnIsSet() const
{
    return m_ColumnIsSet;
}

void BTLocationInfo_226::unsetColumn()
{
    m_ColumnIsSet = false;
}
utility::string_t BTLocationInfo_226::getDocument() const
{
    return m_Document;
}

void BTLocationInfo_226::setDocument(const utility::string_t& value)
{
    m_Document = value;
    m_DocumentIsSet = true;
}

bool BTLocationInfo_226::documentIsSet() const
{
    return m_DocumentIsSet;
}

void BTLocationInfo_226::unsetDocument()
{
    m_DocumentIsSet = false;
}
utility::string_t BTLocationInfo_226::getElementMicroversion() const
{
    return m_ElementMicroversion;
}

void BTLocationInfo_226::setElementMicroversion(const utility::string_t& value)
{
    m_ElementMicroversion = value;
    m_ElementMicroversionIsSet = true;
}

bool BTLocationInfo_226::elementMicroversionIsSet() const
{
    return m_ElementMicroversionIsSet;
}

void BTLocationInfo_226::unsetElementMicroversion()
{
    m_ElementMicroversionIsSet = false;
}
int32_t BTLocationInfo_226::getEndCharacter() const
{
    return m_EndCharacter;
}

void BTLocationInfo_226::setEndCharacter(int32_t value)
{
    m_EndCharacter = value;
    m_EndCharacterIsSet = true;
}

bool BTLocationInfo_226::endCharacterIsSet() const
{
    return m_EndCharacterIsSet;
}

void BTLocationInfo_226::unsetEndCharacter()
{
    m_EndCharacterIsSet = false;
}
int32_t BTLocationInfo_226::getEndColumn() const
{
    return m_EndColumn;
}

void BTLocationInfo_226::setEndColumn(int32_t value)
{
    m_EndColumn = value;
    m_EndColumnIsSet = true;
}

bool BTLocationInfo_226::endColumnIsSet() const
{
    return m_EndColumnIsSet;
}

void BTLocationInfo_226::unsetEndColumn()
{
    m_EndColumnIsSet = false;
}
int32_t BTLocationInfo_226::getEndLine() const
{
    return m_EndLine;
}

void BTLocationInfo_226::setEndLine(int32_t value)
{
    m_EndLine = value;
    m_EndLineIsSet = true;
}

bool BTLocationInfo_226::endLineIsSet() const
{
    return m_EndLineIsSet;
}

void BTLocationInfo_226::unsetEndLine()
{
    m_EndLineIsSet = false;
}
std::shared_ptr<BTPNode_7> BTLocationInfo_226::getFromNode() const
{
    return m_FromNode;
}

void BTLocationInfo_226::setFromNode(const std::shared_ptr<BTPNode_7>& value)
{
    m_FromNode = value;
    m_FromNodeIsSet = true;
}

bool BTLocationInfo_226::fromNodeIsSet() const
{
    return m_FromNodeIsSet;
}

void BTLocationInfo_226::unsetFromNode()
{
    m_FromNodeIsSet = false;
}
int32_t BTLocationInfo_226::getLanguageVersion() const
{
    return m_LanguageVersion;
}

void BTLocationInfo_226::setLanguageVersion(int32_t value)
{
    m_LanguageVersion = value;
    m_LanguageVersionIsSet = true;
}

bool BTLocationInfo_226::languageVersionIsSet() const
{
    return m_LanguageVersionIsSet;
}

void BTLocationInfo_226::unsetLanguageVersion()
{
    m_LanguageVersionIsSet = false;
}
int32_t BTLocationInfo_226::getLine() const
{
    return m_Line;
}

void BTLocationInfo_226::setLine(int32_t value)
{
    m_Line = value;
    m_LineIsSet = true;
}

bool BTLocationInfo_226::lineIsSet() const
{
    return m_LineIsSet;
}

void BTLocationInfo_226::unsetLine()
{
    m_LineIsSet = false;
}
std::shared_ptr<BTDocumentVersionElementIds_1897> BTLocationInfo_226::getModuleIds() const
{
    return m_ModuleIds;
}

void BTLocationInfo_226::setModuleIds(const std::shared_ptr<BTDocumentVersionElementIds_1897>& value)
{
    m_ModuleIds = value;
    m_ModuleIdsIsSet = true;
}

bool BTLocationInfo_226::moduleIdsIsSet() const
{
    return m_ModuleIdsIsSet;
}

void BTLocationInfo_226::unsetModuleIds()
{
    m_ModuleIdsIsSet = false;
}
utility::string_t BTLocationInfo_226::getNodeId() const
{
    return m_NodeId;
}

void BTLocationInfo_226::setNodeId(const utility::string_t& value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}

bool BTLocationInfo_226::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void BTLocationInfo_226::unsetNodeId()
{
    m_NodeIdIsSet = false;
}
utility::string_t BTLocationInfo_226::getParseNodeId() const
{
    return m_ParseNodeId;
}

void BTLocationInfo_226::setParseNodeId(const utility::string_t& value)
{
    m_ParseNodeId = value;
    m_ParseNodeIdIsSet = true;
}

bool BTLocationInfo_226::parseNodeIdIsSet() const
{
    return m_ParseNodeIdIsSet;
}

void BTLocationInfo_226::unsetParseNodeId()
{
    m_ParseNodeIdIsSet = false;
}
std::shared_ptr<BTObjectId> BTLocationInfo_226::getParseNodeIdRaw() const
{
    return m_ParseNodeIdRaw;
}

void BTLocationInfo_226::setParseNodeIdRaw(const std::shared_ptr<BTObjectId>& value)
{
    m_ParseNodeIdRaw = value;
    m_ParseNodeIdRawIsSet = true;
}

bool BTLocationInfo_226::parseNodeIdRawIsSet() const
{
    return m_ParseNodeIdRawIsSet;
}

void BTLocationInfo_226::unsetParseNodeIdRaw()
{
    m_ParseNodeIdRawIsSet = false;
}
utility::string_t BTLocationInfo_226::getTopLevel() const
{
    return m_TopLevel;
}

void BTLocationInfo_226::setTopLevel(const utility::string_t& value)
{
    m_TopLevel = value;
    m_TopLevelIsSet = true;
}

bool BTLocationInfo_226::topLevelIsSet() const
{
    return m_TopLevelIsSet;
}

void BTLocationInfo_226::unsetTopLevel()
{
    m_TopLevelIsSet = false;
}
utility::string_t BTLocationInfo_226::getVersion() const
{
    return m_Version;
}

void BTLocationInfo_226::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool BTLocationInfo_226::versionIsSet() const
{
    return m_VersionIsSet;
}

void BTLocationInfo_226::unsetVersion()
{
    m_VersionIsSet = false;
}
}
}
}
}


