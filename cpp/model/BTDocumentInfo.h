/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTDocumentInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentInfo_H_


#include "../ModelBase.h"

#include "BTDocumentLabelInfo.h"
#include "BTBaseInfo.h"
#include "BTThumbnailInfo.h"
#include "BTWorkspaceInfo.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"
#include "BTUserBasicSummaryInfo.h"
#include <vector>
#include "BTOwnerInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTDocumentInfo
    : public ModelBase
{
public:
    BTDocumentInfo();
    virtual ~BTDocumentInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTDocumentInfo members

    /// <summary>
    /// 
    /// </summary>
    bool isAnonymousAccessAllowed() const;
    bool anonymousAccessAllowedIsSet() const;
    void unsetAnonymousAccessAllowed();

    void setAnonymousAccessAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isAnonymousAllowsExport() const;
    bool anonymousAllowsExportIsSet() const;
    void unsetAnonymousAllowsExport();

    void setAnonymousAllowsExport(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getBetaCapabilityIds();
    bool betaCapabilityIdsIsSet() const;
    void unsetBetaCapabilityIds();

    void setBetaCapabilityIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanMove() const;
    bool canMoveIsSet() const;
    void unsetCanMove();

    void setCanMove(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isCanUnshare() const;
    bool canUnshareIsSet() const;
    void unsetCanUnshare();

    void setCanUnshare(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserBasicSummaryInfo> getCreatedBy() const;
    bool createdByIsSet() const;
    void unsetCreatedBy();

    void setCreatedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isCreatedWithEducationPlan() const;
    bool createdWithEducationPlanIsSet() const;
    void unsetCreatedWithEducationPlan();

    void setCreatedWithEducationPlan(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultElementId() const;
    bool defaultElementIdIsSet() const;
    void unsetDefaultElementId();

    void setDefaultElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTWorkspaceInfo> getDefaultWorkspace() const;
    bool defaultWorkspaceIsSet() const;
    void unsetDefaultWorkspace();

    void setDefaultWorkspace(const std::shared_ptr<BTWorkspaceInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTDocumentLabelInfo>>& getDocumentLabels();
    bool documentLabelsIsSet() const;
    void unsetDocumentLabels();

    void setDocumentLabels(const std::vector<std::shared_ptr<BTDocumentLabelInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentThumbnailElementId() const;
    bool documentThumbnailElementIdIsSet() const;
    void unsetDocumentThumbnailElementId();

    void setDocumentThumbnailElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDuplicateNameViolationError() const;
    bool duplicateNameViolationErrorIsSet() const;
    void unsetDuplicateNameViolationError();

    void setDuplicateNameViolationError(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasReleaseRevisionableObjects() const;
    bool hasReleaseRevisionableObjectsIsSet() const;
    void unsetHasReleaseRevisionableObjects();

    void setHasReleaseRevisionableObjects(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasRelevantInsertables() const;
    bool hasRelevantInsertablesIsSet() const;
    void unsetHasRelevantInsertables();

    void setHasRelevantInsertables(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsContainer() const;
    bool isContainerIsSet() const;
    void unsetIsContainer();

    void setIsContainer(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsEnterpriseOwned() const;
    bool isEnterpriseOwnedIsSet() const;
    void unsetIsEnterpriseOwned();

    void setIsEnterpriseOwned(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsMutable() const;
    bool isMutableIsSet() const;
    void unsetIsMutable();

    void setIsMutable(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsOrphaned() const;
    bool isOrphanedIsSet() const;
    void unsetIsOrphaned();

    void setIsOrphaned(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsUpgradedToLatestVersion() const;
    bool isUpgradedToLatestVersionIsSet() const;
    void unsetIsUpgradedToLatestVersion();

    void setIsUpgradedToLatestVersion(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsUsingManagedWorkflow() const;
    bool isUsingManagedWorkflowIsSet() const;
    void unsetIsUsingManagedWorkflow();

    void setIsUsingManagedWorkflow(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getJsonType() const;
    bool jsonTypeIsSet() const;
    void unsetJsonType();

    void setJsonType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isLikedByCurrentUser() const;
    bool likedByCurrentUserIsSet() const;
    void unsetLikedByCurrentUser();

    void setLikedByCurrentUser(bool value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getLikes() const;
    bool likesIsSet() const;
    void unsetLikes();

    void setLikes(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getModifiedAt() const;
    bool modifiedAtIsSet() const;
    void unsetModifiedAt();

    void setModifiedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTUserBasicSummaryInfo> getModifiedBy() const;
    bool modifiedByIsSet() const;
    void unsetModifiedBy();

    void setModifiedBy(const std::shared_ptr<BTUserBasicSummaryInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isNotRevisionManaged() const;
    bool notRevisionManagedIsSet() const;
    void unsetNotRevisionManaged();

    void setNotRevisionManaged(bool value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getNumberOfTimesCopied() const;
    bool numberOfTimesCopiedIsSet() const;
    void unsetNumberOfTimesCopied();

    void setNumberOfTimesCopied(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getNumberOfTimesReferenced() const;
    bool numberOfTimesReferencedIsSet() const;
    void unsetNumberOfTimesReferenced();

    void setNumberOfTimesReferenced(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTOwnerInfo> getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const std::shared_ptr<BTOwnerInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPermission() const;
    bool permissionIsSet() const;
    void unsetPermission();

    void setPermission(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getPermissionSet() const;
    bool permissionSetIsSet() const;
    void unsetPermissionSet();

    void setPermissionSet(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProjectId() const;
    bool projectIdIsSet() const;
    void unsetProjectId();

    void setProjectId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isRPublic() const;
    bool rPublicIsSet() const;
    void unsetr_public();

    void setRPublic(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTBaseInfo> getRecentVersion() const;
    bool recentVersionIsSet() const;
    void unsetRecentVersion();

    void setRecentVersion(const std::shared_ptr<BTBaseInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResourceType() const;
    bool resourceTypeIsSet() const;
    void unsetResourceType();

    void setResourceType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSupportTeamUserAndShared() const;
    bool supportTeamUserAndSharedIsSet() const;
    void unsetSupportTeamUserAndShared();

    void setSupportTeamUserAndShared(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BTThumbnailInfo> getThumbnail() const;
    bool thumbnailIsSet() const;
    void unsetThumbnail();

    void setThumbnail(const std::shared_ptr<BTThumbnailInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalWorkspacesScheduledForUpdate() const;
    bool totalWorkspacesScheduledForUpdateIsSet() const;
    void unsetTotalWorkspacesScheduledForUpdate();

    void setTotalWorkspacesScheduledForUpdate(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalWorkspacesUpdating() const;
    bool totalWorkspacesUpdatingIsSet() const;
    void unsetTotalWorkspacesUpdating();

    void setTotalWorkspacesUpdating(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isTrash() const;
    bool trashIsSet() const;
    void unsetTrash();

    void setTrash(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTrashedAt() const;
    bool trashedAtIsSet() const;
    void unsetTrashedAt();

    void setTrashedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTreeHref() const;
    bool treeHrefIsSet() const;
    void unsetTreeHref();

    void setTreeHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUserAccountLimitsBreached() const;
    bool userAccountLimitsBreachedIsSet() const;
    void unsetUserAccountLimitsBreached();

    void setUserAccountLimitsBreached(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);


protected:
    bool m_AnonymousAccessAllowed;
    bool m_AnonymousAccessAllowedIsSet;
    bool m_AnonymousAllowsExport;
    bool m_AnonymousAllowsExportIsSet;
    std::vector<utility::string_t> m_BetaCapabilityIds;
    bool m_BetaCapabilityIdsIsSet;
    bool m_CanMove;
    bool m_CanMoveIsSet;
    bool m_CanUnshare;
    bool m_CanUnshareIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::shared_ptr<BTUserBasicSummaryInfo> m_CreatedBy;
    bool m_CreatedByIsSet;
    bool m_CreatedWithEducationPlan;
    bool m_CreatedWithEducationPlanIsSet;
    utility::string_t m_DefaultElementId;
    bool m_DefaultElementIdIsSet;
    std::shared_ptr<BTWorkspaceInfo> m_DefaultWorkspace;
    bool m_DefaultWorkspaceIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::vector<std::shared_ptr<BTDocumentLabelInfo>> m_DocumentLabels;
    bool m_DocumentLabelsIsSet;
    utility::string_t m_DocumentThumbnailElementId;
    bool m_DocumentThumbnailElementIdIsSet;
    utility::string_t m_DuplicateNameViolationError;
    bool m_DuplicateNameViolationErrorIsSet;
    bool m_HasReleaseRevisionableObjects;
    bool m_HasReleaseRevisionableObjectsIsSet;
    bool m_HasRelevantInsertables;
    bool m_HasRelevantInsertablesIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_IsContainer;
    bool m_IsContainerIsSet;
    bool m_IsEnterpriseOwned;
    bool m_IsEnterpriseOwnedIsSet;
    bool m_IsMutable;
    bool m_IsMutableIsSet;
    bool m_IsOrphaned;
    bool m_IsOrphanedIsSet;
    bool m_IsUpgradedToLatestVersion;
    bool m_IsUpgradedToLatestVersionIsSet;
    bool m_IsUsingManagedWorkflow;
    bool m_IsUsingManagedWorkflowIsSet;
    utility::string_t m_JsonType;
    bool m_JsonTypeIsSet;
    bool m_LikedByCurrentUser;
    bool m_LikedByCurrentUserIsSet;
    int64_t m_Likes;
    bool m_LikesIsSet;
    utility::datetime m_ModifiedAt;
    bool m_ModifiedAtIsSet;
    std::shared_ptr<BTUserBasicSummaryInfo> m_ModifiedBy;
    bool m_ModifiedByIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_NotRevisionManaged;
    bool m_NotRevisionManagedIsSet;
    int64_t m_NumberOfTimesCopied;
    bool m_NumberOfTimesCopiedIsSet;
    int64_t m_NumberOfTimesReferenced;
    bool m_NumberOfTimesReferencedIsSet;
    std::shared_ptr<BTOwnerInfo> m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_Permission;
    bool m_PermissionIsSet;
    std::shared_ptr<Object> m_PermissionSet;
    bool m_PermissionSetIsSet;
    utility::string_t m_ProjectId;
    bool m_ProjectIdIsSet;
    bool m_r_public;
    bool m_r_publicIsSet;
    std::shared_ptr<BTBaseInfo> m_RecentVersion;
    bool m_RecentVersionIsSet;
    utility::string_t m_ResourceType;
    bool m_ResourceTypeIsSet;
    bool m_SupportTeamUserAndShared;
    bool m_SupportTeamUserAndSharedIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    std::shared_ptr<BTThumbnailInfo> m_Thumbnail;
    bool m_ThumbnailIsSet;
    int32_t m_TotalWorkspacesScheduledForUpdate;
    bool m_TotalWorkspacesScheduledForUpdateIsSet;
    int32_t m_TotalWorkspacesUpdating;
    bool m_TotalWorkspacesUpdatingIsSet;
    bool m_Trash;
    bool m_TrashIsSet;
    utility::datetime m_TrashedAt;
    bool m_TrashedAtIsSet;
    utility::string_t m_TreeHref;
    bool m_TreeHrefIsSet;
    bool m_UserAccountLimitsBreached;
    bool m_UserAccountLimitsBreachedIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTDocumentInfo_H_ */
