/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTViewManipulationMouseKeyMappingInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTViewManipulationMouseKeyMappingInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTViewManipulationMouseKeyMappingInfo_H_


#include "../ModelBase.h"

#include "BTKeyMouseValuesInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTViewManipulationMouseKeyMappingInfo
    : public ModelBase
{
public:
    BTViewManipulationMouseKeyMappingInfo();
    virtual ~BTViewManipulationMouseKeyMappingInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTViewManipulationMouseKeyMappingInfo members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getAxisRotate3DMapping();
    bool axisRotate3DMappingIsSet() const;
    void unsetAxisRotate3DMapping();

    void setAxisRotate3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getPan2DMapping();
    bool pan2DMappingIsSet() const;
    void unsetPan2DMapping();

    void setPan2DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getPan3DMapping();
    bool pan3DMappingIsSet() const;
    void unsetPan3DMapping();

    void setPan3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getRotate3DMapping();
    bool rotate3DMappingIsSet() const;
    void unsetRotate3DMapping();

    void setRotate3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getZoom2DMapping();
    bool zoom2DMappingIsSet() const;
    void unsetZoom2DMapping();

    void setZoom2DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& getZoom3DMapping();
    bool zoom3DMappingIsSet() const;
    void unsetZoom3DMapping();

    void setZoom3DMapping(const std::vector<std::shared_ptr<BTKeyMouseValuesInfo>>& value);


protected:
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_AxisRotate3DMapping;
    bool m_AxisRotate3DMappingIsSet;
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_Pan2DMapping;
    bool m_Pan2DMappingIsSet;
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_Pan3DMapping;
    bool m_Pan3DMappingIsSet;
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_Rotate3DMapping;
    bool m_Rotate3DMappingIsSet;
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_Zoom2DMapping;
    bool m_Zoom2DMappingIsSet;
    std::vector<std::shared_ptr<BTKeyMouseValuesInfo>> m_Zoom3DMapping;
    bool m_Zoom3DMappingIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTViewManipulationMouseKeyMappingInfo_H_ */
