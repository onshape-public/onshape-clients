/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BTReleasePackageItemInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageItemInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageItemInfo_H_


#include "../ModelBase.h"

#include "BTReleasePackageItemError.h"
#include <cpprest/details/basic_types.h>
#include "BTMetadataPropertyInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BTReleasePackageItemInfo
    : public ModelBase
{
public:
    BTReleasePackageItemInfo();
    virtual ~BTReleasePackageItemInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BTReleasePackageItemInfo members

    /// <summary>
    /// 
    /// </summary>
    bool isCanExport() const;
    bool canExportIsSet() const;
    void unsetCanExport();

    void setCanExport(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCompanyId() const;
    bool companyIdIsSet() const;
    void unsetCompanyId();

    void setCompanyId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfiguration() const;
    bool configurationIsSet() const;
    void unsetConfiguration();

    void setConfiguration(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConfigurationKey() const;
    bool configurationKeyIsSet() const;
    void unsetConfigurationKey();

    void setConfigurationKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDiffThumbnailConfigurationKey() const;
    bool diffThumbnailConfigurationKeyIsSet() const;
    void unsetDiffThumbnailConfigurationKey();

    void setDiffThumbnailConfigurationKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDocumentId() const;
    bool documentIdIsSet() const;
    void unsetDocumentId();

    void setDocumentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getElementId() const;
    bool elementIdIsSet() const;
    void unsetElementId();

    void setElementId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getElementType() const;
    bool elementTypeIsSet() const;
    void unsetElementType();

    void setElementType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTReleasePackageItemError>>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<std::shared_ptr<BTReleasePackageItemError>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHref() const;
    bool hrefIsSet() const;
    void unsetHref();

    void setHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsIncludedEditable() const;
    bool isIncludedEditableIsSet() const;
    void unsetIsIncludedEditable();

    void setIsIncludedEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsRevisionManaged() const;
    bool isRevisionManagedIsSet() const;
    void unsetIsRevisionManaged();

    void setIsRevisionManaged(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsTranslatable() const;
    bool isTranslatableIsSet() const;
    void unsetIsTranslatable();

    void setIsTranslatable(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMimeType() const;
    bool mimeTypeIsSet() const;
    void unsetMimeType();

    void setMimeType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getObsoletionRevisionId() const;
    bool obsoletionRevisionIdIsSet() const;
    void unsetObsoletionRevisionId();

    void setObsoletionRevisionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartId() const;
    bool partIdIsSet() const;
    void unsetPartId();

    void setPartId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartType() const;
    bool partTypeIsSet() const;
    void unsetPartType();

    void setPartType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<BTMetadataPropertyInfo>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();

    void setProperties(const std::vector<std::shared_ptr<BTMetadataPropertyInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRpid() const;
    bool rpidIsSet() const;
    void unsetRpid();

    void setRpid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmallThumbnailHref() const;
    bool smallThumbnailHrefIsSet() const;
    void unsetSmallThumbnailHref();

    void setSmallThumbnailHref(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersionId() const;
    bool versionIdIsSet() const;
    void unsetVersionId();

    void setVersionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getViewRef() const;
    bool viewRefIsSet() const;
    void unsetViewRef();

    void setViewRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWorkspaceId() const;
    bool workspaceIdIsSet() const;
    void unsetWorkspaceId();

    void setWorkspaceId(const utility::string_t& value);


protected:
    bool m_CanExport;
    bool m_CanExportIsSet;
    utility::string_t m_CompanyId;
    bool m_CompanyIdIsSet;
    utility::string_t m_Configuration;
    bool m_ConfigurationIsSet;
    utility::string_t m_ConfigurationKey;
    bool m_ConfigurationKeyIsSet;
    utility::string_t m_DiffThumbnailConfigurationKey;
    bool m_DiffThumbnailConfigurationKeyIsSet;
    utility::string_t m_DocumentId;
    bool m_DocumentIdIsSet;
    utility::string_t m_ElementId;
    bool m_ElementIdIsSet;
    int32_t m_ElementType;
    bool m_ElementTypeIsSet;
    std::vector<std::shared_ptr<BTReleasePackageItemError>> m_Errors;
    bool m_ErrorsIsSet;
    utility::string_t m_Href;
    bool m_HrefIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_IsIncludedEditable;
    bool m_IsIncludedEditableIsSet;
    bool m_IsRevisionManaged;
    bool m_IsRevisionManagedIsSet;
    bool m_IsTranslatable;
    bool m_IsTranslatableIsSet;
    utility::string_t m_MimeType;
    bool m_MimeTypeIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_ObsoletionRevisionId;
    bool m_ObsoletionRevisionIdIsSet;
    utility::string_t m_PartId;
    bool m_PartIdIsSet;
    utility::string_t m_PartType;
    bool m_PartTypeIsSet;
    std::vector<std::shared_ptr<BTMetadataPropertyInfo>> m_Properties;
    bool m_PropertiesIsSet;
    utility::string_t m_Rpid;
    bool m_RpidIsSet;
    utility::string_t m_SmallThumbnailHref;
    bool m_SmallThumbnailHrefIsSet;
    utility::string_t m_VersionId;
    bool m_VersionIdIsSet;
    utility::string_t m_ViewRef;
    bool m_ViewRefIsSet;
    utility::string_t m_WorkspaceId;
    bool m_WorkspaceIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BTReleasePackageItemInfo_H_ */
