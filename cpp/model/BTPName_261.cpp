/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPName_261.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPName_261::BTPName_261()
{
    m_ImportMicroversion = utility::conversions::to_string_t("");
    m_ImportMicroversionIsSet = false;
    m_ForExport = false;
    m_ForExportIsSet = false;
    m_IdentifierIsSet = false;
    m_GlobalNamespace = false;
    m_GlobalNamespaceIsSet = false;
    m_r_namespaceIsSet = false;
}

BTPName_261::~BTPName_261()
{
}

void BTPName_261::validate()
{
    // TODO: implement validation
}

web::json::value BTPName_261::toJson() const
{
    web::json::value val = this->BTPNode_7::toJson();
    
    if(m_ImportMicroversionIsSet)
    {
        val[utility::conversions::to_string_t("importMicroversion")] = ModelBase::toJson(m_ImportMicroversion);
    }
    if(m_ForExportIsSet)
    {
        val[utility::conversions::to_string_t("forExport")] = ModelBase::toJson(m_ForExport);
    }
    if(m_IdentifierIsSet)
    {
        val[utility::conversions::to_string_t("identifier")] = ModelBase::toJson(m_Identifier);
    }
    if(m_GlobalNamespaceIsSet)
    {
        val[utility::conversions::to_string_t("globalNamespace")] = ModelBase::toJson(m_GlobalNamespace);
    }
    if(m_r_namespaceIsSet)
    {
        val[utility::conversions::to_string_t("namespace")] = ModelBase::toJson(m_r_namespace);
    }

    return val;
}

bool BTPName_261::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTPNode_7::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("importMicroversion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("importMicroversion"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_importMicroversion;
            ok &= ModelBase::fromJson(fieldValue, refVal_importMicroversion);
            setImportMicroversion(refVal_importMicroversion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("forExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("forExport"));
        if(!fieldValue.is_null())
        {
            bool refVal_forExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_forExport);
            setForExport(refVal_forExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("identifier")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("identifier"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_identifier);
            setIdentifier(refVal_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("globalNamespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("globalNamespace"));
        if(!fieldValue.is_null())
        {
            bool refVal_globalNamespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_globalNamespace);
            setGlobalNamespace(refVal_globalNamespace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("namespace")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("namespace"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
            ok &= ModelBase::fromJson(fieldValue, refVal_namespace);
            setRNamespace(refVal_namespace);
        }
    }
    return ok;
}

void BTPName_261::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AtomicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atomic"), m_Atomic));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_DocumentationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentationType"), m_DocumentationType));
    }
    if(m_EndSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endSourceLocation"), m_EndSourceLocation));
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nodeId"), m_NodeId));
    }
    if(m_ShortDescriptorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shortDescriptor"), m_ShortDescriptor));
    }
    if(m_SpaceAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfter"), m_SpaceAfter));
    }
    if(m_SpaceBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceBefore"), m_SpaceBefore));
    }
    if(m_SpaceDefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceDefault"), m_SpaceDefault));
    }
    if(m_StartSourceLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startSourceLocation"), m_StartSourceLocation));
    }
    if(m_ImportMicroversionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("importMicroversion"), m_ImportMicroversion));
    }
    if(m_ForExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forExport"), m_ForExport));
    }
    if(m_IdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("identifier"), m_Identifier));
    }
    if(m_GlobalNamespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalNamespace"), m_GlobalNamespace));
    }
    if(m_r_namespaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("namespace"), m_r_namespace));
    }
}

bool BTPName_261::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("atomic")))
    {
        bool refVal_atomic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atomic")), refVal_atomic );
        setAtomic(refVal_atomic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentationType")))
    {
        utility::string_t refVal_documentationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentationType")), refVal_documentationType );
        setDocumentationType(refVal_documentationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endSourceLocation")))
    {
        int32_t refVal_endSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endSourceLocation")), refVal_endSourceLocation );
        setEndSourceLocation(refVal_endSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nodeId")))
    {
        utility::string_t refVal_nodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nodeId")), refVal_nodeId );
        setNodeId(refVal_nodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shortDescriptor")))
    {
        utility::string_t refVal_shortDescriptor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shortDescriptor")), refVal_shortDescriptor );
        setShortDescriptor(refVal_shortDescriptor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfter")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfter")), refVal_spaceAfter );
        setSpaceAfter(refVal_spaceAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceBefore")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceBefore")), refVal_spaceBefore );
        setSpaceBefore(refVal_spaceBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceDefault")))
    {
        bool refVal_spaceDefault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceDefault")), refVal_spaceDefault );
        setSpaceDefault(refVal_spaceDefault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startSourceLocation")))
    {
        int32_t refVal_startSourceLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startSourceLocation")), refVal_startSourceLocation );
        setStartSourceLocation(refVal_startSourceLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("importMicroversion")))
    {
        utility::string_t refVal_importMicroversion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("importMicroversion")), refVal_importMicroversion );
        setImportMicroversion(refVal_importMicroversion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("forExport")))
    {
        bool refVal_forExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("forExport")), refVal_forExport );
        setForExport(refVal_forExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("identifier")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("identifier")), refVal_identifier );
        setIdentifier(refVal_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("globalNamespace")))
    {
        bool refVal_globalNamespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalNamespace")), refVal_globalNamespace );
        setGlobalNamespace(refVal_globalNamespace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("namespace")))
    {
        std::vector<std::shared_ptr<BTPIdentifier_8>> refVal_namespace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("namespace")), refVal_namespace );
        setRNamespace(refVal_namespace);
    }
    return ok;
}

utility::string_t BTPName_261::getImportMicroversion() const
{
    return m_ImportMicroversion;
}

void BTPName_261::setImportMicroversion(const utility::string_t& value)
{
    m_ImportMicroversion = value;
    m_ImportMicroversionIsSet = true;
}

bool BTPName_261::importMicroversionIsSet() const
{
    return m_ImportMicroversionIsSet;
}

void BTPName_261::unsetImportMicroversion()
{
    m_ImportMicroversionIsSet = false;
}
bool BTPName_261::isForExport() const
{
    return m_ForExport;
}

void BTPName_261::setForExport(bool value)
{
    m_ForExport = value;
    m_ForExportIsSet = true;
}

bool BTPName_261::forExportIsSet() const
{
    return m_ForExportIsSet;
}

void BTPName_261::unsetForExport()
{
    m_ForExportIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPName_261::getIdentifier() const
{
    return m_Identifier;
}

void BTPName_261::setIdentifier(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_Identifier = value;
    m_IdentifierIsSet = true;
}

bool BTPName_261::identifierIsSet() const
{
    return m_IdentifierIsSet;
}

void BTPName_261::unsetIdentifier()
{
    m_IdentifierIsSet = false;
}
bool BTPName_261::isGlobalNamespace() const
{
    return m_GlobalNamespace;
}

void BTPName_261::setGlobalNamespace(bool value)
{
    m_GlobalNamespace = value;
    m_GlobalNamespaceIsSet = true;
}

bool BTPName_261::globalNamespaceIsSet() const
{
    return m_GlobalNamespaceIsSet;
}

void BTPName_261::unsetGlobalNamespace()
{
    m_GlobalNamespaceIsSet = false;
}
std::vector<std::shared_ptr<BTPIdentifier_8>>& BTPName_261::getRNamespace()
{
    return m_r_namespace;
}

void BTPName_261::setRNamespace(const std::vector<std::shared_ptr<BTPIdentifier_8>>& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}

bool BTPName_261::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}

void BTPName_261::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
}
}
}
}


