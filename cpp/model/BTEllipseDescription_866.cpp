/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTEllipseDescription_866.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTEllipseDescription_866::BTEllipseDescription_866()
{
    m_NormalIsSet = false;
    m_MajorAxisIsSet = false;
    m_MajorRadius = 0.0;
    m_MajorRadiusIsSet = false;
    m_MinorRadius = 0.0;
    m_MinorRadiusIsSet = false;
    m_OriginIsSet = false;
}

BTEllipseDescription_866::~BTEllipseDescription_866()
{
}

void BTEllipseDescription_866::validate()
{
    // TODO: implement validation
}

web::json::value BTEllipseDescription_866::toJson() const
{
    web::json::value val = this->BTCurveDescription_1583::toJson();
    
    if(m_NormalIsSet)
    {
        val[utility::conversions::to_string_t("normal")] = ModelBase::toJson(m_Normal);
    }
    if(m_MajorAxisIsSet)
    {
        val[utility::conversions::to_string_t("majorAxis")] = ModelBase::toJson(m_MajorAxis);
    }
    if(m_MajorRadiusIsSet)
    {
        val[utility::conversions::to_string_t("majorRadius")] = ModelBase::toJson(m_MajorRadius);
    }
    if(m_MinorRadiusIsSet)
    {
        val[utility::conversions::to_string_t("minorRadius")] = ModelBase::toJson(m_MinorRadius);
    }
    if(m_OriginIsSet)
    {
        val[utility::conversions::to_string_t("origin")] = ModelBase::toJson(m_Origin);
    }

    return val;
}

bool BTEllipseDescription_866::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->BTCurveDescription_1583::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("normal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("normal"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_normal;
            ok &= ModelBase::fromJson(fieldValue, refVal_normal);
            setNormal(refVal_normal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("majorAxis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("majorAxis"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_majorAxis;
            ok &= ModelBase::fromJson(fieldValue, refVal_majorAxis);
            setMajorAxis(refVal_majorAxis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("majorRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("majorRadius"));
        if(!fieldValue.is_null())
        {
            double refVal_majorRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_majorRadius);
            setMajorRadius(refVal_majorRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minorRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minorRadius"));
        if(!fieldValue.is_null())
        {
            double refVal_minorRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_minorRadius);
            setMinorRadius(refVal_minorRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTVector3d_389> refVal_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin);
            setOrigin(refVal_origin);
        }
    }
    return ok;
}

void BTEllipseDescription_866::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_NormalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("normal"), m_Normal));
    }
    if(m_MajorAxisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("majorAxis"), m_MajorAxis));
    }
    if(m_MajorRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("majorRadius"), m_MajorRadius));
    }
    if(m_MinorRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minorRadius"), m_MinorRadius));
    }
    if(m_OriginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin"), m_Origin));
    }
}

bool BTEllipseDescription_866::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("normal")))
    {
        std::shared_ptr<BTVector3d_389> refVal_normal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("normal")), refVal_normal );
        setNormal(refVal_normal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("majorAxis")))
    {
        std::shared_ptr<BTVector3d_389> refVal_majorAxis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("majorAxis")), refVal_majorAxis );
        setMajorAxis(refVal_majorAxis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("majorRadius")))
    {
        double refVal_majorRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("majorRadius")), refVal_majorRadius );
        setMajorRadius(refVal_majorRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minorRadius")))
    {
        double refVal_minorRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minorRadius")), refVal_minorRadius );
        setMinorRadius(refVal_minorRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin")))
    {
        std::shared_ptr<BTVector3d_389> refVal_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin")), refVal_origin );
        setOrigin(refVal_origin);
    }
    return ok;
}

std::shared_ptr<BTVector3d_389> BTEllipseDescription_866::getNormal() const
{
    return m_Normal;
}

void BTEllipseDescription_866::setNormal(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Normal = value;
    m_NormalIsSet = true;
}

bool BTEllipseDescription_866::normalIsSet() const
{
    return m_NormalIsSet;
}

void BTEllipseDescription_866::unsetNormal()
{
    m_NormalIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTEllipseDescription_866::getMajorAxis() const
{
    return m_MajorAxis;
}

void BTEllipseDescription_866::setMajorAxis(const std::shared_ptr<BTVector3d_389>& value)
{
    m_MajorAxis = value;
    m_MajorAxisIsSet = true;
}

bool BTEllipseDescription_866::majorAxisIsSet() const
{
    return m_MajorAxisIsSet;
}

void BTEllipseDescription_866::unsetMajorAxis()
{
    m_MajorAxisIsSet = false;
}
double BTEllipseDescription_866::getMajorRadius() const
{
    return m_MajorRadius;
}

void BTEllipseDescription_866::setMajorRadius(double value)
{
    m_MajorRadius = value;
    m_MajorRadiusIsSet = true;
}

bool BTEllipseDescription_866::majorRadiusIsSet() const
{
    return m_MajorRadiusIsSet;
}

void BTEllipseDescription_866::unsetMajorRadius()
{
    m_MajorRadiusIsSet = false;
}
double BTEllipseDescription_866::getMinorRadius() const
{
    return m_MinorRadius;
}

void BTEllipseDescription_866::setMinorRadius(double value)
{
    m_MinorRadius = value;
    m_MinorRadiusIsSet = true;
}

bool BTEllipseDescription_866::minorRadiusIsSet() const
{
    return m_MinorRadiusIsSet;
}

void BTEllipseDescription_866::unsetMinorRadius()
{
    m_MinorRadiusIsSet = false;
}
std::shared_ptr<BTVector3d_389> BTEllipseDescription_866::getOrigin() const
{
    return m_Origin;
}

void BTEllipseDescription_866::setOrigin(const std::shared_ptr<BTVector3d_389>& value)
{
    m_Origin = value;
    m_OriginIsSet = true;
}

bool BTEllipseDescription_866::originIsSet() const
{
    return m_OriginIsSet;
}

void BTEllipseDescription_866::unsetOrigin()
{
    m_OriginIsSet = false;
}
}
}
}
}


