/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTDocumentWithVersionAndElementId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTDocumentWithVersionAndElementId::BTDocumentWithVersionAndElementId()
{
    m_DocumentId = utility::conversions::to_string_t("");
    m_DocumentIdIsSet = false;
    m_DocumentVersionId = utility::conversions::to_string_t("");
    m_DocumentVersionIdIsSet = false;
    m_ElementId = utility::conversions::to_string_t("");
    m_ElementIdIsSet = false;
    m_PartNumber = utility::conversions::to_string_t("");
    m_PartNumberIsSet = false;
    m_Revision = utility::conversions::to_string_t("");
    m_RevisionIsSet = false;
    m_UniqueVersionId = utility::conversions::to_string_t("");
    m_UniqueVersionIdIsSet = false;
    m_ValidRevisionReference = false;
    m_ValidRevisionReferenceIsSet = false;
}

BTDocumentWithVersionAndElementId::~BTDocumentWithVersionAndElementId()
{
}

void BTDocumentWithVersionAndElementId::validate()
{
    // TODO: implement validation
}

web::json::value BTDocumentWithVersionAndElementId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DocumentIdIsSet)
    {
        val[utility::conversions::to_string_t("documentId")] = ModelBase::toJson(m_DocumentId);
    }
    if(m_DocumentVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("documentVersionId")] = ModelBase::toJson(m_DocumentVersionId);
    }
    if(m_ElementIdIsSet)
    {
        val[utility::conversions::to_string_t("elementId")] = ModelBase::toJson(m_ElementId);
    }
    if(m_PartNumberIsSet)
    {
        val[utility::conversions::to_string_t("partNumber")] = ModelBase::toJson(m_PartNumber);
    }
    if(m_RevisionIsSet)
    {
        val[utility::conversions::to_string_t("revision")] = ModelBase::toJson(m_Revision);
    }
    if(m_UniqueVersionIdIsSet)
    {
        val[utility::conversions::to_string_t("uniqueVersionId")] = ModelBase::toJson(m_UniqueVersionId);
    }
    if(m_ValidRevisionReferenceIsSet)
    {
        val[utility::conversions::to_string_t("validRevisionReference")] = ModelBase::toJson(m_ValidRevisionReference);
    }

    return val;
}

bool BTDocumentWithVersionAndElementId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("documentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentId);
            setDocumentId(refVal_documentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("documentVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("documentVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_documentVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_documentVersionId);
            setDocumentVersionId(refVal_documentVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("elementId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("elementId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_elementId;
            ok &= ModelBase::fromJson(fieldValue, refVal_elementId);
            setElementId(refVal_elementId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("partNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("partNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_partNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_partNumber);
            setPartNumber(refVal_partNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("revision")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("revision"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_revision;
            ok &= ModelBase::fromJson(fieldValue, refVal_revision);
            setRevision(refVal_revision);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uniqueVersionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uniqueVersionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uniqueVersionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_uniqueVersionId);
            setUniqueVersionId(refVal_uniqueVersionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validRevisionReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validRevisionReference"));
        if(!fieldValue.is_null())
        {
            bool refVal_validRevisionReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_validRevisionReference);
            setValidRevisionReference(refVal_validRevisionReference);
        }
    }
    return ok;
}

void BTDocumentWithVersionAndElementId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DocumentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentId"), m_DocumentId));
    }
    if(m_DocumentVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("documentVersionId"), m_DocumentVersionId));
    }
    if(m_ElementIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elementId"), m_ElementId));
    }
    if(m_PartNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("partNumber"), m_PartNumber));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("revision"), m_Revision));
    }
    if(m_UniqueVersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uniqueVersionId"), m_UniqueVersionId));
    }
    if(m_ValidRevisionReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validRevisionReference"), m_ValidRevisionReference));
    }
}

bool BTDocumentWithVersionAndElementId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("documentId")))
    {
        utility::string_t refVal_documentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentId")), refVal_documentId );
        setDocumentId(refVal_documentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("documentVersionId")))
    {
        utility::string_t refVal_documentVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("documentVersionId")), refVal_documentVersionId );
        setDocumentVersionId(refVal_documentVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("elementId")))
    {
        utility::string_t refVal_elementId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("elementId")), refVal_elementId );
        setElementId(refVal_elementId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("partNumber")))
    {
        utility::string_t refVal_partNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("partNumber")), refVal_partNumber );
        setPartNumber(refVal_partNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("revision")))
    {
        utility::string_t refVal_revision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("revision")), refVal_revision );
        setRevision(refVal_revision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uniqueVersionId")))
    {
        utility::string_t refVal_uniqueVersionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uniqueVersionId")), refVal_uniqueVersionId );
        setUniqueVersionId(refVal_uniqueVersionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validRevisionReference")))
    {
        bool refVal_validRevisionReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validRevisionReference")), refVal_validRevisionReference );
        setValidRevisionReference(refVal_validRevisionReference);
    }
    return ok;
}

utility::string_t BTDocumentWithVersionAndElementId::getDocumentId() const
{
    return m_DocumentId;
}

void BTDocumentWithVersionAndElementId::setDocumentId(const utility::string_t& value)
{
    m_DocumentId = value;
    m_DocumentIdIsSet = true;
}

bool BTDocumentWithVersionAndElementId::documentIdIsSet() const
{
    return m_DocumentIdIsSet;
}

void BTDocumentWithVersionAndElementId::unsetDocumentId()
{
    m_DocumentIdIsSet = false;
}
utility::string_t BTDocumentWithVersionAndElementId::getDocumentVersionId() const
{
    return m_DocumentVersionId;
}

void BTDocumentWithVersionAndElementId::setDocumentVersionId(const utility::string_t& value)
{
    m_DocumentVersionId = value;
    m_DocumentVersionIdIsSet = true;
}

bool BTDocumentWithVersionAndElementId::documentVersionIdIsSet() const
{
    return m_DocumentVersionIdIsSet;
}

void BTDocumentWithVersionAndElementId::unsetDocumentVersionId()
{
    m_DocumentVersionIdIsSet = false;
}
utility::string_t BTDocumentWithVersionAndElementId::getElementId() const
{
    return m_ElementId;
}

void BTDocumentWithVersionAndElementId::setElementId(const utility::string_t& value)
{
    m_ElementId = value;
    m_ElementIdIsSet = true;
}

bool BTDocumentWithVersionAndElementId::elementIdIsSet() const
{
    return m_ElementIdIsSet;
}

void BTDocumentWithVersionAndElementId::unsetElementId()
{
    m_ElementIdIsSet = false;
}
utility::string_t BTDocumentWithVersionAndElementId::getPartNumber() const
{
    return m_PartNumber;
}

void BTDocumentWithVersionAndElementId::setPartNumber(const utility::string_t& value)
{
    m_PartNumber = value;
    m_PartNumberIsSet = true;
}

bool BTDocumentWithVersionAndElementId::partNumberIsSet() const
{
    return m_PartNumberIsSet;
}

void BTDocumentWithVersionAndElementId::unsetPartNumber()
{
    m_PartNumberIsSet = false;
}
utility::string_t BTDocumentWithVersionAndElementId::getRevision() const
{
    return m_Revision;
}

void BTDocumentWithVersionAndElementId::setRevision(const utility::string_t& value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool BTDocumentWithVersionAndElementId::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void BTDocumentWithVersionAndElementId::unsetRevision()
{
    m_RevisionIsSet = false;
}
utility::string_t BTDocumentWithVersionAndElementId::getUniqueVersionId() const
{
    return m_UniqueVersionId;
}

void BTDocumentWithVersionAndElementId::setUniqueVersionId(const utility::string_t& value)
{
    m_UniqueVersionId = value;
    m_UniqueVersionIdIsSet = true;
}

bool BTDocumentWithVersionAndElementId::uniqueVersionIdIsSet() const
{
    return m_UniqueVersionIdIsSet;
}

void BTDocumentWithVersionAndElementId::unsetUniqueVersionId()
{
    m_UniqueVersionIdIsSet = false;
}
bool BTDocumentWithVersionAndElementId::isValidRevisionReference() const
{
    return m_ValidRevisionReference;
}

void BTDocumentWithVersionAndElementId::setValidRevisionReference(bool value)
{
    m_ValidRevisionReference = value;
    m_ValidRevisionReferenceIsSet = true;
}

bool BTDocumentWithVersionAndElementId::validRevisionReferenceIsSet() const
{
    return m_ValidRevisionReferenceIsSet;
}

void BTDocumentWithVersionAndElementId::unsetValidRevisionReference()
{
    m_ValidRevisionReferenceIsSet = false;
}
}
}
}
}


