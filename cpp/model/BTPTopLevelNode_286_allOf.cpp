/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTPTopLevelNode_286_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTPTopLevelNode_286_allOf::BTPTopLevelNode_286_allOf()
{
    m_Deprecated = false;
    m_DeprecatedIsSet = false;
    m_SymbolNameIsSet = false;
    m_ArgumentsToDocumentIsSet = false;
    m_DeprecatedExplanation = utility::conversions::to_string_t("");
    m_DeprecatedExplanationIsSet = false;
    m_ForExport = false;
    m_ForExportIsSet = false;
    m_SpaceAfterExportIsSet = false;
    m_AnnotationIsSet = false;
    m_BtType = utility::conversions::to_string_t("");
    m_BtTypeIsSet = false;
}

BTPTopLevelNode_286_allOf::~BTPTopLevelNode_286_allOf()
{
}

void BTPTopLevelNode_286_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTPTopLevelNode_286_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DeprecatedIsSet)
    {
        val[utility::conversions::to_string_t("deprecated")] = ModelBase::toJson(m_Deprecated);
    }
    if(m_SymbolNameIsSet)
    {
        val[utility::conversions::to_string_t("symbolName")] = ModelBase::toJson(m_SymbolName);
    }
    if(m_ArgumentsToDocumentIsSet)
    {
        val[utility::conversions::to_string_t("argumentsToDocument")] = ModelBase::toJson(m_ArgumentsToDocument);
    }
    if(m_DeprecatedExplanationIsSet)
    {
        val[utility::conversions::to_string_t("deprecatedExplanation")] = ModelBase::toJson(m_DeprecatedExplanation);
    }
    if(m_ForExportIsSet)
    {
        val[utility::conversions::to_string_t("forExport")] = ModelBase::toJson(m_ForExport);
    }
    if(m_SpaceAfterExportIsSet)
    {
        val[utility::conversions::to_string_t("spaceAfterExport")] = ModelBase::toJson(m_SpaceAfterExport);
    }
    if(m_AnnotationIsSet)
    {
        val[utility::conversions::to_string_t("annotation")] = ModelBase::toJson(m_Annotation);
    }
    if(m_BtTypeIsSet)
    {
        val[utility::conversions::to_string_t("btType")] = ModelBase::toJson(m_BtType);
    }

    return val;
}

bool BTPTopLevelNode_286_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("deprecated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deprecated"));
        if(!fieldValue.is_null())
        {
            bool refVal_deprecated;
            ok &= ModelBase::fromJson(fieldValue, refVal_deprecated);
            setDeprecated(refVal_deprecated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbolName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("symbolName"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPIdentifier_8> refVal_symbolName;
            ok &= ModelBase::fromJson(fieldValue, refVal_symbolName);
            setSymbolName(refVal_symbolName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("argumentsToDocument")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("argumentsToDocument"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_argumentsToDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_argumentsToDocument);
            setArgumentsToDocument(refVal_argumentsToDocument);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deprecatedExplanation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deprecatedExplanation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_deprecatedExplanation;
            ok &= ModelBase::fromJson(fieldValue, refVal_deprecatedExplanation);
            setDeprecatedExplanation(refVal_deprecatedExplanation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("forExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("forExport"));
        if(!fieldValue.is_null())
        {
            bool refVal_forExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_forExport);
            setForExport(refVal_forExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spaceAfterExport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("spaceAfterExport"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPSpace_10> refVal_spaceAfterExport;
            ok &= ModelBase::fromJson(fieldValue, refVal_spaceAfterExport);
            setSpaceAfterExport(refVal_spaceAfterExport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("annotation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("annotation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BTPAnnotation_231> refVal_annotation;
            ok &= ModelBase::fromJson(fieldValue, refVal_annotation);
            setAnnotation(refVal_annotation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("btType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("btType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_btType;
            ok &= ModelBase::fromJson(fieldValue, refVal_btType);
            setBtType(refVal_btType);
        }
    }
    return ok;
}

void BTPTopLevelNode_286_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DeprecatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecated"), m_Deprecated));
    }
    if(m_SymbolNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbolName"), m_SymbolName));
    }
    if(m_ArgumentsToDocumentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("argumentsToDocument"), m_ArgumentsToDocument));
    }
    if(m_DeprecatedExplanationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deprecatedExplanation"), m_DeprecatedExplanation));
    }
    if(m_ForExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forExport"), m_ForExport));
    }
    if(m_SpaceAfterExportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("spaceAfterExport"), m_SpaceAfterExport));
    }
    if(m_AnnotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("annotation"), m_Annotation));
    }
    if(m_BtTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("btType"), m_BtType));
    }
}

bool BTPTopLevelNode_286_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("deprecated")))
    {
        bool refVal_deprecated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecated")), refVal_deprecated );
        setDeprecated(refVal_deprecated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbolName")))
    {
        std::shared_ptr<BTPIdentifier_8> refVal_symbolName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbolName")), refVal_symbolName );
        setSymbolName(refVal_symbolName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("argumentsToDocument")))
    {
        std::vector<std::shared_ptr<BTPArgumentDeclaration_232>> refVal_argumentsToDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("argumentsToDocument")), refVal_argumentsToDocument );
        setArgumentsToDocument(refVal_argumentsToDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deprecatedExplanation")))
    {
        utility::string_t refVal_deprecatedExplanation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deprecatedExplanation")), refVal_deprecatedExplanation );
        setDeprecatedExplanation(refVal_deprecatedExplanation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("forExport")))
    {
        bool refVal_forExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("forExport")), refVal_forExport );
        setForExport(refVal_forExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spaceAfterExport")))
    {
        std::shared_ptr<BTPSpace_10> refVal_spaceAfterExport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("spaceAfterExport")), refVal_spaceAfterExport );
        setSpaceAfterExport(refVal_spaceAfterExport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("annotation")))
    {
        std::shared_ptr<BTPAnnotation_231> refVal_annotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("annotation")), refVal_annotation );
        setAnnotation(refVal_annotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("btType")))
    {
        utility::string_t refVal_btType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("btType")), refVal_btType );
        setBtType(refVal_btType);
    }
    return ok;
}

bool BTPTopLevelNode_286_allOf::isDeprecated() const
{
    return m_Deprecated;
}

void BTPTopLevelNode_286_allOf::setDeprecated(bool value)
{
    m_Deprecated = value;
    m_DeprecatedIsSet = true;
}

bool BTPTopLevelNode_286_allOf::deprecatedIsSet() const
{
    return m_DeprecatedIsSet;
}

void BTPTopLevelNode_286_allOf::unsetDeprecated()
{
    m_DeprecatedIsSet = false;
}
std::shared_ptr<BTPIdentifier_8> BTPTopLevelNode_286_allOf::getSymbolName() const
{
    return m_SymbolName;
}

void BTPTopLevelNode_286_allOf::setSymbolName(const std::shared_ptr<BTPIdentifier_8>& value)
{
    m_SymbolName = value;
    m_SymbolNameIsSet = true;
}

bool BTPTopLevelNode_286_allOf::symbolNameIsSet() const
{
    return m_SymbolNameIsSet;
}

void BTPTopLevelNode_286_allOf::unsetSymbolName()
{
    m_SymbolNameIsSet = false;
}
std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& BTPTopLevelNode_286_allOf::getArgumentsToDocument()
{
    return m_ArgumentsToDocument;
}

void BTPTopLevelNode_286_allOf::setArgumentsToDocument(const std::vector<std::shared_ptr<BTPArgumentDeclaration_232>>& value)
{
    m_ArgumentsToDocument = value;
    m_ArgumentsToDocumentIsSet = true;
}

bool BTPTopLevelNode_286_allOf::argumentsToDocumentIsSet() const
{
    return m_ArgumentsToDocumentIsSet;
}

void BTPTopLevelNode_286_allOf::unsetArgumentsToDocument()
{
    m_ArgumentsToDocumentIsSet = false;
}
utility::string_t BTPTopLevelNode_286_allOf::getDeprecatedExplanation() const
{
    return m_DeprecatedExplanation;
}

void BTPTopLevelNode_286_allOf::setDeprecatedExplanation(const utility::string_t& value)
{
    m_DeprecatedExplanation = value;
    m_DeprecatedExplanationIsSet = true;
}

bool BTPTopLevelNode_286_allOf::deprecatedExplanationIsSet() const
{
    return m_DeprecatedExplanationIsSet;
}

void BTPTopLevelNode_286_allOf::unsetDeprecatedExplanation()
{
    m_DeprecatedExplanationIsSet = false;
}
bool BTPTopLevelNode_286_allOf::isForExport() const
{
    return m_ForExport;
}

void BTPTopLevelNode_286_allOf::setForExport(bool value)
{
    m_ForExport = value;
    m_ForExportIsSet = true;
}

bool BTPTopLevelNode_286_allOf::forExportIsSet() const
{
    return m_ForExportIsSet;
}

void BTPTopLevelNode_286_allOf::unsetForExport()
{
    m_ForExportIsSet = false;
}
std::shared_ptr<BTPSpace_10> BTPTopLevelNode_286_allOf::getSpaceAfterExport() const
{
    return m_SpaceAfterExport;
}

void BTPTopLevelNode_286_allOf::setSpaceAfterExport(const std::shared_ptr<BTPSpace_10>& value)
{
    m_SpaceAfterExport = value;
    m_SpaceAfterExportIsSet = true;
}

bool BTPTopLevelNode_286_allOf::spaceAfterExportIsSet() const
{
    return m_SpaceAfterExportIsSet;
}

void BTPTopLevelNode_286_allOf::unsetSpaceAfterExport()
{
    m_SpaceAfterExportIsSet = false;
}
std::shared_ptr<BTPAnnotation_231> BTPTopLevelNode_286_allOf::getAnnotation() const
{
    return m_Annotation;
}

void BTPTopLevelNode_286_allOf::setAnnotation(const std::shared_ptr<BTPAnnotation_231>& value)
{
    m_Annotation = value;
    m_AnnotationIsSet = true;
}

bool BTPTopLevelNode_286_allOf::annotationIsSet() const
{
    return m_AnnotationIsSet;
}

void BTPTopLevelNode_286_allOf::unsetAnnotation()
{
    m_AnnotationIsSet = false;
}
utility::string_t BTPTopLevelNode_286_allOf::getBtType() const
{
    return m_BtType;
}

void BTPTopLevelNode_286_allOf::setBtType(const utility::string_t& value)
{
    m_BtType = value;
    m_BtTypeIsSet = true;
}

bool BTPTopLevelNode_286_allOf::btTypeIsSet() const
{
    return m_BtTypeIsSet;
}

void BTPTopLevelNode_286_allOf::unsetBtType()
{
    m_BtTypeIsSet = false;
}
}
}
}
}


