/**
 * Onshape REST API
 * The Onshape REST API consumed by all clients.
 *
 * The version of the OpenAPI document: 1.113
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BTTeamInfo_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BTTeamInfo_allOf::BTTeamInfo_allOf()
{
    m_Admin = false;
    m_AdminIsSet = false;
    m_Member = false;
    m_MemberIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
}

BTTeamInfo_allOf::~BTTeamInfo_allOf()
{
}

void BTTeamInfo_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BTTeamInfo_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdminIsSet)
    {
        val[utility::conversions::to_string_t("admin")] = ModelBase::toJson(m_Admin);
    }
    if(m_MemberIsSet)
    {
        val[utility::conversions::to_string_t("member")] = ModelBase::toJson(m_Member);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }

    return val;
}

bool BTTeamInfo_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("admin"));
        if(!fieldValue.is_null())
        {
            bool refVal_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_admin);
            setAdmin(refVal_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("member")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("member"));
        if(!fieldValue.is_null())
        {
            bool refVal_member;
            ok &= ModelBase::fromJson(fieldValue, refVal_member);
            setMember(refVal_member);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("size"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    return ok;
}

void BTTeamInfo_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AdminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("admin"), m_Admin));
    }
    if(m_MemberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("member"), m_Member));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
}

bool BTTeamInfo_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("admin")))
    {
        bool refVal_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("admin")), refVal_admin );
        setAdmin(refVal_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("member")))
    {
        bool refVal_member;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("member")), refVal_member );
        setMember(refVal_member);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        int32_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("size")), refVal_size );
        setSize(refVal_size);
    }
    return ok;
}

bool BTTeamInfo_allOf::isAdmin() const
{
    return m_Admin;
}

void BTTeamInfo_allOf::setAdmin(bool value)
{
    m_Admin = value;
    m_AdminIsSet = true;
}

bool BTTeamInfo_allOf::adminIsSet() const
{
    return m_AdminIsSet;
}

void BTTeamInfo_allOf::unsetAdmin()
{
    m_AdminIsSet = false;
}
bool BTTeamInfo_allOf::isMember() const
{
    return m_Member;
}

void BTTeamInfo_allOf::setMember(bool value)
{
    m_Member = value;
    m_MemberIsSet = true;
}

bool BTTeamInfo_allOf::memberIsSet() const
{
    return m_MemberIsSet;
}

void BTTeamInfo_allOf::unsetMember()
{
    m_MemberIsSet = false;
}
int32_t BTTeamInfo_allOf::getSize() const
{
    return m_Size;
}

void BTTeamInfo_allOf::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool BTTeamInfo_allOf::sizeIsSet() const
{
    return m_SizeIsSet;
}

void BTTeamInfo_allOf::unsetSize()
{
    m_SizeIsSet = false;
}
}
}
}
}


